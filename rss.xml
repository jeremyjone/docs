<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://docs.jeremyjone.com/rss.xml" rel="self" type="application/rss+xml"/>
    <title>JeremyJone 的文档站</title>
    <link>https://docs.jeremyjone.com/</link>
    <description>一个快速学习、速查的站点</description>
    <language>zh-CN</language>
    <pubDate>Mon, 07 Nov 2022 09:38:34 GMT</pubDate>
    <lastBuildDate>Mon, 07 Nov 2022 09:38:34 GMT</lastBuildDate>
    <generator>@mr-hope/vuepress-plugin-feed</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <copyright>MIT Licensed | Copyright © 2020-present &lt;a href="https://www.jeremyjone.com" target="_blank"&gt;JeremyJone&lt;/a&gt;</copyright>
    <item>
      <title>Home</title>
      <link>https://docs.jeremyjone.com/</link>
      <guid>https://docs.jeremyjone.com/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">Home</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<Home />
]]></content:encoded>
    </item>
    <item>
      <title>手撸代码</title>
      <link>https://docs.jeremyjone.com/codes/</link>
      <guid>https://docs.jeremyjone.com/codes/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">手撸代码</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="手撸代码"> 手撸代码</h1>
<p>代码既可以学习，也可以拿来直接使用。</p>
<p>这里既有自己写的，也有各处找的。总之呢，前人种树，后人乘凉，学习代码，快乐无穷。</p>
]]></content:encoded>
    </item>
    <item>
      <title>通用方法</title>
      <link>https://docs.jeremyjone.com/codes/js/</link>
      <guid>https://docs.jeremyjone.com/codes/js/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">通用方法</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="通用方法"> 通用方法</h1>
<p>一些通用函数。</p>
<h2 id="拷贝"> 拷贝</h2>
<p>通过递归进行深拷贝</p>
<div><pre><code><span>function</span> <span>clone</span><span>(</span><span>data</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span><span>!</span><span>isObject</span><span>(</span>data<span>)</span><span>)</span> <span>{</span>
    <span>return</span> data<span>;</span>
  <span>}</span> <span>else</span> <span>{</span>
    <span>var</span> d <span>=</span> <span>isArray</span><span>(</span>data<span>)</span> <span>?</span> <span>[</span><span>]</span> <span>:</span> <span>{</span><span>}</span><span>;</span>
    <span>for</span> <span>(</span><span>var</span> i <span>in</span> data<span>)</span> <span>{</span>
      d<span>[</span>i<span>]</span> <span>=</span> <span>isObject</span><span>(</span>data<span>[</span>i<span>]</span><span>)</span> <span>?</span> <span>clone</span><span>(</span>data<span>[</span>i<span>]</span><span>)</span> <span>:</span> data<span>[</span>i<span>]</span><span>;</span>
    <span>}</span>
    <span>return</span> d<span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>对 JSON 转换做了一些小处理，避免了转换出错，但仍然可能出现问题。</p>
<div><pre><code><span>function</span> <span>clone</span><span>(</span><span>data</span><span>)</span> <span>{</span>
  <span>const</span> s <span>=</span> <span>JSON</span><span>.</span><span>stringify</span><span>(</span>data<span>)</span><span>;</span>
  <span>if</span> <span>(</span>s<span>)</span> <span>{</span>
    <span>return</span> <span>JSON</span><span>.</span><span>parse</span><span>(</span>s<span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><div><p>注意</p>
<p>该方法通常情况下不能用于生产环境。</p>
<p>因为：</p>
<ul>
<li>转换时会抛弃一些值，比如 <code>undefined</code>、<code>Symbol</code></li>
<li>转换时会做类型转换，比如 <code>RegExp</code>、<code>Map</code></li>
</ul>
<img :src="$withBase('/assets/code/json-stringify.png')" alt="">
</div>
<h2 id="无聊的等待方式"> 无聊的等待方式</h2>
<p>有时候，需要一些无聊的等待，比如等待某个 Element 挂载，所以就有了一个无聊的它。</p>
<div><pre><code><span>/**
 * 它是一个 Promise，使用 `await` 等待它，需要一个回调方法，它会定时检查传入的条件是否为真。10秒超时返回错误。
 * @param { () => boolean } cond
 * @example await boringWait(() => condition)
 */</span>
<span>const</span> <span>boringWait</span> <span>=</span> <span>cond</span> <span>=></span> <span>{</span>
  <span>return</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
    <span>let</span> timeout <span>=</span> <span>0</span><span>;</span>
    <span>const</span> t <span>=</span> <span>setInterval</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
      timeout<span>++</span><span>;</span>
      <span>if</span> <span>(</span><span>cond</span><span>(</span><span>)</span><span>)</span> <span>{</span>
        <span>clearInterval</span><span>(</span>t<span>)</span><span>;</span>
        <span>resolve</span><span>(</span><span>)</span><span>;</span>
      <span>}</span>
      <span>if</span> <span>(</span>timeout <span>></span> <span>100</span><span>)</span> <span>{</span>
        <span>// 大于10秒，超时</span>
        <span>clearInterval</span><span>(</span>t<span>)</span><span>;</span>
        <span>reject</span><span>(</span><span>)</span><span>;</span>
      <span>}</span>
    <span>}</span><span>,</span> <span>100</span><span>)</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><h2 id="字符串去掉空格内容"> 字符串去掉空格内容</h2>
<div><pre><code><span>/**
 * @param {Number} type 1-所有空格 2-前后空格 3-前空格 4-后空格
 */</span>
<span>export</span> <span>const</span> <span>trim</span> <span>=</span> <span>(</span><span>str<span>,</span> type</span><span>)</span> <span>=></span> <span>{</span>
  type <span>=</span> type <span>||</span> <span>1</span><span>;</span>
  <span>switch</span> <span>(</span>type<span>)</span> <span>{</span>
    <span>case</span> <span>1</span><span>:</span>
      <span>return</span> str<span>.</span><span>replace</span><span>(</span><span><span>/</span><span>\s+</span><span>/</span><span>g</span></span><span>,</span> <span>""</span><span>)</span><span>;</span>
    <span>case</span> <span>2</span><span>:</span>
      <span>return</span> str<span>.</span><span>replace</span><span>(</span><span><span>/</span><span>(^\s*)|(\s*$)</span><span>/</span><span>g</span></span><span>,</span> <span>""</span><span>)</span><span>;</span>
    <span>case</span> <span>3</span><span>:</span>
      <span>return</span> str<span>.</span><span>replace</span><span>(</span><span><span>/</span><span>(^\s*)</span><span>/</span><span>g</span></span><span>,</span> <span>""</span><span>)</span><span>;</span>
    <span>case</span> <span>4</span><span>:</span>
      <span>return</span> str<span>.</span><span>replace</span><span>(</span><span><span>/</span><span>(\s*$)</span><span>/</span><span>g</span></span><span>,</span> <span>""</span><span>)</span><span>;</span>
    <span>default</span><span>:</span>
      <span>return</span> str<span>;</span>
  <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><h2 id="处理-await-异常"> 处理 await 异常</h2>
<p>对于 <code>await</code> 的异常，虽然可以使用 <code>try-catch</code>，但实属有一些麻烦。</p>
<p>可以使用下面方法来解决。</p>
<div><pre><code><span>/**
 * @param { Promise } promise
 * @param { Object= } errorExt - Additional Information you can pass to the err object
 * @return { Promise }
 */</span>
<span>export</span> <span>function</span> <span><span>to</span><span><span>&lt;</span><span>T</span><span>,</span> <span>U</span> <span>=</span> <span>any</span><span>></span></span></span><span>(</span>
  promise<span>:</span> <span>Promise</span><span>&lt;</span><span>T</span><span>></span><span>,</span>
  errorExt<span>?</span><span>:</span> object
<span>)</span><span>:</span> <span>Promise</span><span>&lt;</span><span>[</span><span>U</span> <span>|</span> <span>null</span><span>,</span> <span>T</span> <span>|</span> <span>undefined</span><span>]</span><span>></span> <span>{</span>
  <span>return</span> promise
    <span>.</span><span><span>then</span><span><span>&lt;</span><span>[</span><span>null</span><span>,</span> <span>T</span><span>]</span><span>></span></span></span><span>(</span><span>(</span>data<span>:</span> <span>T</span><span>)</span> <span>=></span> <span>[</span><span>null</span><span>,</span> data<span>]</span><span>)</span>
    <span>.</span><span><span>catch</span><span><span>&lt;</span><span>[</span><span>U</span><span>,</span> <span>undefined</span><span>]</span><span>></span></span></span><span>(</span>err <span>=></span> <span>{</span>
      <span>if</span> <span>(</span>errorExt<span>)</span> <span>{</span>
        Object<span>.</span><span>assign</span><span>(</span>err<span>,</span> errorExt<span>)</span><span>;</span>
      <span>}</span>

      <span>return</span> <span>[</span>err<span>,</span> <span>undefined</span><span>]</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p>基本使用方法：</p>
<div><pre><code><span>const</span> <span>[</span>err<span>,</span> res<span>]</span> <span>=</span> <span>await</span> <span>to</span><span>(</span>Promise<span>.</span><span>resolve</span><span>(</span><span>1</span><span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>数组的一些扩展方法</title>
      <link>https://docs.jeremyjone.com/codes/js/array/</link>
      <guid>https://docs.jeremyjone.com/codes/js/array/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">数组的一些扩展方法</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="数组的一些扩展方法"> 数组的一些扩展方法</h1>
<h2 id="判断元素是否在数组中"> 判断元素是否在数组中</h2>
<div><pre><code><span>export</span> <span>const</span> <span>contains</span> <span>=</span> <span>(</span><span>arr<span>,</span> val</span><span>)</span> <span>=></span> <span>{</span>
  <span>return</span> arr<span>.</span><span>indexOf</span><span>(</span>val<span>)</span> <span>!=</span> <span>-</span><span>1</span> <span>?</span> <span>true</span> <span>:</span> <span>false</span><span>;</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>也可以将方法挂载到 Array 中，但是不推荐。</p>
<h2 id="随机洗牌方法"> 随机洗牌方法</h2>
<div><pre><code><span>export</span> <span>const</span> <span>shuffle</span> <span>=</span> <span>arr</span> <span>=></span> <span>{</span>
  <span>var</span> result <span>=</span> <span>[</span><span>]</span><span>,</span>
    random<span>;</span>
  <span>while</span> <span>(</span>arr<span>.</span>length <span>></span> <span>0</span><span>)</span> <span>{</span>
    random <span>=</span> Math<span>.</span><span>floor</span><span>(</span>Math<span>.</span><span>random</span><span>(</span><span>)</span> <span>*</span> arr<span>.</span>length<span>)</span><span>;</span>
    result<span>.</span><span>push</span><span>(</span>arr<span>[</span>random<span>]</span><span>)</span><span>;</span>
    arr<span>.</span><span>splice</span><span>(</span>random<span>,</span> <span>1</span><span>)</span><span>;</span>
  <span>}</span>
  <span>return</span> result<span>;</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h2 id="数组排序"> 数组排序</h2>
<div><pre><code><span>/**
 *  @param {Number} type 1：从小到大 2：从大到小 3：随机
 */</span>
<span>export</span> <span>const</span> <span>sort</span> <span>=</span> <span>(</span><span>arr<span>,</span> type <span>=</span> <span>1</span></span><span>)</span> <span>=></span> <span>{</span>
  <span>return</span> arr<span>.</span><span>sort</span><span>(</span><span>(</span><span>a<span>,</span> b</span><span>)</span> <span>=></span> <span>{</span>
    <span>switch</span> <span>(</span>type<span>)</span> <span>{</span>
      <span>case</span> <span>1</span><span>:</span>
        <span>return</span> a <span>-</span> b<span>;</span>
      <span>case</span> <span>2</span><span>:</span>
        <span>return</span> b <span>-</span> a<span>;</span>
      <span>case</span> <span>3</span><span>:</span>
        <span>return</span> Math<span>.</span><span>random</span><span>(</span><span>)</span> <span>-</span> <span>0.5</span><span>;</span>
      <span>default</span><span>:</span>
        <span>return</span> arr<span>;</span>
    <span>}</span>
  <span>}</span><span>)</span><span>;</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h2 id="数组去重"> 数组去重</h2>
<div><pre><code><span>export</span> <span>const</span> <span>unique</span> <span>=</span> <span>arr</span> <span>=></span> <span>{</span>
  <span>if</span> <span>(</span>Array<span>.</span><span>hasOwnProperty</span><span>(</span><span>"from"</span><span>)</span><span>)</span> <span>{</span>
    <span>return</span> Array<span>.</span><span>from</span><span>(</span><span>new</span> <span>Set</span><span>(</span>arr<span>)</span><span>)</span><span>;</span>
  <span>}</span> <span>else</span> <span>{</span>
    <span>var</span> n <span>=</span> <span>{</span><span>}</span><span>,</span>
      r <span>=</span> <span>[</span><span>]</span><span>;</span>
    <span>for</span> <span>(</span><span>var</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> arr<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
      <span>if</span> <span>(</span><span>!</span>n<span>[</span>arr<span>[</span>i<span>]</span><span>]</span><span>)</span> <span>{</span>
        n<span>[</span>arr<span>[</span>i<span>]</span><span>]</span> <span>=</span> <span>true</span><span>;</span>
        r<span>.</span><span>push</span><span>(</span>arr<span>[</span>i<span>]</span><span>)</span><span>;</span>
      <span>}</span>
    <span>}</span>
    <span>return</span> r<span>;</span>
  <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h2 id="求两个集合的并集"> 求两个集合的并集</h2>
<div><pre><code><span>export</span> <span>const</span> <span>union</span> <span>=</span> <span>(</span><span>a<span>,</span> b</span><span>)</span> <span>=></span> <span>{</span>
  <span>var</span> newArr <span>=</span> a<span>.</span><span>concat</span><span>(</span>b<span>)</span><span>;</span>
  <span>return</span> <span>this</span><span>.</span><span>unique</span><span>(</span>newArr<span>)</span><span>;</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="求两个集合的交集"> 求两个集合的交集</h2>
<div><pre><code><span>export</span> <span>const</span> <span>intersect</span> <span>=</span> <span>(</span><span>a<span>,</span> b</span><span>)</span> <span>=></span> <span>{</span>
  <span>var</span> _this <span>=</span> <span>this</span><span>;</span>
  a <span>=</span> <span>this</span><span>.</span><span>unique</span><span>(</span>a<span>)</span><span>;</span>
  <span>return</span> <span>this</span><span>.</span><span>map</span><span>(</span>a<span>,</span> <span>function</span><span>(</span><span>o</span><span>)</span> <span>{</span>
    <span>return</span> _this<span>.</span><span>contains</span><span>(</span>b<span>,</span> o<span>)</span> <span>?</span> o <span>:</span> <span>null</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="删除其中一个元素"> 删除其中一个元素</h2>
<div><pre><code><span>export</span> <span>const</span> <span>remove</span> <span>=</span> <span>(</span><span>arr<span>,</span> ele</span><span>)</span> <span>=></span> <span>{</span>
  <span>var</span> index <span>=</span> arr<span>.</span><span>indexOf</span><span>(</span>ele<span>)</span><span>;</span>
  <span>if</span> <span>(</span>index <span>></span> <span>-</span><span>1</span><span>)</span> <span>{</span>
    arr<span>.</span><span>splice</span><span>(</span>index<span>,</span> <span>1</span><span>)</span><span>;</span>
  <span>}</span>
  <span>return</span> arr<span>;</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="将类数组转换为数组"> 将类数组转换为数组</h2>
<div><pre><code><span>export</span> <span>const</span> <span>formArray</span> <span>=</span> <span>ary</span> <span>=></span> <span>{</span>
  <span>var</span> arr <span>=</span> <span>[</span><span>]</span><span>;</span>
  <span>if</span> <span>(</span>Array<span>.</span><span>isArray</span><span>(</span>ary<span>)</span><span>)</span> <span>{</span>
    arr <span>=</span> ary<span>;</span>
  <span>}</span> <span>else</span> <span>{</span>
    arr <span>=</span> <span>Array</span><span>.</span>prototype<span>.</span><span>slice</span><span>.</span><span>call</span><span>(</span>ary<span>)</span><span>;</span>
  <span>}</span>
  <span>return</span> arr<span>;</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h2 id="取数组中的最大值"> 取数组中的最大值</h2>
<div><pre><code><span>export</span> <span>const</span> <span>max</span> <span>=</span> <span>arr</span> <span>=></span> <span>{</span>
  <span>return</span> Math<span>.</span><span>max</span><span>.</span><span>apply</span><span>(</span><span>null</span><span>,</span> arr<span>)</span><span>;</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="取数组中的最小值"> 取数组中的最小值</h2>
<div><pre><code><span>export</span> <span>const</span> <span>min</span> <span>=</span> <span>arr</span> <span>=></span> <span>{</span>
  <span>return</span> Math<span>.</span><span>min</span><span>.</span><span>apply</span><span>(</span><span>null</span><span>,</span> arr<span>)</span><span>;</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="取数组中的平均值"> 取数组中的平均值</h2>
<div><pre><code><span>export</span> <span>const</span> <span>average</span> <span>=</span> <span>arr</span> <span>=></span> <span>{</span>
  <span>return</span> <span>this</span><span>.</span><span>sum</span><span>(</span>arr<span>)</span> <span>/</span> arr<span>.</span>length<span>;</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="数组求和"> 数组求和</h2>
<div><pre><code><span>export</span> <span>const</span> <span>sum</span> <span>=</span> <span>arr</span> <span>=></span> <span>{</span>
  <span>return</span> arr<span>.</span><span>reduce</span><span>(</span><span>(</span><span>pre<span>,</span> cur</span><span>)</span> <span>=></span> <span>{</span>
    <span>return</span> pre <span>+</span> cur<span>;</span>
  <span>}</span><span>)</span><span>;</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>处理颜色的方法</title>
      <link>https://docs.jeremyjone.com/codes/js/colors/</link>
      <guid>https://docs.jeremyjone.com/codes/js/colors/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">处理颜色的方法</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="处理颜色的方法"> 处理颜色的方法</h1>
<p>相信对于前端来说，颜色的处理一定是越来越多的。</p>
<p>下面这些属性可以任意变换，使用时需要注意引用关系。</p>
<h2 id="颜色的转换"> 颜色的转换</h2>
<ul>
<li>rgb：一个颜色的 RGB 表示，{r:255, g:255, b:255[, a:100]}</li>
<li>hex：一个颜色的 HEX 表示，#123456[FF]</li>
<li>hsv：一个颜色的 HSV 表示，{h:360, s:100, v:100[, a:100]}</li>
</ul>
<h3 id="rgb-hex"> rgb -&gt; hex</h3>
<div><pre><code><span>export</span> <span>function</span> <span>rgbToHex</span><span>(</span><span><span>{</span> r<span>,</span> g<span>,</span> b<span>,</span> a <span>}</span></span><span>)</span> <span>{</span>
  <span>const</span> alpha <span>=</span> a <span>!==</span> <span>void</span> <span>0</span><span>;</span>

  r <span>=</span> Math<span>.</span><span>round</span><span>(</span>r<span>)</span><span>;</span>
  g <span>=</span> Math<span>.</span><span>round</span><span>(</span>g<span>)</span><span>;</span>
  b <span>=</span> Math<span>.</span><span>round</span><span>(</span>b<span>)</span><span>;</span>

  <span>if</span> <span>(</span>r <span>></span> <span>255</span> <span>||</span> g <span>></span> <span>255</span> <span>||</span> b <span>></span> <span>255</span> <span>||</span> <span>(</span>alpha <span>&amp;&amp;</span> a <span>></span> <span>100</span><span>)</span><span>)</span> <span>{</span>
    <span>throw</span> <span>new</span> <span>TypeError</span><span>(</span>
      <span>"Expected 3 numbers below 256 (and optionally one below 100)"</span>
    <span>)</span><span>;</span>
  <span>}</span>

  a <span>=</span> alpha
    <span>?</span> <span>(</span>Math<span>.</span><span>round</span><span>(</span><span>(</span><span>255</span> <span>*</span> a<span>)</span> <span>/</span> <span>100</span><span>)</span> <span>|</span> <span>(</span><span>1</span> <span>&lt;&lt;</span> <span>8</span><span>)</span><span>)</span><span>.</span><span>toString</span><span>(</span><span>16</span><span>)</span><span>.</span><span>slice</span><span>(</span><span>1</span><span>)</span>
    <span>:</span> <span>""</span><span>;</span>

  <span>return</span> <span>"#"</span> <span>+</span> <span>(</span>b <span>|</span> <span>(</span>g <span>&lt;&lt;</span> <span>8</span><span>)</span> <span>|</span> <span>(</span>r <span>&lt;&lt;</span> <span>16</span><span>)</span> <span>|</span> <span>(</span><span>1</span> <span>&lt;&lt;</span> <span>24</span><span>)</span><span>)</span><span>.</span><span>toString</span><span>(</span><span>16</span><span>)</span><span>.</span><span>slice</span><span>(</span><span>1</span><span>)</span> <span>+</span> a<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><h3 id="hex-rgb"> hex -&gt; rgb</h3>
<div><pre><code><span>export</span> <span>function</span> <span>hexToRgb</span><span>(</span><span>hex</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span><span>typeof</span> hex <span>!==</span> <span>"string"</span><span>)</span> <span>{</span>
    <span>throw</span> <span>new</span> <span>TypeError</span><span>(</span><span>"Expected a string"</span><span>)</span><span>;</span>
  <span>}</span>

  hex <span>=</span> hex<span>.</span><span>replace</span><span>(</span><span><span>/</span><span>^#</span><span>/</span></span><span>,</span> <span>""</span><span>)</span><span>;</span>

  <span>if</span> <span>(</span>hex<span>.</span>length <span>===</span> <span>3</span><span>)</span> <span>{</span>
    hex <span>=</span> hex<span>[</span><span>0</span><span>]</span> <span>+</span> hex<span>[</span><span>0</span><span>]</span> <span>+</span> hex<span>[</span><span>1</span><span>]</span> <span>+</span> hex<span>[</span><span>1</span><span>]</span> <span>+</span> hex<span>[</span><span>2</span><span>]</span> <span>+</span> hex<span>[</span><span>2</span><span>]</span><span>;</span>
  <span>}</span> <span>else</span> <span>if</span> <span>(</span>hex<span>.</span>length <span>===</span> <span>4</span><span>)</span> <span>{</span>
    hex <span>=</span> hex<span>[</span><span>0</span><span>]</span> <span>+</span> hex<span>[</span><span>0</span><span>]</span> <span>+</span> hex<span>[</span><span>1</span><span>]</span> <span>+</span> hex<span>[</span><span>1</span><span>]</span> <span>+</span> hex<span>[</span><span>2</span><span>]</span> <span>+</span> hex<span>[</span><span>2</span><span>]</span> <span>+</span> hex<span>[</span><span>3</span><span>]</span> <span>+</span> hex<span>[</span><span>3</span><span>]</span><span>;</span>
  <span>}</span>

  <span>const</span> num <span>=</span> <span>parseInt</span><span>(</span>hex<span>,</span> <span>16</span><span>)</span><span>;</span>

  <span>return</span> hex<span>.</span>length <span>></span> <span>6</span>
    <span>?</span> <span>{</span>
        r<span>:</span> <span>(</span>num <span>>></span> <span>24</span><span>)</span> <span>&amp;</span> <span>255</span><span>,</span>
        g<span>:</span> <span>(</span>num <span>>></span> <span>16</span><span>)</span> <span>&amp;</span> <span>255</span><span>,</span>
        b<span>:</span> <span>(</span>num <span>>></span> <span>8</span><span>)</span> <span>&amp;</span> <span>255</span><span>,</span>
        a<span>:</span> Math<span>.</span><span>round</span><span>(</span><span>(</span>num <span>&amp;</span> <span>255</span><span>)</span> <span>/</span> <span>2.55</span><span>)</span>
      <span>}</span>
    <span>:</span> <span>{</span> r<span>:</span> num <span>>></span> <span>16</span><span>,</span> g<span>:</span> <span>(</span>num <span>>></span> <span>8</span><span>)</span> <span>&amp;</span> <span>255</span><span>,</span> b<span>:</span> num <span>&amp;</span> <span>255</span> <span>}</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><h3 id="hsv-rgb"> hsv -&gt; rgb</h3>
<div><pre><code><span>export</span> <span>function</span> <span>hsvToRgb</span><span>(</span><span><span>{</span> h<span>,</span> s<span>,</span> v<span>,</span> a <span>}</span></span><span>)</span> <span>{</span>
  <span>let</span> r<span>,</span> g<span>,</span> b<span>;</span>
  s <span>=</span> s <span>/</span> <span>100</span><span>;</span>
  v <span>=</span> v <span>/</span> <span>100</span><span>;</span>

  h <span>=</span> h <span>/</span> <span>360</span><span>;</span>
  <span>const</span> i <span>=</span> Math<span>.</span><span>floor</span><span>(</span>h <span>*</span> <span>6</span><span>)</span><span>,</span>
    f <span>=</span> h <span>*</span> <span>6</span> <span>-</span> i<span>,</span>
    p <span>=</span> v <span>*</span> <span>(</span><span>1</span> <span>-</span> s<span>)</span><span>,</span>
    q <span>=</span> v <span>*</span> <span>(</span><span>1</span> <span>-</span> f <span>*</span> s<span>)</span><span>,</span>
    t <span>=</span> v <span>*</span> <span>(</span><span>1</span> <span>-</span> <span>(</span><span>1</span> <span>-</span> f<span>)</span> <span>*</span> s<span>)</span><span>;</span>

  <span>switch</span> <span>(</span>i <span>%</span> <span>6</span><span>)</span> <span>{</span>
    <span>case</span> <span>0</span><span>:</span>
      r <span>=</span> v<span>;</span>
      g <span>=</span> t<span>;</span>
      b <span>=</span> p<span>;</span>
      <span>break</span><span>;</span>
    <span>case</span> <span>1</span><span>:</span>
      r <span>=</span> q<span>;</span>
      g <span>=</span> v<span>;</span>
      b <span>=</span> p<span>;</span>
      <span>break</span><span>;</span>
    <span>case</span> <span>2</span><span>:</span>
      r <span>=</span> p<span>;</span>
      g <span>=</span> v<span>;</span>
      b <span>=</span> t<span>;</span>
      <span>break</span><span>;</span>
    <span>case</span> <span>3</span><span>:</span>
      r <span>=</span> p<span>;</span>
      g <span>=</span> q<span>;</span>
      b <span>=</span> v<span>;</span>
      <span>break</span><span>;</span>
    <span>case</span> <span>4</span><span>:</span>
      r <span>=</span> t<span>;</span>
      g <span>=</span> p<span>;</span>
      b <span>=</span> v<span>;</span>
      <span>break</span><span>;</span>
    <span>case</span> <span>5</span><span>:</span>
      r <span>=</span> v<span>;</span>
      g <span>=</span> p<span>;</span>
      b <span>=</span> q<span>;</span>
      <span>break</span><span>;</span>
  <span>}</span>

  <span>return</span> <span>{</span>
    r<span>:</span> Math<span>.</span><span>round</span><span>(</span>r <span>*</span> <span>255</span><span>)</span><span>,</span>
    g<span>:</span> Math<span>.</span><span>round</span><span>(</span>g <span>*</span> <span>255</span><span>)</span><span>,</span>
    b<span>:</span> Math<span>.</span><span>round</span><span>(</span>b <span>*</span> <span>255</span><span>)</span><span>,</span>
    a
  <span>}</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br></div></div><h3 id="rgb-hsv"> rgb -&gt; hsv</h3>
<div><pre><code><span>export</span> <span>function</span> <span>rgbToHsv</span><span>(</span><span><span>{</span> r<span>,</span> g<span>,</span> b<span>,</span> a <span>}</span></span><span>)</span> <span>{</span>
  <span>const</span> max <span>=</span> Math<span>.</span><span>max</span><span>(</span>r<span>,</span> g<span>,</span> b<span>)</span><span>,</span>
    min <span>=</span> Math<span>.</span><span>min</span><span>(</span>r<span>,</span> g<span>,</span> b<span>)</span><span>,</span>
    d <span>=</span> max <span>-</span> min<span>,</span>
    s <span>=</span> max <span>===</span> <span>0</span> <span>?</span> <span>0</span> <span>:</span> d <span>/</span> max<span>,</span>
    v <span>=</span> max <span>/</span> <span>255</span><span>;</span>
  <span>let</span> h<span>;</span>

  <span>switch</span> <span>(</span>max<span>)</span> <span>{</span>
    <span>case</span> min<span>:</span>
      h <span>=</span> <span>0</span><span>;</span>
      <span>break</span><span>;</span>
    <span>case</span> r<span>:</span>
      h <span>=</span> g <span>-</span> b <span>+</span> d <span>*</span> <span>(</span>g <span>&lt;</span> b <span>?</span> <span>6</span> <span>:</span> <span>0</span><span>)</span><span>;</span>
      h <span>/=</span> <span>6</span> <span>*</span> d<span>;</span>
      <span>break</span><span>;</span>
    <span>case</span> g<span>:</span>
      h <span>=</span> b <span>-</span> r <span>+</span> d <span>*</span> <span>2</span><span>;</span>
      h <span>/=</span> <span>6</span> <span>*</span> d<span>;</span>
      <span>break</span><span>;</span>
    <span>case</span> b<span>:</span>
      h <span>=</span> r <span>-</span> g <span>+</span> d <span>*</span> <span>4</span><span>;</span>
      h <span>/=</span> <span>6</span> <span>*</span> d<span>;</span>
      <span>break</span><span>;</span>
  <span>}</span>

  <span>return</span> <span>{</span>
    h<span>:</span> Math<span>.</span><span>round</span><span>(</span>h <span>*</span> <span>360</span><span>)</span><span>,</span>
    s<span>:</span> Math<span>.</span><span>round</span><span>(</span>s <span>*</span> <span>100</span><span>)</span><span>,</span>
    v<span>:</span> Math<span>.</span><span>round</span><span>(</span>v <span>*</span> <span>100</span><span>)</span><span>,</span>
    a
  <span>}</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br></div></div><h3 id="text-rgb"> text -&gt; rgb</h3>
<div><pre><code><span>const</span> reRGBA <span>=</span> <span><span>/</span><span>^rgb(a)?\((\d{1,3}),(\d{1,3}),(\d{1,3}),?([01]?\.?\d*?)?\)$</span><span>/</span></span><span>;</span>

<span>export</span> <span>function</span> <span>textToRgb</span><span>(</span><span>str</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span><span>typeof</span> str <span>!==</span> <span>"string"</span><span>)</span> <span>{</span>
    <span>throw</span> <span>new</span> <span>TypeError</span><span>(</span><span>"Expected a string"</span><span>)</span><span>;</span>
  <span>}</span>

  <span>const</span> color <span>=</span> str<span>.</span><span>replace</span><span>(</span><span><span>/</span><span> </span><span>/</span><span>g</span></span><span>,</span> <span>""</span><span>)</span><span>;</span>

  <span>const</span> m <span>=</span> reRGBA<span>.</span><span>exec</span><span>(</span>color<span>)</span><span>;</span>

  <span>if</span> <span>(</span>m <span>===</span> <span>null</span><span>)</span> <span>{</span>
    <span>return</span> <span>hexToRgb</span><span>(</span>color<span>)</span><span>;</span>
  <span>}</span>

  <span>const</span> rgb <span>=</span> <span>{</span>
    r<span>:</span> Math<span>.</span><span>min</span><span>(</span><span>255</span><span>,</span> <span>parseInt</span><span>(</span>m<span>[</span><span>2</span><span>]</span><span>,</span> <span>10</span><span>)</span><span>)</span><span>,</span>
    g<span>:</span> Math<span>.</span><span>min</span><span>(</span><span>255</span><span>,</span> <span>parseInt</span><span>(</span>m<span>[</span><span>3</span><span>]</span><span>,</span> <span>10</span><span>)</span><span>)</span><span>,</span>
    b<span>:</span> Math<span>.</span><span>min</span><span>(</span><span>255</span><span>,</span> <span>parseInt</span><span>(</span>m<span>[</span><span>4</span><span>]</span><span>,</span> <span>10</span><span>)</span><span>)</span>
  <span>}</span><span>;</span>

  <span>if</span> <span>(</span>m<span>[</span><span>1</span><span>]</span><span>)</span> <span>{</span>
    <span>const</span> alpha <span>=</span> <span>parseFloat</span><span>(</span>m<span>[</span><span>5</span><span>]</span><span>)</span><span>;</span>
    rgb<span>.</span>a <span>=</span> Math<span>.</span><span>min</span><span>(</span><span>1</span><span>,</span> <span>isNaN</span><span>(</span>alpha<span>)</span> <span>===</span> <span>true</span> <span>?</span> <span>1</span> <span>:</span> alpha<span>)</span> <span>*</span> <span>100</span><span>;</span>
  <span>}</span>

  <span>return</span> rgb<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div><h2 id="颜色的处理"> 颜色的处理</h2>
<h3 id="变亮-变暗"> 变亮/变暗</h3>
<p>percent 为正值变亮，负值变暗</p>
<div><pre><code><span>export</span> <span>function</span> <span>lighten</span><span>(</span><span>color<span>,</span> percent</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span><span>typeof</span> color <span>!==</span> <span>"string"</span><span>)</span> <span>{</span>
    <span>throw</span> <span>new</span> <span>TypeError</span><span>(</span><span>"Expected a string as color"</span><span>)</span><span>;</span>
  <span>}</span>
  <span>if</span> <span>(</span><span>typeof</span> percent <span>!==</span> <span>"number"</span><span>)</span> <span>{</span>
    <span>throw</span> <span>new</span> <span>TypeError</span><span>(</span><span>"Expected a numeric percent"</span><span>)</span><span>;</span>
  <span>}</span>

  <span>const</span> rgb <span>=</span> <span>textToRgb</span><span>(</span>color<span>)</span><span>,</span>
    t <span>=</span> percent <span>&lt;</span> <span>0</span> <span>?</span> <span>0</span> <span>:</span> <span>255</span><span>,</span>
    p <span>=</span> Math<span>.</span><span>abs</span><span>(</span>percent<span>)</span> <span>/</span> <span>100</span><span>,</span>
    <span>R</span> <span>=</span> rgb<span>.</span>r<span>,</span>
    <span>G</span> <span>=</span> rgb<span>.</span>g<span>,</span>
    <span>B</span> <span>=</span> rgb<span>.</span>b<span>;</span>

  <span>return</span> <span>(</span>
    <span>"#"</span> <span>+</span>
    <span>(</span>
      <span>0x1000000</span> <span>+</span>
      <span>(</span>Math<span>.</span><span>round</span><span>(</span><span>(</span>t <span>-</span> <span>R</span><span>)</span> <span>*</span> p<span>)</span> <span>+</span> <span>R</span><span>)</span> <span>*</span> <span>0x10000</span> <span>+</span>
      <span>(</span>Math<span>.</span><span>round</span><span>(</span><span>(</span>t <span>-</span> <span>G</span><span>)</span> <span>*</span> p<span>)</span> <span>+</span> <span>G</span><span>)</span> <span>*</span> <span>0x100</span> <span>+</span>
      <span>(</span>Math<span>.</span><span>round</span><span>(</span><span>(</span>t <span>-</span> <span>B</span><span>)</span> <span>*</span> p<span>)</span> <span>+</span> <span>B</span><span>)</span>
    <span>)</span>
      <span>.</span><span>toString</span><span>(</span><span>16</span><span>)</span>
      <span>.</span><span>slice</span><span>(</span><span>1</span><span>)</span>
  <span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><h3 id="计算颜色的相对亮度"> 计算颜色的相对亮度</h3>
<p>给出一个 color，返回 0-1</p>
<div><pre><code><span>export</span> <span>function</span> <span>luminosity</span><span>(</span><span>color</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span><span>typeof</span> color <span>!==</span> <span>"string"</span> <span>&amp;&amp;</span> <span>(</span><span>!</span>color <span>||</span> color<span>.</span>r <span>===</span> <span>void</span> <span>0</span><span>)</span><span>)</span> <span>{</span>
    <span>throw</span> <span>new</span> <span>TypeError</span><span>(</span><span>"Expected a string or a {r, g, b} object as color"</span><span>)</span><span>;</span>
  <span>}</span>

  <span>const</span> rgb <span>=</span> <span>typeof</span> color <span>===</span> <span>"string"</span> <span>?</span> <span>textToRgb</span><span>(</span>color<span>)</span> <span>:</span> color<span>,</span>
    r <span>=</span> rgb<span>.</span>r <span>/</span> <span>255</span><span>,</span>
    g <span>=</span> rgb<span>.</span>g <span>/</span> <span>255</span><span>,</span>
    b <span>=</span> rgb<span>.</span>b <span>/</span> <span>255</span><span>,</span>
    <span>R</span> <span>=</span> r <span>&lt;=</span> <span>0.03928</span> <span>?</span> r <span>/</span> <span>12.92</span> <span>:</span> Math<span>.</span><span>pow</span><span>(</span><span>(</span>r <span>+</span> <span>0.055</span><span>)</span> <span>/</span> <span>1.055</span><span>,</span> <span>2.4</span><span>)</span><span>,</span>
    <span>G</span> <span>=</span> g <span>&lt;=</span> <span>0.03928</span> <span>?</span> g <span>/</span> <span>12.92</span> <span>:</span> Math<span>.</span><span>pow</span><span>(</span><span>(</span>g <span>+</span> <span>0.055</span><span>)</span> <span>/</span> <span>1.055</span><span>,</span> <span>2.4</span><span>)</span><span>,</span>
    <span>B</span> <span>=</span> b <span>&lt;=</span> <span>0.03928</span> <span>?</span> b <span>/</span> <span>12.92</span> <span>:</span> Math<span>.</span><span>pow</span><span>(</span><span>(</span>b <span>+</span> <span>0.055</span><span>)</span> <span>/</span> <span>1.055</span><span>,</span> <span>2.4</span><span>)</span><span>;</span>
  <span>return</span> <span>0.2126</span> <span>*</span> <span>R</span> <span>+</span> <span>0.7152</span> <span>*</span> <span>G</span> <span>+</span> <span>0.0722</span> <span>*</span> <span>B</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h3 id="计算颜色的亮度"> 计算颜色的亮度</h3>
<p>给出一个 color，返回 0-255。小于 128 应视为暗色。</p>
<div><pre><code><span>export</span> <span>function</span> <span>brightness</span><span>(</span><span>color</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span><span>typeof</span> color <span>!==</span> <span>"string"</span> <span>&amp;&amp;</span> <span>(</span><span>!</span>color <span>||</span> color<span>.</span>r <span>===</span> <span>void</span> <span>0</span><span>)</span><span>)</span> <span>{</span>
    <span>throw</span> <span>new</span> <span>TypeError</span><span>(</span><span>"Expected a string or a {r, g, b} object as color"</span><span>)</span><span>;</span>
  <span>}</span>

  <span>const</span> rgb <span>=</span> <span>typeof</span> color <span>===</span> <span>"string"</span> <span>?</span> <span>textToRgb</span><span>(</span>color<span>)</span> <span>:</span> color<span>;</span>

  <span>return</span> <span>(</span>rgb<span>.</span>r <span>*</span> <span>299</span> <span>+</span> rgb<span>.</span>g <span>*</span> <span>587</span> <span>+</span> rgb<span>.</span>b <span>*</span> <span>114</span><span>)</span> <span>/</span> <span>1000</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h3 id="混合两种颜色"> 混合两种颜色</h3>
<p>接收两个颜色，第一个为前景色，第二个为背景色。</p>
<ul>
<li>前景色需要具有透明属性，才会混合背景色，否则返回的仍然是前景色。</li>
<li>如果背景色具有透明属性，那么返回的属性也会具有一定的透明性。</li>
</ul>
<div><pre><code><span>export</span> <span>function</span> <span>blend</span><span>(</span><span>fgColor<span>,</span> bgColor</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span><span>typeof</span> fgColor <span>!==</span> <span>"string"</span> <span>&amp;&amp;</span> <span>(</span><span>!</span>fgColor <span>||</span> fgColor<span>.</span>r <span>===</span> <span>void</span> <span>0</span><span>)</span><span>)</span> <span>{</span>
    <span>throw</span> <span>new</span> <span>TypeError</span><span>(</span>
      <span>"Expected a string or a {r, g, b[, a]} object as fgColor"</span>
    <span>)</span><span>;</span>
  <span>}</span>

  <span>if</span> <span>(</span><span>typeof</span> bgColor <span>!==</span> <span>"string"</span> <span>&amp;&amp;</span> <span>(</span><span>!</span>bgColor <span>||</span> bgColor<span>.</span>r <span>===</span> <span>void</span> <span>0</span><span>)</span><span>)</span> <span>{</span>
    <span>throw</span> <span>new</span> <span>TypeError</span><span>(</span>
      <span>"Expected a string or a {r, g, b[, a]} object as bgColor"</span>
    <span>)</span><span>;</span>
  <span>}</span>

  <span>const</span> rgb1 <span>=</span> <span>typeof</span> fgColor <span>===</span> <span>"string"</span> <span>?</span> <span>textToRgb</span><span>(</span>fgColor<span>)</span> <span>:</span> fgColor<span>,</span>
    r1 <span>=</span> rgb1<span>.</span>r <span>/</span> <span>255</span><span>,</span>
    g1 <span>=</span> rgb1<span>.</span>g <span>/</span> <span>255</span><span>,</span>
    b1 <span>=</span> rgb1<span>.</span>b <span>/</span> <span>255</span><span>,</span>
    a1 <span>=</span> rgb1<span>.</span>a <span>!==</span> <span>void</span> <span>0</span> <span>?</span> rgb1<span>.</span>a <span>/</span> <span>100</span> <span>:</span> <span>1</span><span>,</span>
    rgb2 <span>=</span> <span>typeof</span> bgColor <span>===</span> <span>"string"</span> <span>?</span> <span>textToRgb</span><span>(</span>bgColor<span>)</span> <span>:</span> bgColor<span>,</span>
    r2 <span>=</span> rgb2<span>.</span>r <span>/</span> <span>255</span><span>,</span>
    g2 <span>=</span> rgb2<span>.</span>g <span>/</span> <span>255</span><span>,</span>
    b2 <span>=</span> rgb2<span>.</span>b <span>/</span> <span>255</span><span>,</span>
    a2 <span>=</span> rgb2<span>.</span>a <span>!==</span> <span>void</span> <span>0</span> <span>?</span> rgb2<span>.</span>a <span>/</span> <span>100</span> <span>:</span> <span>1</span><span>,</span>
    a <span>=</span> a1 <span>+</span> a2 <span>*</span> <span>(</span><span>1</span> <span>-</span> a1<span>)</span><span>,</span>
    r <span>=</span> Math<span>.</span><span>round</span><span>(</span><span>(</span><span>(</span>r1 <span>*</span> a1 <span>+</span> r2 <span>*</span> a2 <span>*</span> <span>(</span><span>1</span> <span>-</span> a1<span>)</span><span>)</span> <span>/</span> a<span>)</span> <span>*</span> <span>255</span><span>)</span><span>,</span>
    g <span>=</span> Math<span>.</span><span>round</span><span>(</span><span>(</span><span>(</span>g1 <span>*</span> a1 <span>+</span> g2 <span>*</span> a2 <span>*</span> <span>(</span><span>1</span> <span>-</span> a1<span>)</span><span>)</span> <span>/</span> a<span>)</span> <span>*</span> <span>255</span><span>)</span><span>,</span>
    b <span>=</span> Math<span>.</span><span>round</span><span>(</span><span>(</span><span>(</span>b1 <span>*</span> a1 <span>+</span> b2 <span>*</span> a2 <span>*</span> <span>(</span><span>1</span> <span>-</span> a1<span>)</span><span>)</span> <span>/</span> a<span>)</span> <span>*</span> <span>255</span><span>)</span><span>;</span>

  <span>const</span> ret <span>=</span> <span>{</span> r<span>,</span> g<span>,</span> b<span>,</span> a<span>:</span> Math<span>.</span><span>round</span><span>(</span>a <span>*</span> <span>100</span><span>)</span> <span>}</span><span>;</span>
  <span>return</span> <span>typeof</span> fgColor <span>===</span> <span>"string"</span> <span>?</span> <span>rgbToHex</span><span>(</span>ret<span>)</span> <span>:</span> ret<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br></div></div><h3 id="修改颜色的透明属性"> 修改颜色的透明属性</h3>
<p>给出一个 color，然后给定其透明度的偏移量。</p>
<ul>
<li>offset 需要接收 (-1, 1) 之间的浮点数。 -0.1 表示减少10%，0.1 表示增加10%。</li>
</ul>
<div><pre><code><span>export</span> <span>function</span> <span>changeAlpha</span><span>(</span><span>color<span>,</span> offset</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span><span>typeof</span> color <span>!==</span> <span>"string"</span><span>)</span> <span>{</span>
    <span>throw</span> <span>new</span> <span>TypeError</span><span>(</span><span>"Expected a string as color"</span><span>)</span><span>;</span>
  <span>}</span>

  <span>if</span> <span>(</span>offset <span>===</span> <span>void</span> <span>0</span> <span>||</span> offset <span>&lt;</span> <span>-</span><span>1</span> <span>||</span> offset <span>></span> <span>1</span><span>)</span> <span>{</span>
    <span>throw</span> <span>new</span> <span>TypeError</span><span>(</span><span>"Expected offset to be between -1 and 1"</span><span>)</span><span>;</span>
  <span>}</span>

  <span>const</span> <span>{</span> r<span>,</span> g<span>,</span> b<span>,</span> a <span>}</span> <span>=</span> <span>textToRgb</span><span>(</span>color<span>)</span><span>;</span>
  <span>const</span> alpha <span>=</span> a <span>!==</span> <span>void</span> <span>0</span> <span>?</span> a <span>/</span> <span>100</span> <span>:</span> <span>0</span><span>;</span>

  <span>return</span> <span>rgbToHex</span><span>(</span><span>{</span>
    r<span>,</span>
    g<span>,</span>
    b<span>,</span>
    a<span>:</span> Math<span>.</span><span>round</span><span>(</span>Math<span>.</span><span>min</span><span>(</span><span>1</span><span>,</span> Math<span>.</span><span>max</span><span>(</span><span>0</span><span>,</span> alpha <span>+</span> offset<span>)</span><span>)</span> <span>*</span> <span>100</span><span>)</span>
  <span>}</span><span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><h3 id="合并透明度"> 合并透明度</h3>
<p>有时候我们需要将一个带透明度的颜色，转换为一个不带透明度的颜色，同时要保持颜色看上去没有变化，就不能单单使用合并两个颜色的方法或者修改透明度的方法。</p>
<p>此时需要一个背景颜色。因为带透明度的颜色看上去的效果一定是和背景色有关，默认白色。</p>
<div><pre><code><span>export</span> <span>function</span> <span>rgbaToRgb</span><span>(</span>color<span>,</span> bg <span>=</span> <span>"#fff"</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span><span>typeof</span> color <span>!==</span> <span>"string"</span> <span>||</span> <span>typeof</span> bg <span>!==</span> <span>"string"</span><span>)</span> <span>{</span>
    <span>throw</span> <span>new</span> <span>TypeError</span><span>(</span><span>"Expected a string as color"</span><span>)</span><span>;</span>
  <span>}</span>

  <span>const</span> <span>{</span> r<span>,</span> g<span>,</span> b<span>,</span> a <span>}</span> <span>=</span> <span>textToRgb</span><span>(</span>color<span>)</span><span>;</span>

  <span>if</span> <span>(</span><span>!</span>a<span>)</span> <span>return</span> color<span>;</span>

  <span>const</span> bgColor <span>=</span> <span>textToRgb</span><span>(</span>bg<span>)</span><span>;</span>

  <span>return</span> <span>rgbToHex</span><span>(</span><span>{</span>
    r<span>:</span> <span>(</span>r <span>*</span> a<span>)</span> <span>/</span> <span>100</span> <span>+</span> <span>(</span>bgColor<span>.</span>r <span>*</span> <span>(</span><span>100</span> <span>-</span> a<span>)</span><span>)</span> <span>/</span> <span>100</span><span>,</span>
    g<span>:</span> <span>(</span>g <span>*</span> a<span>)</span> <span>/</span> <span>100</span> <span>+</span> <span>(</span>bgColor<span>.</span>g <span>*</span> <span>(</span><span>100</span> <span>-</span> a<span>)</span><span>)</span> <span>/</span> <span>100</span><span>,</span>
    b<span>:</span> <span>(</span>b <span>*</span> a<span>)</span> <span>/</span> <span>100</span> <span>+</span> <span>(</span>bgColor<span>.</span>b <span>*</span> <span>(</span><span>100</span> <span>-</span> a<span>)</span><span>)</span> <span>/</span> <span>100</span>
  <span>}</span><span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>生成方法</title>
      <link>https://docs.jeremyjone.com/codes/js/create/</link>
      <guid>https://docs.jeremyjone.com/codes/js/create/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">生成方法</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="生成方法"> 生成方法</h1>
<p>一些生成、创建的方法。</p>
<h2 id="生成-uuid"> 生成 uuid</h2>
<div><pre><code><span>/**
 * 生成uuid
 * @param {Number} len 指定uuid的长度
 * @param {Number} radix 进制，默认16进制
 */</span>
<span>function</span> <span>uuid</span><span>(</span><span>len<span>,</span> radix <span>=</span> <span>16</span></span><span>)</span> <span>{</span>
  <span>const</span> chars <span>=</span> <span>"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"</span><span>.</span><span>split</span><span>(</span><span>""</span><span>)</span><span>;</span>
  <span>const</span> uuid <span>=</span> <span>[</span><span>]</span><span>;</span>
  <span>let</span> i<span>;</span>
  radix <span>=</span> radix <span>||</span> chars<span>.</span>length<span>;</span>

  <span>if</span> <span>(</span>len<span>)</span> <span>{</span>
    <span>for</span> <span>(</span>i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> len<span>;</span> i<span>++</span><span>)</span> <span>{</span>
      uuid<span>[</span>i<span>]</span> <span>=</span> chars<span>[</span><span>0</span> <span>|</span> <span>(</span>Math<span>.</span><span>random</span><span>(</span><span>)</span> <span>*</span> radix<span>)</span><span>]</span><span>;</span>
    <span>}</span>
  <span>}</span> <span>else</span> <span>{</span>
    <span>let</span> r<span>;</span>
    uuid<span>[</span><span>8</span><span>]</span> <span>=</span> uuid<span>[</span><span>13</span><span>]</span> <span>=</span> uuid<span>[</span><span>18</span><span>]</span> <span>=</span> uuid<span>[</span><span>23</span><span>]</span> <span>=</span> <span>"-"</span><span>;</span>
    uuid<span>[</span><span>14</span><span>]</span> <span>=</span> <span>"4"</span><span>;</span>

    <span>for</span> <span>(</span>i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>36</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>
      <span>if</span> <span>(</span><span>!</span>uuid<span>[</span>i<span>]</span><span>)</span> <span>{</span>
        r <span>=</span> <span>0</span> <span>|</span> <span>(</span>Math<span>.</span><span>random</span><span>(</span><span>)</span> <span>*</span> <span>16</span><span>)</span><span>;</span>
        uuid<span>[</span>i<span>]</span> <span>=</span> chars<span>[</span>i <span>==</span> <span>19</span> <span>?</span> <span>(</span>r <span>&amp;</span> <span>0x3</span><span>)</span> <span>|</span> <span>0x8</span> <span>:</span> r<span>]</span><span>;</span>
      <span>}</span>
    <span>}</span>
  <span>}</span>

  <span>return</span> uuid<span>.</span><span>join</span><span>(</span><span>""</span><span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div><h2 id="生成指定范围内的随机数"> 生成指定范围内的随机数</h2>
<div><pre><code><span>export</span> <span>const</span> <span>random</span> <span>=</span> <span>(</span><span>min<span>,</span> max</span><span>)</span> <span>=></span> <span>{</span>
  <span>if</span> <span>(</span>arguments<span>.</span>length <span>===</span> <span>2</span><span>)</span> <span>{</span>
    <span>return</span> Math<span>.</span><span>floor</span><span>(</span>min <span>+</span> Math<span>.</span><span>random</span><span>(</span><span>)</span> <span>*</span> <span>(</span>max <span>+</span> <span>1</span> <span>-</span> min<span>)</span><span>)</span><span>;</span>
  <span>}</span> <span>else</span> <span>{</span>
    <span>return</span> <span>null</span><span>;</span>
  <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="base64-转-文件"> base64 转 文件</h2>
<div><pre><code><span>// base64 转文件</span>
<span>export</span> <span>function</span> <span>base64toFile</span><span>(</span><span>base64</span><span>)</span> <span>{</span>
  <span>const</span> arr <span>=</span> base64<span>.</span><span>split</span><span>(</span><span>","</span><span>)</span><span>;</span>
  <span>const</span> mime <span>=</span> arr<span>[</span><span>0</span><span>]</span><span>.</span><span>match</span><span>(</span><span><span>/</span><span>:(.*?);</span><span>/</span></span><span>)</span><span>?.</span><span>[</span><span>1</span><span>]</span> <span>??</span> <span>""</span><span>;</span>
  <span>const</span> ext <span>=</span> mime<span>.</span><span>split</span><span>(</span><span>"/"</span><span>)</span><span>?.</span><span>[</span><span>1</span><span>]</span> <span>??</span> <span>""</span><span>;</span>
  <span>const</span> bstr <span>=</span> <span>atob</span><span>(</span>arr<span>?.</span><span>[</span><span>1</span><span>]</span> <span>??</span> <span>""</span><span>)</span><span>;</span>
  <span>let</span> n <span>=</span> bstr<span>.</span>length<span>;</span>
  <span>const</span> u8arr <span>=</span> <span>new</span> <span>Uint8Array</span><span>(</span>n<span>)</span><span>;</span>
  <span>const</span> name <span>=</span> <span><span>`</span><span><span>${</span><span>new</span> <span>Date</span><span>(</span><span>)</span><span>.</span><span>getTime</span><span>(</span><span>)</span><span>}</span></span><span>.</span><span><span>${</span>ext<span>}</span></span><span>`</span></span><span>;</span>

  <span>while</span> <span>(</span>n<span>--</span><span>)</span> <span>{</span>
    u8arr<span>[</span>n<span>]</span> <span>=</span> bstr<span>.</span><span>charCodeAt</span><span>(</span>n<span>)</span><span>;</span>
  <span>}</span>
  <span>return</span> <span>new</span> <span>File</span><span>(</span><span>[</span>u8arr<span>]</span><span>,</span> name<span>,</span> <span>{</span> type<span>:</span> mime <span>}</span><span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>处理日期方法</title>
      <link>https://docs.jeremyjone.com/codes/js/date/</link>
      <guid>https://docs.jeremyjone.com/codes/js/date/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">处理日期方法</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="处理日期方法"> 处理日期方法</h1>
<h2 id="判断日期"> 判断日期</h2>
<h3 id="日期是否有效"> 日期是否有效</h3>
<p>给出一个任意参数，检查是否为一个日期</p>
<div><pre><code><span>/**
 * 判断给定的日期是否有效
 * @param {String | Number | Date} date 日期
 */</span>
<span>export</span> <span>function</span> <span>isValidDate</span><span>(</span><span>date</span><span>)</span> <span>{</span>
  <span>return</span> <span>typeof</span> date <span>===</span> <span>"number"</span> <span>?</span> <span>true</span> <span>:</span> <span>isNaN</span><span>(</span>Date<span>.</span><span>parse</span><span>(</span>date<span>)</span><span>)</span> <span>===</span> <span>false</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id="两个日期是否相等"> 两个日期是否相等</h3>
<p>给定两个日期，同时可以判断相等精度。</p>
<div><pre><code><span>/**
 * 判断两个日期是否相等
 * @param {String | Number | Date} date 日期
 * @param {String | Number | Date} date 日期
 * @param {undefined | String} unit 精度 undefined | "second" | "minute" | "hour" | "day" | "month" | "year"
 */</span>
<span>export</span> <span>function</span> <span>isSameDate</span><span>(</span><span>date<span>,</span> date2<span>,</span> unit</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span><span>!</span><span>isValidDate</span><span>(</span>date<span>)</span> <span>||</span> <span>!</span><span>isValidDate</span><span>(</span>date2<span>)</span><span>)</span>
    <span>throw</span> <span>new</span> <span>Error</span><span>(</span><span>"The parameter requires a date type."</span><span>)</span><span>;</span>

  <span>const</span> t <span>=</span> <span>new</span> <span>Date</span><span>(</span>date<span>)</span><span>,</span>
    d <span>=</span> <span>new</span> <span>Date</span><span>(</span>date2<span>)</span><span>;</span>

  <span>if</span> <span>(</span>unit <span>===</span> <span>void</span> <span>0</span><span>)</span> <span>{</span>
    <span>return</span> t<span>.</span><span>getTime</span><span>(</span><span>)</span> <span>===</span> d<span>.</span><span>getTime</span><span>(</span><span>)</span><span>;</span>
  <span>}</span>

  <span>switch</span> <span>(</span>unit<span>)</span> <span>{</span>
    <span>case</span> <span>"second"</span><span>:</span>
      <span>if</span> <span>(</span>t<span>.</span><span>getSeconds</span><span>(</span><span>)</span> <span>!==</span> d<span>.</span><span>getSeconds</span><span>(</span><span>)</span><span>)</span> <span>{</span>
        <span>return</span> <span>false</span><span>;</span>
      <span>}</span>
    <span>case</span> <span>"minute"</span><span>:</span>
      <span>if</span> <span>(</span>t<span>.</span><span>getMinutes</span><span>(</span><span>)</span> <span>!==</span> d<span>.</span><span>getMinutes</span><span>(</span><span>)</span><span>)</span> <span>{</span>
        <span>return</span> <span>false</span><span>;</span>
      <span>}</span>
    <span>case</span> <span>"hour"</span><span>:</span>
      <span>if</span> <span>(</span>t<span>.</span><span>getHours</span><span>(</span><span>)</span> <span>!==</span> d<span>.</span><span>getHours</span><span>(</span><span>)</span><span>)</span> <span>{</span>
        <span>return</span> <span>false</span><span>;</span>
      <span>}</span>
    <span>case</span> <span>"day"</span><span>:</span>
      <span>if</span> <span>(</span>t<span>.</span><span>getDate</span><span>(</span><span>)</span> <span>!==</span> d<span>.</span><span>getDate</span><span>(</span><span>)</span><span>)</span> <span>{</span>
        <span>return</span> <span>false</span><span>;</span>
      <span>}</span>
    <span>case</span> <span>"month"</span><span>:</span>
      <span>if</span> <span>(</span>t<span>.</span><span>getMonth</span><span>(</span><span>)</span> <span>!==</span> d<span>.</span><span>getMonth</span><span>(</span><span>)</span><span>)</span> <span>{</span>
        <span>return</span> <span>false</span><span>;</span>
      <span>}</span>
    <span>case</span> <span>"year"</span><span>:</span>
      <span>if</span> <span>(</span>t<span>.</span><span>getFullYear</span><span>(</span><span>)</span> <span>!==</span> d<span>.</span><span>getFullYear</span><span>(</span><span>)</span><span>)</span> <span>{</span>
        <span>return</span> <span>false</span><span>;</span>
      <span>}</span>
      <span>break</span><span>;</span>
    <span>default</span><span>:</span>
      <span>throw</span> <span>new</span> <span>Error</span><span>(</span><span><span>`</span><span>date isSameDate unknown unit </span><span><span>${</span>unit<span>}</span></span><span>`</span></span><span>)</span><span>;</span>
  <span>}</span>

  <span>return</span> <span>true</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br></div></div><h2 id="操作日期"> 操作日期</h2>
<h3 id="日期工厂"> 日期工厂</h3>
<p>创建一个指定的日期，如果给出的参数无法转为日期，则返回当日</p>
<div><pre><code><span>/**
 * 创建日期的工厂函数，生成一个指定日期，如果无效，返回当日日期
 * @param {String | Number | Date} date 日期
 */</span>
<span>export</span> <span>function</span> <span>createDate</span><span>(</span><span>date</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span><span>isDate</span><span>(</span>date<span>)</span><span>)</span> <span>{</span>
    <span>return</span> date<span>;</span>
  <span>}</span> <span>else</span> <span>if</span> <span>(</span><span>isValidDate</span><span>(</span>date<span>)</span><span>)</span> <span>{</span>
    <span>return</span> <span>new</span> <span>Date</span><span>(</span>date<span>)</span><span>;</span>
  <span>}</span> <span>else</span> <span>{</span>
    <span>return</span> <span>new</span> <span>Date</span><span>(</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h3 id="获取日期间隔"> 获取日期间隔</h3>
<div><pre><code><span>/**
 * 获取两个时间的间隔时间戳
 * @param {String | Number | Date} startDate 起始日期
 * @param {String | Number | Date} endDate 截止日期
 */</span>
<span>export</span> <span>function</span> <span>getDateInterval</span><span>(</span><span>startDate<span>,</span> endDate</span><span>)</span> <span>{</span>
  <span>return</span> <span>parseInt</span><span>(</span>
    <span>createDate</span><span>(</span>endDate<span>)</span><span>.</span><span>getTime</span><span>(</span><span>)</span> <span>-</span> <span>createDate</span><span>(</span>startDate<span>)</span><span>.</span><span>getTime</span><span>(</span><span>)</span>
  <span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h2 id="格式化日期"> 格式化日期</h2>
<div><pre><code><span>/**
 * 格式化时间
 * @param {Date | String | Number} date 日期对象，或一个日期字符串，对其进行格式化
 * @param {String} fmt 格式文本，y:年，q:季度，M:月，d:日，D:星期，H:小时，m:分钟，s:秒，S:毫秒。例：`yyyy-MM-dd`
 * @param {String} lang 显示星期的文本，中文或者英文
 * @return {String} 格式化的内容
 */</span>
<span>export</span> <span>function</span> <span>formatDate</span><span>(</span>date<span>,</span> fmt <span>=</span> <span>"yyyy-MM-dd"</span><span>,</span> lang <span>=</span> <span>"zh"</span><span>)</span> <span>{</span>
  <span>const</span> <span>WEEK</span> <span>=</span> <span>{</span>
    zh<span>:</span> <span>[</span><span>"星期日"</span><span>,</span> <span>"星期一"</span><span>,</span> <span>"星期二"</span><span>,</span> <span>"星期三"</span><span>,</span> <span>"星期四"</span><span>,</span> <span>"星期五"</span><span>,</span> <span>"星期六"</span><span>]</span><span>,</span>
    en<span>:</span> <span>[</span>
      <span>"Sunday"</span><span>,</span>
      <span>"Monday"</span><span>,</span>
      <span>"Tuesday"</span><span>,</span>
      <span>"Wednesday"</span><span>,</span>
      <span>"Thursday"</span><span>,</span>
      <span>"Friday"</span><span>,</span>
      <span>"Saturday"</span>
    <span>]</span>
  <span>}</span><span>;</span>

  <span>if</span> <span>(</span><span>[</span><span>"zh"</span><span>,</span> <span>"en"</span><span>]</span><span>.</span><span>indexOf</span><span>(</span>lang<span>)</span> <span>===</span> <span>-</span><span>1</span><span>)</span> lang <span>=</span> <span>"zh"</span><span>;</span>

  date <span>=</span> <span>createDate</span><span>(</span>date<span>)</span><span>;</span>

  <span>var</span> o <span>=</span> <span>{</span>
    <span>"M+"</span><span>:</span> date<span>.</span><span>getMonth</span><span>(</span><span>)</span> <span>+</span> <span>1</span><span>,</span> <span>//月份</span>
    <span>"d+"</span><span>:</span> date<span>.</span><span>getDate</span><span>(</span><span>)</span><span>,</span> <span>//日</span>
    <span>"h+"</span><span>:</span> date<span>.</span><span>getHours</span><span>(</span><span>)</span> <span>%</span> <span>12</span> <span>==</span> <span>0</span> <span>?</span> <span>12</span> <span>:</span> date<span>.</span><span>getHours</span><span>(</span><span>)</span> <span>%</span> <span>12</span><span>,</span> <span>//小时</span>
    <span>"H+"</span><span>:</span> date<span>.</span><span>getHours</span><span>(</span><span>)</span><span>,</span> <span>//小时</span>
    <span>"m+"</span><span>:</span> date<span>.</span><span>getMinutes</span><span>(</span><span>)</span><span>,</span> <span>//分</span>
    <span>"s+"</span><span>:</span> date<span>.</span><span>getSeconds</span><span>(</span><span>)</span><span>,</span> <span>//秒</span>
    <span>"q+"</span><span>:</span> Math<span>.</span><span>floor</span><span>(</span><span>(</span>date<span>.</span><span>getMonth</span><span>(</span><span>)</span> <span>+</span> <span>3</span><span>)</span> <span>/</span> <span>3</span><span>)</span><span>,</span> <span>//季度</span>
    <span>S</span><span>:</span> date<span>.</span><span>getMilliseconds</span><span>(</span><span>)</span> <span>//毫秒</span>
  <span>}</span><span>;</span>
  <span>for</span> <span>(</span><span>var</span> k <span>in</span> o<span>)</span>
    <span>if</span> <span>(</span><span>new</span> <span>RegExp</span><span>(</span><span>"("</span> <span>+</span> k <span>+</span> <span>")"</span><span>)</span><span>.</span><span>test</span><span>(</span>fmt<span>)</span><span>)</span>
      fmt <span>=</span> fmt<span>.</span><span>replace</span><span>(</span>
        RegExp<span>.</span>$<span>1</span><span>,</span>
        RegExp<span>.</span>$<span>1.</span>length <span>==</span> <span>1</span> <span>?</span> o<span>[</span>k<span>]</span> <span>:</span> <span>(</span><span>"00"</span> <span>+</span> o<span>[</span>k<span>]</span><span>)</span><span>.</span><span>substr</span><span>(</span><span>(</span><span>""</span> <span>+</span> o<span>[</span>k<span>]</span><span>)</span><span>.</span>length<span>)</span>
      <span>)</span><span>;</span>

  <span>// 年份</span>
  <span>if</span> <span>(</span><span><span>/</span><span>(y+)</span><span>/</span></span><span>.</span><span>test</span><span>(</span>fmt<span>)</span><span>)</span>
    fmt <span>=</span> fmt<span>.</span><span>replace</span><span>(</span>
      RegExp<span>.</span>$<span>1</span><span>,</span>
      <span>(</span>date<span>.</span><span>getFullYear</span><span>(</span><span>)</span> <span>+</span> <span>""</span><span>)</span><span>.</span><span>substr</span><span>(</span><span>4</span> <span>-</span> RegExp<span>.</span>$<span>1.</span>length<span>)</span>
    <span>)</span><span>;</span>
  <span>// 星期</span>
  <span>if</span> <span>(</span><span><span>/</span><span>(D+)</span><span>/</span></span><span>.</span><span>test</span><span>(</span>fmt<span>)</span><span>)</span> <span>{</span>
    fmt <span>=</span> fmt<span>.</span><span>replace</span><span>(</span>RegExp<span>.</span>$<span>1</span><span>,</span> <span>WEEK</span><span>[</span>lang<span>]</span><span>[</span>date<span>.</span><span>getDay</span><span>(</span><span>)</span><span>]</span><span>)</span><span>;</span>
  <span>}</span>
  <span>return</span> fmt<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>HTML 处理方法</title>
      <link>https://docs.jeremyjone.com/codes/js/html/</link>
      <guid>https://docs.jeremyjone.com/codes/js/html/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">HTML 处理方法</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="html-处理方法"> HTML 处理方法</h1>
<h2 id="去除-html-标签"> 去除 html 标签</h2>
<div><pre><code><span>export</span> <span>const</span> <span>removeHtmltag</span> <span>=</span> <span>str</span> <span>=></span> <span>{</span>
  <span>return</span> str<span>.</span><span>replace</span><span>(</span><span><span>/</span><span>&lt;[^>]+></span><span>/</span><span>g</span></span><span>,</span> <span>""</span><span>)</span><span>;</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="获取-url-参数"> 获取 url 参数</h2>
<div><pre><code><span>export</span> <span>const</span> <span>getQueryString</span> <span>=</span> <span>name</span> <span>=></span> <span>{</span>
  <span>const</span> reg <span>=</span> <span>new</span> <span>RegExp</span><span>(</span><span>"(^|&amp;)"</span> <span>+</span> name <span>+</span> <span>"=([^&amp;]*)(&amp;|$)"</span><span>,</span> <span>"i"</span><span>)</span><span>;</span>
  <span>const</span> search <span>=</span> window<span>.</span>location<span>.</span>search<span>.</span><span>split</span><span>(</span><span>"?"</span><span>)</span><span>[</span><span>1</span><span>]</span> <span>||</span> <span>""</span><span>;</span>
  <span>const</span> r <span>=</span> search<span>.</span><span>match</span><span>(</span>reg<span>)</span> <span>||</span> <span>[</span><span>]</span><span>;</span>
  <span>return</span> r<span>[</span><span>2</span><span>]</span><span>;</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id="动态引入-js"> 动态引入 js</h2>
<div><pre><code><span>const</span> injectScript <span>=</span> <span>(</span>src<span>,</span> type <span>=</span> <span>"text/javascript"</span><span>)</span> <span>=></span> <span>{</span>
  <span>const</span> s <span>=</span> document<span>.</span><span>createElement</span><span>(</span><span>"script"</span><span>)</span><span>;</span>
  s<span>.</span>type <span>=</span> type<span>;</span>
  s<span>.</span>async <span>=</span> <span>false</span><span>;</span>
  s<span>.</span>src <span>=</span> src<span>;</span>
  document<span>.</span>body<span>.</span><span>appendChild</span><span>(</span>s<span>)</span><span>;</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="根据-url-地址下载"> 根据 url 地址下载</h2>
<div><pre><code><span>export</span> <span>const</span> <span>download</span> <span>=</span> <span>url</span> <span>=></span> <span>{</span>
  <span>var</span> isChrome <span>=</span> navigator<span>.</span>userAgent<span>.</span><span>toLowerCase</span><span>(</span><span>)</span><span>.</span><span>indexOf</span><span>(</span><span>"chrome"</span><span>)</span> <span>></span> <span>-</span><span>1</span><span>;</span>
  <span>var</span> isSafari <span>=</span> navigator<span>.</span>userAgent<span>.</span><span>toLowerCase</span><span>(</span><span>)</span><span>.</span><span>indexOf</span><span>(</span><span>"safari"</span><span>)</span> <span>></span> <span>-</span><span>1</span><span>;</span>
  <span>if</span> <span>(</span>isChrome <span>||</span> isSafari<span>)</span> <span>{</span>
    <span>var</span> link <span>=</span> document<span>.</span><span>createElement</span><span>(</span><span>"a"</span><span>)</span><span>;</span>
    link<span>.</span>href <span>=</span> url<span>;</span>
    <span>if</span> <span>(</span>link<span>.</span>download <span>!==</span> <span>undefined</span><span>)</span> <span>{</span>
      <span>var</span> fileName <span>=</span> url<span>.</span><span>substring</span><span>(</span>url<span>.</span><span>lastIndexOf</span><span>(</span><span>"/"</span><span>)</span> <span>+</span> <span>1</span><span>,</span> url<span>.</span>length<span>)</span><span>;</span>
      link<span>.</span>download <span>=</span> fileName<span>;</span>
    <span>}</span>
    <span>if</span> <span>(</span>document<span>.</span>createEvent<span>)</span> <span>{</span>
      <span>var</span> e <span>=</span> document<span>.</span><span>createEvent</span><span>(</span><span>"MouseEvents"</span><span>)</span><span>;</span>
      e<span>.</span><span>initEvent</span><span>(</span><span>"click"</span><span>,</span> <span>true</span><span>,</span> <span>true</span><span>)</span><span>;</span>
      link<span>.</span><span>dispatchEvent</span><span>(</span>e<span>)</span><span>;</span>
      <span>return</span> <span>true</span><span>;</span>
    <span>}</span>
  <span>}</span>
  <span>if</span> <span>(</span>url<span>.</span><span>indexOf</span><span>(</span><span>"?"</span><span>)</span> <span>===</span> <span>-</span><span>1</span><span>)</span> <span>{</span>
    url <span>+=</span> <span>"?download"</span><span>;</span>
  <span>}</span>
  window<span>.</span><span>open</span><span>(</span>url<span>,</span> <span>"_self"</span><span>)</span><span>;</span>
  <span>return</span> <span>true</span><span>;</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><h2 id="el-是否包含某个-class"> el 是否包含某个 class</h2>
<div><pre><code><span>export</span> <span>const</span> <span>hasClass</span> <span>=</span> <span>(</span><span>el<span>,</span> className</span><span>)</span> <span>=></span> <span>{</span>
  <span>let</span> reg <span>=</span> <span>new</span> <span>RegExp</span><span>(</span><span>"(^|\\s)"</span> <span>+</span> className <span>+</span> <span>"(\\s|$)"</span><span>)</span><span>;</span>
  <span>return</span> reg<span>.</span><span>test</span><span>(</span>el<span>.</span>className<span>)</span><span>;</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="el-添加某个-class"> el 添加某个 class</h2>
<div><pre><code><span>export</span> <span>const</span> <span>addClass</span> <span>=</span> <span>(</span><span>el<span>,</span> className</span><span>)</span> <span>=></span> <span>{</span>
  <span>if</span> <span>(</span><span>hasClass</span><span>(</span>el<span>,</span> className<span>)</span><span>)</span> <span>{</span>
    <span>return</span><span>;</span>
  <span>}</span>
  <span>let</span> newClass <span>=</span> el<span>.</span>className<span>.</span><span>split</span><span>(</span><span>" "</span><span>)</span><span>;</span>
  newClass<span>.</span><span>push</span><span>(</span>className<span>)</span><span>;</span>
  el<span>.</span>className <span>=</span> newClass<span>.</span><span>join</span><span>(</span><span>" "</span><span>)</span><span>;</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="el-去除某个-class"> el 去除某个 class</h2>
<div><pre><code><span>export</span> <span>const</span> <span>removeClass</span> <span>=</span> <span>(</span><span>el<span>,</span> className</span><span>)</span> <span>=></span> <span>{</span>
  <span>if</span> <span>(</span><span>!</span><span>hasClass</span><span>(</span>el<span>,</span> className<span>)</span><span>)</span> <span>{</span>
    <span>return</span><span>;</span>
  <span>}</span>
  <span>let</span> reg <span>=</span> <span>new</span> <span>RegExp</span><span>(</span><span>"(^|\\s)"</span> <span>+</span> className <span>+</span> <span>"(\\s|$)"</span><span>,</span> <span>"g"</span><span>)</span><span>;</span>
  el<span>.</span>className <span>=</span> el<span>.</span>className<span>.</span><span>replace</span><span>(</span>reg<span>,</span> <span>" "</span><span>)</span><span>;</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="获取滚动的坐标"> 获取滚动的坐标</h2>
<div><pre><code><span>export</span> <span>const</span> <span>getScrollPosition</span> <span>=</span> <span>(</span><span>el <span>=</span> window</span><span>)</span> <span>=></span> <span>(</span><span>{</span>
  x<span>:</span> el<span>.</span>pageXOffset <span>!==</span> <span>undefined</span> <span>?</span> el<span>.</span>pageXOffset <span>:</span> el<span>.</span>scrollLeft<span>,</span>
  y<span>:</span> el<span>.</span>pageYOffset <span>!==</span> <span>undefined</span> <span>?</span> el<span>.</span>pageYOffset <span>:</span> el<span>.</span>scrollTop
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="页面滚动到顶部"> 页面滚动到顶部</h2>
<div><pre><code><span>export</span> <span>const</span> <span>scrollToTop</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>const</span> c <span>=</span> document<span>.</span>documentElement<span>.</span>scrollTop <span>||</span> document<span>.</span>body<span>.</span>scrollTop<span>;</span>
  <span>if</span> <span>(</span>c <span>></span> <span>0</span><span>)</span> <span>{</span>
    window<span>.</span><span>requestAnimationFrame</span><span>(</span>scrollToTop<span>)</span><span>;</span>
    window<span>.</span><span>scrollTo</span><span>(</span><span>0</span><span>,</span> c <span>-</span> c <span>/</span> <span>8</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="el-是否在视口范围内"> el 是否在视口范围内</h2>
<div><pre><code><span>/**
 * @param {Boolean} partiallyVisible 是否可以部分显示
 */</span>
<span>export</span> <span>const</span> <span>isElementVisible</span> <span>=</span> <span>(</span><span>el<span>,</span> partiallyVisible <span>=</span> <span>false</span></span><span>)</span> <span>=></span> <span>{</span>
  <span>const</span> <span>{</span> top<span>,</span> left<span>,</span> bottom<span>,</span> right <span>}</span> <span>=</span> el<span>.</span><span>getBoundingClientRect</span><span>(</span><span>)</span><span>;</span>
  <span>const</span> <span>{</span> innerHeight<span>,</span> innerWidth <span>}</span> <span>=</span> window<span>;</span>
  <span>return</span> partiallyVisible
    <span>?</span> <span>(</span><span>(</span>top <span>></span> <span>0</span> <span>&amp;&amp;</span> top <span>&lt;</span> innerHeight<span>)</span> <span>||</span>
        <span>(</span>bottom <span>></span> <span>0</span> <span>&amp;&amp;</span> bottom <span>&lt;</span> innerHeight<span>)</span><span>)</span> <span>&amp;&amp;</span>
        <span>(</span><span>(</span>left <span>></span> <span>0</span> <span>&amp;&amp;</span> left <span>&lt;</span> innerWidth<span>)</span> <span>||</span> <span>(</span>right <span>></span> <span>0</span> <span>&amp;&amp;</span> right <span>&lt;</span> innerWidth<span>)</span><span>)</span>
    <span>:</span> top <span>>=</span> <span>0</span> <span>&amp;&amp;</span> left <span>>=</span> <span>0</span> <span>&amp;&amp;</span> bottom <span>&lt;=</span> innerHeight <span>&amp;&amp;</span> right <span>&lt;=</span> innerWidth<span>;</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h2 id="劫持粘贴板"> 劫持粘贴板</h2>
<div><pre><code><span>export</span> <span>const</span> <span>copyTextToClipboard</span> <span>=</span> <span>value</span> <span>=></span> <span>{</span>
  <span>var</span> textArea <span>=</span> document<span>.</span><span>createElement</span><span>(</span><span>"textarea"</span><span>)</span><span>;</span>
  textArea<span>.</span>style<span>.</span>background <span>=</span> <span>"transparent"</span><span>;</span>
  textArea<span>.</span>value <span>=</span> value<span>;</span>
  document<span>.</span>body<span>.</span><span>appendChild</span><span>(</span>textArea<span>)</span><span>;</span>
  textArea<span>.</span><span>select</span><span>(</span><span>)</span><span>;</span>
  <span>try</span> <span>{</span>
    <span>var</span> successful <span>=</span> document<span>.</span><span>execCommand</span><span>(</span><span>"copy"</span><span>)</span><span>;</span>
  <span>}</span> <span>catch</span> <span>(</span>err<span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>"Oops, unable to copy"</span><span>)</span><span>;</span>
  <span>}</span>
  document<span>.</span>body<span>.</span><span>removeChild</span><span>(</span>textArea<span>)</span><span>;</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h2 id="给某个元素绑定滚动事件"> 给某个元素绑定滚动事件</h2>
<div><pre><code><span>/**
 * 给指定元素绑定滚动事件
 * @param {Object} opt
 * @example
 *      handleScroll({
 *          target: el,
 *          callback: dosomething(e, delta)
 *      })
 */</span>
<span>export</span> <span>const</span> <span>handleScroll</span> <span>=</span> <span>opt</span> <span>=></span> <span>{</span>
  <span>if</span> <span>(</span><span>!</span>opt<span>.</span>target<span>)</span> <span>{</span>
    <span>return</span><span>;</span>
  <span>}</span>
  <span>let</span> callback <span>=</span> opt<span>.</span>callback <span>||</span> <span>function</span><span>(</span><span>)</span> <span>{</span><span>}</span><span>;</span>
  <span>let</span> target <span>=</span> opt<span>.</span>target<span>;</span>

  <span>//获取兼容事件</span>
  <span>let</span> mouseWheel <span>=</span> <span><span>/</span><span>Firefox</span><span>/</span><span>i</span></span><span>.</span><span>test</span><span>(</span>navigator<span>.</span>userAgent<span>)</span>
    <span>?</span> <span>"DOMMouseScroll"</span>
    <span>:</span> <span>"mousewheel"</span><span>;</span>

  <span>//IE</span>
  <span>if</span> <span>(</span>document<span>.</span>attachEvent<span>)</span> <span>{</span>
    document<span>.</span><span>attachEvent</span><span>(</span><span>"on"</span> <span>+</span> mouseWheel<span>,</span> <span>function</span><span>(</span><span>e</span><span>)</span> <span>{</span>
      <span>if</span> <span>(</span>e<span>.</span>target<span>.</span>parentElement <span>==</span> target<span>)</span> <span>{</span>
        <span>callback</span><span>(</span>e<span>,</span> e<span>.</span>wheelDelta<span>)</span><span>;</span>
      <span>}</span>
    <span>}</span><span>)</span><span>;</span>
  <span>}</span>

  <span>//FF、Chrome、Opera、safari</span>
  <span>else</span> <span>{</span>
    document<span>.</span><span>addEventListener</span><span>(</span>mouseWheel<span>,</span> <span>function</span><span>(</span><span>e</span><span>)</span> <span>{</span>
      e <span>=</span> e <span>||</span> window<span>.</span>event<span>;</span>
      <span>if</span> <span>(</span>e<span>.</span>target<span>.</span>parentElement <span>==</span> target<span>)</span> <span>{</span>
        <span>if</span> <span>(</span>e<span>.</span>detail<span>)</span> <span>{</span>
          <span>//FF</span>
          <span>callback</span><span>(</span>e<span>,</span> e<span>.</span>detail <span>*</span> <span>40</span><span>)</span><span>;</span>
        <span>}</span> <span>else</span> <span>{</span>
          <span>callback</span><span>(</span>e<span>,</span> e<span>.</span>wheelDelta<span>)</span><span>;</span>
        <span>}</span>
      <span>}</span>
    <span>}</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>判断方法</title>
      <link>https://docs.jeremyjone.com/codes/js/judge/</link>
      <guid>https://docs.jeremyjone.com/codes/js/judge/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">判断方法</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="判断方法"> 判断方法</h1>
<p>一些通用的判断方法。</p>
<h2 id="判断类型"> 判断类型</h2>
<div><pre><code><span>// 是否为null</span>
<span>export</span> <span>const</span> <span>isNull</span> <span>=</span> <span>o</span> <span>=></span> <span>{</span>
  <span>return</span> <span>Object</span><span>.</span>prototype<span>.</span><span>toString</span><span>.</span><span>call</span><span>(</span>o<span>)</span><span>.</span><span>slice</span><span>(</span><span>8</span><span>,</span> <span>-</span><span>1</span><span>)</span> <span>===</span> <span>"Null"</span><span>;</span>
<span>}</span><span>;</span>

<span>// 是否undefined</span>
<span>export</span> <span>const</span> <span>isUndefined</span> <span>=</span> <span>o</span> <span>=></span> <span>{</span>
  <span>return</span> <span>Object</span><span>.</span>prototype<span>.</span><span>toString</span><span>.</span><span>call</span><span>(</span>o<span>)</span><span>.</span><span>slice</span><span>(</span><span>8</span><span>,</span> <span>-</span><span>1</span><span>)</span> <span>===</span> <span>"Undefined"</span><span>;</span>
<span>}</span><span>;</span>

<span>// 是否对象</span>
<span>export</span> <span>const</span> <span>isObject</span> <span>=</span> <span>o</span> <span>=></span> <span>{</span>
  <span>return</span> <span>Object</span><span>.</span>prototype<span>.</span><span>toString</span><span>.</span><span>call</span><span>(</span>o<span>)</span><span>.</span><span>slice</span><span>(</span><span>8</span><span>,</span> <span>-</span><span>1</span><span>)</span> <span>===</span> <span>"Object"</span><span>;</span>
<span>}</span><span>;</span>

<span>// 是否数组</span>
<span>export</span> <span>const</span> <span>isArray</span> <span>=</span> <span>o</span> <span>=></span> <span>{</span>
  <span>return</span> <span>Object</span><span>.</span>prototype<span>.</span><span>toString</span><span>.</span><span>call</span><span>(</span>o<span>)</span><span>.</span><span>slice</span><span>(</span><span>8</span><span>,</span> <span>-</span><span>1</span><span>)</span> <span>===</span> <span>"Array"</span><span>;</span>
<span>}</span><span>;</span>

<span>// 是否时间对象</span>
<span>export</span> <span>const</span> <span>isDate</span> <span>=</span> <span>o</span> <span>=></span> <span>{</span>
  <span>return</span> <span>Object</span><span>.</span>prototype<span>.</span><span>toString</span><span>.</span><span>call</span><span>(</span>o<span>)</span><span>.</span><span>slice</span><span>(</span><span>8</span><span>,</span> <span>-</span><span>1</span><span>)</span> <span>===</span> <span>"Date"</span><span>;</span>
<span>}</span><span>;</span>

<span>// 是否函数</span>
<span>export</span> <span>const</span> <span>isFunction</span> <span>=</span> <span>o</span> <span>=></span> <span>{</span>
  <span>return</span> <span>Object</span><span>.</span>prototype<span>.</span><span>toString</span><span>.</span><span>call</span><span>(</span>o<span>)</span><span>.</span><span>slice</span><span>(</span><span>8</span><span>,</span> <span>-</span><span>1</span><span>)</span> <span>===</span> <span>"Function"</span><span>;</span>
<span>}</span><span>;</span>

<span>// 是否boolean</span>
<span>export</span> <span>const</span> <span>isBoolean</span> <span>=</span> <span>o</span> <span>=></span> <span>{</span>
  <span>return</span> <span>Object</span><span>.</span>prototype<span>.</span><span>toString</span><span>.</span><span>call</span><span>(</span>o<span>)</span><span>.</span><span>slice</span><span>(</span><span>8</span><span>,</span> <span>-</span><span>1</span><span>)</span> <span>===</span> <span>"Boolean"</span><span>;</span>
<span>}</span><span>;</span>

<span>// 是否字符串</span>
<span>export</span> <span>const</span> <span>isString</span> <span>=</span> <span>o</span> <span>=></span> <span>{</span>
  <span>return</span> <span>Object</span><span>.</span>prototype<span>.</span><span>toString</span><span>.</span><span>call</span><span>(</span>o<span>)</span><span>.</span><span>slice</span><span>(</span><span>8</span><span>,</span> <span>-</span><span>1</span><span>)</span> <span>===</span> <span>"String"</span><span>;</span>
<span>}</span><span>;</span>

<span>// 是否数字</span>
<span>export</span> <span>const</span> <span>isNumber</span> <span>=</span> <span>o</span> <span>=></span> <span>{</span>
  <span>return</span> <span>Object</span><span>.</span>prototype<span>.</span><span>toString</span><span>.</span><span>call</span><span>(</span>o<span>)</span><span>.</span><span>slice</span><span>(</span><span>8</span><span>,</span> <span>-</span><span>1</span><span>)</span> <span>===</span> <span>"Number"</span><span>;</span>
<span>}</span><span>;</span>

<span>// 是否正则对象</span>
<span>export</span> <span>const</span> <span>isRegExp</span> <span>=</span> <span>o</span> <span>=></span> <span>{</span>
  <span>return</span> <span>Object</span><span>.</span>prototype<span>.</span><span>toString</span><span>.</span><span>call</span><span>(</span>o<span>)</span><span>.</span><span>slice</span><span>(</span><span>8</span><span>,</span> <span>-</span><span>1</span><span>)</span> <span>===</span> <span>"RegExp"</span><span>;</span>
<span>}</span><span>;</span>

<span>// 是否错误对象</span>
<span>export</span> <span>const</span> <span>isError</span> <span>=</span> <span>o</span> <span>=></span> <span>{</span>
  <span>return</span> <span>Object</span><span>.</span>prototype<span>.</span><span>toString</span><span>.</span><span>call</span><span>(</span>o<span>)</span><span>.</span><span>slice</span><span>(</span><span>8</span><span>,</span> <span>-</span><span>1</span><span>)</span> <span>===</span> <span>"Error"</span><span>;</span>
<span>}</span><span>;</span>

<span>// 是否Symbol函数</span>
<span>export</span> <span>const</span> <span>isSymbol</span> <span>=</span> <span>o</span> <span>=></span> <span>{</span>
  <span>return</span> <span>Object</span><span>.</span>prototype<span>.</span><span>toString</span><span>.</span><span>call</span><span>(</span>o<span>)</span><span>.</span><span>slice</span><span>(</span><span>8</span><span>,</span> <span>-</span><span>1</span><span>)</span> <span>===</span> <span>"Symbol"</span><span>;</span>
<span>}</span><span>;</span>

<span>// 是否Promise对象</span>
<span>export</span> <span>const</span> <span>isPromise</span> <span>=</span> <span>o</span> <span>=></span> <span>{</span>
  <span>return</span> <span>Object</span><span>.</span>prototype<span>.</span><span>toString</span><span>.</span><span>call</span><span>(</span>o<span>)</span><span>.</span><span>slice</span><span>(</span><span>8</span><span>,</span> <span>-</span><span>1</span><span>)</span> <span>===</span> <span>"Promise"</span><span>;</span>
<span>}</span><span>;</span>

<span>// 是否Set对象</span>
<span>export</span> <span>const</span> <span>isSet</span> <span>=</span> <span>o</span> <span>=></span> <span>{</span>
  <span>return</span> <span>Object</span><span>.</span>prototype<span>.</span><span>toString</span><span>.</span><span>call</span><span>(</span>o<span>)</span><span>.</span><span>slice</span><span>(</span><span>8</span><span>,</span> <span>-</span><span>1</span><span>)</span> <span>===</span> <span>"Set"</span><span>;</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br></div></div><div><pre><code><span>// 上述方法添加类型，同时添加返回断言类型</span>
<span>export</span> <span>const</span> isNull <span>=</span> <span>(</span>o<span>:</span> <span>any</span><span>)</span><span>:</span> o <span>is</span> <span>null</span> <span>=></span> <span>{</span>
  <span>return</span> Object<span>.</span>prototype<span>.</span><span>toString</span><span>.</span><span>call</span><span>(</span>o<span>)</span><span>.</span><span>slice</span><span>(</span><span>8</span><span>,</span> <span>-</span><span>1</span><span>)</span> <span>===</span> <span>"Null"</span><span>;</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="判断内容"> 判断内容</h2>
<h3 id="是否为邮箱"> 是否为邮箱</h3>
<div><pre><code><span>export</span> <span>const</span> <span>isEmail</span> <span>=</span> <span>s</span> <span>=></span> <span>{</span>
  <span>return</span> <span><span>/</span><span>^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((.[a-zA-Z0-9_-]{2,3}){1,2})$</span><span>/</span></span><span>.</span><span>test</span><span>(</span>
    s
  <span>)</span><span>;</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id="是否为手机号"> 是否为手机号</h3>
<div><pre><code><span>export</span> <span>const</span> <span>isMobileNumber</span> <span>=</span> <span>s</span> <span>=></span> <span>{</span>
  <span>return</span> <span><span>/</span><span>^1[3-9][0-9]{9}$</span><span>/</span></span><span>.</span><span>test</span><span>(</span>s<span>)</span><span>;</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id="是否为座机号码"> 是否为座机号码</h3>
<div><pre><code><span>export</span> <span>const</span> <span>isTel</span> <span>=</span> <span>s</span> <span>=></span> <span>{</span>
  <span>return</span> <span><span>/</span><span>^(\d{3,4}-\d{7,8})(-\d{1,4})?$</span><span>/</span></span><span>.</span><span>test</span><span>(</span>s<span>)</span><span>;</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id="是否-url-地址"> 是否 url 地址</h3>
<div><pre><code><span>export</span> <span>const</span> <span>isURL</span> <span>=</span> <span>s</span> <span>=></span> <span>{</span>
  <span>return</span> <span><span>/</span><span>^http[s]?:\/\/.*</span><span>/</span></span><span>.</span><span>test</span><span>(</span>s<span>)</span><span>;</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id="是否为身份证号"> 是否为身份证号</h3>
<div><pre><code><span>export</span> <span>const</span> <span>isCardID</span> <span>=</span> <span>sId</span> <span>=></span> <span>{</span>
  <span>if</span> <span>(</span><span>!</span><span><span>/</span><span>(^\d{15}$)|(^\d{17}(\d|X|x)$)</span><span>/</span></span><span>.</span><span>test</span><span>(</span>sId<span>)</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>"你输入的身份证长度或格式错误"</span><span>)</span><span>;</span>
    <span>return</span> <span>false</span><span>;</span>
  <span>}</span>
  <span>//身份证城市</span>
  <span>var</span> aCity <span>=</span> <span>{</span>
    <span>11</span><span>:</span> <span>"北京"</span><span>,</span>
    <span>12</span><span>:</span> <span>"天津"</span><span>,</span>
    <span>13</span><span>:</span> <span>"河北"</span><span>,</span>
    <span>14</span><span>:</span> <span>"山西"</span><span>,</span>
    <span>15</span><span>:</span> <span>"内蒙古"</span><span>,</span>
    <span>21</span><span>:</span> <span>"辽宁"</span><span>,</span>
    <span>22</span><span>:</span> <span>"吉林"</span><span>,</span>
    <span>23</span><span>:</span> <span>"黑龙江"</span><span>,</span>
    <span>31</span><span>:</span> <span>"上海"</span><span>,</span>
    <span>32</span><span>:</span> <span>"江苏"</span><span>,</span>
    <span>33</span><span>:</span> <span>"浙江"</span><span>,</span>
    <span>34</span><span>:</span> <span>"安徽"</span><span>,</span>
    <span>35</span><span>:</span> <span>"福建"</span><span>,</span>
    <span>36</span><span>:</span> <span>"江西"</span><span>,</span>
    <span>37</span><span>:</span> <span>"山东"</span><span>,</span>
    <span>41</span><span>:</span> <span>"河南"</span><span>,</span>
    <span>42</span><span>:</span> <span>"湖北"</span><span>,</span>
    <span>43</span><span>:</span> <span>"湖南"</span><span>,</span>
    <span>44</span><span>:</span> <span>"广东"</span><span>,</span>
    <span>45</span><span>:</span> <span>"广西"</span><span>,</span>
    <span>46</span><span>:</span> <span>"海南"</span><span>,</span>
    <span>50</span><span>:</span> <span>"重庆"</span><span>,</span>
    <span>51</span><span>:</span> <span>"四川"</span><span>,</span>
    <span>52</span><span>:</span> <span>"贵州"</span><span>,</span>
    <span>53</span><span>:</span> <span>"云南"</span><span>,</span>
    <span>54</span><span>:</span> <span>"西藏"</span><span>,</span>
    <span>61</span><span>:</span> <span>"陕西"</span><span>,</span>
    <span>62</span><span>:</span> <span>"甘肃"</span><span>,</span>
    <span>63</span><span>:</span> <span>"青海"</span><span>,</span>
    <span>64</span><span>:</span> <span>"宁夏"</span><span>,</span>
    <span>65</span><span>:</span> <span>"新疆"</span><span>,</span>
    <span>71</span><span>:</span> <span>"台湾"</span><span>,</span>
    <span>81</span><span>:</span> <span>"香港"</span><span>,</span>
    <span>82</span><span>:</span> <span>"澳门"</span><span>,</span>
    <span>91</span><span>:</span> <span>"国外"</span>
  <span>}</span><span>;</span>
  <span>if</span> <span>(</span><span>!</span>aCity<span>[</span><span>parseInt</span><span>(</span>sId<span>.</span><span>substr</span><span>(</span><span>0</span><span>,</span> <span>2</span><span>)</span><span>)</span><span>]</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>"你的身份证地区非法"</span><span>)</span><span>;</span>
    <span>return</span> <span>false</span><span>;</span>
  <span>}</span>

  <span>// 出生日期验证</span>
  <span>var</span> sBirthday <span>=</span> <span>(</span>
      sId<span>.</span><span>substr</span><span>(</span><span>6</span><span>,</span> <span>4</span><span>)</span> <span>+</span>
      <span>"-"</span> <span>+</span>
      <span>Number</span><span>(</span>sId<span>.</span><span>substr</span><span>(</span><span>10</span><span>,</span> <span>2</span><span>)</span><span>)</span> <span>+</span>
      <span>"-"</span> <span>+</span>
      <span>Number</span><span>(</span>sId<span>.</span><span>substr</span><span>(</span><span>12</span><span>,</span> <span>2</span><span>)</span><span>)</span>
    <span>)</span><span>.</span><span>replace</span><span>(</span><span><span>/</span><span>-</span><span>/</span><span>g</span></span><span>,</span> <span>"/"</span><span>)</span><span>,</span>
    d <span>=</span> <span>new</span> <span>Date</span><span>(</span>sBirthday<span>)</span><span>;</span>
  <span>if</span> <span>(</span>
    sBirthday <span>!=</span>
    d<span>.</span><span>getFullYear</span><span>(</span><span>)</span> <span>+</span> <span>"/"</span> <span>+</span> <span>(</span>d<span>.</span><span>getMonth</span><span>(</span><span>)</span> <span>+</span> <span>1</span><span>)</span> <span>+</span> <span>"/"</span> <span>+</span> d<span>.</span><span>getDate</span><span>(</span><span>)</span>
  <span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>"身份证上的出生日期非法"</span><span>)</span><span>;</span>
    <span>return</span> <span>false</span><span>;</span>
  <span>}</span>

  <span>// 身份证号码校验</span>
  <span>var</span> sum <span>=</span> <span>0</span><span>,</span>
    weights <span>=</span> <span>[</span><span>7</span><span>,</span> <span>9</span><span>,</span> <span>10</span><span>,</span> <span>5</span><span>,</span> <span>8</span><span>,</span> <span>4</span><span>,</span> <span>2</span><span>,</span> <span>1</span><span>,</span> <span>6</span><span>,</span> <span>3</span><span>,</span> <span>7</span><span>,</span> <span>9</span><span>,</span> <span>10</span><span>,</span> <span>5</span><span>,</span> <span>8</span><span>,</span> <span>4</span><span>,</span> <span>2</span><span>]</span><span>,</span>
    codes <span>=</span> <span>"10X98765432"</span><span>;</span>
  <span>for</span> <span>(</span><span>var</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> sId<span>.</span>length <span>-</span> <span>1</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>
    sum <span>+=</span> sId<span>[</span>i<span>]</span> <span>*</span> weights<span>[</span>i<span>]</span><span>;</span>
  <span>}</span>
  <span>var</span> last <span>=</span> codes<span>[</span>sum <span>%</span> <span>11</span><span>]</span><span>;</span> <span>//计算出来的最后一位身份证号码</span>
  <span>if</span> <span>(</span>sId<span>[</span>sId<span>.</span>length <span>-</span> <span>1</span><span>]</span> <span>!=</span> last<span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>"你输入的身份证号非法"</span><span>)</span><span>;</span>
    <span>return</span> <span>false</span><span>;</span>
  <span>}</span>

  <span>return</span> <span>true</span><span>;</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br></div></div><h3 id="通用判断内容的方法"> 通用判断内容的方法</h3>
<div><pre><code><span>// 通用类型判断方法</span>
<span>export</span> <span>const</span> <span>checkStr</span> <span>=</span> <span>(</span><span>str<span>,</span> type</span><span>)</span> <span>=></span> <span>{</span>
  <span>switch</span> <span>(</span>type<span>)</span> <span>{</span>
    <span>case</span> <span>"phone"</span><span>:</span> <span>//手机号码</span>
      <span>return</span> <span><span>/</span><span>^1[3-9][0-9]{9}$</span><span>/</span></span><span>.</span><span>test</span><span>(</span>str<span>)</span><span>;</span>
    <span>case</span> <span>"tel"</span><span>:</span> <span>//座机</span>
      <span>return</span> <span><span>/</span><span>^(\d{3,4}-\d{7,8})(-\d{1,4})?$</span><span>/</span></span><span>.</span><span>test</span><span>(</span>str<span>)</span><span>;</span>
    <span>case</span> <span>"card"</span><span>:</span> <span>//身份证</span>
      <span>return</span> <span><span>/</span><span>(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)</span><span>/</span></span><span>.</span><span>test</span><span>(</span>str<span>)</span><span>;</span>
    <span>case</span> <span>"pwd"</span><span>:</span> <span>//密码以字母开头，长度在6~18之间，只能包含字母、数字和下划线</span>
      <span>return</span> <span><span>/</span><span>^[a-zA-Z]\w{5,17}$</span><span>/</span></span><span>.</span><span>test</span><span>(</span>str<span>)</span><span>;</span>
    <span>case</span> <span>"postal"</span><span>:</span> <span>//邮政编码</span>
      <span>return</span> <span><span>/</span><span>[1-9]\d{5}(?!\d)</span><span>/</span></span><span>.</span><span>test</span><span>(</span>str<span>)</span><span>;</span>
    <span>case</span> <span>"QQ"</span><span>:</span> <span>//QQ号</span>
      <span>return</span> <span><span>/</span><span>^[1-9][0-9]{4,9}$</span><span>/</span></span><span>.</span><span>test</span><span>(</span>str<span>)</span><span>;</span>
    <span>case</span> <span>"email"</span><span>:</span> <span>//邮箱</span>
      <span>return</span> <span><span>/</span><span>^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$</span><span>/</span></span><span>.</span><span>test</span><span>(</span>str<span>)</span><span>;</span>
    <span>case</span> <span>"money"</span><span>:</span> <span>//金额(小数点2位)</span>
      <span>return</span> <span><span>/</span><span>^\d*(?:\.\d{0,2})?$</span><span>/</span></span><span>.</span><span>test</span><span>(</span>str<span>)</span><span>;</span>
    <span>case</span> <span>"URL"</span><span>:</span> <span>//网址</span>
      <span>return</span> <span><span>/</span><span>(http|ftp|https):\/\/[\w\-_]+(\.[\w\-_]+)+([\w\-\.,@?^=%&amp;:/~\+#]*[\w\-\@?^=%&amp;/~\+#])?</span><span>/</span></span><span>.</span><span>test</span><span>(</span>
        str
      <span>)</span><span>;</span>
    <span>case</span> <span>"IP"</span><span>:</span> <span>//IP</span>
      <span>return</span> <span><span>/</span><span>((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))</span><span>/</span></span><span>.</span><span>test</span><span>(</span>
        str
      <span>)</span><span>;</span>
    <span>case</span> <span>"date"</span><span>:</span> <span>//日期时间</span>
      <span>return</span> <span>(</span>
        <span><span>/</span><span>^(\d{4})\-(\d{2})\-(\d{2}) (\d{2})(?:\:\d{2}|:(\d{2}):(\d{2}))$</span><span>/</span></span><span>.</span><span>test</span><span>(</span>
          str
        <span>)</span> <span>||</span> <span><span>/</span><span>^(\d{4})\-(\d{2})\-(\d{2})$</span><span>/</span></span><span>.</span><span>test</span><span>(</span>str<span>)</span>
      <span>)</span><span>;</span>
    <span>case</span> <span>"number"</span><span>:</span> <span>//数字</span>
      <span>return</span> <span><span>/</span><span>^[0-9]$</span><span>/</span></span><span>.</span><span>test</span><span>(</span>str<span>)</span><span>;</span>
    <span>case</span> <span>"english"</span><span>:</span> <span>//英文</span>
      <span>return</span> <span><span>/</span><span>^[a-zA-Z]+$</span><span>/</span></span><span>.</span><span>test</span><span>(</span>str<span>)</span><span>;</span>
    <span>case</span> <span>"chinese"</span><span>:</span> <span>//中文</span>
      <span>return</span> <span><span>/</span><span>^[\\u4E00-\\u9FA5]+$</span><span>/</span></span><span>.</span><span>test</span><span>(</span>str<span>)</span><span>;</span>
    <span>case</span> <span>"lower"</span><span>:</span> <span>//小写</span>
      <span>return</span> <span><span>/</span><span>^[a-z]+$</span><span>/</span></span><span>.</span><span>test</span><span>(</span>str<span>)</span><span>;</span>
    <span>case</span> <span>"upper"</span><span>:</span> <span>//大写</span>
      <span>return</span> <span><span>/</span><span>^[A-Z]+$</span><span>/</span></span><span>.</span><span>test</span><span>(</span>str<span>)</span><span>;</span>
    <span>case</span> <span>"HTML"</span><span>:</span> <span>//HTML标记</span>
      <span>return</span> <span><span>/</span><span>&lt;("[^"]*"|'[^']*'|[^'">])*></span><span>/</span></span><span>.</span><span>test</span><span>(</span>str<span>)</span><span>;</span>
    <span>default</span><span>:</span>
      <span>return</span> <span>true</span><span>;</span>
  <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br></div></div><h2 id="判断设备"> 判断设备</h2>
<p>设备一般是通过 UserAgent 进行判断</p>
<h3 id="获取-useragent"> 获取 UserAgent</h3>
<div><pre><code><span>const</span> ua <span>=</span> navigator<span>.</span>userAgent<span>.</span><span>toLowerCase</span><span>(</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="判断设备类型"> 判断设备类型</h3>
<div><pre><code><span>// 是否是微信浏览器</span>
<span>export</span> <span>const</span> <span>isWeiXin</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>return</span> ua<span>.</span><span>match</span><span>(</span><span><span>/</span><span>microMessenger</span><span>/</span><span>i</span></span><span>)</span> <span>==</span> <span>"micromessenger"</span><span>;</span>
<span>}</span><span>;</span>

<span>// 是否是移动端</span>
<span>export</span> <span>const</span> <span>isDeviceMobile</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>return</span> <span><span>/</span><span>android|webos|iphone|ipod|balckberry</span><span>/</span><span>i</span></span><span>.</span><span>test</span><span>(</span>ua<span>)</span><span>;</span>
<span>}</span><span>;</span>

<span>// 是否是QQ浏览器</span>
<span>export</span> <span>const</span> <span>isQQBrowser</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>return</span> <span>!</span><span>!</span>ua<span>.</span><span>match</span><span>(</span><span><span>/</span><span>mqqbrowser|qzone|qqbrowser|qbwebviewtype</span><span>/</span><span>i</span></span><span>)</span><span>;</span>
<span>}</span><span>;</span>

<span>// 是否是爬虫</span>
<span>export</span> <span>const</span> <span>isSpider</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>return</span> <span><span>/</span><span>adsbot|googlebot|bingbot|msnbot|yandexbot|baidubot|robot|careerbot|seznambot|bot|baiduspider|jikespider|symantecspider|scannerlwebcrawler|crawler|360spider|sosospider|sogou web sprider|sogou orion spider</span><span>/</span></span><span>.</span><span>test</span><span>(</span>
    ua
  <span>)</span><span>;</span>
<span>}</span><span>;</span>

<span>// 是否ios</span>
<span>export</span> <span>const</span> <span>isIos</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>var</span> u <span>=</span> navigator<span>.</span>userAgent<span>;</span>
  <span>if</span> <span>(</span>u<span>.</span><span>indexOf</span><span>(</span><span>"Android"</span><span>)</span> <span>></span> <span>-</span><span>1</span> <span>||</span> u<span>.</span><span>indexOf</span><span>(</span><span>"Linux"</span><span>)</span> <span>></span> <span>-</span><span>1</span><span>)</span> <span>{</span>
    <span>//安卓手机</span>
    <span>return</span> <span>false</span><span>;</span>
  <span>}</span> <span>else</span> <span>if</span> <span>(</span>u<span>.</span><span>indexOf</span><span>(</span><span>"iPhone"</span><span>)</span> <span>></span> <span>-</span><span>1</span><span>)</span> <span>{</span>
    <span>//苹果手机</span>
    <span>return</span> <span>true</span><span>;</span>
  <span>}</span> <span>else</span> <span>if</span> <span>(</span>u<span>.</span><span>indexOf</span><span>(</span><span>"iPad"</span><span>)</span> <span>></span> <span>-</span><span>1</span><span>)</span> <span>{</span>
    <span>//iPad</span>
    <span>return</span> <span>false</span><span>;</span>
  <span>}</span> <span>else</span> <span>if</span> <span>(</span>u<span>.</span><span>indexOf</span><span>(</span><span>"Windows Phone"</span><span>)</span> <span>></span> <span>-</span><span>1</span><span>)</span> <span>{</span>
    <span>//winphone手机</span>
    <span>return</span> <span>false</span><span>;</span>
  <span>}</span> <span>else</span> <span>{</span>
    <span>return</span> <span>false</span><span>;</span>
  <span>}</span>
<span>}</span><span>;</span>

<span>// 是否ipad</span>
<span>export</span> <span>const</span> <span>isIpad</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>var</span> u <span>=</span> navigator<span>.</span>userAgent<span>;</span>
  <span>if</span> <span>(</span>u<span>.</span><span>indexOf</span><span>(</span><span>"iPad"</span><span>)</span> <span>></span> <span>-</span><span>1</span><span>)</span> <span>{</span>
    <span>return</span> <span>true</span><span>;</span>
  <span>}</span> <span>else</span> <span>{</span>
    <span>return</span> <span>false</span><span>;</span>
  <span>}</span>
<span>}</span><span>;</span>

<span>// 是否安卓</span>
<span>export</span> <span>const</span> <span>isAndroid</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>var</span> u <span>=</span> navigator<span>.</span>userAgent<span>;</span>
  <span>if</span> <span>(</span>u<span>.</span><span>indexOf</span><span>(</span><span>"Android"</span><span>)</span> <span>></span> <span>-</span><span>1</span> <span>||</span> u<span>.</span><span>indexOf</span><span>(</span><span>"Linux"</span><span>)</span> <span>></span> <span>-</span><span>1</span><span>)</span> <span>{</span>
    <span>return</span> <span>true</span><span>;</span>
  <span>}</span> <span>else</span> <span>{</span>
    <span>return</span> <span>false</span><span>;</span>
  <span>}</span>
<span>}</span><span>;</span>

<span>// 是否windows phone</span>
<span>export</span> <span>const</span> <span>isWindowsPhone</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>var</span> u <span>=</span> navigator<span>.</span>userAgent<span>;</span>
  <span>if</span> <span>(</span>u<span>.</span><span>indexOf</span><span>(</span><span>"Windows Phone"</span><span>)</span> <span>></span> <span>-</span><span>1</span><span>)</span> <span>{</span>
    <span>return</span> <span>true</span><span>;</span>
  <span>}</span> <span>else</span> <span>{</span>
    <span>return</span> <span>false</span><span>;</span>
  <span>}</span>
<span>}</span><span>;</span>

<span>// 是否为PC端</span>
<span>export</span> <span>const</span> <span>isPC</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>var</span> userAgentInfo <span>=</span> navigator<span>.</span>userAgent<span>;</span>
  <span>var</span> Agents <span>=</span> <span>[</span>
    <span>"Android"</span><span>,</span>
    <span>"iPhone"</span><span>,</span>
    <span>"SymbianOS"</span><span>,</span>
    <span>"Windows Phone"</span><span>,</span>
    <span>"iPad"</span><span>,</span>
    <span>"iPod"</span>
  <span>]</span><span>;</span>
  <span>var</span> flag <span>=</span> <span>true</span><span>;</span>
  <span>for</span> <span>(</span><span>var</span> v <span>=</span> <span>0</span><span>;</span> v <span>&lt;</span> Agents<span>.</span>length<span>;</span> v<span>++</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>userAgentInfo<span>.</span><span>indexOf</span><span>(</span>Agents<span>[</span>v<span>]</span><span>)</span> <span>></span> <span>0</span><span>)</span> <span>{</span>
      flag <span>=</span> <span>false</span><span>;</span>
      <span>break</span><span>;</span>
    <span>}</span>
  <span>}</span>
  <span>return</span> flag<span>;</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br></div></div><h2 id="一些判断的扩展方法"> 一些判断的扩展方法</h2>
<h3 id="检测密码强度"> 检测密码强度</h3>
<div><pre><code><span>export</span> <span>const</span> <span>checkPwdStrength</span> <span>=</span> <span>str</span> <span>=></span> <span>{</span>
  <span>var</span> Lv <span>=</span> <span>0</span><span>;</span>
  <span>if</span> <span>(</span>str<span>.</span>length <span>&lt;</span> <span>6</span><span>)</span> <span>{</span>
    <span>return</span> Lv<span>;</span>
  <span>}</span>
  <span>if</span> <span>(</span><span><span>/</span><span>[0-9]</span><span>/</span></span><span>.</span><span>test</span><span>(</span>str<span>)</span><span>)</span> <span>{</span>
    Lv<span>++</span><span>;</span>
  <span>}</span>
  <span>if</span> <span>(</span><span><span>/</span><span>[a-z]</span><span>/</span></span><span>.</span><span>test</span><span>(</span>str<span>)</span><span>)</span> <span>{</span>
    Lv<span>++</span><span>;</span>
  <span>}</span>
  <span>if</span> <span>(</span><span><span>/</span><span>[A-Z]</span><span>/</span></span><span>.</span><span>test</span><span>(</span>str<span>)</span><span>)</span> <span>{</span>
    Lv<span>++</span><span>;</span>
  <span>}</span>
  <span>if</span> <span>(</span><span><span>/</span><span>[\.|-|_]</span><span>/</span></span><span>.</span><span>test</span><span>(</span>str<span>)</span><span>)</span> <span>{</span>
    Lv<span>++</span><span>;</span>
  <span>}</span>
  <span>return</span> Lv<span>;</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><h3 id="对象相等"> 对象相等</h3>
<h4 id="对象完全相等，简易版本，足够使用"> 对象完全相等，简易版本，足够使用</h4>
<div><pre><code><span>export</span> <span>function</span> <span>isObjectValueEqual</span><span>(</span><span>a<span>,</span> b</span><span>)</span> <span>{</span>
  <span>var</span> o1 <span>=</span> a <span>instanceof</span> <span>Object</span><span>;</span>
  <span>var</span> o2 <span>=</span> b <span>instanceof</span> <span>Object</span><span>;</span>
  <span>// 判断是不是对象</span>
  <span>if</span> <span>(</span><span>!</span>o1 <span>||</span> <span>!</span>o2<span>)</span> <span>{</span>
    <span>return</span> a <span>===</span> b<span>;</span>
  <span>}</span>

  <span>//Object.keys() 返回一个由对象的自身可枚举属性(key值)组成的数组,</span>
  <span>//例如：数组返回下表：let arr = ["a", "b", "c"];console.log(Object.keys(arr))->0,1,2;</span>
  <span>if</span> <span>(</span>Object<span>.</span><span>keys</span><span>(</span>a<span>)</span><span>.</span>length <span>!==</span> Object<span>.</span><span>keys</span><span>(</span>b<span>)</span><span>.</span>length<span>)</span> <span>{</span>
    <span>return</span> <span>false</span><span>;</span>
  <span>}</span>

  <span>for</span> <span>(</span><span>var</span> o <span>in</span> a<span>)</span> <span>{</span>
    <span>var</span> t1 <span>=</span> a<span>[</span>o<span>]</span> <span>instanceof</span> <span>Object</span><span>;</span>
    <span>var</span> t2 <span>=</span> b<span>[</span>o<span>]</span> <span>instanceof</span> <span>Object</span><span>;</span>
    <span>if</span> <span>(</span>t1 <span>&amp;&amp;</span> t2<span>)</span> <span>{</span>
      <span>if</span> <span>(</span><span>!</span><span>isObjectValueEqual</span><span>(</span>a<span>[</span>o<span>]</span><span>,</span> b<span>[</span>o<span>]</span><span>)</span><span>)</span> <span>return</span> <span>false</span><span>;</span>
    <span>}</span> <span>else</span> <span>if</span> <span>(</span>a<span>[</span>o<span>]</span> <span>!==</span> b<span>[</span>o<span>]</span><span>)</span> <span>{</span>
      <span>return</span> <span>false</span><span>;</span>
    <span>}</span>
  <span>}</span>
  <span>return</span> <span>true</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><h4 id="对象完全相等，复杂版本，更加细致"> 对象完全相等，复杂版本，更加细致</h4>
<div><pre><code><span>export</span> <span>function</span> <span>isDeepEqual</span><span>(</span><span>a<span>,</span> b</span><span>)</span> <span>{</span>
  <span>const</span> hasMap <span>=</span> <span>typeof</span> Map <span>===</span> <span>"function"</span><span>,</span>
    hasSet <span>=</span> <span>typeof</span> Set <span>===</span> <span>"function"</span><span>,</span>
    hasArrayBuffer <span>=</span> <span>typeof</span> ArrayBuffer <span>===</span> <span>"function"</span><span>;</span>

  <span>if</span> <span>(</span>a <span>===</span> b<span>)</span> <span>{</span>
    <span>return</span> <span>true</span><span>;</span>
  <span>}</span>

  <span>if</span> <span>(</span>
    a <span>!==</span> <span>null</span> <span>&amp;&amp;</span>
    b <span>!==</span> <span>null</span> <span>&amp;&amp;</span>
    <span>typeof</span> a <span>===</span> <span>"object"</span> <span>&amp;&amp;</span>
    <span>typeof</span> b <span>===</span> <span>"object"</span>
  <span>)</span> <span>{</span>
    <span>if</span> <span>(</span>a<span>.</span>constructor <span>!==</span> b<span>.</span>constructor<span>)</span> <span>{</span>
      <span>return</span> <span>false</span><span>;</span>
    <span>}</span>

    <span>let</span> length<span>,</span> i<span>;</span>

    <span>if</span> <span>(</span>a<span>.</span>constructor <span>===</span> Array<span>)</span> <span>{</span>
      length <span>=</span> a<span>.</span>length<span>;</span>

      <span>if</span> <span>(</span>length <span>!==</span> b<span>.</span>length<span>)</span> <span>{</span>
        <span>return</span> <span>false</span><span>;</span>
      <span>}</span>

      <span>for</span> <span>(</span>i <span>=</span> length<span>;</span> i<span>--</span> <span>!==</span> <span>0</span><span>;</span> <span>)</span> <span>{</span>
        <span>if</span> <span>(</span><span>isDeepEqual</span><span>(</span>a<span>[</span>i<span>]</span><span>,</span> b<span>[</span>i<span>]</span><span>)</span> <span>!==</span> <span>true</span><span>)</span> <span>{</span>
          <span>return</span> <span>false</span><span>;</span>
        <span>}</span>
      <span>}</span>

      <span>return</span> <span>true</span><span>;</span>
    <span>}</span>

    <span>if</span> <span>(</span>hasMap <span>===</span> <span>true</span> <span>&amp;&amp;</span> a<span>.</span>constructor <span>===</span> Map<span>)</span> <span>{</span>
      <span>if</span> <span>(</span>a<span>.</span>size <span>!==</span> b<span>.</span>size<span>)</span> <span>{</span>
        <span>return</span> <span>false</span><span>;</span>
      <span>}</span>

      i <span>=</span> a<span>.</span><span>entries</span><span>(</span><span>)</span><span>.</span><span>next</span><span>(</span><span>)</span><span>;</span>
      <span>while</span> <span>(</span>i<span>.</span>done <span>!==</span> <span>true</span><span>)</span> <span>{</span>
        <span>if</span> <span>(</span>b<span>.</span><span>has</span><span>(</span>i<span>.</span>value<span>[</span><span>0</span><span>]</span><span>)</span> <span>!==</span> <span>true</span><span>)</span> <span>{</span>
          <span>return</span> <span>false</span><span>;</span>
        <span>}</span>
        i <span>=</span> i<span>.</span><span>next</span><span>(</span><span>)</span><span>;</span>
      <span>}</span>

      i <span>=</span> a<span>.</span><span>entries</span><span>(</span><span>)</span><span>.</span><span>next</span><span>(</span><span>)</span><span>;</span>
      <span>while</span> <span>(</span>i<span>.</span>done <span>!==</span> <span>true</span><span>)</span> <span>{</span>
        <span>if</span> <span>(</span><span>isDeepEqual</span><span>(</span>i<span>.</span>value<span>[</span><span>1</span><span>]</span><span>,</span> b<span>.</span><span>get</span><span>(</span>i<span>.</span>value<span>[</span><span>0</span><span>]</span><span>)</span><span>)</span> <span>!==</span> <span>true</span><span>)</span> <span>{</span>
          <span>return</span> <span>false</span><span>;</span>
        <span>}</span>
        i <span>=</span> i<span>.</span><span>next</span><span>(</span><span>)</span><span>;</span>
      <span>}</span>

      <span>return</span> <span>true</span><span>;</span>
    <span>}</span>

    <span>if</span> <span>(</span>hasSet <span>===</span> <span>true</span> <span>&amp;&amp;</span> a<span>.</span>constructor <span>===</span> Set<span>)</span> <span>{</span>
      <span>if</span> <span>(</span>a<span>.</span>size <span>!==</span> b<span>.</span>size<span>)</span> <span>{</span>
        <span>return</span> <span>false</span><span>;</span>
      <span>}</span>

      i <span>=</span> a<span>.</span><span>entries</span><span>(</span><span>)</span><span>.</span><span>next</span><span>(</span><span>)</span><span>;</span>
      <span>while</span> <span>(</span>i<span>.</span>done <span>!==</span> <span>true</span><span>)</span> <span>{</span>
        <span>if</span> <span>(</span>b<span>.</span><span>has</span><span>(</span>i<span>.</span>value<span>[</span><span>0</span><span>]</span><span>)</span> <span>!==</span> <span>true</span><span>)</span> <span>{</span>
          <span>return</span> <span>false</span><span>;</span>
        <span>}</span>
        i <span>=</span> i<span>.</span><span>next</span><span>(</span><span>)</span><span>;</span>
      <span>}</span>

      <span>return</span> <span>true</span><span>;</span>
    <span>}</span>

    <span>if</span> <span>(</span>
      hasArrayBuffer <span>===</span> <span>true</span> <span>&amp;&amp;</span>
      a<span>.</span>buffer <span>!=</span> <span>null</span> <span>&amp;&amp;</span>
      a<span>.</span>buffer<span>.</span>constructor <span>===</span> ArrayBuffer
    <span>)</span> <span>{</span>
      length <span>=</span> a<span>.</span>length<span>;</span>

      <span>if</span> <span>(</span>length <span>!==</span> b<span>.</span>length<span>)</span> <span>{</span>
        <span>return</span> <span>false</span><span>;</span>
      <span>}</span>

      <span>for</span> <span>(</span>i <span>=</span> length<span>;</span> i<span>--</span> <span>!==</span> <span>0</span><span>;</span> <span>)</span> <span>{</span>
        <span>if</span> <span>(</span>a<span>[</span>i<span>]</span> <span>!==</span> b<span>[</span>i<span>]</span><span>)</span> <span>{</span>
          <span>return</span> <span>false</span><span>;</span>
        <span>}</span>
      <span>}</span>

      <span>return</span> <span>true</span><span>;</span>
    <span>}</span>

    <span>if</span> <span>(</span>a<span>.</span>constructor <span>===</span> RegExp<span>)</span> <span>{</span>
      <span>return</span> a<span>.</span>source <span>===</span> b<span>.</span>source <span>&amp;&amp;</span> a<span>.</span>flags <span>===</span> b<span>.</span>flags<span>;</span>
    <span>}</span>

    <span>if</span> <span>(</span>a<span>.</span>valueOf <span>!==</span> <span>Object</span><span>.</span>prototype<span>.</span>valueOf<span>)</span> <span>{</span>
      <span>return</span> a<span>.</span><span>valueOf</span><span>(</span><span>)</span> <span>===</span> b<span>.</span><span>valueOf</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>

    <span>if</span> <span>(</span>a<span>.</span>toString <span>!==</span> <span>Object</span><span>.</span>prototype<span>.</span>toString<span>)</span> <span>{</span>
      <span>return</span> a<span>.</span><span>toString</span><span>(</span><span>)</span> <span>===</span> b<span>.</span><span>toString</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>

    <span>const</span> keys <span>=</span> Object<span>.</span><span>keys</span><span>(</span>a<span>)</span><span>;</span>
    length <span>=</span> keys<span>.</span>length<span>;</span>

    <span>if</span> <span>(</span>length <span>!==</span> Object<span>.</span><span>keys</span><span>(</span>b<span>)</span><span>.</span>length<span>)</span> <span>{</span>
      <span>return</span> <span>false</span><span>;</span>
    <span>}</span>

    <span>for</span> <span>(</span>i <span>=</span> length<span>;</span> i<span>--</span> <span>!==</span> <span>0</span><span>;</span> <span>)</span> <span>{</span>
      <span>const</span> key <span>=</span> keys<span>[</span>i<span>]</span><span>;</span>
      <span>if</span> <span>(</span><span>isDeepEqual</span><span>(</span>a<span>[</span>key<span>]</span><span>,</span> b<span>[</span>key<span>]</span><span>)</span> <span>!==</span> <span>true</span><span>)</span> <span>{</span>
        <span>return</span> <span>false</span><span>;</span>
      <span>}</span>
    <span>}</span>

    <span>return</span> <span>true</span><span>;</span>
  <span>}</span>

  <span>// true if both NaN, false otherwise</span>
  <span>return</span> a <span>!==</span> a <span>&amp;&amp;</span> b <span>!==</span> b<span>;</span> <span>// eslint-disable-line no-self-compare</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br><span>110</span><br><span>111</span><br><span>112</span><br><span>113</span><br><span>114</span><br><span>115</span><br><span>116</span><br><span>117</span><br><span>118</span><br><span>119</span><br><span>120</span><br><span>121</span><br><span>122</span><br><span>123</span><br><span>124</span><br><span>125</span><br><span>126</span><br><span>127</span><br><span>128</span><br><span>129</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>常用的转换方法</title>
      <link>https://docs.jeremyjone.com/codes/js/transform/</link>
      <guid>https://docs.jeremyjone.com/codes/js/transform/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">常用的转换方法</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="常用的转换方法"> 常用的转换方法</h1>
<h2 id="字符串大小写转换"> 字符串大小写转换</h2>
<div><pre><code><span>/**
 * @param {Number} type: 1:首字母大写 2：首字母小写 3：大小写转换 4：全部大写 5：全部小写
 */</span>
<span>export</span> <span>const</span> <span>changeCase</span> <span>=</span> <span>(</span><span>str<span>,</span> type</span><span>)</span> <span>=></span> <span>{</span>
  type <span>=</span> type <span>||</span> <span>4</span><span>;</span>
  <span>switch</span> <span>(</span>type<span>)</span> <span>{</span>
    <span>case</span> <span>1</span><span>:</span>
      <span>return</span> str<span>.</span><span>replace</span><span>(</span><span><span>/</span><span>\b\w+\b</span><span>/</span><span>g</span></span><span>,</span> <span>function</span><span>(</span><span>word</span><span>)</span> <span>{</span>
        <span>return</span> <span>(</span>
          word<span>.</span><span>substring</span><span>(</span><span>0</span><span>,</span> <span>1</span><span>)</span><span>.</span><span>toUpperCase</span><span>(</span><span>)</span> <span>+</span> word<span>.</span><span>substring</span><span>(</span><span>1</span><span>)</span><span>.</span><span>toLowerCase</span><span>(</span><span>)</span>
        <span>)</span><span>;</span>
      <span>}</span><span>)</span><span>;</span>
    <span>case</span> <span>2</span><span>:</span>
      <span>return</span> str<span>.</span><span>replace</span><span>(</span><span><span>/</span><span>\b\w+\b</span><span>/</span><span>g</span></span><span>,</span> <span>function</span><span>(</span><span>word</span><span>)</span> <span>{</span>
        <span>return</span> <span>(</span>
          word<span>.</span><span>substring</span><span>(</span><span>0</span><span>,</span> <span>1</span><span>)</span><span>.</span><span>toLowerCase</span><span>(</span><span>)</span> <span>+</span> word<span>.</span><span>substring</span><span>(</span><span>1</span><span>)</span><span>.</span><span>toUpperCase</span><span>(</span><span>)</span>
        <span>)</span><span>;</span>
      <span>}</span><span>)</span><span>;</span>
    <span>case</span> <span>3</span><span>:</span>
      <span>return</span> str
        <span>.</span><span>split</span><span>(</span><span>""</span><span>)</span>
        <span>.</span><span>map</span><span>(</span><span>function</span><span>(</span><span>word</span><span>)</span> <span>{</span>
          <span>if</span> <span>(</span><span><span>/</span><span>[a-z]</span><span>/</span></span><span>.</span><span>test</span><span>(</span>word<span>)</span><span>)</span> <span>{</span>
            <span>return</span> word<span>.</span><span>toUpperCase</span><span>(</span><span>)</span><span>;</span>
          <span>}</span> <span>else</span> <span>{</span>
            <span>return</span> word<span>.</span><span>toLowerCase</span><span>(</span><span>)</span><span>;</span>
          <span>}</span>
        <span>}</span><span>)</span>
        <span>.</span><span>join</span><span>(</span><span>""</span><span>)</span><span>;</span>
    <span>case</span> <span>4</span><span>:</span>
      <span>return</span> str<span>.</span><span>toUpperCase</span><span>(</span><span>)</span><span>;</span>
    <span>case</span> <span>5</span><span>:</span>
      <span>return</span> str<span>.</span><span>toLowerCase</span><span>(</span><span>)</span><span>;</span>
    <span>default</span><span>:</span>
      <span>return</span> str<span>;</span>
  <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br></div></div><h2 id="连线、下换线模式转小驼峰模式"> 连线、下换线模式转小驼峰模式</h2>
<div><pre><code><span>/**
 * 连线、下划线模式转小驼峰
 * @param {*} str
 * @returns
 */</span>
<span>export</span> <span>const</span> <span>toCamelCase</span> <span>=</span> <span>str</span> <span>=></span> <span>{</span>
  <span>return</span> str<span>.</span><span>replace</span><span>(</span><span><span>/</span><span>[-_](\w)</span><span>/</span><span>g</span></span><span>,</span> <span>(</span><span>all<span>,</span> letter</span><span>)</span> <span>=></span> letter<span>.</span><span>toUpperCase</span><span>(</span><span>)</span><span>)</span><span>;</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="小驼峰模式转连线模式"> 小驼峰模式转连线模式</h2>
<p>连线模式一般用于前端组件命名中。</p>
<div><pre><code><span>/**
 * 小驼峰模式转连线模式
 * @param {*} str
 * @returns
 */</span>
<span>export</span> <span>const</span> <span>toHyphenate</span> <span>=</span> <span>str</span> <span>=></span> <span>{</span>
  <span>return</span> str<span>.</span><span>replace</span><span>(</span><span><span>/</span><span>([A-Z])</span><span>/</span><span>g</span></span><span>,</span> <span>"-$1"</span><span>)</span><span>.</span><span>toLowerCase</span><span>(</span><span>)</span><span>;</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="小驼峰模式转下划线模式"> 小驼峰模式转下划线模式</h2>
<div><pre><code><span>/**
 * 小驼峰模式转下划线模式
 * @param {*} str
 * @returns
 */</span>
<span>export</span> <span>const</span> <span>toUnderScore</span> <span>=</span> <span>str</span> <span>=></span> <span>{</span>
  <span>return</span> str<span>.</span><span>replace</span><span>(</span><span><span>/</span><span>([A-Z])</span><span>/</span><span>g</span></span><span>,</span> <span>"_$1"</span><span>)</span><span>.</span><span>toLowerCase</span><span>(</span><span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="小驼峰模式或下划线模式转帕斯卡模式"> 小驼峰模式或下划线模式转帕斯卡模式</h2>
<div><pre><code><span>/**
 * 小驼峰模式或下划线模式转帕斯卡模式
 * @param {*} str
 * @returns
 */</span>
<span>export</span> <span>const</span> <span>toPascalCase</span> <span>=</span> <span>str</span> <span>=></span> <span>{</span>
  <span>return</span> str<span>.</span><span>replace</span><span>(</span><span><span>/</span><span>([A-Z])</span><span>/</span><span>g</span></span><span>,</span> <span>"_$1"</span><span>)</span><span>.</span><span>toUpperCase</span><span>(</span><span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="阿拉伯数字转为中文大写数字"> 阿拉伯数字转为中文大写数字</h2>
<div><pre><code><span>export</span> <span>const</span> <span>convertArabicNumberToChineseCaptialNumber</span> <span>=</span> <span>num</span> <span>=></span> <span>{</span>
  <span>var</span> <span>AA</span> <span>=</span> <span>new</span> <span>Array</span><span>(</span>
    <span>"零"</span><span>,</span>
    <span>"一"</span><span>,</span>
    <span>"二"</span><span>,</span>
    <span>"三"</span><span>,</span>
    <span>"四"</span><span>,</span>
    <span>"五"</span><span>,</span>
    <span>"六"</span><span>,</span>
    <span>"七"</span><span>,</span>
    <span>"八"</span><span>,</span>
    <span>"九"</span><span>,</span>
    <span>"十"</span>
  <span>)</span><span>;</span>
  <span>var</span> <span>BB</span> <span>=</span> <span>new</span> <span>Array</span><span>(</span><span>""</span><span>,</span> <span>"十"</span><span>,</span> <span>"百"</span><span>,</span> <span>"仟"</span><span>,</span> <span>"萬"</span><span>,</span> <span>"億"</span><span>,</span> <span>"点"</span><span>,</span> <span>""</span><span>)</span><span>;</span>
  <span>var</span> a <span>=</span> <span>(</span><span>""</span> <span>+</span> num<span>)</span><span>.</span><span>replace</span><span>(</span><span><span>/</span><span>(^0*)</span><span>/</span><span>g</span></span><span>,</span> <span>""</span><span>)</span><span>.</span><span>split</span><span>(</span><span>"."</span><span>)</span><span>,</span>
    k <span>=</span> <span>0</span><span>,</span>
    re <span>=</span> <span>""</span><span>;</span>
  <span>for</span> <span>(</span><span>var</span> i <span>=</span> a<span>[</span><span>0</span><span>]</span><span>.</span>length <span>-</span> <span>1</span><span>;</span> i <span>>=</span> <span>0</span><span>;</span> i<span>--</span><span>)</span> <span>{</span>
    <span>switch</span> <span>(</span>k<span>)</span> <span>{</span>
      <span>case</span> <span>0</span><span>:</span>
        re <span>=</span> <span>BB</span><span>[</span><span>7</span><span>]</span> <span>+</span> re<span>;</span>
        <span>break</span><span>;</span>
      <span>case</span> <span>4</span><span>:</span>
        <span>if</span> <span>(</span><span>!</span><span>new</span> <span>RegExp</span><span>(</span><span>"0{4}//d{"</span> <span>+</span> <span>(</span>a<span>[</span><span>0</span><span>]</span><span>.</span>length <span>-</span> i <span>-</span> <span>1</span><span>)</span> <span>+</span> <span>"}$"</span><span>)</span><span>.</span><span>test</span><span>(</span>a<span>[</span><span>0</span><span>]</span><span>)</span><span>)</span>
          re <span>=</span> <span>BB</span><span>[</span><span>4</span><span>]</span> <span>+</span> re<span>;</span>
        <span>break</span><span>;</span>
      <span>case</span> <span>8</span><span>:</span>
        re <span>=</span> <span>BB</span><span>[</span><span>5</span><span>]</span> <span>+</span> re<span>;</span>
        <span>BB</span><span>[</span><span>7</span><span>]</span> <span>=</span> <span>BB</span><span>[</span><span>5</span><span>]</span><span>;</span>
        k <span>=</span> <span>0</span><span>;</span>
        <span>break</span><span>;</span>
    <span>}</span>
    <span>if</span> <span>(</span>k <span>%</span> <span>4</span> <span>==</span> <span>2</span> <span>&amp;&amp;</span> a<span>[</span><span>0</span><span>]</span><span>.</span><span>charAt</span><span>(</span>i <span>+</span> <span>2</span><span>)</span> <span>!=</span> <span>0</span> <span>&amp;&amp;</span> a<span>[</span><span>0</span><span>]</span><span>.</span><span>charAt</span><span>(</span>i <span>+</span> <span>1</span><span>)</span> <span>==</span> <span>0</span><span>)</span>
      re <span>=</span> <span>AA</span><span>[</span><span>0</span><span>]</span> <span>+</span> re<span>;</span>
    <span>if</span> <span>(</span>a<span>[</span><span>0</span><span>]</span><span>.</span><span>charAt</span><span>(</span>i<span>)</span> <span>!=</span> <span>0</span><span>)</span> re <span>=</span> <span>AA</span><span>[</span>a<span>[</span><span>0</span><span>]</span><span>.</span><span>charAt</span><span>(</span>i<span>)</span><span>]</span> <span>+</span> <span>BB</span><span>[</span>k <span>%</span> <span>4</span><span>]</span> <span>+</span> re<span>;</span>
    k<span>++</span><span>;</span>
  <span>}</span>

  <span>if</span> <span>(</span>a<span>.</span>length <span>></span> <span>1</span><span>)</span> <span>{</span>
    <span>// 加上小数部分(如果有小数部分)</span>
    re <span>+=</span> <span>BB</span><span>[</span><span>6</span><span>]</span><span>;</span>
    <span>for</span> <span>(</span><span>var</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> a<span>[</span><span>1</span><span>]</span><span>.</span>length<span>;</span> i<span>++</span><span>)</span> re <span>+=</span> <span>AA</span><span>[</span>a<span>[</span><span>1</span><span>]</span><span>.</span><span>charAt</span><span>(</span>i<span>)</span><span>]</span><span>;</span>
  <span>}</span>
  <span>if</span> <span>(</span>re <span>==</span> <span>"一十"</span><span>)</span> re <span>=</span> <span>"十"</span><span>;</span>
  <span>if</span> <span>(</span>re<span>.</span><span>match</span><span>(</span><span><span>/</span><span>^一</span><span>/</span></span><span>)</span> <span>&amp;&amp;</span> re<span>.</span>length <span>==</span> <span>3</span><span>)</span> re <span>=</span> re<span>.</span><span>replace</span><span>(</span><span>"一"</span><span>,</span> <span>""</span><span>)</span><span>;</span>
  <span>return</span> re<span>;</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br></div></div><h2 id="小写金额转为大写金额"> 小写金额转为大写金额</h2>
<div><pre><code><span>export</span> <span>const</span> <span>convertNumbersToChineseCapitalAmount</span> <span>=</span> <span>Num</span> <span>=></span> <span>{</span>
  <span>//判断如果传递进来的不是字符的话转换为字符</span>
  <span>if</span> <span>(</span><span>typeof</span> Num <span>==</span> <span>"number"</span><span>)</span> <span>{</span>
    Num <span>=</span> <span>new</span> <span>String</span><span>(</span>Num<span>)</span><span>;</span>
  <span>}</span>
  Num <span>=</span> Num<span>.</span><span>replace</span><span>(</span><span><span>/</span><span>,</span><span>/</span><span>g</span></span><span>,</span> <span>""</span><span>)</span><span>;</span> <span>//替换tomoney()中的“,”</span>
  Num <span>=</span> Num<span>.</span><span>replace</span><span>(</span><span><span>/</span><span> </span><span>/</span><span>g</span></span><span>,</span> <span>""</span><span>)</span><span>;</span> <span>//替换tomoney()中的空格</span>
  Num <span>=</span> Num<span>.</span><span>replace</span><span>(</span><span><span>/</span><span>￥</span><span>/</span><span>g</span></span><span>,</span> <span>""</span><span>)</span><span>;</span> <span>//替换掉可能出现的￥字符</span>
  <span>if</span> <span>(</span><span>isNaN</span><span>(</span>Num<span>)</span><span>)</span> <span>{</span>
    <span>//验证输入的字符是否为数字</span>
    <span>//alert("请检查小写金额是否正确");</span>
    <span>return</span> <span>""</span><span>;</span>
  <span>}</span>
  <span>//字符处理完毕后开始转换，采用前后两部分分别转换</span>
  <span>var</span> part <span>=</span> <span>String</span><span>(</span>Num<span>)</span><span>.</span><span>split</span><span>(</span><span>"."</span><span>)</span><span>;</span>
  <span>var</span> newchar <span>=</span> <span>""</span><span>;</span>
  <span>//小数点前进行转化</span>
  <span>for</span> <span>(</span><span>var</span> i <span>=</span> part<span>[</span><span>0</span><span>]</span><span>.</span>length <span>-</span> <span>1</span><span>;</span> i <span>>=</span> <span>0</span><span>;</span> i<span>--</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>part<span>[</span><span>0</span><span>]</span><span>.</span>length <span>></span> <span>10</span><span>)</span> <span>{</span>
      <span>return</span> <span>""</span><span>;</span>
      <span>//若数量超过拾亿单位，提示</span>
    <span>}</span>
    <span>var</span> tmpnewchar <span>=</span> <span>""</span><span>;</span>
    <span>var</span> perchar <span>=</span> part<span>[</span><span>0</span><span>]</span><span>.</span><span>charAt</span><span>(</span>i<span>)</span><span>;</span>
    <span>switch</span> <span>(</span>perchar<span>)</span> <span>{</span>
      <span>case</span> <span>"0"</span><span>:</span>
        tmpnewchar <span>=</span> <span>"零"</span> <span>+</span> tmpnewchar<span>;</span>
        <span>break</span><span>;</span>
      <span>case</span> <span>"1"</span><span>:</span>
        tmpnewchar <span>=</span> <span>"壹"</span> <span>+</span> tmpnewchar<span>;</span>
        <span>break</span><span>;</span>
      <span>case</span> <span>"2"</span><span>:</span>
        tmpnewchar <span>=</span> <span>"贰"</span> <span>+</span> tmpnewchar<span>;</span>
        <span>break</span><span>;</span>
      <span>case</span> <span>"3"</span><span>:</span>
        tmpnewchar <span>=</span> <span>"叁"</span> <span>+</span> tmpnewchar<span>;</span>
        <span>break</span><span>;</span>
      <span>case</span> <span>"4"</span><span>:</span>
        tmpnewchar <span>=</span> <span>"肆"</span> <span>+</span> tmpnewchar<span>;</span>
        <span>break</span><span>;</span>
      <span>case</span> <span>"5"</span><span>:</span>
        tmpnewchar <span>=</span> <span>"伍"</span> <span>+</span> tmpnewchar<span>;</span>
        <span>break</span><span>;</span>
      <span>case</span> <span>"6"</span><span>:</span>
        tmpnewchar <span>=</span> <span>"陆"</span> <span>+</span> tmpnewchar<span>;</span>
        <span>break</span><span>;</span>
      <span>case</span> <span>"7"</span><span>:</span>
        tmpnewchar <span>=</span> <span>"柒"</span> <span>+</span> tmpnewchar<span>;</span>
        <span>break</span><span>;</span>
      <span>case</span> <span>"8"</span><span>:</span>
        tmpnewchar <span>=</span> <span>"捌"</span> <span>+</span> tmpnewchar<span>;</span>
        <span>break</span><span>;</span>
      <span>case</span> <span>"9"</span><span>:</span>
        tmpnewchar <span>=</span> <span>"玖"</span> <span>+</span> tmpnewchar<span>;</span>
        <span>break</span><span>;</span>
    <span>}</span>
    <span>switch</span> <span>(</span>part<span>[</span><span>0</span><span>]</span><span>.</span>length <span>-</span> i <span>-</span> <span>1</span><span>)</span> <span>{</span>
      <span>case</span> <span>0</span><span>:</span>
        tmpnewchar <span>=</span> tmpnewchar <span>+</span> <span>"元"</span><span>;</span>
        <span>break</span><span>;</span>
      <span>case</span> <span>1</span><span>:</span>
        <span>if</span> <span>(</span>perchar <span>!=</span> <span>0</span><span>)</span> tmpnewchar <span>=</span> tmpnewchar <span>+</span> <span>"拾"</span><span>;</span>
        <span>break</span><span>;</span>
      <span>case</span> <span>2</span><span>:</span>
        <span>if</span> <span>(</span>perchar <span>!=</span> <span>0</span><span>)</span> tmpnewchar <span>=</span> tmpnewchar <span>+</span> <span>"佰"</span><span>;</span>
        <span>break</span><span>;</span>
      <span>case</span> <span>3</span><span>:</span>
        <span>if</span> <span>(</span>perchar <span>!=</span> <span>0</span><span>)</span> tmpnewchar <span>=</span> tmpnewchar <span>+</span> <span>"仟"</span><span>;</span>
        <span>break</span><span>;</span>
      <span>case</span> <span>4</span><span>:</span>
        tmpnewchar <span>=</span> tmpnewchar <span>+</span> <span>"万"</span><span>;</span>
        <span>break</span><span>;</span>
      <span>case</span> <span>5</span><span>:</span>
        <span>if</span> <span>(</span>perchar <span>!=</span> <span>0</span><span>)</span> tmpnewchar <span>=</span> tmpnewchar <span>+</span> <span>"拾"</span><span>;</span>
        <span>break</span><span>;</span>
      <span>case</span> <span>6</span><span>:</span>
        <span>if</span> <span>(</span>perchar <span>!=</span> <span>0</span><span>)</span> tmpnewchar <span>=</span> tmpnewchar <span>+</span> <span>"佰"</span><span>;</span>
        <span>break</span><span>;</span>
      <span>case</span> <span>7</span><span>:</span>
        <span>if</span> <span>(</span>perchar <span>!=</span> <span>0</span><span>)</span> tmpnewchar <span>=</span> tmpnewchar <span>+</span> <span>"仟"</span><span>;</span>
        <span>break</span><span>;</span>
      <span>case</span> <span>8</span><span>:</span>
        tmpnewchar <span>=</span> tmpnewchar <span>+</span> <span>"亿"</span><span>;</span>
        <span>break</span><span>;</span>
      <span>case</span> <span>9</span><span>:</span>
        tmpnewchar <span>=</span> tmpnewchar <span>+</span> <span>"拾"</span><span>;</span>
        <span>break</span><span>;</span>
    <span>}</span>
    <span>var</span> newchar <span>=</span> tmpnewchar <span>+</span> newchar<span>;</span>
  <span>}</span>
  <span>//小数点之后进行转化</span>
  <span>if</span> <span>(</span>Num<span>.</span><span>indexOf</span><span>(</span><span>"."</span><span>)</span> <span>!=</span> <span>-</span><span>1</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>part<span>[</span><span>1</span><span>]</span><span>.</span>length <span>></span> <span>2</span><span>)</span> <span>{</span>
      <span>// alert("小数点之后只能保留两位,系统将自动截断");</span>
      part<span>[</span><span>1</span><span>]</span> <span>=</span> part<span>[</span><span>1</span><span>]</span><span>.</span><span>substr</span><span>(</span><span>0</span><span>,</span> <span>2</span><span>)</span><span>;</span>
    <span>}</span>
    <span>for</span> <span>(</span>i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> part<span>[</span><span>1</span><span>]</span><span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
      tmpnewchar <span>=</span> <span>""</span><span>;</span>
      perchar <span>=</span> part<span>[</span><span>1</span><span>]</span><span>.</span><span>charAt</span><span>(</span>i<span>)</span><span>;</span>
      <span>switch</span> <span>(</span>perchar<span>)</span> <span>{</span>
        <span>case</span> <span>"0"</span><span>:</span>
          tmpnewchar <span>=</span> <span>"零"</span> <span>+</span> tmpnewchar<span>;</span>
          <span>break</span><span>;</span>
        <span>case</span> <span>"1"</span><span>:</span>
          tmpnewchar <span>=</span> <span>"壹"</span> <span>+</span> tmpnewchar<span>;</span>
          <span>break</span><span>;</span>
        <span>case</span> <span>"2"</span><span>:</span>
          tmpnewchar <span>=</span> <span>"贰"</span> <span>+</span> tmpnewchar<span>;</span>
          <span>break</span><span>;</span>
        <span>case</span> <span>"3"</span><span>:</span>
          tmpnewchar <span>=</span> <span>"叁"</span> <span>+</span> tmpnewchar<span>;</span>
          <span>break</span><span>;</span>
        <span>case</span> <span>"4"</span><span>:</span>
          tmpnewchar <span>=</span> <span>"肆"</span> <span>+</span> tmpnewchar<span>;</span>
          <span>break</span><span>;</span>
        <span>case</span> <span>"5"</span><span>:</span>
          tmpnewchar <span>=</span> <span>"伍"</span> <span>+</span> tmpnewchar<span>;</span>
          <span>break</span><span>;</span>
        <span>case</span> <span>"6"</span><span>:</span>
          tmpnewchar <span>=</span> <span>"陆"</span> <span>+</span> tmpnewchar<span>;</span>
          <span>break</span><span>;</span>
        <span>case</span> <span>"7"</span><span>:</span>
          tmpnewchar <span>=</span> <span>"柒"</span> <span>+</span> tmpnewchar<span>;</span>
          <span>break</span><span>;</span>
        <span>case</span> <span>"8"</span><span>:</span>
          tmpnewchar <span>=</span> <span>"捌"</span> <span>+</span> tmpnewchar<span>;</span>
          <span>break</span><span>;</span>
        <span>case</span> <span>"9"</span><span>:</span>
          tmpnewchar <span>=</span> <span>"玖"</span> <span>+</span> tmpnewchar<span>;</span>
          <span>break</span><span>;</span>
      <span>}</span>
      <span>if</span> <span>(</span>i <span>==</span> <span>0</span><span>)</span> tmpnewchar <span>=</span> tmpnewchar <span>+</span> <span>"角"</span><span>;</span>
      <span>if</span> <span>(</span>i <span>==</span> <span>1</span><span>)</span> tmpnewchar <span>=</span> tmpnewchar <span>+</span> <span>"分"</span><span>;</span>
      newchar <span>=</span> newchar <span>+</span> tmpnewchar<span>;</span>
    <span>}</span>
  <span>}</span>
  <span>//替换所有无用汉字</span>
  <span>while</span> <span>(</span>newchar<span>.</span><span>search</span><span>(</span><span>"零零"</span><span>)</span> <span>!=</span> <span>-</span><span>1</span><span>)</span> newchar <span>=</span> newchar<span>.</span><span>replace</span><span>(</span><span>"零零"</span><span>,</span> <span>"零"</span><span>)</span><span>;</span>
  newchar <span>=</span> newchar<span>.</span><span>replace</span><span>(</span><span>"零亿"</span><span>,</span> <span>"亿"</span><span>)</span><span>;</span>
  newchar <span>=</span> newchar<span>.</span><span>replace</span><span>(</span><span>"亿万"</span><span>,</span> <span>"亿"</span><span>)</span><span>;</span>
  newchar <span>=</span> newchar<span>.</span><span>replace</span><span>(</span><span>"零万"</span><span>,</span> <span>"万"</span><span>)</span><span>;</span>
  newchar <span>=</span> newchar<span>.</span><span>replace</span><span>(</span><span>"零元"</span><span>,</span> <span>"元"</span><span>)</span><span>;</span>
  newchar <span>=</span> newchar<span>.</span><span>replace</span><span>(</span><span>"零角"</span><span>,</span> <span>""</span><span>)</span><span>;</span>
  newchar <span>=</span> newchar<span>.</span><span>replace</span><span>(</span><span>"零分"</span><span>,</span> <span>""</span><span>)</span><span>;</span>
  <span>if</span> <span>(</span>newchar<span>.</span><span>charAt</span><span>(</span>newchar<span>.</span>length <span>-</span> <span>1</span><span>)</span> <span>==</span> <span>"元"</span><span>)</span> <span>{</span>
    newchar <span>=</span> newchar <span>+</span> <span>"整"</span><span>;</span>
  <span>}</span>
  <span>return</span> newchar<span>;</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br><span>110</span><br><span>111</span><br><span>112</span><br><span>113</span><br><span>114</span><br><span>115</span><br><span>116</span><br><span>117</span><br><span>118</span><br><span>119</span><br><span>120</span><br><span>121</span><br><span>122</span><br><span>123</span><br><span>124</span><br><span>125</span><br><span>126</span><br><span>127</span><br><span>128</span><br><span>129</span><br><span>130</span><br><span>131</span><br><span>132</span><br><span>133</span><br><span>134</span><br><span>135</span><br><span>136</span><br><span>137</span><br><span>138</span><br><span>139</span><br><span>140</span><br><span>141</span><br><span>142</span><br><span>143</span><br><span>144</span><br><span>145</span><br><span>146</span><br><span>147</span><br><span>148</span><br><span>149</span><br></div></div><h2 id="格式化数字"> 格式化数字</h2>
<p>例如：12345678.9</p>
<p>'0,000.00'   -&gt; '12,345,678.90'
'0,000'      -&gt; '12,345,678'
'0.0'        -&gt; '12345678.9'
'0,000.0'    -&gt; '12,345,678.9'
'0,000.00%'  -&gt; '12,345,678.90%'
'$0,000.00'  -&gt; '$12,345,678.90'</p>
<div><pre><code><span>/**
 * 通过格式化文本转换数字的显示格式
 */</span>
<span>export</span> <span>const</span> <span>formatNumber</span> <span>=</span> <span>(</span><span>value<span>,</span> format</span><span>)</span> <span>=></span> <span>{</span>
  <span>if</span> <span>(</span><span>typeof</span> value <span>!==</span> <span>'number'</span><span>)</span> <span>return</span> <span>''</span><span>;</span>
  <span>if</span> <span>(</span><span>!</span>format<span>)</span> <span>return</span> value<span>;</span>

  <span>const</span> r <span>=</span> <span>RegExp</span><span>(</span><span>'^([^\\d]*)?(\\d*,?\\d*)*(\\.?\\d*)*([^\\d]*)?$'</span><span>)</span><span>.</span><span>exec</span><span>(</span>
    format
  <span>)</span><span>;</span>
  <span>const</span> <span>[</span><span>,</span> prefix<span>,</span> i<span>,</span> decimal<span>,</span> suffix<span>]</span> <span>=</span> Array<span>.</span><span>from</span><span>(</span>r <span>??</span> <span>[</span><span>]</span><span>)</span><span>;</span>

  <span>const</span> integer <span>=</span> <span>(</span>i<span>?.</span><span>includes</span><span>(</span><span>','</span><span>)</span> <span>?</span> i<span>?.</span><span>replace</span><span>(</span><span><span>/</span><span>^(\d+,)*</span><span>/</span><span>g</span></span><span>,</span> <span>''</span><span>)</span> <span>:</span> <span>-</span><span>1</span><span>)</span> <span>??</span> <span>-</span><span>1</span><span>;</span>

  <span>if</span> <span>(</span>suffix <span>===</span> <span>'%'</span><span>)</span> <span>{</span>
    <span>// eslint-disable-next-line no-param-reassign</span>
    value <span>*=</span> <span>100</span><span>;</span>
  <span>}</span>

  <span>// 千分位</span>
  <span>const</span> reg <span>=</span> <span>new</span> <span>RegExp</span><span>(</span>
    <span><span>`</span><span>(\\d{1,</span><span><span>${</span>integer<span>.</span>length<span>}</span></span><span>})(?=(\\d{</span><span><span>${</span>integer<span>.</span>length<span>}</span></span><span>})+$)</span><span>`</span></span><span>,</span>
    <span>'g'</span>
  <span>)</span><span>;</span>

  <span>return</span> <span><span>`</span><span><span>${</span>prefix <span>??</span> <span>''</span><span>}</span></span><span><span>${</span>value
    <span>.</span><span>toFixed</span><span>(</span>Math<span>.</span><span>max</span><span>(</span><span>0</span><span>,</span> <span>(</span>decimal<span>?.</span>length <span>??</span> <span>1</span><span>)</span> <span>-</span> <span>1</span><span>)</span><span>)</span>
    <span>.</span><span>replace</span><span>(</span><span><span>/</span><span>^(\d+)((\.\d+)?)$</span><span>/</span></span><span>,</span> <span>(</span><span>s<span>,</span> s1<span>,</span> s2</span><span>)</span> <span>=></span> <span>{</span>
      <span>return</span> <span>(</span>integer <span>===</span> <span>-</span><span>1</span> <span>?</span> s1 <span>:</span> s1<span>.</span><span>replace</span><span>(</span>reg<span>,</span> <span>'$&amp;,'</span><span>)</span><span>)</span> <span>+</span> s2<span>;</span>
    <span>}</span><span>)</span><span>}</span></span><span><span>${</span>suffix <span>??</span> <span>''</span><span>}</span></span><span>`</span></span><span>;</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>样例</title>
      <link>https://docs.jeremyjone.com/demo/</link>
      <guid>https://docs.jeremyjone.com/demo/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">样例</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="样例"> 样例</h1>
<p>各种样例，可以直接运行使用的那种</p>
]]></content:encoded>
    </item>
    <item>
      <title>CSS 样例</title>
      <link>https://docs.jeremyjone.com/demo/css/</link>
      <guid>https://docs.jeremyjone.com/demo/css/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">CSS 样例</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="css-样例"> CSS 样例</h1>
<h2 id="跳动的心"> 跳动的心</h2>
<IFrameWrapper src="https://desktop.jeremyjone.com/example/jump-heart.html" />
<h2 id="旋转的方块"> 旋转的方块</h2>
<IFrameWrapper src="https://desktop.jeremyjone.com/example/3d-cube.html" />
<h2 id="相册列表"> 相册列表</h2>
<IFrameWrapper src="https://desktop.jeremyjone.com/example/list/show1.html" />
]]></content:encoded>
    </item>
    <item>
      <title>高级样例</title>
      <link>https://docs.jeremyjone.com/demo/css/adv/</link>
      <guid>https://docs.jeremyjone.com/demo/css/adv/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">高级样例</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="高级样例"> 高级样例</h1>
<h2 id="瀑布流"> 瀑布流</h2>
<IFrameWrapper src="https://desktop.jeremyjone.com/example/waterfall.html" />
<h2 id="视差"> 视差</h2>
]]></content:encoded>
    </item>
    <item>
      <title>文档手册</title>
      <link>https://docs.jeremyjone.com/document/</link>
      <guid>https://docs.jeremyjone.com/document/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">文档手册</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="文档手册"> 文档手册</h1>
<p>持续完善的工具文档手册。</p>
<ul>
<li><a href="./git">Git</a></li>
<li><a href="./markdown">Markdown</a></li>
<li><a href="./vim">Vim</a></li>
<li><a href="./docker">Docker</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Docker 使用文档</title>
      <link>https://docs.jeremyjone.com/document/docker/</link>
      <guid>https://docs.jeremyjone.com/document/docker/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">Docker 使用文档</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="docker-使用文档"> Docker 使用文档</h1>
<h2 id="安装"> 安装</h2>
<p>以下以 <code>CentOS7+</code> 为例，其余请参考<a href="https://docs.docker.com/engine/install/" target="_blank" rel="noopener noreferrer">官方文档</a>：</p>
<h3 id="先卸载旧版本"> 先卸载旧版本</h3>
<div><pre><code><span>sudo</span> yum remove docker <span>\</span>
                  docker-client <span>\</span>
                  docker-client-latest <span>\</span>
                  docker-common <span>\</span>
                  docker-latest <span>\</span>
                  docker-latest-logrotate <span>\</span>
                  docker-logrotate <span>\</span>
                  docker-engine
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h3 id="安装新版本（使用仓库）"> 安装新版本（使用仓库）</h3>
<h4 id="安装需要的安装包"> 安装需要的安装包</h4>
<div><pre><code><span>sudo</span> yum <span>install</span> -y yum-utils
</code></pre>
<div><span>1</span><br></div></div><h4 id="设置安装仓库地址"> 设置安装仓库地址</h4>
<div><pre><code><span>sudo</span> yum-config-manager <span>\</span>
    --add-repo <span>\</span>
    https://download.docker.com/linux/centos/docker-ce.repo <span># 可以将地址改为国内镜像（百度搜 "docker镜像地址" 即可）</span>

<span># 阿里云镜像地址：http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h4 id="更新-yum"> 更新 yum</h4>
<div><pre><code><span>sudo</span> yum makecache fast
</code></pre>
<div><span>1</span><br></div></div><h4 id="安装-docker-引擎"> 安装 docker 引擎</h4>
<div><pre><code><span>sudo</span> yum <span>install</span> docker-ce docker-ce-cli containerd.io
</code></pre>
<div><span>1</span><br></div></div><h3 id="测试启动"> 测试启动</h3>
<div><pre><code>systemctl start docker

docker verion
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>显示如下内容，即安装成功。</p>
<img :src="$withBase('/assets/pic/docker-version.png')" alt="docker-version">
<h4 id="运行测试程序"> 运行测试程序</h4>
<div><pre><code>docker run hello-world
</code></pre>
<div><span>1</span><br></div></div><p>该命令会尝试寻找名称为 <code>hello-world</code> 的仓库，如果没有找到，则会去远程仓库寻找并尝试拉取。</p>
<p>如果显示：</p>
<img :src="$withBase('/assets/pic/docker-run-hello-world.png')" alt="docker-run-hello-world">
<p>则说明已经运行成功。</p>
<h3 id="卸载-docker"> 卸载 docker</h3>
<h4 id="卸载-docker-引擎"> 卸载 docker 引擎</h4>
<div><pre><code><span>sudo</span> yum remove docker-ce docker-ce-cli containerd.io
</code></pre>
<div><span>1</span><br></div></div><h4 id="删除-docker-资源"> 删除 docker 资源</h4>
<div><pre><code><span>sudo</span> <span>rm</span> -rf /var/lib/docker <span># docker 默认路径</span>
</code></pre>
<div><span>1</span><br></div></div><h2 id="镜像常用命令"> 镜像常用命令</h2>
<h3 id="查看信息"> 查看信息</h3>
<h4 id="查看-docker-版本"> 查看 docker 版本</h4>
<div><pre><code>docker version
</code></pre>
<div><span>1</span><br></div></div><h4 id="查看-docker-信息"> 查看 docker 信息</h4>
<div><pre><code>docker info
</code></pre>
<div><span>1</span><br></div></div><p>更多可以查看<a href="https://docs.docker.com/engine/reference/commandline/docker/" target="_blank" rel="noopener noreferrer">官方文档</a>。</p>
<h3 id="查看镜像"> 查看镜像</h3>
<h4 id="查看主机上的所有镜像"> 查看主机上的所有镜像</h4>
<div><pre><code>docker images <span>[</span>-a<span>]</span> <span>[</span>-q<span>]</span>
</code></pre>
<div><span>1</span><br></div></div><ul>
<li><code>-a</code> 显示全部</li>
<li><code>-q</code> 只显示 ID</li>
</ul>
<h4 id="查找远程镜像"> 查找远程镜像</h4>
<p>可以通过名称直接搜索远程仓库中的镜像：</p>
<div><pre><code>docker search <span>&lt;</span>image<span>></span> <span>[</span>-f<span>=</span><span>&lt;</span>condition<span>></span><span>]</span>
</code></pre>
<div><span>1</span><br></div></div><ul>
<li><code>-f=&lt;condition&gt;</code> 搜索条件，如：</li>
</ul>
<div><pre><code>-f<span>=</span>STARS<span>=</span><span>500</span>  <span># stars 数量大于500</span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="拉取镜像"> 拉取镜像</h3>
<div><pre><code>docker pull <span>&lt;</span>image-name<span>></span><span>[</span>:<span>&lt;</span>tag<span>></span><span>]</span>
</code></pre>
<div><span>1</span><br></div></div><ul>
<li>tag 如果不写，默认为 <code>lastest</code>，一般需要指定版本时填写，<code>tag</code> 必须在镜像库中存在。</li>
</ul>
<h3 id="删除镜像"> 删除镜像</h3>
<div><pre><code>docker rmi -f <span>&lt;</span>image<span>></span> <span>[</span><span>[</span><span>&lt;</span>image<span>></span><span>]</span> <span>[</span><span>&lt;</span>image<span>></span><span>]</span> <span>..</span>.<span>]</span>
</code></pre>
<div><span>1</span><br></div></div><ul>
<li>image 可以写镜像 ID 或者镜像名，通常写 ID。支持删除多个镜像</li>
</ul>
<h4 id="条件删除"> 条件删除</h4>
<p>可以结合 linux 系统命令进行条件删除。如删除全部：</p>
<div><pre><code>docker rmi -f <span><span>$(</span>docker images -aq<span>)</span></span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="给镜像添加标签"> 给镜像添加标签</h3>
<p>有时需要单独给已经存在的镜像添加标签，可以通过：</p>
<div><pre><code>docker tag <span>&lt;</span>镜像ID<span>></span> <span>&lt;</span>tag<span>></span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="官方镜像的文档"> 官方镜像的文档</h3>
<p>所有远程镜像一般都有详细的<a href="https://hub.docker.com" target="_blank" rel="noopener noreferrer">文档</a>，直接搜索对应镜像名称后方可自行查看。</p>
<h2 id="容器常用命令"> 容器常用命令</h2>
<p>容器，就是镜像在运行时的环境。同一个镜像可以多次启动，同时会生成多个容器，每一个容器虽然环境一样，但是它们的 ID 却不一样，说明它们不是同一个容器。</p>
<h3 id="查看启动的容器"> 查看启动的容器</h3>
<p>查看当前正在运行的容器</p>
<div><pre><code>docker <span>ps</span> <span>[</span>参数们<span>]</span>
</code></pre>
<div><span>1</span><br></div></div><ul>
<li><code>-a</code> 查看历史启动记录</li>
<li><code>-n=&lt;number&gt;</code> 查看最近 n 条创建的容器</li>
<li><code>-q</code> 只显示容器 ID</li>
</ul>
<h3 id="删除容器"> 删除容器</h3>
<div><pre><code>docker <span>rm</span> <span>[</span>-f<span>]</span> <span>&lt;</span>容器ID<span>></span>
</code></pre>
<div><span>1</span><br></div></div><ul>
<li><code>-f</code> 加上该参数，会强制删除包括正在运行的容器。</li>
</ul>
<p>还可以与删除镜像类似，使用参数方式：</p>
<div><pre><code>docker <span>rm</span> -f <span><span>$(</span>docker <span>ps</span> -aq<span>)</span></span> <span># 删除全部容器</span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="运行容器"> 运行容器</h3>
<p>通过 <code>run</code> 命令可以直接启动容器，同时如果本地找不到，则会去远程仓库搜索并拉取（参照）。</p>
<div><pre><code>docker run <span>[</span>参数们<span>]</span> <span>&lt;</span>image<span>></span>
</code></pre>
<div><span>1</span><br></div></div><ul>
<li><code>--name=&lt;name&gt;</code> 给容器起个名字</li>
<li><code>-d</code> 以后台方式运行</li>
<li><code>-i</code> 使用交互方式运行</li>
<li><code>-t</code> 分配一个虚拟终端（与 <code>-i</code> 一起使用，通常为 <code>-it</code>）</li>
<li><code>-p</code> 指定容器端口。还可以与主机端口进行映射，格式：<code>主机端口:容器端口</code>，如：<code>8080:8080</code></li>
<li><code>-P</code> 指定一个随机端口</li>
<li><code>-v [&lt;容器卷名&gt;:][/&lt;本地目录&gt;:]&lt;容器目录&gt;[:&lt;权限&gt;]</code> 挂载目录。
<ul>
<li>以 <code>/</code> 开头的为目录，否则是置顶的卷名。卷名一般在 <code>/var/lib/docker/volumes/&lt;容器卷名&gt;/_data</code> 中。</li>
<li>权限通常是 <code>ro</code> 或 <code>rw</code>，意为 <code>readonly</code> 或 <code>readwrite</code></li>
</ul>
</li>
</ul>
<h3 id="进入容器"> 进入容器</h3>
<p>通常启动容器都是以 <code>-d</code> 的后台方式，有时需要进入容器内部，此时需要命令：</p>
<div><pre><code>docker <span>exec</span> -it <span>&lt;</span>容器ID<span>></span>
</code></pre>
<div><span>1</span><br></div></div><p>上面的命令会创建一个新的交互环境。</p>
<p>还可以通过下面命令进入容器内部，只不过会进入到容器内正在执行的环境：</p>
<div><pre><code>docker attach <span>&lt;</span>容器ID<span>></span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="退出容器"> 退出容器</h3>
<p>在容器交互模式下，可以选择仅退出容器或者退出并关闭容器。</p>
<h4 id="仅退出容器"> 仅退出容器</h4>
<p>该退出方式不影响容器的运行，使用快捷键直接退出：</p>
<div><pre><code>Ctrl + P + Q
</code></pre>
<div><span>1</span><br></div></div><h4 id="退出并关闭容器"> 退出并关闭容器</h4>
<p>该退出方式会直接关闭容器，使用交互命令：</p>
<div><pre><code><span>exit</span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="启动与停止容器"> 启动与停止容器</h3>
<p>容器可以停止，也可以继续启动。</p>
<div><pre><code>docker start <span>&lt;</span>容器ID<span>></span>    <span># 启动容器</span>
docker restart <span>&lt;</span>容器ID<span>></span>  <span># 重启容器</span>
docker pause <span>&lt;</span>容器ID<span>></span>    <span># 暂停容器</span>
docker unpause <span>&lt;</span>容器ID<span>></span>  <span># 取消暂停容器</span>
docker stop <span>&lt;</span>容器ID<span>></span>     <span># 停止容器</span>
docker <span>kill</span> <span>&lt;</span>容器ID<span>></span>     <span># 强制停止容器</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id="查看容器日志"> 查看容器日志</h3>
<div><pre><code>docker logs <span>[</span>参数们<span>]</span> <span>&lt;</span>容器ID<span>></span>
</code></pre>
<div><span>1</span><br></div></div><ul>
<li><code>-f</code> 跟踪日志输出</li>
<li><code>-t</code> 时间戳</li>
<li><code>--tail &lt;数量&gt;</code> 显示的条数，默认 <code>all</code>，显示全部。</li>
<li><code>--details</code> 显示详细信息</li>
<li><code>since &lt;time&gt;</code> 日志起始时间。格式 UTC（2020-01-01T00:00:01），或者相对时间，如：30m，30 minutes</li>
<li><code>until &lt;time&gt;</code> 日志截止时间。格式同上</li>
</ul>
<h3 id="查看容器内进程"> 查看容器内进程</h3>
<p>与 linux 类似：</p>
<div><pre><code>docker <span>top</span> <span>&lt;</span>容器ID<span>></span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="查看容器详细信息"> 查看容器详细信息</h3>
<div><pre><code>docker inspect <span>&lt;</span>容器ID<span>></span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="文件操作"> 文件操作</h3>
<h4 id="拷贝容器内部文件到主机"> 拷贝容器内部文件到主机</h4>
<div><pre><code>docker <span>cp</span> <span>&lt;</span>容器ID<span>></span>:<span>&lt;</span>容器内路径<span>></span> <span>&lt;</span>主机路径<span>></span>
</code></pre>
<div><span>1</span><br></div></div><h2 id="dockerfile"> DockerFile</h2>
<p>DokcerFile 是构建一个自定义 Docker 镜像的文件，如：</p>
<div><pre><code><span># syntax=docker/dockerfile:1</span>
<span><span>FROM</span> ubuntu:18.04</span>
<span><span>COPY</span> . /app</span>
<span><span>RUN</span> make /app</span>
<span><span>CMD</span> python /app/app.py</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>Docker 镜像由只读层组成，每层代表一个 Dockerfile 指令。这些层是堆叠的，每一层都是前一层变化的增量。</p>
<h3 id="dockerfile-常用指令"> DockerFile 常用指令</h3>
<p>指令速览：</p>
<div><pre><code><span><span>FROM</span>        # 基础镜像名称</span>
<span><span>LABEL</span>       # 镜像维护者信息</span>
<span><span>RUN</span>         # 构建镜像时需要执行的命令</span>
<span><span>ENTRYPOINT</span>  # 指定容器启动时运行的命令，可执行多个命令</span>
<span><span>CMD</span>         # 指定容器启动时运行的命令，只有最后一个命令生效</span>
<span><span>EXPOSE</span>      # 保留端口</span>
<span><span>ENV</span>         # 设置环境变量</span>
<span><span>ADD</span>         # 需要添加内容的压缩包，会自动解压</span>
<span><span>COPY</span>        # 拷贝文件到镜像中</span>
<span><span>VOLUME</span>      # 挂载主机目录</span>
<span><span>WORKDIR</span>     # 设置当前工作目录</span>
<span><span>ONBUILD</span>     # 子镜像构建时触发</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h4 id="from"> FROM</h4>
<p>尽可能使用官方镜像作为镜像的基础。如：</p>
<div><pre><code><span><span>FROM</span> ubuntu:18.04</span>
</code></pre>
<div><span>1</span><br></div></div><h4 id="label"> LABEL</h4>
<p>像镜像中添加标签，包括维护者、组织、记录许可信息等</p>
<p>一个镜像可以有多个标签，每个标签都应该是一行以 <code>LABEL</code> 开头并跟一个键值对，如：</p>
<div><pre><code><span><span>LABEL</span> com.example.version=<span>"0.0.1-beta"</span></span>
<span><span>LABEL</span> vendor1=<span>"ACME Incorporated"</span></span>
<span><span>LABEL</span> vendor2=ZENITH\ Incorporated</span>
<span><span>LABEL</span> com.example.release-date=<span>"2015-02-12"</span></span>
<span><span>LABEL</span> com.example.version.is-production=<span>""</span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>空格必须<strong>转义</strong>或者<strong>使用<code>&quot;</code>引起来</strong>。</p>
<h4 id="run"> RUN</h4>
<p>构建镜像时需要执行的命令。</p>
<p>多条<code>RUN</code> 语句单独可能会导致不确定问题，所以可以通过 <code>&amp;&amp;</code> 将多条命令连接，同时命令可以在用反斜杠(<code>\</code>)分割的多行上拆分，使语句更具可读性、维护性。如：</p>
<div><pre><code><span><span>RUN</span> apt-get update &amp;&amp; apt-get install -y <span>\</span>
    package-bar <span>\</span>
    package-baz <span>\</span>
    package-foo=1.3.*</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h4 id="entrypoint-与-cmd"> ENTRYPOINT 与 CMD</h4>
<p>两个指令都是用于镜像内要执行的命令。</p>
<p><code>ENTRYPOINT</code> 可以设置镜像的主命令，允许镜像像该命令一样运行。如：</p>
<div><pre><code><span><span>ENTRYPOINT</span> [<span>"executable"</span>, <span>"param1"</span>, <span>"param2"</span>, ...]</span>

<span># 举例：</span>
<span><span>ENTRYPOINT</span> [<span>"ls"</span>, <span>"-a"</span>]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p><code>CMD</code> 指令应用于运行镜像中包含的软件以及任何参数。<code>CMD</code> 通常应以如下方式出现：</p>
<div><pre><code><span><span>CMD</span> [<span>"Executable"</span>, <span>"param1"</span>, <span>"param2"</span>, ...]</span>
</code></pre>
<div><span>1</span><br></div></div><p>但是当只有参数时，会作为 <code>ENTRYPOINT</code> 的参数传入。如：</p>
<div><pre><code><span><span>ENTRYPOINT</span> [<span>"ls"</span>, <span>"-a"</span>]</span>
<span><span>CMD</span> [<span>"-l"</span>]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>最后会被编译为 <code>ls -al</code>。</p>
<p><strong>如果</strong>：</p>
<ul>
<li>使用 <code>CMD</code> 指令，当启动镜像并传入一些附加指令时，会替换掉原有 <code>CMD</code> 指令。</li>
<li>使用 <code>ENTRYPOINT</code> 指令，则该指令为主指令，并且将 <code>CMD</code> 指令内容与启动镜像时传入的附加指令一同作为附属指令一起执行。</li>
</ul>
<h4 id="expose"> EXPOSE</h4>
<p><code>EXPOSE</code> 指令告知容器侦听连接的端口。</p>
<h4 id="env"> ENV</h4>
<p>使用 <code>ENV</code> 与 <code>PATH</code> 容器安装软件的环境变量，还可用于提供特定容器化服务所需的环境变量，同时还可以设置常用的版本号。如：</p>
<div><pre><code><span><span>ENV</span> PG_MAJOR=9.3</span>
<span><span>ENV</span> PG_VERSION=9.3.4</span>
<span><span>RUN</span> curl -SL https://example.com/postgres-<span>$PG_VERSION</span>.tar.xz | tar -xJC /usr/src/postgres &amp;&amp; …</span>
<span><span>ENV</span> PATH=/usr/local/postgres-<span>$PG_MAJOR</span>/bin:<span>$PATH</span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h4 id="add-与-copy"> ADD 与 COPY</h4>
<p>两者功能类似，都可以将宿主文件赋值到容器中。但是官方更推荐使用 <code>COPY</code>。</p>
<div><p>注意</p>
<p>虽然 <code>ADD</code> 具备从远程拉取文件的能力，例如：</p>
<div><pre><code><span><span>ADD</span> https://example.com/big.tar.xz /usr/src/things/</span>
</code></pre>
<div><span>1</span><br></div></div><p>但是强烈不鼓励这样做，应该通过 <code>curl</code> 或者 <code>wget</code> 等命令进行获取。这样可以最大化控制镜像的大小。</p>
</div>
<h4 id="volume"> VOLUME</h4>
<p><code>VOLUME</code> 指令用于挂载文件/文件夹到容器中。</p>
<h4 id="workdir"> WORKDIR</h4>
<p><code>WORKDIR</code> 指令用于设置当前工作目录。为了清晰可靠，应该始终保持 <code>WORKDIR</code> 为绝对路径。</p>
<h4 id="onbuild"> ONBUILD</h4>
<p>当一个 <code>DockerFile</code> 构建完成后，<code>ONBUILD</code> 指令将被触发执行。该指令会在任何当前镜像所衍生出来的子镜像中执行。</p>
<h3 id="dockerfile-官方参考"> DockerFile 官方参考</h3>
<p><a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="noopener noreferrer">官方参考</a> 把 DockerFile 每个指令讲解的很详细。</p>
<h3 id="构建镜像"> 构建镜像</h3>
<div><pre><code>docker build <span>[</span>-f <span>&lt;</span>filename<span>></span><span>]</span> -t <span>&lt;</span>target_name<span>></span><span>[</span>:<span>&lt;</span>tag<span>></span><span>]</span> <span>.</span>
</code></pre>
<div><span>1</span><br></div></div><ul>
<li><code>filename</code> 如果文件名为 Dockerfile 就不用写了，指令会自动在当前目录下查找。</li>
<li><code>tag</code> 如果给了 tag，则会生成指定版本。默认生成 <code>lastest</code> 的版本。</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Docker 快速搭建 NPM 服务器</title>
      <link>https://docs.jeremyjone.com/document/docker/example/npm/</link>
      <guid>https://docs.jeremyjone.com/document/docker/example/npm/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">Docker 快速搭建 NPM 服务器</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="docker-快速搭建-npm-服务器"> Docker 快速搭建 NPM 服务器</h1>
<p>我们使用 <a href="https://verdaccio.org/docs/docker/" target="_blank" rel="noopener noreferrer">verdaccio</a> 来快速搭建 NPM 服务器。</p>
<h2 id="拉取镜像"> 拉取镜像</h2>
<p>从 <code>v2.x</code> 开始，可以拉取指定版本：</p>
<div><pre><code>docker pull verdaccio/cerdaccio

docker pull verdaccio/cerdaccio:4

docker pull verdaccio/cerdaccio:4.0

docker pull verdaccio/cerdaccio:4.0.0
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="运行"> 运行</h2>
<p>docker run -it --rm --name verdaccio -p 4873:4873 verdaccio/verdaccio</p>
<p>这样就搭建好了一个最简单的 NPM 服务器。它可以帮助我们快速测试。</p>
<p>在浏览器中打开 <a href="http://localhost:4873" target="_blank" rel="noopener noreferrer">http://localhost:4873</a> 还可以查看当前仓库的信息。</p>
<h2 id="使用"> 使用</h2>
<div><pre><code><span>npm</span> <span>set</span> registry http://localhost:4873
</code></pre>
<div><span>1</span><br></div></div><p>即可通过 NPM 服务器获取各种包。</p>
<p>同时还可以使用指定服务器来安装特定包：</p>
<div><pre><code><span>npm</span> <span>install</span> your-package --registry http://localhost:4873
</code></pre>
<div><span>1</span><br></div></div><h2 id="更多配置"> 更多配置</h2>
<p>更多配置可以参考 <a href="https://verdaccio.org/zh-CN/docs/docker" target="_blank" rel="noopener noreferrer">官方文档</a>。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Emmet 使用文档</title>
      <link>https://docs.jeremyjone.com/document/emmet/</link>
      <guid>https://docs.jeremyjone.com/document/emmet/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">Emmet 使用文档</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="emmet-使用文档"> Emmet 使用文档</h1>
<p><code>Emmet</code> 可以帮助我们快速开发页面代码，通过固定语法，快速生成 <code>HTML</code>、<code>CSS</code> 代码的一种工具。</p>
<h2 id="使用方法"> 使用方法</h2>
<p>所有语法写完之后，直接使用 tab 键，就可以生成对应的代码。</p>
<h2 id="html-语法"> HTML 语法</h2>
<h3 id="生成结构文档"> 生成结构文档</h3>
<p>通过 <code>!</code> 可以快速生成完整的结构文档。</p>
<div><pre><code><span><span>&lt;!</span><span>DOCTYPE</span> <span>html</span><span>></span></span>
<span><span><span>&lt;</span>html</span> <span>lang</span><span><span>=</span><span>"</span>en<span>"</span></span><span>></span></span>
<span><span><span>&lt;</span>head</span><span>></span></span>
    <span><span><span>&lt;</span>meta</span> <span>charset</span><span><span>=</span><span>"</span>UTF-8<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>meta</span> <span>http-equiv</span><span><span>=</span><span>"</span>X-UA-Compatible<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>IE=edge<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>meta</span> <span>name</span><span><span>=</span><span>"</span>viewport<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>width=device-width, initial-scale=1.0<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>title</span><span>></span></span>Document<span><span><span>&lt;/</span>title</span><span>></span></span>
<span><span><span>&lt;/</span>head</span><span>></span></span>
<span><span><span>&lt;</span>body</span><span>></span></span>

<span><span><span>&lt;/</span>body</span><span>></span></span>
<span><span><span>&lt;/</span>html</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>使用 <code>!!!</code> 可以只生成声明语句：</p>
<div><pre><code><span><span>&lt;!</span><span>DOCTYPE</span> <span>html</span><span>></span></span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="生成空元素"> 生成空元素</h3>
<p>语法：元素名，如：<code>div</code></p>
<div><pre><code><span>&lt;!-- div --></span>
<span><span><span>&lt;</span>div</span><span>></span></span><span><span><span>&lt;/</span>div</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h3 id="生成带-id-的元素"> 生成带 id 的元素</h3>
<p>语法：<code>#</code>，如：<code>div#id</code></p>
<div><pre><code><span>&lt;!-- div#id --></span>
<span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>"</span>id<span>"</span></span><span>></span></span><span><span><span>&lt;/</span>div</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h3 id="生成带-class-的元素"> 生成带 class 的元素</h3>
<p>语法：<code>.</code>，如：<code>div.className</code></p>
<div><pre><code><span>&lt;!-- div.className --></span>
<span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>className<span>"</span></span><span>></span></span><span><span><span>&lt;/</span>div</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h3 id="生成带有其他属性的元素"> 生成带有其他属性的元素</h3>
<p>语法：<code>[]</code>，多个属性空格分开，如：<code>div[name=jeremyjone value=20]</code></p>
<div><pre><code><span>&lt;!-- div[name=jeremyjone value=20] --></span>
<span><span><span>&lt;</span>div</span> <span>name</span><span><span>=</span><span>"</span>jeremyjone<span>"</span></span> <span>value</span><span><span>=</span><span>"</span>20<span>"</span></span><span>></span></span><span><span><span>&lt;/</span>div</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h3 id="生成标签内容"> 生成标签内容</h3>
<p>语法：<code>{}</code>，可以生成文本内容，如：<code>div{jeremyjone}</code></p>
<div><pre><code><span>&lt;!-- div{jeremyjone} --></span>
<span><span><span>&lt;</span>div</span><span>></span></span>jeremyjone<span><span><span>&lt;/</span>div</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h3 id="生成多个重复元素"> 生成多个重复元素</h3>
<p>语法：<code>*n</code>，会自动将元素重复n次，如：<code>div.className*2</code></p>
<div><pre><code><span>&lt;!-- div.className*2 --></span>
<span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>className<span>"</span></span><span>></span></span><span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>className<span>"</span></span><span>></span></span><span><span><span>&lt;/</span>div</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id="生成序号"> 生成序号</h3>
<p>语法：<code>$</code>，序列从1开始，遇到多个自动增加1，如：<code>div.className$</code>、<code>div{$}*3</code></p>
<div><pre><code><span>&lt;!-- div.className$ --></span>
<span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>className1<span>"</span></span><span>></span></span><span><span><span>&lt;/</span>div</span><span>></span></span>

<span>&lt;!-- div{$}*3 --></span>
<span><span><span>&lt;</span>div</span><span>></span></span>1<span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;</span>div</span><span>></span></span>2<span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;</span>div</span><span>></span></span>3<span><span><span>&lt;/</span>div</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id="序号的高级用法"> 序号的高级用法</h3>
<ul>
<li>
<p>多位数字</p>
<p>多个 <code>$</code> 使用可以生成多占位字符的数字，如：<code>div{jeremyjone$$}*20</code></p>
<div><pre><code><span>&lt;!-- div{jeremyjone$$}*20 --></span>
<span><span><span>&lt;</span>div</span><span>></span></span>jeremyjone01<span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;</span>div</span><span>></span></span>jeremyjone02<span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;</span>div</span><span>></span></span>jeremyjone03<span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;</span>div</span><span>></span></span>jeremyjone04<span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;</span>div</span><span>></span></span>jeremyjone05<span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;</span>div</span><span>></span></span>jeremyjone06<span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;</span>div</span><span>></span></span>jeremyjone07<span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;</span>div</span><span>></span></span>jeremyjone08<span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;</span>div</span><span>></span></span>jeremyjone09<span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;</span>div</span><span>></span></span>jeremyjone10<span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;</span>div</span><span>></span></span>jeremyjone11<span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;</span>div</span><span>></span></span>jeremyjone12<span><span><span>&lt;/</span>div</span><span>></span></span>
...
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>可以看到个位数字时，会用 0 占位十位部分。</p>
</li>
<li>
<p>倒序序号</p>
<p>使用 <code>@-</code> 跟在 <code>$</code> 后面即可，如：<code>div{$@-}*3</code></p>
<div><pre><code><span>&lt;!-- div{$@-}*3 --></span>
<span><span><span>&lt;</span>div</span><span>></span></span>3<span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;</span>div</span><span>></span></span>2<span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;</span>div</span><span>></span></span>1<span><span><span>&lt;/</span>div</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div></li>
<li>
<p>指定起始序号</p>
<p>使用 <code>@n</code> 跟在 <code>$</code> 后面即可，如：<code>div{$@3}*3</code></p>
<div><pre><code><span>&lt;!-- div{$@3}*3 --></span>
<span><span><span>&lt;</span>div</span><span>></span></span>3<span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;</span>div</span><span>></span></span>4<span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;</span>div</span><span>></span></span>5<span><span><span>&lt;/</span>div</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>该方法如果是倒叙，则指定的是截止序号，如：<code>div{$@-3}*3</code></p>
<div><pre><code><span>&lt;!-- div{$@-3}*3 --></span>
<span><span><span>&lt;</span>div</span><span>></span></span>5<span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;</span>div</span><span>></span></span>4<span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;</span>div</span><span>></span></span>3<span><span><span>&lt;/</span>div</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div></li>
</ul>
<h3 id="生成子节点"> 生成子节点</h3>
<p>语法：<code>&gt;</code>，如：<code>div&gt;span&gt;ul&gt;li*3</code></p>
<div><pre><code><span>&lt;!-- div>span>ul>li*3 --></span>
<span><span><span>&lt;</span>div</span><span>></span></span>
    <span><span><span>&lt;</span>span</span><span>></span></span>
        <span><span><span>&lt;</span>ul</span><span>></span></span>
            <span><span><span>&lt;</span>li</span><span>></span></span><span><span><span>&lt;/</span>li</span><span>></span></span>
            <span><span><span>&lt;</span>li</span><span>></span></span><span><span><span>&lt;/</span>li</span><span>></span></span>
            <span><span><span>&lt;</span>li</span><span>></span></span><span><span><span>&lt;/</span>li</span><span>></span></span>
        <span><span><span>&lt;/</span>ul</span><span>></span></span>
    <span><span><span>&lt;/</span>span</span><span>></span></span>
<span><span><span>&lt;/</span>div</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h3 id="生成兄弟节点"> 生成兄弟节点</h3>
<p>语法：<code>+</code>，如：<code>div&gt;span+ul&gt;li*2</code></p>
<div><pre><code><span>&lt;!-- div>span+ul>li*2 --></span>
<span><span><span>&lt;</span>div</span><span>></span></span>
    <span><span><span>&lt;</span>span</span><span>></span></span><span><span><span>&lt;/</span>span</span><span>></span></span>
    <span><span><span>&lt;</span>ul</span><span>></span></span>
        <span><span><span>&lt;</span>li</span><span>></span></span><span><span><span>&lt;/</span>li</span><span>></span></span>
        <span><span><span>&lt;</span>li</span><span>></span></span><span><span><span>&lt;/</span>li</span><span>></span></span>
    <span><span><span>&lt;/</span>ul</span><span>></span></span>
<span><span><span>&lt;/</span>div</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h3 id="生成父级的兄弟节点"> 生成父级的兄弟节点</h3>
<p>语法：<code>^</code>，它会在当前元素的父级元素之后生成接下来的元素，如：<code>div&gt;span^ul&gt;li</code></p>
<div><pre><code><span>&lt;!-- div>span^ul>li --></span>
<span><span><span>&lt;</span>div</span><span>></span></span>
    <span><span><span>&lt;</span>span</span><span>></span></span><span><span><span>&lt;/</span>span</span><span>></span></span>
<span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;</span>ul</span><span>></span></span>
    <span><span><span>&lt;</span>li</span><span>></span></span><span><span><span>&lt;/</span>li</span><span>></span></span>
<span><span><span>&lt;/</span>ul</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>遇到多层元素，还可以使用多个 <code>^</code> 来返回更高层级，每一个 <code>^</code> 表示返回一层，这在编写多层级多元素时非常高效。如：<code>div&gt;span&gt;div&gt;ul&gt;li*2^^^span&gt;img</code></p>
<div><pre><code><span>&lt;!-- div>span>div>ul>li*2^^^span>img --></span>
<span><span><span>&lt;</span>div</span><span>></span></span>
    <span><span><span>&lt;</span>span</span><span>></span></span>
        <span><span><span>&lt;</span>div</span><span>></span></span>
            <span><span><span>&lt;</span>ul</span><span>></span></span>
                <span><span><span>&lt;</span>li</span><span>></span></span><span><span><span>&lt;/</span>li</span><span>></span></span>
                <span><span><span>&lt;</span>li</span><span>></span></span><span><span><span>&lt;/</span>li</span><span>></span></span>
            <span><span><span>&lt;/</span>ul</span><span>></span></span>
        <span><span><span>&lt;/</span>div</span><span>></span></span>
    <span><span><span>&lt;/</span>span</span><span>></span></span>
    <span><span><span>&lt;</span>span</span><span>></span></span>
        <span><span><span>&lt;</span>img</span> <span>src</span><span><span>=</span><span>"</span><span>"</span></span> <span>alt</span><span><span>=</span><span>"</span><span>"</span></span><span>></span></span>
    <span><span><span>&lt;/</span>span</span><span>></span></span>
<span><span><span>&lt;/</span>div</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h3 id="分组"> 分组</h3>
<p>语法：<code>()</code>，分组在多级元素中非常有用，如：<code>div&gt;span&gt;(ul&gt;li*3)+img</code>、<code>div&gt;(span&gt;img.className$[alt=imgName$])*3</code></p>
<div><pre><code><span>&lt;!-- div>span>(ul>li*3)+img --></span>
<span><span><span>&lt;</span>div</span><span>></span></span>
    <span><span><span>&lt;</span>span</span><span>></span></span>
        <span><span><span>&lt;</span>ul</span><span>></span></span>
            <span><span><span>&lt;</span>li</span><span>></span></span><span><span><span>&lt;/</span>li</span><span>></span></span>
            <span><span><span>&lt;</span>li</span><span>></span></span><span><span><span>&lt;/</span>li</span><span>></span></span>
            <span><span><span>&lt;</span>li</span><span>></span></span><span><span><span>&lt;/</span>li</span><span>></span></span>
        <span><span><span>&lt;/</span>ul</span><span>></span></span>
        <span><span><span>&lt;</span>img</span> <span>src</span><span><span>=</span><span>"</span><span>"</span></span> <span>alt</span><span><span>=</span><span>"</span><span>"</span></span><span>></span></span>
    <span><span><span>&lt;/</span>span</span><span>></span></span>
<span><span><span>&lt;/</span>div</span><span>></span></span>

<span>&lt;!-- div>(span>img.className$[alt=imgName$])*3 --></span>
<span><span><span>&lt;</span>div</span><span>></span></span>
    <span><span><span>&lt;</span>span</span><span>></span></span>
        <span><span><span>&lt;</span>img</span> <span>src</span><span><span>=</span><span>"</span><span>"</span></span> <span>alt</span><span><span>=</span><span>"</span>imgName1<span>"</span></span> <span>class</span><span><span>=</span><span>"</span>className1<span>"</span></span><span>></span></span>
    <span><span><span>&lt;/</span>span</span><span>></span></span>
    <span><span><span>&lt;</span>span</span><span>></span></span>
        <span><span><span>&lt;</span>img</span> <span>src</span><span><span>=</span><span>"</span><span>"</span></span> <span>alt</span><span><span>=</span><span>"</span>imgName2<span>"</span></span> <span>class</span><span><span>=</span><span>"</span>className2<span>"</span></span><span>></span></span>
    <span><span><span>&lt;/</span>span</span><span>></span></span>
    <span><span><span>&lt;</span>span</span><span>></span></span>
        <span><span><span>&lt;</span>img</span> <span>src</span><span><span>=</span><span>"</span><span>"</span></span> <span>alt</span><span><span>=</span><span>"</span>imgName3<span>"</span></span> <span>class</span><span><span>=</span><span>"</span>className3<span>"</span></span><span>></span></span>
    <span><span><span>&lt;/</span>span</span><span>></span></span>
<span><span><span>&lt;/</span>div</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><h2 id="css-语法"> CSS 语法</h2>
<h3 id="属性快速拼写"> 属性快速拼写</h3>
<p>CSS 语法基本上都是一些常用属性键值的缩写，如：</p>
<ul>
<li><code>fwb</code> - <code>font-weight: bold</code></li>
<li><code>jcc</code> - <code>justify-content: center</code></li>
<li><code>poa</code> - <code>position: absolute</code></li>
</ul>
<p>一般来说，取完整属性的每一个单词的头一个字母，如果没有，尝试头两个字母即可。</p>
<h3 id="快速赋值"> 快速赋值</h3>
<p>还有一个常用可以跟数字以及单位的变量：</p>
<ul>
<li><code>w100</code>- <code>width: 100px</code></li>
<li><code>w100%</code> - <code>width: 100%</code></li>
<li><code>w100vw</code> - <code>width: 100vw</code></li>
<li><code>m10</code> - <code>margin: 10px</code></li>
<li><code>mt10</code> - <code>margin-top: 10px</code></li>
<li><code>m10m20m30pm20</code> - <code>margin: 10px 20px 30% 20px</code></li>
</ul>
<h3 id="对应的单位"> 对应的单位</h3>
<ul>
<li><code>p</code> - <code>%</code></li>
<li><code>e</code> - <code>em</code></li>
<li><code>x</code> - <code>ex</code></li>
</ul>
<p>如：<code>p10p</code> - <code>padding: 10%</code></p>
<h3 id="对应的颜色"> 对应的颜色</h3>
<ul>
<li><code>#1</code> - <code>#111111</code></li>
<li><code>#e0</code> - <code>#e0e0e0</code></li>
<li><code>#fc0</code> - <code>#ffcc00</code></li>
</ul>
<h3 id="important"> !important</h3>
<p><code>!</code> 可以在属性后面添加 <code>!important</code></p>
<ul>
<li><code>pb24!</code> - <code>padding-bottom: 24px !important</code></li>
</ul>
<h3 id="多属性同时生成"> 多属性同时生成</h3>
<p>支持多属性快速生成，通过 <code>+</code> 来实现：</p>
<ul>
<li>
<p><code>p10+m20</code>:</p>
<div><pre><code><span>padding</span><span>:</span> 10px<span>;</span>
<span>margin</span><span>:</span> 20px<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div></li>
<li>
<p><code>p!+m10e!</code>:</p>
<div><pre><code><span>padding</span><span>:</span>  <span>!important</span><span>;</span>
<span>margin</span><span>:</span> 10em <span>!important</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div></li>
</ul>
<h2 id="更多"> 更多</h2>
<p>更多内容，可以参考 <a href="https://docs.emmet.io/" target="_blank" rel="noopener noreferrer">官网</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>入门</title>
      <link>https://docs.jeremyjone.com/document/gantt/README_old/</link>
      <guid>https://docs.jeremyjone.com/document/gantt/README_old/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">入门</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="入门"> 入门</h1>
<Description author="jeremyjone" version="0.0.17" date="2020-12-22" copyright="jeremyjone" />
<p>通过入门的章节内容，可以快速引入并使用 JzGantt。</p>
<h2 id="安装"> 安装</h2>
<p>使用 <code>npm</code> 安装：</p>
<div><pre><code><span>npm</span> <span>install</span> jz-gantt --save
</code></pre>
<div><span>1</span><br></div></div><div><p>提示</p>
<p>因为处于完善阶段，请确保使用最新版本。</p>
</div>
<h2 id="引入"> 引入</h2>
<p>JzGantt 会被整体引入，引入的 Gantt 就是 JzGantt 的根组件。同时需要单独引入样式表，方式如下：</p>
<div><pre><code><span>import</span> Vue <span>from</span> <span>"vue"</span><span>;</span>
<span>import</span> Gantt <span>from</span> <span>"jz-gantt"</span><span>;</span>
<span>import</span> <span>"jz-gantt/lib/jz-gantt.css"</span><span>;</span>

Vue<span>.</span><span>use</span><span>(</span>Gantt<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id="使用"> 使用</h2>
<p>JzGantt 需要一个数组形式的数据对象。例如，您拥有如下数据：</p>
<div><pre><code><span>const</span> dataList <span>=</span> <span>[</span>
  <span>{</span>
    index<span>:</span> <span>1</span><span>,</span>
    startDate<span>:</span> <span>"2020-06-05"</span><span>,</span>
    endDate<span>:</span> <span>"2020-08-20"</span><span>,</span>
    ttt<span>:</span> <span>{</span>
      a<span>:</span> <span>"aaa"</span><span>,</span>
      b<span>:</span> <span>"bbb"</span>
    <span>}</span><span>,</span>
    name<span>:</span> <span>"mydata1"</span><span>,</span>
    children<span>:</span> <span>[</span><span>]</span>
  <span>}</span><span>,</span>
  <span>{</span>
    index<span>:</span> <span>2</span><span>,</span>
    startDate<span>:</span> <span>"2020-07-07"</span><span>,</span>
    endDate<span>:</span> <span>"2020-09-11"</span><span>,</span>
    ttt<span>:</span> <span>{</span><span>}</span><span>,</span>
    name<span>:</span> <span>"mydata2"</span><span>,</span>
    children<span>:</span> <span>[</span>
      <span>{</span>
        index<span>:</span> <span>3</span><span>,</span>
        startDate<span>:</span> <span>"2020-07-10"</span><span>,</span>
        endDate<span>:</span> <span>"2020-08-15"</span><span>,</span>
        ttt<span>:</span> <span>{</span>
          a<span>:</span> <span>"aaa"</span>
        <span>}</span><span>,</span>
        name<span>:</span> <span>"child1"</span><span>,</span>
        children<span>:</span> <span>[</span><span>]</span>
      <span>}</span>
    <span>]</span>
  <span>}</span>
<span>]</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br></div></div><p>那么只需要在 <code>html</code> 中简单的使用 JzGantt，即可创建一个甘特内容：</p>
<div><div><br><div>&nbsp;</div><br><br></div><pre><code><span><span><span>&lt;</span>j-gantt</span> <span>data-index</span><span><span>=</span><span>"</span>index<span>"</span></span> <span>&lt;!--</span> <span>请确保它存在</span> <span>--</span><span>></span></span>
  :data="dataList" />
<span><span><span>&lt;/</span>j-gantt</span><span>></span></span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>如上操作之后，您将看到：</p>
<img :src="$withBase('/assets/gantt/basic.png')" alt="basic">
<p>如果没有，请尝试重新操作。</p>
<p>如果它正常显示，请继续深入学习其他属性，以便更好的适应您的页面。</p>
<h2 id="支持-typescript"> 支持 TypeScript</h2>
<p>JGantt 已经有了完整的 TypeScript 类型声明文件，如果您需要，只需要在使用中通过：</p>
<div><pre><code><span>import</span> <span>{</span> JGantt<span>,</span> JGanttColumn<span>,</span> JGanttSlider <span>}</span> <span>from</span> <span>"jz-gantt"</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><p>按需导入即可。</p>
<h2 id="更新日志"> 更新日志</h2>
<div><p>提示</p>
<p>您可以跳过此内容以继续深入学习具体配置 JGantt。</p>
</div>
<h3 id="release-0-0-17"> Release 0.0.17</h3>
<ul>
<li>调整滑块移动的接口，现在它抛出了旧数据。</li>
</ul>
<h3 id="release-0-0-16"> Release 0.0.16</h3>
<ul>
<li>添加了一个方法 <code>setSelected</code>，用于设置一条选中的项。</li>
<li>修正了一些样式问题。</li>
</ul>
<h3 id="release-0-0-15"> Release 0.0.15</h3>
<ul>
<li>添加了一个 <code>settings</code> 的具名插槽，可以向设置抽屉插入自定义内容。</li>
<li>添加了一个 <code>dark</code> 属性，适配黑暗模式。</li>
<li>调整了表头的格式。</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>列组件 JGanttColumn</title>
      <link>https://docs.jeremyjone.com/document/gantt/column/</link>
      <guid>https://docs.jeremyjone.com/document/gantt/column/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">列组件 JGanttColumn</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="列组件-jganttcolumn"> 列组件 JGanttColumn</h1>
<Description author="jeremyjone" date="2020-10-12" copyright="jeremyjone" />
<p>因为我们在内部已经将其加载，所以您并不需要显示的再次导入到您的组件中就可以使用。</p>
<p>列组件会显示在甘特表的左侧，如果没有提供，则不显示任何列。</p>
<h2 id="基础使用"> 基础使用</h2>
<p>您只需要简单的将其插入到根组件内即可。</p>
<p>基于入门的示例，您可以直接这样使用：</p>
<div><div><br><br><br><div>&nbsp;</div><br><br></div><pre><code><span><span><span>&lt;</span>j-gantt</span>
    <span>data-index</span><span><span>=</span><span>"</span>index<span>"</span></span>
    <span>:data</span><span><span>=</span><span>"</span>dataList<span>"</span></span> <span>/></span></span>
    <span><span><span>&lt;</span>j-gantt-column</span> <span>label</span><span><span>=</span><span>"</span>index<span>"</span></span> <span>/></span></span>
<span><span><span>&lt;/</span>j-gantt</span><span>></span></span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>它将显示成如下内容：</p>
<img :src="$withBase('/assets/gantt/column-basic.png')" alt="column-basic">
<h2 id="属性"> 属性</h2>
<h3 id="center"> center <UpdateIcon v=0.0.8 /></h3>
<DataParameter t="Boolean" d="false" />
<p>可以控制当前列的内容居中，默认居左。</p>
<h3 id="date-format"> date-format</h3>
<DataParameter t="String" d="yyyy-MM-dd" />
<p>自定义显示日期的格式。如果列内需要显示日期，可以通过该属性来格式化日期。</p>
<div><p>请注意</p>
<p>值得注意的是，如果给出该字段，那么其数据内容一定会被当成日期来解析并且格式化，所以不要在非日期字段添加该属性。</p>
</div>
<p>更多关于日期格式化的属性，参看 <a href="/document/gantt/common.html#日期格式化属性">日期格式化属性</a></p>
<h3 id="empty-data"> empty-data</h3>
<DataParameter t="String" d="无数据 😢" />
<p>设置空数据时显示的内容。如果数据内容为空，则会显示空数据内容。</p>
<h3 id="label"> label* <i>Not supported content</i></h3>
<DataParameter r t="String" />
<p><code>label</code> 是一个必填属性，它应当对应您给出数据的某一个键名。</p>
<p>它将加载该字段数据的内容显示在列内容中，同时表头的名称默认也会显示为该 <code>label</code> 名称。当然，您可以通过设置  来自定义。</p>
<h3 id="merge"> merge</h3>
<DataParameter t="(data) => boolean | Boolean" d="false" />
<p>设置当前列是否需要与前一列合并。您可以给出一个 Boolean 值或者一个返回 Boolean 值的函数。</p>
<ul>
<li>函数允许您使用行内数据。</li>
</ul>
<div><pre><code><span>mergeFunc</span><span>:</span> <span>function</span><span>(</span><span>data</span><span>)</span> <span>{</span>
    <span>// your code</span>
    <span>return</span> <span>true</span><span>;</span> <span>// 请确保返回一个 Boolean 值。</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>这是一个很灵活的属性，如果设置为 <code>true</code>，则会与前一列进行合并，同时不显示当前列的内容。</p>
<p><strong>请注意</strong>，该字段对首列无效。</p>
<h3 id="name"> name</h3>
<DataParameter t="String" />
<p>设置该列表头的显示文本，如果没有，则会显示 <code>label</code> 的内容。它的优先级比 <code>label</code> 高。</p>
<h3 id="selectable"> selectable</h3>
<DataParameter t="Boolean" d="false" />
<p>设置当前列内容的文本是否可以选择，默认禁止选择。</p>
<h3 id="width"> width</h3>
<DataParameter t="Number | String" d="80" />
<p>设置该列的列宽。默认宽度 80，请保持宽度大于 30，否则会引起渲染异常。</p>
<h2 id="插槽"> 插槽</h2>
<p>列组件内部允许您插入任何内容，同时它会抛出当前行的数据以供您使用。</p>
<p>一个简单的示例：</p>
<div><pre><code><span><span><span>&lt;</span>j-gantt-column</span> <span>label</span><span><span>=</span><span>"</span>name<span>"</span></span><span>></span></span>
  <span><span><span>&lt;</span>template</span> <span>v-slot</span><span><span>=</span><span>"</span>data<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>div</span><span>></span></span>{{ data }}<span><span><span>&lt;/</span>div</span><span>></span></span>
  <span><span><span>&lt;/</span>template</span><span>></span></span>
<span><span><span>&lt;/</span>j-gantt-column</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>接下来，您将继续学习滑块组件的内容。</p>
]]></content:encoded>
    </item>
    <item>
      <title>通用方法</title>
      <link>https://docs.jeremyjone.com/document/gantt/common/</link>
      <guid>https://docs.jeremyjone.com/document/gantt/common/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">通用方法</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="通用方法"> 通用方法</h1>
<h2 id="日期格式化属性"> 日期格式化属性</h2>
<p>在甘特表的属性中，可以通过给定一个格式化字符串来获取指定格式的日期内容，它的全部参数如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">fotmat</th>
<th style="text-align:center">description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">y</td>
<td style="text-align:center">年</td>
</tr>
<tr>
<td style="text-align:center">q</td>
<td style="text-align:center">季度</td>
</tr>
<tr>
<td style="text-align:center">M</td>
<td style="text-align:center">月</td>
</tr>
<tr>
<td style="text-align:center">d</td>
<td style="text-align:center">日</td>
</tr>
<tr>
<td style="text-align:center">H</td>
<td style="text-align:center">时</td>
</tr>
<tr>
<td style="text-align:center">m</td>
<td style="text-align:center">分</td>
</tr>
<tr>
<td style="text-align:center">s</td>
<td style="text-align:center">秒</td>
</tr>
<tr>
<td style="text-align:center">S</td>
<td style="text-align:center">毫秒</td>
</tr>
</tbody>
</table>
]]></content:encoded>
    </item>
    <item>
      <title>根组件 JGantt</title>
      <link>https://docs.jeremyjone.com/document/gantt/root/</link>
      <guid>https://docs.jeremyjone.com/document/gantt/root/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">根组件 JGantt</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="根组件-jgantt"> 根组件 JGantt</h1>
<Description author="jeremyjone" date="2020-12-02" copyright="jeremyjone" />
<p>对于 <code>JGantt</code> 组件，它具有非常丰富的属性。</p>
<h2 id="数据"> 数据</h2>
<h3 id="data"> data</h3>
<DataParameter t="Array" d="[]" />
<p>数据源，接收数组类型，同时数组中的每一个对象都应当包含 <code>index</code>, <code>startDate</code>, <code>endDate</code> 和 <code>children</code> 这些键，确保正确显示数据内容。</p>
<div><p>提示</p>
<ul>
<li><code>index</code> 确保数据的唯一性，它应对于所有数据全局唯一的</li>
<li><code>children</code> 可以使数据层级嵌套，如果没有子集，只需要置空即可</li>
<li><code>startDate</code> 可以在甘特图中正确渲染数据的起始日期</li>
<li><code>endDate</code> 可以在甘特图中正确渲染数据的截止日期</li>
</ul>
</div>
<div><p>数据的更新和限制</p>
<p>由于Vue的限制，<code>Array</code> 类型和 <code>Object</code> 类型不会自动监听到子层级，这导致当您修改子级内容时不会更新视图。</p>
<ul>
<li>您可以使用 <code>vm.$set()</code> 的方式。</li>
<li><strong>推荐</strong>：我们建议您可以直接修改子集内容时，在最后重新给 <code>data</code> 赋值即可。</li>
</ul>
<p>即：</p>
<div><pre><code><span>// 添加数据</span>
<span>this</span><span>.</span>data<span>[</span><span>0</span><span>]</span><span>.</span>children<span>.</span><span>push</span><span>(</span>somedata<span>)</span><span>;</span>

<span>// 最后重新赋值，以确保数据更新</span>
<span>this</span><span>.</span>data <span>=</span> <span>[</span><span>...</span><span>this</span><span>.</span>data<span>]</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>这样的方式适用于所有针对层级数据的<strong>增、删、改</strong>，同时您并不需要担心所有数据都会重新渲染。在 JGantt 内部，我们会检查数据的变动，确保只更新有更改的内容。</p>
<p>当然，如果是修改顶层内容时，可以直接修改而不需要重新赋值，不用担心会出现上面的情况。</p>
</div>
<h3 id="data-index"> data-index* <i>Not supported content</i></h3>
<DataParameter r t="String" />
<p>数据的全局唯一键，它应当是数据中的某一个键名，通常它会是 <code>index</code>。如果它不是全局唯一的，则会引起渲染错误。</p>
<div><p>提示</p>
<p>这也是我们建议在 <code>data</code> 中确保有一个 <code>index</code> 字段的具体作用。您也可以使用其他自定义字段，只需要匹配即可。</p>
</div>
<h3 id="end-key"> end-key</h3>
<DataParameter t="String" d="endDate" />
<p>它对应数据中起始日期的键，默认值为 <code>startDate</code>。如果找不到，则不会渲染甘特图中的内容。</p>
<h3 id="expand-all"> expand-all</h3>
<DataParameter t="Boolean" d="true" />
<p>是否展开所有数据，默认为展开。如果设置为 <code>false</code>，则只会渲染首层数据。</p>
<p><strong>请注意</strong>，当且仅当属性  为真时，该属性才会生效，否则所有数据一定会被全部展开渲染。</p>
<h3 id="start-key"> start-key</h3>
<DataParameter t="String" d="startDate" />
<p>它对应数据中起始日期的键，默认值为 <code>startDate</code>。如果找不到，则不会渲染甘特图中的内容。</p>
<h2 id="样式"> 样式</h2>
<h3 id="body-style"> body-style</h3>
<DataParameter t="Object" d="{}" />
<p>用于配置甘特图内容区域的样式。它接收固定参数，用于改变其中的样式。</p>
<div><p>请注意</p>
<p><code>Object</code> 中的键应当区分大小写，这与 html 的参数方式不太一样。</p>
</div>
<h4 id="bgcolor"> bgColor</h4>
<DataParameter t="String" d="white" />
<p>设置整体内容区域的背景颜色，默认为白色。</p>
<p>它接收任意颜色参数，包括符合 html 规范的颜色英文，16 进制颜色描述（<strong>注意 <code>#</code> 符号不可缺少</strong>），或者 <code>rgb()</code> 样式的内容，它只要是字符串格式即可。</p>
<h4 id="bordercolor"> borderColor</h4>
<DataParameter t="String" d="lightgrey" />
<p>设置整体内容区域内部的边框颜色，它只负责例如表格中间的边框、甘特区域的每日分割线等边框颜色。</p>
<p>它接收任意颜色参数，包括符合 html 规范的颜色英文，16 进制颜色描述（<strong>注意 <code>#</code> 符号不可缺少</strong>），或者 <code>rgb()</code> 样式的内容，它只要是字符串格式即可。</p>
<h4 id="hovercolor"> hoverColor <UpdateIcon v=0.0.7 /></h4>
<DataParameter t="String" d="#ccc" />
<p>设置悬停行颜色。接收一个HEX颜色值，英文无效。</p>
<h4 id="selectcolor"> selectColor <UpdateIcon v=0.0.7 /></h4>
<DataParameter t="String" d="#123456" />
<p>设置悬停行颜色。接收一个HEX颜色值，英文无效。</p>
<h4 id="textcolor"> textColor</h4>
<DataParameter t="String" d="black" />
<p>设置整体内容区域的文本颜色。</p>
<p>它接收任意颜色参数，包括符合 html 规范的颜色英文，16 进制颜色描述（<strong>注意 <code>#</code> 符号不可缺少</strong>），或者 <code>rgb()</code> 样式的内容，它只要是字符串格式即可。</p>
<h4 id="todaycolor"> todayColor</h4>
<DataParameter t="String" d="lightblue" />
<p>设置 <code>今日</code> 时间线的背景颜色。</p>
<p>它接收任意颜色参数，包括符合 html 规范的颜色英文，16 进制颜色描述（<strong>注意 <code>#</code> 符号不可缺少</strong>），或者 <code>rgb()</code> 样式的内容，它只要是字符串格式即可。</p>
<h4 id="weekendcolor"> weekendColor</h4>
<DataParameter t="String" d="lightgrey" />
<p>设置 <code>周末</code> 时间线的背景颜色。</p>
<p>它接收任意颜色参数，包括符合 html 规范的颜色英文，16 进制颜色描述（<strong>注意 <code>#</code> 符号不可缺少</strong>），或者 <code>rgb()</code> 样式的内容，它只要是字符串格式即可。</p>
<h3 id="border"> border</h3>
<DataParameter t="Number" d="1" />
<p>是否显示甘特表整体的边框，默认为 1，0 为不显示。</p>
<h3 id="dark"> dark <UpdateIcon v=0.0.15 /></h3>
<DataParameter t="Boolean" d="false" />
<p>黑暗模式，它会修改页面的背景颜色、文字颜色和边框颜色。</p>
<div><p>请注意</p>
<p>它是默认属性，只会调整默认值。如果您设置了自定义的样式，该方案则不会生效。</p>
</div>
<h3 id="header-height"> header-height</h3>
<DataParameter t="Number | String" d="100" />
<p>设置表头的高度，它的范围应该至少大于 <code>30</code>，否则会引起渲染异常。</p>
<h3 id="header-style"> header-style</h3>
<DataParameter t="Object" d="{}" />
<p>用于配置甘特表头的样式。它接收固定参数，用于改变其中的样式。</p>
<div><p>请注意</p>
<p><code>Object</code> 中的键应当区分大小写，这与 html 的参数方式不太一样。</p>
</div>
<h4 id="bgcolor-2"> bgColor</h4>
<DataParameter t="String" d="grey" />
<p>设置表头的背景颜色，默认为灰色。</p>
<p>它接收任意颜色参数，包括符合 html 规范的颜色英文，16 进制颜色描述（<strong>注意 <code>#</code> 符号不可缺少</strong>），或者 <code>rgb()</code> 样式的内容，它只要是字符串格式即可。</p>
<h4 id="bordercolor-2"> borderColor</h4>
<DataParameter t="String" d="black" />
<p>设置表头的边框颜色，包括中间的分割线。</p>
<p>它接收任意颜色参数，包括符合 html 规范的颜色英文，16 进制颜色描述（<strong>注意 <code>#</code> 符号不可缺少</strong>），或者 <code>rgb()</code> 样式的内容，它只要是字符串格式即可。</p>
<h4 id="textcolor-2"> textColor</h4>
<DataParameter t="String" d="black" />
<p>设置表头的文本颜色。</p>
<p>它接收任意颜色参数，包括符合 html 规范的颜色英文，16 进制颜色描述（<strong>注意 <code>#</code> 符号不可缺少</strong>），或者 <code>rgb()</code> 样式的内容，它只要是字符串格式即可。</p>
<h3 id="gantt-column-width"> gantt-column-width</h3>
<DataParameter t="Number | String" d="15" />
<p>设置甘特图中每一列日期的列宽，默认为 <code>15</code>，最小值 <code>15</code>，最大值 <code>100</code>，应当确保给定的数字在这个区间范围，否则会引起渲染错误。</p>
<h3 id="level-color"> level-color</h3>
<DataParameter t="Array" d="[]" />
<p>设置每一层级数据的颜色，默认随背景颜色。</p>
<p>这是一个有意思的设置。因为数据可以是树形结构，所以为了更好的区分树形数据内容，您可以为不同层级的数据内容增加不同颜色。</p>
<p>在渲染时，对应层级的数据会在该数组中查找对应的背景颜色，如果存在，那么就会渲染，否则渲染普通背景颜色。</p>
<div><p>提示</p>
<p>例如，您的数据有 3 层，那么您可以传入一个长度为 3 的数组，内容是文本颜色，它接收任意颜色参数，包括符合 html 规范的所有颜色，包括 16 进制颜色等。</p>
<p>当然，您也可以只传入长度为 1 的数组，那么甘特表只会渲染顶层层级数据的背景颜色。</p>
</div>
<h3 id="row-height"> row-height</h3>
<DataParameter t="Number | String" d="30" />
<p>设置内容区域的行高。默认值为 <code>30</code>， 最小值 <code>20</code>，最大值 70`。应当确保给定的数字再这个区间范围，否则会引起渲染错误。</p>
<h3 id="show-checkbox"> show-checkbox</h3>
<DataParameter t="Boolean" d="false" />
<p>设置是否显示复选框，这个对于多选很有用。当复选框可用时，点击会抛出  事件。</p>
<h3 id="show-expand"> show-expand</h3>
<DataParameter t="Boolean" d="true" />
<p>设置是否显示展开数据按钮。默认为 <code>true</code>，如果给出 <code>false</code>，那么展开按钮不可用，同时所有数据会全部展开，同时  属性会失效。</p>
<div><p>建议</p>
<p>通常情况下，您不用设置这两个属性，因为它们已经处于使用的状态。除非您不希望展开功能，设置 <code>show-expand</code> 为 <code>false</code> 即可。</p>
</div>
<h3 id="show-today"> show-today</h3>
<DataParameter t="Boolean" d="true" />
<p>设置是否显示甘特图中的 <code>今日</code> 时间线。</p>
<h3 id="show-weekend"> show-weekend</h3>
<DataParameter t="Boolean" d="true" />
<p>设置是否显示甘特图中的 <code>周末</code> 时间线。</p>
<h2 id="事件"> 事件</h2>
<h3 id="no-today-error"> no-today-error</h3>
<DataParameter f="@no-today-error -> function()" />
<p>点击 <code>跳转到今日</code> 按钮时，<code>今日</code> 不在当前甘特范围内所触发的异常，可以接收该异常并自定义后续事件。</p>
<h3 id="move-slider"> move-slider</h3>
<DataParameter f="@move-slider -> function(data)" />
<ul>
<li>data: 更新后的数据内容，Object</li>
</ul>
<p>移动甘特行滑块后的事件。</p>
<h3 id="row-checked"> row-checked</h3>
<DataParameter f="@row-checked -> function(state, data)" />
<ul>
<li>state: 选中状态，true | false</li>
<li>data: 选中的数据内容，Object</li>
</ul>
<p>选择复选框时触发的事件。</p>
<h3 id="row-click"> row-click</h3>
<DataParameter f="@row-click -> function(data)" />
<ul>
<li>data: 行数据内容，Object | null</li>
</ul>
<p>单击行元素时触发的事件。</p>
<div><p>提示</p>
<p>当您选择了一行内容，并且在外部更新了数据，使得该条数据被删除，则会触发一个选择 <code>null</code> 的事件。</p>
<p>这样做的好处是您不必担心在外部再次调用该无效内容。</p>
</div>
<h3 id="row-dbl-click"> row-dbl-click</h3>
<DataParameter f="@dbl-click -> function(data)" />
<ul>
<li>data: 行数据内容，Object</li>
</ul>
<p>双击行元素时触发的事件。</p>
<h2 id="方法"> 方法</h2>
<h3 id="setselected"> setSelected <UpdateIcon v=0.0.16 /></h3>
<DataParameter f="setSelected: (data: any) => void" />
<p>允许向组件设置选择项，它会渲染该项内容为已选择状态。</p>
<div><p>提示</p>
<p>参数 <code>data</code> 应该是数据列表中的某一个元素。</p>
</div>
<h2 id="插槽"> 插槽</h2>
<p>根组件不支持插入默认内容，它仅仅支持如下的具名插槽或者我们提供的子组件。</p>
<h3 id="settings"> settings <UpdateIcon v=0.0.15 /></h3>
<p><em>我不知道这个插槽是否真正需要，但还是把它添加了。</em></p>
<p>这个插槽会允许您在设置抽屉中添加任意内容。</p>
<p>使用方式：</p>
<div><pre><code><span><span><span>&lt;</span>template</span> <span><span>v-slot:</span>settings</span><span>></span></span>
  <span><span><span>&lt;</span>div</span><span>></span></span>
    <span>&lt;!-- any element --></span>
  <span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;/</span>template</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id="列组件"> 列组件</h3>
<p>参见 <a href="./column.html">列组件</a></p>
<h3 id="滑块组件"> 滑块组件</h3>
<p>参见 <a href="./slider.html">滑块组件</a></p>
<hr />
<p>接下来，您将深入学习使用这两个组件。</p>
]]></content:encoded>
    </item>
    <item>
      <title>滑块组件 JGanttSlider</title>
      <link>https://docs.jeremyjone.com/document/gantt/slider/</link>
      <guid>https://docs.jeremyjone.com/document/gantt/slider/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">滑块组件 JGanttSlider</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="滑块组件-jganttslider"> 滑块组件 JGanttSlider</h1>
<Description author="jeremyjone" date="2020-11-05" copyright="jeremyjone" />
<p>因为我们在内部已经将其加载，所以您并不需要显示的再次导入到您的组件中就可以使用。</p>
<p>滑块组件将允许您自定义甘特图中每一行的滑块内容。</p>
<div><p>请注意</p>
<p>在使用之前，您需要注意，甘特图内部只接收一个滑块组件。也就是说，无论您在组件任何位置插入了滑块组件，其内部都只会渲染最后插入的那个滑块组件。</p>
<p>注意，是最后插入的那个。</p>
</div>
<h2 id="基础使用"> 基础使用</h2>
<p>您只需要简单的将其插入到根组件内即可。</p>
<p>基于入门的示例，您现在应该拥有一个列，那么您可以继续这样使用：</p>
<div><div><br><br><br><br><div>&nbsp;</div><br><br></div><pre><code><span><span><span>&lt;</span>j-gantt</span>
    <span>data-index</span><span><span>=</span><span>"</span>index<span>"</span></span>
    <span>:data</span><span><span>=</span><span>"</span>dataList<span>"</span></span> <span>/></span></span>
    <span><span><span>&lt;</span>j-gantt-column</span> <span>label</span><span><span>=</span><span>"</span>index<span>"</span></span> <span>/></span></span>
    <span><span><span>&lt;</span>j-gantt-slider</span> <span>bg-color</span><span><span>=</span><span>"</span>orange<span>"</span></span> <span>/></span></span>
<span><span><span>&lt;/</span>j-gantt</span><span>></span></span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>为了与原始内容进行区分，我在属性中添加了背景颜色，请注意，它并不是必须的。</p>
<p>它将显示成如下内容：</p>
<img :src="$withBase('/assets/gantt/slider-basic.png')" alt="slider-basic">
<h2 id="属性"> 属性</h2>
<h3 id="alignment"> alignment</h3>
<DataParameter t="String" d="left" />
<p>设置内容对齐方式。接收字符串：<code>left</code>、<code>center</code> 或 <code>right</code>。</p>
<h3 id="bg-color"> bg-color</h3>
<DataParameter t="String" d="lightgreen" />
<p>设置滑块组件的背景颜色。</p>
<p>在基础示例中，已经使用了该属性，可以看到滑块的整体背景色都产生了变化。</p>
<h3 id="date-format"> date-format</h3>
<DataParameter t="String" d="yyyy-MM-dd" />
<p>自定义显示日期的格式。如果滑块内需要显示日期，可以通过该属性来格式化日期。</p>
<div><p>请注意</p>
<p>值得注意的是，如果给出该字段，那么其数据的起始日期和结束日期都将按照该格式进行格式化后再被展示。</p>
</div>
<p>更多关于日期格式化的属性，参看 <a href="/document/gantt/common.html#日期格式化属性">日期格式化属性</a></p>
<h3 id="empty-data"> empty-data</h3>
<DataParameter t="String" d="无数据 😢" />
<p>设置空数据时显示的内容。如果数据内容为空，则会显示空数据内容。</p>
<h3 id="flat"> flat</h3>
<DataParameter t="Boolean" d="false" />
<p>设置滑块样式是否扁平化。</p>
<h3 id="label"> label</h3>
<DataParameter t="String" />
<p>设置需要显示的内容字段。默认没有该属性情况下显示默认数据，即 <code>empty-data</code> 字段内容。</p>
<p>如果您提供了插槽内容，则无论您是否提供了 <code>label</code> 属性，都将用插槽的内容进行替换。更多信息请查看  。</p>
<h3 id="linked-resize"> linked-resize</h3>
<DataParameter t="Boolean" d="false" />
<p>设置滑块组件移动时，其父、子数据内容是否跟随改变。当启用该属性后，无论您使用  、  还是  ，都将遵循 <code>联动规则</code>。</p>
<p><strong>联动规则</strong>：确保子级数据不会超越父级数据的时间范围，同时父级数据不会小于子级数据的时间范围。</p>
<div><p>注意</p>
<p>在数据量很大的情况下，启用该属性可能会消耗大量资源。</p>
</div>
<h3 id="move"> move</h3>
<DataParameter t="Boolean" d="false" />
<p>设置滑块组件是否可以被拖动，默认不可用。</p>
<p>如果设置了 <code>true</code>，则意味着滑块可以被任意拖动。当拖动结束时，会抛出 <a href="/document/gantt/root.html#move-slider"><code>move-slider</code></a> 事件。</p>
<h3 id="resize-left"> resize-left</h3>
<DataParameter t="Boolean" d="false" />
<p>设置滑块组件左侧是否可以被拉伸，默认不可用。</p>
<p>该属性单独设置左侧是否可以被拖动，这意味着滑块可以单独修改起始时间。当拖动结束时，会抛出 <a href="/document/gantt/root.html#move-slider"><code>move-slider</code></a> 事件。</p>
<h3 id="resize-right"> resize-right</h3>
<DataParameter t="Boolean" d="false" />
<p>设置滑块组件右侧是否可以被拉伸，默认不可用。</p>
<p>该属性单独设置右侧是否可以被拖动，这意味着滑块可以单独修改起始时间。当拖动结束时，会抛出 <a href="/document/gantt/root.html#move-slider"><code>move-slider</code></a> 事件。</p>
<h2 id="插槽"> 插槽</h2>
<h3 id="default"> default</h3>
<p>滑块组件内部允许您插入任何内容，它将向滑块内注入您提供的所有模板内容。同时它会抛出当前行的数据以供您使用。</p>
<p>一个简单的示例：</p>
<div><pre><code><span><span><span>&lt;</span>j-gantt-slider</span>
  <span>flat</span>
  <span>bg-color</span><span><span>=</span><span>"</span>orange<span>"</span></span>
  <span>:move</span><span><span>=</span><span>"</span>true<span>"</span></span>
  <span>:linked-resize</span><span><span>=</span><span>"</span>true<span>"</span></span>
<span>></span></span>
  <span><span><span>&lt;</span>template</span> <span>v-slot</span><span><span>=</span><span>"</span>data<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>div</span><span>></span></span>{{ data.name }}<span><span><span>&lt;/</span>div</span><span>></span></span>
  <span><span><span>&lt;/</span>template</span><span>></span></span>
<span><span><span>&lt;/</span>j-gantt-slider</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><div><p>提示</p>
<p><code>default</code> 插槽会包含一定样式，如果您想尝试完全替换现有的滑块内容，那么下面的内容将会更适合。</p>
</div>
<h3 id="content"> content <UpdateIcon v=0.0.13 /></h3>
<p>有时候，您可能需要重新定义滑块样式，那么这个插槽一定适合您。它会使用您提供的插槽元素来替换默认的滑块元素，而不是向默认滑块内部插入内容。</p>
<p>一个简单的示例：</p>
<div><pre><code><span><span><span>&lt;</span>JGanttSlider</span>
  <span>flat</span>
  <span>label</span><span><span>=</span><span>"</span>startDate<span>"</span></span>
  <span>bg-color</span><span><span>=</span><span>"</span>orange<span>"</span></span>
<span>></span></span>
  <span><span><span>&lt;</span>template</span> <span><span>v-slot:</span>content</span><span><span>=</span><span>"</span>data<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>div</span>
      <span><span>style</span><span><span>=</span><span>"</span><span><span>background-color</span><span>:</span> #123456<span>;</span><span>display</span><span>:</span> flex<span>;</span><span>justify-content</span><span>:</span> center<span>;</span><span>height</span><span>:</span>5px</span><span>"</span></span></span>
    <span>></span></span>
      {{ data.name }} - {{ data.index }}
    <span><span><span>&lt;/</span>div</span><span>></span></span>
  <span><span><span>&lt;/</span>template</span><span>></span></span>
<span><span><span>&lt;/</span>JGanttSlider</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h3 id="left"> left <UpdateIcon v=0.0.13 /></h3>
<p>当您重新定义了滑块的样式，那么侧边的滑动块一定也不符合现有的需求，所以我们提供了重载左右滑动块的插槽。通常情况下，它与 <code>content</code> 应该配套使用。</p>
<p>一个简单的示例：</p>
<div><pre><code><span><span><span>&lt;</span>JGanttSlider</span>
  <span>flat</span>
  <span>label</span><span><span>=</span><span>"</span>startDate<span>"</span></span>
  <span>bg-color</span><span><span>=</span><span>"</span>orange<span>"</span></span>
  <span>:move</span><span><span>=</span><span>"</span>true<span>"</span></span>
  <span>:resize-left</span><span><span>=</span><span>"</span>true<span>"</span></span>
  <span>:resize-right</span><span><span>=</span><span>"</span>true<span>"</span></span>
  <span>:linked-resize</span><span><span>=</span><span>"</span>true<span>"</span></span>
<span>></span></span>
  <span><span><span>&lt;</span>template</span> <span><span>v-slot:</span>content</span><span><span>=</span><span>"</span>data<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>div</span>
      <span><span>style</span><span><span>=</span><span>"</span><span><span>background-color</span><span>:</span> #123456<span>;</span><span>display</span><span>:</span> flex<span>;</span><span>justify-content</span><span>:</span> center<span>;</span><span>height</span><span>:</span>5px</span><span>"</span></span></span>
    <span>></span></span>
      {{ data.name }} - {{ data.index }}
    <span><span><span>&lt;/</span>div</span><span>></span></span>
  <span><span><span>&lt;/</span>template</span><span>></span></span>

  <span><span><span>&lt;</span>template</span> <span><span>v-slot:</span>left</span><span>></span></span>
    <span><span><span>&lt;</span>div</span> <span><span>style</span><span><span>=</span><span>"</span><span><span>background-color</span><span>:</span>#123456<span>;</span><span>width</span><span>:</span>5px<span>;</span><span>height</span><span>:</span>10px</span><span>"</span></span></span> <span>/></span></span>
  <span><span><span>&lt;/</span>template</span><span>></span></span>

  <span><span><span>&lt;</span>template</span> <span><span>v-slot:</span>right</span><span>></span></span>
    <span><span><span>&lt;</span>div</span> <span><span>style</span><span><span>=</span><span>"</span><span><span>background-color</span><span>:</span>#123456<span>;</span><span>width</span><span>:</span>5px<span>;</span><span>height</span><span>:</span>10px</span><span>"</span></span></span> <span>/></span></span>
  <span><span><span>&lt;/</span>template</span><span>></span></span>
<span><span><span>&lt;/</span>JGanttSlider</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><h3 id="right"> right <UpdateIcon v=0.0.13 /></h3>
<p>它的功能与 <code>left</code> 插槽一致，仅仅是将 <code>left</code> 更换为 <code>right</code> 即可，参数与功能完全一致，不再赘述。</p>
<p>上述示例的效果如下：</p>
<img :src="$withBase('/assets/gantt/slider-content.png')" alt="slider-content">
<p>恭喜您，您现在已经可以完全自定义属于您的甘特图组件了。</p>
]]></content:encoded>
    </item>
    <item>
      <title>GIT 命令</title>
      <link>https://docs.jeremyjone.com/document/git/</link>
      <guid>https://docs.jeremyjone.com/document/git/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">GIT 命令</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="git-命令"> GIT 命令</h1>
<h2 id="安装"> 安装</h2>
<ul>
<li>
<h3 id="linux"> Linux</h3>
<ul>
<li>
<p>Linux 下</p>
<div><pre><code><span># ubuntu</span>
<span>sudo</span> <span>apt-get</span> <span>install</span> <span>git</span>

<span># centos</span>
yum <span>install</span> -y <span>git</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div></li>
<li>
<p>老一点的 Debian 或 Ubuntu Linux，要把命令改为</p>
<p>sudo apt-get install git-core</p>
</li>
</ul>
</li>
<li>
<h3 id="windows"> Windows</h3>
<ul>
<li>在 Windows 上使用 Git，可以从 Git 官网直接<a href="https://git-scm.com/downloads" target="_blank" rel="noopener noreferrer">下载安装程序</a>，然后按默认选项安装即可。安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就说明 Git 安装成功！</li>
</ul>
<img :src="$withBase('/assets/pic/bash.png')" alt="git bash">
</li>
<li>
<h3 id="mac-os-x"> Mac OS X</h3>
<ul>
<li>
<p>一是安装 homebrew，然后通过 homebrew 安装 Git，具体方法请参考 homebrew 的文档：<a href="http://brew.sh/" target="_blank" rel="noopener noreferrer">http://brew.sh/</a>。</p>
</li>
<li>
<p>第二种方法更简单，也是推荐的方法，就是直接从 AppStore 安装 Xcode，Xcode 集成了 Git，不过默认没有安装，你需要运行 Xcode，选择菜单“Xcode”-&gt;“Preferences”，在弹出窗口中找到“Downloads”，选择“Command Line Tools”，点“Install”就可以完成安装了。</p>
</li>
</ul>
</li>
</ul>
<p>安装完成后，可以在 shell 或 bash 中查看 git</p>
<div><pre><code><span>git</span> --version
</code></pre>
<div><span>1</span><br></div></div><p>显示当前安装的 git 版本信息，说明已经安装成功了。</p>
<h2 id="配置"> 配置</h2>
<ul>
<li>提交名字</li>
</ul>
<div><pre><code><span># 全局</span>
<span>git</span> config --global user.name <span>"yourname"</span>

<span># 当前仓库</span>
<span>git</span> config user.name <span>"yourname"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ul>
<li>提交邮箱</li>
</ul>
<div><pre><code><span># 全局</span>
<span>git</span> config --global user.email <span>"yourname@example.com"</span>

<span># 当前仓库</span>
<span>git</span> config user.email <span>"yourname@example.com"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ul>
<li>
<p>创建 SSH</p>
<div><pre><code>ssh-keygen -t rsa -C <span>"youremail@example.com"</span>
</code></pre>
<div><span>1</span><br></div></div></li>
<li>
<p>将新生成的 SSH 全部拷贝并添加到远程仓库的相应设置中。</p>
</li>
</ul>
<h3 id="多用户行为"> 多用户行为</h3>
<p>在配置全局 <code>--global</code> 用户之后，我们默认与远程仓库的联系都是该用户。如果我们需要通过其他账户进行远程操作，则可以变更远程仓库路径的办法。</p>
<ul>
<li>只是在域名前面加上用户名和 <code>token</code> 即可：</li>
</ul>
<div><pre><code><span># 之前的路径</span>
https://github.com/<span>&lt;</span>username<span>></span>/<span>&lt;</span>repository_name<span>></span>.git

<span># 那么现在天上用户名即可</span>
https://<span>&lt;</span>username<span>></span>:<span>&lt;</span>personal_access_token<span>></span>@github.com/<span>&lt;</span>username<span>></span>/<span>&lt;</span>repository_name<span>></span>.git
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ul>
<li>如果不希望 <code>git</code> 保存我们的 <code>token</code>，则可以只填用户名：</li>
</ul>
<div><pre><code>https://<span>&lt;</span>username<span>></span>@github.com/<span>&lt;</span>username<span>></span>/<span>&lt;</span>repository_name<span>></span>.git
</code></pre>
<div><span>1</span><br></div></div><p>之后会要求输入 <s>密码</s> 或 <code>token</code>。</p>
<div><p>注意</p>
<p><strong>密码</strong> 不再是认证方式之一。</p>
</div>
<div><p>提示</p>
<p><code>token</code> 需要在 <a href="https://github.com/settings/tokens" target="_blank" rel="noopener noreferrer">https://github.com/settings/tokens</a> 中申请。</p>
<p>填写一个描述（Note），选择有效时间，最后选择域（scopes）即可，通常选择第一个 <code>repo</code> 即可，点击 <code>生成 token</code>。</p>
<p>页面会显示一个 <code>token</code> 字串，保存它，它就是每次需要填写的内容，该字串只显示一次，后续看不到它。</p>
<img :src="$withBase('/assets/pic/generate-token.png')" alt="">
</div>
<h2 id="使用"> 使用</h2>
<h3 id="初始化本地仓库"> 初始化本地仓库</h3>
<div><pre><code><span>git</span> init
</code></pre>
<div><span>1</span><br></div></div><h3 id="帮助"> 帮助</h3>
<p><code>git</code> 提供了完整的帮助，可以通过 <code>--help</code> 命令来查看。同时，在任何命令下使用 <code>--help</code> 就会显示当前命令的帮助文档。</p>
<div><pre><code><span>git</span> --help  <span># 会列出所有可用的命令</span>

<span>git</span> <span>add</span> --help  <span># 会打开关于 add 命令的帮助</span>

<span>git</span> log --help  <span># 会打开关于 log 命令的帮助</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id="git-的流程"> Git 的流程</h3>
<p>Git 分成 <code>local（本地）</code>、<code>staged（暂存区）</code> 以及 <code>Git（仓库）</code>，另外还包括 <code>远程仓库（Remote）</code>，如 GitHub 等。</p>
<p>它的操作流程如下：</p>
<img :src="$withBase('/assets/pic/git-flow.png')" alt="">
<h2 id="提交"> 提交</h2>
<h3 id="添加到暂存区"> 添加到暂存区</h3>
<ul>
<li>
<p>存放指定文件</p>
<div><pre><code><span>git</span> <span>add</span> <span>&lt;</span>filename<span>></span>

<span># 支持多个文件</span>
<span>git</span> <span>add</span> <span>&lt;</span>filename<span><span>1</span>></span> <span>&lt;</span>filename<span><span>2</span>></span> <span>[</span><span>..</span>.<span>]</span>

<span># 支持通配符，比如添加所有 js 文件</span>
<span>git</span> <span>add</span> *.js
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div></li>
<li>
<p>将所有文件的修改、新建添加到暂存区</p>
<p>该命令可以将所有内容都添加到暂存区</p>
<div><pre><code><span>git</span> <span>add</span> -A
<span># 或者</span>
<span>git</span> <span>add</span> --all
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>该命令只能够添加当前目录或者子目录的文件</p>
<div><pre><code><span>git</span> <span>add</span> <span>.</span> <span># 注意 add 后面的一个点，它表示所有文件</span>
</code></pre>
<div><span>1</span><br></div></div></li>
<li>
<p>将文件的修改、删除添加到暂存区</p>
<div><pre><code><span>git</span> <span>add</span> -u
</code></pre>
<div><span>1</span><br></div></div></li>
</ul>
<h3 id="取消暂存区文件"> 取消暂存区文件</h3>
<p>该命令会将暂存区的文件回退到工作区，并不会改变文件内容，如果需要重新添加到咱群去，只需要重新执行 <code>git add</code> 命令即可。</p>
<div><pre><code><span>git</span> reset HEAD  <span># 取消全部文件</span>

<span>git</span> reset HEAD <span>&lt;</span>filename<span>></span>  <span># 取消指定文件</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id="删除文件"> 删除文件</h3>
<p>如果文件还没有提交，可以通过 <code>.gitignore</code> 文件来忽略它。</p>
<p>但是如果文件已经纳入管理，那么需要删除它：</p>
<ul>
<li>
<p>文件不再纳入版本管理，同时删除本地文件</p>
<div><pre><code><span>git</span> <span>rm</span> filename
</code></pre>
<div><span>1</span><br></div></div></li>
<li>
<p>文件不再纳入版本管理，同时保留本地文件</p>
<div><pre><code><span>git</span> <span>rm</span> --cached filename
</code></pre>
<div><span>1</span><br></div></div></li>
</ul>
<h3 id="暂存工作现场"> 暂存工作现场</h3>
<p>将所有未提交的更改保存到本地，并隐藏它们，回退到当前分支的提交状态，通常是 <code>HEAD</code>。</p>
<div><pre><code><span>git</span> stash

<span># 不跟参数等同于</span>
<span>git</span> stash push
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id="查看工作现场"> 查看工作现场</h3>
<p>查看已保存的工作现场列表，可以获取到工作现场的索引：</p>
<div><pre><code><span>git</span> stash list
</code></pre>
<div><span>1</span><br></div></div><img :src="$withBase('/assets/pic/stash_index.png')" alt="">
<h3 id="恢复工作现场"> 恢复工作现场</h3>
<ul>
<li>恢复最近一次保存的工作现场</li>
</ul>
<div><pre><code><span>git</span> stash apply
</code></pre>
<div><span>1</span><br></div></div><ul>
<li>恢复后删除该工作现场</li>
</ul>
<div><pre><code><span>git</span> stash pop
</code></pre>
<div><span>1</span><br></div></div><p>上面两个命令都支持通过索引恢复指定工作现场，具体索引按照实际填写即可：</p>
<div><pre><code><span>git</span> stash apply stash@<span>{</span><span>0</span><span>}</span>

<span>git</span> stash pop stash@<span>{</span><span>0</span><span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id="删除工作现场"> 删除工作现场</h3>
<ul>
<li>删除最近的一个工作现场</li>
</ul>
<div><pre><code><span>git</span> stash drop
</code></pre>
<div><span>1</span><br></div></div><ul>
<li>删除所有工作现场</li>
</ul>
<div><pre><code><span>git</span> stash <span>clear</span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="查看工作区状态"> 查看工作区状态</h3>
<p>显示当前工作区中所有变化文件的状态</p>
<div><pre><code><span>git</span> status
</code></pre>
<div><span>1</span><br></div></div><h3 id="提交修改内容"> 提交修改内容</h3>
<div><pre><code><span>git</span> commit -m <span>"desc"</span>
</code></pre>
<div><span>1</span><br></div></div><div><pre><code><span># 多行desc</span>
<span># 这里需要先暂时输入一个单引号，然后写多行信息，写完之后再输入下一个单引号</span>
<span>git</span> commit -m <span>'
1. log1
2. log2
3. log3
'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><div><p>建议</p>
<p>提交内容应该严格按照现代，使用规范工具，不自行填写内容。</p>
</div>
<h3 id="重新提交"> 重新提交</h3>
<p>这将与上次提交内容合并为一次提交。</p>
<div><pre><code><span>git</span> commit --amend -m <span>"desc"</span>  <span># 注意 --amend 必须在 -m 的前面</span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="撤销修改"> 撤销修改</h3>
<p>撤销对工作区文件的修改，若修改后没有放到暂存区，则与上个版本一致，若修改后放到暂存区，则和暂存区一致。</p>
<div><pre><code><span>git</span> checkout -- <span>&lt;</span>filename<span>></span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="删除某次提交"> 删除某次提交</h3>
<div><pre><code><span>git</span> log  <span># 获取提交信息</span>
<span>git</span> rebase -i <span>&lt;</span>commit-id<span>></span>  <span># commit-id 为提交版本的hash code</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p><strong>注意：</strong> 这里有个坑，commit-id 是需要删除的前一个 hash code，用图说明：</p>
 <img :src="$withBase('/assets/pic/rebase1.png')" alt="rebase">
<p>使用命令后，打开一个文件，将需要删除版本前面的 <code>pick</code> 改为 <code>drop</code>，用图说明：</p>
 <img :src="$withBase('/assets/pic/rebase2.png')" alt="rebase">
<p>修改后保存关闭，<code>ZZ</code> 或者 <code>:wq</code>，vim 的命令这里不赘述。</p>
<p>退出后使用<code>git log</code>再次查看，可以看到对应版本已经没有了。</p>
<h3 id="合并提交"> 合并提交</h3>
<p>分支开发时，会有很多提交，但是合并到主分支时，希望只有一个提交，此时需要合并提交。</p>
<ul>
<li>修改 HEAD 并重新提交</li>
</ul>
<div><pre><code><span>git</span> reset HEAD~<span>&lt;</span>n<span>></span>  <span># n 为需要合并提交的数量</span>
<span>git</span> <span>add</span> <span>.</span>
<span>git</span> commit -am <span>"desc"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><ul>
<li>通过 rebase 界面自定义</li>
</ul>
<p>此方法更适合需要保留之前的所有/部分提交信息。</p>
<div><pre><code><span>git</span> rebase -i <span>&lt;</span>remoteRepo<span>></span>/<span>&lt;</span>branchname<span>></span>

<span># 通常为</span>
<span>git</span> rebase -i origin/master
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>此时会打开一个 <code>vim</code> 界面：</p>
<img :src="$withBase('/assets/pic/rebase-merge-commit.png')" alt="">
<p>最上面会列出当前本地提交的所有内容（自与远程仓库不一致开始），按时间顺序依次向下列出，所以越下面的内容越新，最下面一行是最新提交的。</p>
<p>根据下面的注释：</p>
<div><pre><code>pick：  正常选中
reword：选中，并且修改提交信息；
edit：  选中，rebase 时会暂停，允许你修改这个 commit（参考这里）
squash：选中，会将当前 commit 与上一个 commit 合并
fixup： 与 squash 相同，但不会保存当前 commit 的提交信息
exec：  执行其他shell命令
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>根据需要将指定提交的 <code>pick</code> 修改为 <code>squash</code>（或 <code>s</code>） 或者 <code>fixup</code>（或 <code>f</code>），注意第一行不能修改，可以修改后面的内容。</p>
<p>然后保存文件（<code>ZZ</code> 或者 <code>:wq</code>），就可以进行合并提交了。</p>
<p>保存文件后，会跳转到另一个 <code>vim</code> 界面，显示了提交信息，如果填写的是 <code>squash</code>，则会显示所有提交的信息，这里做了一个合并。如果填写的是 <code>fixup</code>，则不会保留其他提交信息。</p>
<p>填写好信息，保存文件，就可以看到只有一个（如果在基变文件中只保留了一个 <code>pick</code> 的话）提交信息了。</p>
<h2 id="日志"> 日志</h2>
<h3 id="查看提交日志"> 查看提交日志</h3>
<div><pre><code><span>git</span> log  <span># 从近到远显示提交日志</span>
</code></pre>
<div><span>1</span><br></div></div><p>通过日志我们可以查询很多需要的数据</p>
<div><pre><code><span>git</span> log --pretty<span>=</span>oneline  <span># 将每个提交记录放在一行显示，其它参数：oneline、short、full、fuller等</span>
</code></pre>
<div><span>1</span><br></div></div><p>可以显示每次提交的轨迹，这在多分支下非常有用</p>
<div><pre><code><span>git</span> log --graph

<span># 查看分支合并情况</span>
<span>git</span> log --graph --pretty<span>=</span>oneline --abbrev-commit
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><ul>
<li>统计提交的行数</li>
</ul>
<div><pre><code><span>git</span> log --stat <span>|</span> perl -ne <span>'END { print $c } $c += $1 if /(\d+) insertions/;'</span>

<span># 指定起始日期开始</span>
<span>git</span> log --stat --since <span>2020</span>-06-01 <span>|</span>perl -ne <span>'END { print $c } $c += $1 if /(\d+) insertions/;'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><ul>
<li>查看指定日期的日志</li>
</ul>
<div><pre><code><span>git</span> log --since <span>2020</span>-06-01

<span># 统计日志的行数</span>
<span>git</span> log --since <span>2020</span>-06-01 <span>|</span> <span>wc</span> -l
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><ul>
<li>查看提交的次数</li>
</ul>
<div><pre><code><span>git</span> log --oneline <span>|</span> <span>wc</span> -l
</code></pre>
<div><span>1</span><br></div></div><ul>
<li>按用户查看添加、删除的行信息</li>
</ul>
<div><pre><code><span>git</span> log --author<span>=</span><span>"<span><span>$(</span><span>git</span> config --get user.name<span>)</span></span>"</span> --pretty<span>=</span>tformat: --numstat<span>|</span> <span>gawk</span> <span>'{ add += $1 ; subs += $2 ; loc += $1 - $2 } END { printf "added lines: %s removed lines : %s total lines: %s\n",add,subs,loc }'</span>

<span># 上面的方法可以直接使用，会使用当前账户的用户，如果想查看其他人，可以将--author后面的参数直接换成指定用户名即可。例如：</span>
<span>git</span> log --author<span>=</span><span>"jeremyjone"</span> --pretty<span>=</span>tformat: --numstat<span>|</span> <span>gawk</span> <span>'{ add += $1 ; subs += $2 ; loc += $1 - $2 } END { printf "added lines: %s removed lines : %s total lines: %s\n",add,subs,loc }'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><ul>
<li>查看仓库的提交者名称</li>
</ul>
<div><pre><code><span>git</span> log --pretty<span>=</span><span>'%aN'</span> <span>|</span> <span>sort</span> <span>|</span> <span>uniq</span> -c <span>|</span> <span>sort</span> -k1 -n -r

<span># 查看前几名，比如 5</span>
<span>git</span> log --pretty<span>=</span><span>'%aN'</span> <span>|</span> <span>sort</span> <span>|</span> <span>uniq</span> -c <span>|</span> <span>sort</span> -k1 -n -r <span>|</span> <span>head</span> -n <span>5</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="回退"> 回退</h2>
<h3 id="记录回退的命令"> 记录回退的命令</h3>
<p>该命令可以查看历史提交以及被回退的记录。但该记录仅在本地，且有时限。</p>
<div><pre><code><span>git</span> reflog
</code></pre>
<div><span>1</span><br></div></div><h3 id="回退到当前最新提交"> 回退到当前最新提交</h3>
<div><pre><code><span>git</span> reset --hard HEAD
</code></pre>
<div><span>1</span><br></div></div><h3 id="回退到上次提交"> 回退到上次提交</h3>
<div><pre><code><span>git</span> reset --hard HEAD^
</code></pre>
<div><span>1</span><br></div></div><h3 id="回退到上-n-次提交"> 回退到上 n 次提交</h3>
<div><pre><code><span>git</span> reset --hard HEAD~<span>&lt;</span>n<span>></span>  <span>#n 为一个数字</span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="回退到指定版本"> 回退到指定版本</h3>
<p>该命令既可以回退到过去版本，也可以回到未来版本。</p>
<div><pre><code><span>git</span> reset --hard <span>&lt;</span>commitId<span>></span>  <span># commitId 可以使用 reflog 命令查看</span>
</code></pre>
<div><span>1</span><br></div></div><h2 id="分支"> 分支</h2>
<h3 id="查看分支"> 查看分支</h3>
<div><pre><code><span># 仅查看本地</span>
<span>git</span> branch

<span># 查看本地和远程。远程名称为 &lt;remoteRepo>/&lt;branchname></span>
<span>git</span> branch -a
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id="创建分支"> 创建分支</h3>
<div><pre><code><span>git</span> branch <span>&lt;</span>branchname<span>></span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="切换分支"> 切换分支</h3>
<div><pre><code><span>git</span> checkout <span>&lt;</span>branchname<span>></span>
<span>git</span> checkout -b <span>&lt;</span>branchname<span>></span>  <span># 创建并切换到该分支</span>
<span>git</span> checkout -f <span>&lt;</span>branchname<span>></span>  <span># 强制切换到该分支</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id="删除分支"> 删除分支</h3>
<div><pre><code><span># 删除为合并分支</span>
<span>git</span> branch -D <span>&lt;</span>branchname<span>></span>

<span># 删除已合并分支</span>
<span>git</span> branch -d <span>&lt;</span>branchname<span>></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id="合并分支"> 合并分支</h3>
<p>将某个分支合并到当前分支。</p>
<div><pre><code><span>git</span> merge <span>&lt;</span>branchname<span>></span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="忽略合并某些文件"> 忽略合并某些文件</h3>
<p>在合并时可以忽略特定文件。</p>
<p>先配置一个 <code>merge.ours.driver</code>：</p>
<div><pre><code><span>git</span> config --global merge.ours.driver <span>true</span>
</code></pre>
<div><span>1</span><br></div></div><p>然后在被合并分支的根目录下添加一个 <code>.gitattributes</code> 文件，并把要忽略的文件填进去，例如：</p>
<div><pre><code>config.js merge=ours
scripts/index.js merge=ours
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>它会在合并过程中保持这些文件不变。</p>
<h3 id="查看合并记录"> 查看合并记录</h3>
<div><pre><code><span># 查看分支合并情况</span>
<span>git</span> log --graph --pretty<span>=</span>oneline --abbrev-commit

<span># 查看已合并到当前分支的分支、上游分支</span>
<span>git</span> branch --merged

<span># 查看尚未合并的分支</span>
<span>git</span> branch --no-merged
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h3 id="将本地分支关联到远程分支"> 将本地分支关联到远程分支</h3>
<div><pre><code><span>git</span> branch --set-upstream <span>&lt;</span>localBranch<span>></span> origin/<span>&lt;</span>remoteBranch<span>></span>
</code></pre>
<div><span>1</span><br></div></div><h2 id="比较"> 比较</h2>
<h3 id="比较工作区与暂存区的差异"> 比较工作区与暂存区的差异</h3>
<div><pre><code><span>git</span> <span>diff</span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="检查多余的空白字符"> 检查多余的空白字符</h3>
<div><pre><code><span>git</span> <span>diff</span> --check
</code></pre>
<div><span>1</span><br></div></div><h3 id="比较工作区与当前分支库的差异"> 比较工作区与当前分支库的差异</h3>
<div><pre><code><span>git</span> <span>diff</span> HEAD
<span>git</span> <span>diff</span> HEAD -- path  <span># 与当前分支库同一目录比较</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h3 id="比较不同分支的差异"> 比较不同分支的差异</h3>
<p>对比分支1分支可以不写，默认是当前分支</p>
<div><pre><code><span>git</span> <span>diff</span> <span>[</span><span>&lt;</span>对比分支<span><span>1</span>></span><span>]</span> <span>&lt;</span>对比分支<span><span>2</span>></span>  <span># 查看内容差异</span>
<span>git</span> <span>diff</span> <span>[</span><span>&lt;</span>对比分支<span><span>1</span>></span><span>]</span> <span>&lt;</span>对比分支<span><span>2</span>></span> --stat  <span># 只看文件的差异</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h3 id="比较暂存区与版本库的差异"> 比较暂存区与版本库的差异</h3>
<div><pre><code><span>git</span> <span>diff</span> --cached <span>(</span>或 --staged<span>)</span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="比较不同版本库中不同文件的差异"> 比较不同版本库中不同文件的差异</h3>
<div><pre><code><span>git</span> <span>diff</span> HEAD:<span>&lt;</span>filename<span>></span> HEAD:<span>&lt;</span>filename<span>></span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="查看每次提交差异"> 查看每次提交差异</h3>
<div><pre><code><span>git</span> log -p -2  <span># 查询每次提交的行差异， 2查询的是提交次数，-p是展开显示每次提交的内容差异</span>
<span>git</span> log -U1 --word-diff  <span># 查询每次提交的单词差异</span>
<span>git</span> log --stat  <span># 显示改动的概要信息</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="标签"> 标签</h2>
<p>标签是用于特定版本的标记。</p>
<h3 id="查看标签"> 查看标签</h3>
<div><pre><code><span>git</span> tag
</code></pre>
<div><span>1</span><br></div></div><h3 id="创建标签"> 创建标签</h3>
<div><pre><code><span># 给当前版本添加标签</span>
<span>git</span> tag <span>&lt;</span>content<span>></span>

<span># 给历史版本添加标签</span>
<span>git</span> tag <span>&lt;</span>content<span>></span> <span>&lt;</span>commitId<span>></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id="删除标签"> 删除标签</h3>
<div><pre><code><span># 删除本地标签</span>
<span>git</span> tag -d <span>&lt;</span>content<span>></span>

<span># 删除远程标签</span>
<span>git</span> push <span>&lt;</span>remoteRepo<span>></span> -d <span>&lt;</span>content<span>></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id="发布标签"> 发布标签</h3>
<div><pre><code><span># 发布指定标签</span>
<span>git</span> push -u <span>&lt;</span>remoteRepo<span>></span> <span>&lt;</span>content<span>></span>

<span># 发布所有未提交的标签</span>
<span>git</span> push <span>&lt;</span>remoteRepo<span>></span> --tags
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id="拉取标签"> 拉取标签</h3>
<p>从远程仓库更新本地标签内容。</p>
<div><pre><code><span>git</span> pull <span>&lt;</span>remoteRepo<span>></span> --tags
</code></pre>
<div><span>1</span><br></div></div><h2 id="远程操作"> 远程操作</h2>
<h3 id="查看仓库信息"> 查看仓库信息</h3>
<div><pre><code><span># 不详细信息</span>
<span>git</span> remote

<span># 详细信息</span>
<span>git</span> remote -v
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id="添加远程仓库"> 添加远程仓库</h3>
<div><pre><code><span>git</span> remote <span>add</span> <span>&lt;</span>remoteRepo<span>></span> <span>&lt;</span>url<span>></span>
</code></pre>
<div><span>1</span><br></div></div><ul>
<li><code>remoteRepo</code> 名称可以随意填写，通常默认填写 <code>origin</code></li>
<li><code>url</code> 可以在远程仓库网站找到</li>
</ul>
<h3 id="将远程仓库分支添加到本地"> 将远程仓库分支添加到本地</h3>
<p>该命令仅仅是拉取远程仓库内容并更新到本地，永远不会影响当前的工作区。</p>
<div><pre><code><span>git</span> fetch <span>&lt;</span>remoteRepo<span>></span> <span>&lt;</span>branchname<span>></span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="克隆远程仓库到本地"> 克隆远程仓库到本地</h3>
<div><pre><code><span>git</span> clone <span>&lt;</span>url<span>></span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="拉取所有远程分支到本地"> 拉取所有远程分支到本地</h3>
<p>三种方法都可以：</p>
<div><pre><code><span># 1  注意 remoteRepo 需要根据实际需要进行替换</span>
<span>git</span> branch -r <span>|</span> <span>grep</span> -v <span>'\->'</span> <span>|</span> <span>while</span> <span>read</span> remote<span>;</span> <span>do</span> <span>git</span> branch --track <span>"<span>${remote<span>#</span>remoteRepo<span>/</span>}</span>"</span> <span>"<span>$remote</span>"</span><span>;</span> <span>done</span>

<span># 2</span>
<span>git</span> fetch --all

<span># 3 慎用，会覆盖当前工作区</span>
<span>git</span> pull --all
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h3 id="更新分支"> 更新分支</h3>
<p>该命令相当于是 <code>git fetch</code> 与 <code>git merge FETCH_HEAD</code> 的合体，拉取远程仓库内容并且合并到当前工作区，该操作可能会出现冲突，需要注意。</p>
<ul>
<li>更新当前分支</li>
</ul>
<div><pre><code><span>git</span> pull
</code></pre>
<div><span>1</span><br></div></div><ul>
<li>获取远程仓库的 master 分支，并合并到本地的 work 分支</li>
</ul>
<div><pre><code><span>git</span> pull <span>&lt;</span>remoteRepo<span>></span> master:work
</code></pre>
<div><span>1</span><br></div></div><ul>
<li>将远程仓库分支拉取到本地，分支名称相同</li>
</ul>
<div><pre><code><span>git</span> pull <span>&lt;</span>remoteRepo<span>></span> <span>&lt;</span>branchname<span>></span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="推送分支"> 推送分支</h3>
<ul>
<li>向远程仓库推送当前分支</li>
</ul>
<div><pre><code><span>git</span> push
</code></pre>
<div><span>1</span><br></div></div><ul>
<li>将本地仓库提交到远程仓库</li>
</ul>
<div><pre><code><span>git</span> push <span>&lt;</span>remoteRepo<span>></span> <span>&lt;</span>branchname<span>></span>

<span># 向远程仓库推送 master 分支</span>
<span>git</span> push <span>&lt;</span>remoteRepo<span>></span> master
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><ul>
<li>强制推送需要添加参数 <code>-f</code></li>
</ul>
<div><pre><code><span>git</span> push -f <span>&lt;</span>remoteRepo<span>></span> <span>&lt;</span>branchname<span>></span>
</code></pre>
<div><span>1</span><br></div></div><ul>
<li>第一次推送时需要参数 <code>-u</code></li>
</ul>
<div><pre><code><span>git</span> push -u <span>&lt;</span>remoteRepo<span>></span> <span>&lt;</span>branchname<span>></span>
</code></pre>
<div><span>1</span><br></div></div><ul>
<li>推送发布版本时同时推送 tag</li>
</ul>
<div><pre><code><span>git</span> push --follow-tags <span>&lt;</span>remoteRepo<span>></span> <span>&lt;</span>branchname<span>></span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="合并远程分支"> 合并远程分支</h3>
<div><pre><code><span>git</span> merge fork               <span># 将fork分支合并到当前分支</span>
<span>git</span> checkout fork a.c b.c    <span># 将fork分支的a.c b.c文件强制覆盖当前分支的对应文件</span>
<span>git</span> merge origin branchname  <span># 将本地分支与远程分支合并</span>
<span>git</span> mergetool                <span># 使用工具比较查看冲突</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id="将最近两次提交合并为一个提交，并强制提交到远程仓库"> 将最近两次提交合并为一个提交，并强制提交到远程仓库</h3>
<div><pre><code><span>git</span> reset --soft HEAD
<span>git</span> commit -m <span>"..."</span>
<span>git</span> push --force
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id="删除远程分支"> 删除远程分支</h3>
<div><pre><code><span>git</span> push <span>&lt;</span>remoteRepo<span>></span> -d <span>&lt;</span>branchname<span>></span>
</code></pre>
<div><span>1</span><br></div></div><h2 id="提交规范"> 提交规范</h2>
<p>在工程化项目中，随着项目越来越大，开发人员越来越多，为避免风格迥异，都会有各种各样的风格约束。<code>Git</code> 的提交信息也不例外，它在实践过程中，逐渐形成了一种规范化的提交内容规范。</p>
<p>Tim Pope 在他的 <a href="https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html" target="_blank" rel="noopener noreferrer">博客</a> 中主张采用特定的消息样式。具体的讨论帖子可以参考 <a href="https://stackoverflow.com/questions/2290016/git-commit-messages-50-72-formatting" target="_blank" rel="noopener noreferrer">这里</a>，各路大神在这里讨论的很详尽，有兴趣可以去看看。</p>
<p>在实践中，越来越多的开发者参与进来，逐渐形成了现在流行的提交规范。在这其中，最知名的应该是 <a href="https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/" target="_blank" rel="noopener noreferrer">Angular 规范</a>，它具有如下好处：</p>
<ul>
<li>允许通过脚本直接生成 <code>CHANGELOG.md</code></li>
<li>允许忽略 <code>git bisect</code> 提交（不像格式化那样重要的提交）</li>
<li>浏览记录时可以提供更清晰的历史信息</li>
</ul>
<p>具体示例，可以参考 <a href="https://github.com/angular/angular/commits/master" target="_blank" rel="noopener noreferrer">Angular 提交实例</a></p>
<img :src="$withBase('/assets/pic/git_angular_commit.png')" alt="">
<h3 id="提交格式"> 提交格式</h3>
<p>每次提交，都应当包含三部分内容 <code>Header</code>、<code>Body</code> 和 <code>Footer</code>：</p>
<div><pre><code>&amp;lt;type&gt;(&amp;lt;scope&gt;): &amp;lt;subject&gt;
// 空一行
&amp;lt;Body&gt;
// 空一行
&amp;lt;Footer&gt;
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>其中，<code>Header</code> 是必须的，它由 <code>type</code> 与 <code>subject</code> 构成，而 <code>Body</code> 与 <code>Footer</code> 是可选的。</p>
<p>提交消息的任何一行都不能超过 100 个字符（或 72 个字符）! 这使得消息在 github 以及各种 git 工具中更容易阅读。</p>
<h3 id="header"> Header</h3>
<p>消息头只有一行，其中包含了对包含类型、可选范围和主题的更改的简洁描述。</p>
<h4 id="type（类型）"> type（类型）</h4>
<p><code>type</code> 用于说明提交的类型，只允许使用如下标识：</p>
<ul>
<li><code>feat</code>：添加一个新功能</li>
<li><code>fix</code>：修复一个 bug</li>
<li><code>docs</code>：文档变更</li>
<li><code>style</code>：不影响功能的代码格式修正（如空格、分号等格式的修改）</li>
<li><code>refactor</code>：不包含修复 bug、功能新增的代码重构</li>
<li><code>test</code>：添加、修改测试用例</li>
<li><code>chore</code>：对构建过程或辅助工具和库的更改（不影响源文件、测试用例等）</li>
</ul>
<p>随着技术的更迭，现在也可以有如下标识（<a href="https://github.com/conventional-changelog/commitlint" target="_blank" rel="noopener noreferrer">commitlint</a>）：</p>
<ul>
<li><code>build</code>：对构建流程、外部依赖等的变更（如升级 npm 包、修改 webpack 配置等）</li>
<li><code>ci</code>：修改 CI 配置、脚本</li>
<li><code>perf</code>：性能优化</li>
<li><code>revert</code>：回滚 commit</li>
</ul>
<p>其中，<code>feat</code> 与 <code>fix</code> 类型的内容会自动生成在 <code>CHANGELOG.md</code> 中，其它内容可以自由配置，但建议使用默认即可。</p>
<h4 id="scope（范围）"> scope（范围）</h4>
<p><code>scope</code> 用于说明提交影响的范围，比如数据层、控制层等，视项目而定，也可以不填。</p>
<h4 id="subject（主题）"> subject（主题）</h4>
<p><code>subject</code> 是提交的简短描述。最好不超过 50 个字。最好使用<strong>英文</strong>，并且：</p>
<ul>
<li>以动词开头，使用祈使句、现在时，如 <code>change</code>，而不是 <code>changed</code> 或者 <code>changes</code></li>
<li>第一个词小写即可</li>
<li>最后不要加句号（<code>.</code>）</li>
</ul>
<h3 id="body"> Body</h3>
<p>消息体是针对本次提交的详细描述，可以分成多行，同时也有两点需要注意：</p>
<ul>
<li>与在 <code>subject</code> 中一样，内容使用祈使句、现在时，如 <code>change</code>，而不是 <code>changed</code> 或者 <code>changes</code></li>
<li>具体说明改变的动机，以及与以前行为的对比</li>
</ul>
<h3 id="footer"> Footer</h3>
<p><code>Footer</code> 只包含以下两种情况：</p>
<ul>
<li>不兼容变更</li>
<li>关闭 ISSUE</li>
</ul>
<h4 id="break-change（不兼容变更）"> BREAK CHANGE（不兼容变更）</h4>
<p>所有的 <code>BREAK CHANGE</code> 都必须作为中断更改块出现在 <code>Footer</code> 中，应该以 <code>BREAKING CHANGE:</code> 开始，用一个空格或者两个换行符。提交消息的其余部分是对更改、理由和迁移说明的描述。如：</p>
<div><pre><code>BREAKING CHANGE: isolate scope bindings definition has changed and
    the inject option for the directive controller injection was removed.

    To migrate the code follow the example below:

    Before:

    scope: {
      myAttr: &#39;attribute&#39;,
      myBind: &#39;bind&#39;,
      myExpression: &#39;expression&#39;,
      myEval: &#39;evaluate&#39;,
      myAccessor: &#39;accessor&#39;
    }

    After:

    scope: {
      myAttr: &#39;@&#39;,
      myBind: &#39;@&#39;,
      myExpression: &#39;&amp;amp;&#39;,
      // myEval - usually not useful, but in cases where the expression is assignable, you can use &#39;=&#39;
      myAccessor: &#39;=&#39; // in directive&#39;s template change myAccessor() to myAccessor
    }

    The removed `inject` wasn&#39;t generaly useful for directives so there should be no code using it.
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><h4 id="关闭-issue"> 关闭 ISSUE</h4>
<p>如果当前提交时针对某个 <code>ISSUE</code>，则可以在 <code>Footer</code> 中关闭该 <code>ISSUE</code>，可以同时关闭多个。如：</p>
<div><pre><code>Closes #1
// or
Closes #1, #2
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="操作-git-中的文件"> 操作 git 中的文件</h2>
<h3 id="查看-git-占用空间"> 查看 git 占用空间</h3>
<div><pre><code><span>du</span> -sh
</code></pre>
<div><span>1</span><br></div></div><h3 id="查找-git-中的文件"> 查找 git 中的文件</h3>
<div><pre><code><span>git</span> verify-pack -v .git/objects/pack/pack-*.idx <span>|</span> <span>sort</span> -k <span>3</span> -g <span>|</span> <span>tail</span> -5  // 找出git中占空间最大的前5个文件的id

<span>git</span> rev-list --objects --all <span>|</span> <span>grep</span> <span>.</span>  // 查看文件列表，可以和grep一起使用，grep后跟需要查找的文件名或id
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id="删除匹配的-rar-文件"> 删除匹配的*.rar 文件</h3>
<div><pre><code><span>git</span> filter-branch --force --index-filter <span>'git rm --cached --ignore-unmatch *.rar'</span> --prune-empty --tag-name-filter <span>cat</span> -- --all
</code></pre>
<div><span>1</span><br></div></div><h3 id="回收空间"> 回收空间</h3>
<div><pre><code><span>rm</span> -r .git/refs/original
<span>git</span> reflog expire --expire<span>=</span>now --all
<span>git</span> gc --prune<span>=</span>now
<span>git</span> gc --aggressive --prune<span>=</span>now
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="常见操作"> 常见操作</h2>
<p>一些具体的问题解决方案</p>
<h3 id="解决上游（fork-源）冲突"> 解决上游（fork 源）冲突</h3>
<ul>
<li>从当前自己的项目中签出一个新的分支用于测试修改</li>
</ul>
<div><pre><code><span>git</span> checkout -b <span>&lt;</span>newBranch<span>></span> <span>[</span><span>&lt;</span>oldBranch<span>></span><span>]</span>
<span>git</span> pull <span>&lt;</span>forkSource<span>></span> <span>&lt;</span>oldBranch<span>></span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><ul>
<li>尝试合修改冲突并更新</li>
</ul>
<div><pre><code><span>git</span> checkout <span>&lt;</span>oldBranch<span>></span>   <span># 如果有修改，无法切换，尝试先 git commit</span>
<span>git</span> merge --no-ff <span>&lt;</span>newBranch<span>></span>
<span>git</span> push <span>&lt;</span>remoteRepo<span>></span> <span>&lt;</span>oldBranch<span>></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>GitHub Pages action 配置</title>
      <link>https://docs.jeremyjone.com/document/git/github_workflow/</link>
      <guid>https://docs.jeremyjone.com/document/git/github_workflow/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">GitHub Pages action 配置</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="github-pages-action-配置"> GitHub Pages action 配置</h1>
<p>GitHub 给我们提供了非常方便的部署功能 <a href="https://github.com/marketplace/actions/github-pages-action" target="_blank" rel="noopener noreferrer">GitHub Pages action</a>。它可以帮助我们快速部署静态页面，省去了每次单独部署的繁琐操作，我们只需要通过简单的配置就可以实现该功能。</p>
<p>我们以该 vuepress 文档为例。</p>
<h2 id="添加工作流"> 添加工作流</h2>
<p>首先在项目中添加工作流文件：<code>.github/workflows/gh-pages.yml</code>，<code>yml</code> 文件名可以是任意名称。</p>
<p>这里我们用一个比较通用的解决方案 <code>peaceiris/actions-gh-pages@v3</code>：</p>
<div><pre><code><span>name</span><span>:</span> Build and Deploy <span># 工作流名称。可选，任意填写</span>
<span>on</span><span>:</span>
  <span>push</span><span>:</span> <span># 指定自动触发工作流程的事件</span>
    <span>branches</span><span>:</span> <span>[</span>docs<span>]</span> <span># 指定触发事件的分支</span>
<span>jobs</span><span>:</span>
  <span>build-and-deploy</span><span>:</span> <span># 作业名称。任意填写</span>
    <span>runs-on</span><span>:</span> ubuntu<span>-</span>latest <span># 运行环境</span>
    <span>concurrency</span><span>:</span> <span># 并发设置。确保只有使用相同并发组的单一作业或工作流才会同时运行</span>
      <span>group</span><span>:</span> $<span>{</span><span>{</span> github.workflow <span>}</span><span>}</span><span>-</span>$<span>{</span><span>{</span> github.ref <span>}</span><span>}</span> <span># 并发组名</span>
    <span>steps</span><span>:</span> <span># 作业步骤</span>
      <span>-</span> <span>name</span><span>:</span> Checkout <span># 步骤名称</span>
        <span>uses</span><span>:</span> actions/checkout@v2 <span># 检索仓库并将其下载到运行器。只要工作流针对仓库的代码运行，都必须使用检出操作</span>

      <span>-</span> <span>name</span><span>:</span> Setup Node.js $<span>{</span><span>{</span> env.NODE_VERSION <span>}</span><span>}</span> <span># 步骤名称</span>
        <span>uses</span><span>:</span> actions/setup<span>-</span>node@v1 <span># 安装指定版本的 node 包。这步之后可以使用 npm 命令</span>
        <span>with</span><span>:</span>
          <span>node-version</span><span>:</span> $<span>{</span><span>{</span> env.NODE_VERSION <span>}</span><span>}</span> <span># 指定版本。 env 是当前环境变量，它随作业步骤改变而改变</span>

      <span>-</span> <span>name</span><span>:</span> Install <span># 步骤名称</span>
        <span>run</span><span>:</span> yarn <span># 安装依赖</span>

      <span>-</span> <span>name</span><span>:</span> Build <span># 步骤名称</span>
        <span>run</span><span>:</span> yarn docs<span>:</span>build <span># 打包</span>

      <span>-</span> <span>name</span><span>:</span> Deploy <span># 步骤名称</span>
        <span>uses</span><span>:</span> peaceiris/actions<span>-</span>gh<span>-</span>pages@v3 <span># 将指定内容发布到 gh-pages 分支</span>
        <span>if</span><span>:</span> $<span>{</span><span>{</span> github.ref == 'refs/heads/docs' <span>}</span><span>}</span> <span># 确保当前分支为 docs 才执行下面内容</span>
        <span>with</span><span>:</span>
          <span>publish_dir</span><span>:</span> ./docs/.vuepress/dist <span># 文件目录</span>
          <span>github_token</span><span>:</span> $<span>{</span><span>{</span> secrets.GITHUB_TOKEN <span>}</span><span>}</span> <span># 自动创建 GITHUB_TOKEN</span>
          <span>deploy_key</span><span>:</span> $<span>{</span><span>{</span> secrets.ACTIONS_DEPLOY_KEY <span>}</span><span>}</span> <span># 秘钥 SSH Deploy Key。生成和配置方法看下面</span>
          <span>commit_message</span><span>:</span> Update docs <span># 提交信息，任意填写</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br></div></div><p>配置好之后，就可以上传我们的代码，现在 GitHub 就可以根据我们的需求进行自动化部署了。</p>
<h2 id="解构文件内容"> 解构文件内容</h2>
<p>下面我们一点一点解读配置文件。也可以阅读 <a href="https://docs.github.com/cn/actions/learn-github-actions/workflow-syntax-for-github-actions" target="_blank" rel="noopener noreferrer">官方文档</a>，这里更加全面和详细。</p>
<p>我们的目标是每当我们 push 文档内容到 github，都会自动构建静态页面。</p>
<p>将上面事件内容模型化：<strong>每当有预期事件发生，就会执行指定任务。</strong></p>
<p>所以我们可以通过上面 <code>yml</code> 文件看出：</p>
<ul>
<li>每当有事件符合触发条件 <code>on</code>，就会执行作业 <code>jobs</code>。</li>
</ul>
<img :src="$withBase('/assets/pic/overview-actions-simple.png')" alt="">
<h3 id="名称-name"> 名称 name</h3>
<p>设置工作流程的名称。GitHub 在仓库的操作页面上显示工作流程的名称。如果省略 <code>name</code>，GitHub 将其设置为相对于仓库根目录的工作流程文件路径。</p>
<h3 id="触发条件-on"> 触发条件 on</h3>
<p>所以我们需要定义一个触发条件，也就是 <code>on</code>。这是一个 <strong>必填</strong> 内容。可以提供单一事件 <code>string</code>，事件的 <code>array</code>，或者事件 <code>types</code> 的 <code>array</code> 甚至是事件配置 <code>map</code>。</p>
<div><pre><code><span>on</span><span>:</span> push

<span>on</span><span>:</span> <span>[</span>push<span>,</span> pull_request<span>]</span>

<span>on</span><span>:</span>
  <span>push</span><span>:</span>
    <span>branches</span><span>:</span>
      <span>-</span> main

  <span>pull_request</span><span>:</span>
    <span>branches</span><span>:</span>
      <span>-</span> main

  <span>page_build</span><span>:</span>
  <span>release</span><span>:</span>
    <span>types</span><span>:</span>
      <span>-</span> created
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>更多内容，可以参考 <a href="https://docs.github.com/cn/actions/learn-github-actions/events-that-trigger-workflows" target="_blank" rel="noopener noreferrer">文档</a>。</p>
<h3 id="作业-jobs"> 作业 jobs</h3>
<p>工作流运行包括一项或多项作业。默认为并行作业。</p>
<p>每个作业在 <code>runs-on</code> 指定的运行器环境中运行。</p>
<p>作业的配置内容十分丰富，可以参考 <a href="https://docs.github.com/cn/actions/learn-github-actions/workflow-syntax-for-github-actions#jobs" target="_blank" rel="noopener noreferrer">官方文档</a> 仔细阅读。</p>
<h4 id="github-上下文"> github 上下文</h4>
<p><code>github</code> 上下文包含有关工作流运行并触发运行事件的信息，可以通过读取上下文内容获取大部分数据。具体参照 <a href="https://docs.github.com/en/actions/learn-github-actions/contexts#github-context" target="_blank" rel="noopener noreferrer">文档</a>。</p>
<p>例如，我们在配置中用到的：</p>
<ul>
<li><code>github.workflow</code>：工作流名称。如果工作流文件未指定名称，则默认为工作流文件的完整路径。</li>
<li><code>github.ref</code>：出发工作流运行的分支或标记。<code>refs/heads/&lt;branch_name&gt;</code> 或 <code>refs/tags/&lt;tag_name&gt;</code></li>
</ul>
<h2 id="添加-ssh-deploy-key"> 添加 SSH Deploy Key</h2>
<p>我们在部署时需要用到 <code>deploy key</code>，如果没有，则会报找不到 <code>key</code> 的错误。</p>
<p>在上面 <code>yml</code> 文件中我们用到：</p>
<div><pre><code><span>deploy_key</span><span>:</span> $<span>{</span><span>{</span> secrets.ACTIONS_DEPLOY_KEY <span>}</span><span>}</span>
</code></pre>
<div><span>1</span><br></div></div><p>名称可以随意起。</p>
<h3 id="生成-ssh-deploy-key"> 生成 SSH Deploy Key</h3>
<p>通过命令在本地生成一个 <code>deploy key</code>：</p>
<div><pre><code>ssh-keygen -t rsa -b <span>4096</span> -C <span>"<span><span>$(</span><span>git</span> config user.email<span>)</span></span>"</span> -f gh-pages -N <span>""</span>
<span># 可以在当前路径下得到两个文件:</span>
<span>#   gh-pages.pub (public key)</span>
<span>#   gh-pages     (private key)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><div><p>提示</p>
<p>执行上面命令时，<code>Windows</code> 用户不要使用 <code>PowerShell</code>，需要使用 <code>Git Bash</code>。</p>
</div>
<h3 id="应用-ssh-deploy-key"> 应用 SSH Deploy Key</h3>
<p>到 GitHub 仓库的 <code>settings</code> 页面：</p>
<ul>
<li>转到 <code>Deploy Keys</code> 页面并添加新 <code>key</code>：</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">添加路径</th>
<th style="text-align:center">添加 public key</th>
<th style="text-align:center">添加成功</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="https://github.com/jeremyjone/docs/blob/docs/docs/.vuepress/public/assets/pic/github_workflow_add_deploy_key1.png" target="_blank"><img :src="$withBase('/assets/pic/github_workflow_add_deploy_key1.png')" alt=""></a></td>
<td style="text-align:center"><a href="https://github.com/jeremyjone/docs/blob/docs/docs/.vuepress/public/assets/pic/github_workflow_add_deploy_key2.png" target="_blank"><img :src="$withBase('/assets/pic/github_workflow_add_deploy_key2.png')" alt=""></a></td>
<td style="text-align:center"><a href="https://github.com/jeremyjone/docs/blob/docs/docs/.vuepress/public/assets/pic/github_workflow_add_deploy_key3.png" target="_blank"><img :src="$withBase('/assets/pic/github_workflow_add_deploy_key3.png')" alt=""></a></td>
</tr>
</tbody>
</table>
<ul>
<li>转到 <code>Secrets</code> 页面并添加新 <code>secret</code>：</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">添加路径</th>
<th style="text-align:center">添加 private key</th>
<th style="text-align:center">添加成功</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="https://github.com/jeremyjone/docs/blob/docs/docs/.vuepress/public/assets/pic/github_workflow_add_secret_key1.png" target="_blank"><img :src="$withBase('/assets/pic/github_workflow_add_secret_key1.png')" alt=""></a></td>
<td style="text-align:center"><a href="https://github.com/jeremyjone/docs/blob/docs/docs/.vuepress/public/assets/pic/github_workflow_add_secret_key2.png" target="_blank"><img :src="$withBase('/assets/pic/github_workflow_add_secret_key2.png')" alt=""></a></td>
<td style="text-align:center"><a href="https://github.com/jeremyjone/docs/blob/docs/docs/.vuepress/public/assets/pic/github_workflow_add_secret_key3.png" target="_blank"><img :src="$withBase('/assets/pic/github_workflow_add_secret_key3.png')" alt=""></a></td>
</tr>
</tbody>
</table>
<blockquote>
<p>注意，需要记住填写的私钥名称，这个需要用在 <code>secrets.ACTIONS_DEPLOY_KEY</code> 中。</p>
</blockquote>
<h2 id="自动部署到自己的服务器"> 自动部署到自己的服务器</h2>
<p>上面都是在部署 Github Page，如果需要部署到自己的网站，当然也是可以的。</p>
<p>这里我们以阿里云 ECS 为例。其部署流程也是差不多的，首先打包，然后连接到服务器，将指定文件拷贝到目标服务器的指定文件夹中即可。</p>
<p>这里我们用到另一个插件：<code>easingthemes/ssh-deploy</code>，它可以帮助我们连接服务器并拷贝文件，只需要经过简单配置，就可以使用。</p>
<h3 id="生成连接秘钥"> 生成连接秘钥</h3>
<p>首先，我们仍然需要 SSH Key 作为连接的钥匙。可以在服务器中生成：</p>
<div><pre><code>ssh-keygen -m PEM -t rsa -b <span>4096</span>
</code></pre>
<div><span>1</span><br></div></div><p>此时服务器 <code>~/.ssh</code> 下会生成 <code>id_ras</code> 与 <code>id_ras.pub</code>，后者是公钥，前者是私钥。</p>
<h3 id="部署公钥"> 部署公钥</h3>
<p>将公钥追加到 <code>~/.ssh/authorized_keys</code> 文件中，如果没有，就创建一个：</p>
<div><pre><code><span>cat</span> ~/.ssh/id_rsa.pub <span>>></span> ~/.ssh/authorized_keys

<span># 然后给整个文件夹 600 权限即可</span>
<span>chmod</span> <span>600</span> -R ~/.ssh
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><div><p>提示</p>
<p>如果管理多个 SSH Key，每一次追加都需要确保有 <code>换行符</code> 存在。</p>
</div>
<p>如果是 <code>root</code> 登录，需要修改 <code>/etc/ssh/sshd_config</code> 中的 <code>PermitRootLogin</code> 为 <code>yes</code>，然后重启 <code>service sshd restart</code> 即可。</p>
<p>这样服务器就可以等待验证连接了。</p>
<h3 id="部署私钥"> 部署私钥</h3>
<p>将私钥 <code>id_rsa</code> 内容拷贝到 GitHub 中，添加方法与  添加私钥的方法一样。</p>
<h3 id="配置变量"> 配置变量</h3>
<p>需要用到 4 个变量：</p>
<ul>
<li><code>SSH_PRIVATE_KEY</code>：刚才添加的私钥</li>
<li><code>REMOTE_HOST</code>：远程服务器地址，可以是域名，也可以是 IP</li>
<li><code>REMOTE_USER</code>：远程服务器用户，需要有访问权限的用户</li>
<li><code>TARGET</code>：服务器目标地址</li>
</ul>
<p>以上 4 个变量最好是添加到私钥用，这样就可以通过 <code>secrets.XXX</code> 的方式读取到，文件中看不到私密信息。</p>
<p>除此之外，还有几个变量，可以直接填写：</p>
<ul>
<li><code>REMOTE_PORT</code>：远程服务器端口，默认 22，如果没变，就不用写了</li>
<li><code>ARGS</code>：参数，默认为 <code>-rltgoDzvO</code>，根据不同服务器进行修改。阿里云为 <code>-avzr --delete</code></li>
<li><code>SOURCE</code>：源地址，这个一般是打包时固定好的，默认为 <code>''</code>，通常打包路径为 <code>dist/</code></li>
<li><code>EXCLUDE</code>：排除的目录、文件等。默认为 <code>''</code>，根据需要填写即可。</li>
</ul>
<h3 id="部署工作流"> 部署工作流</h3>
<p>最后就是完整的工作流配置文件：</p>
<div><div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><br></div><pre><code><span>name</span><span>:</span> Deploy to my server
<span>on</span><span>:</span>
  <span>push</span><span>:</span>
    <span>branches</span><span>:</span>
      <span>-</span> main
    <span>path-ignore</span><span>:</span>
      <span>-</span> README.md
      <span>-</span> gitignore

<span>jobs</span><span>:</span>
  <span>build</span><span>:</span>
    <span>runs-on</span><span>:</span> ubuntu<span>-</span>latest
    <span>steps</span><span>:</span>
      <span># 切换分支</span>
      <span>-</span> <span>name</span><span>:</span> Checkout
        <span>uses</span><span>:</span> actions/checkout@master

      <span># 安装依赖</span>
      <span>-</span> <span>name</span><span>:</span> Install dependencies
        <span>run</span><span>:</span> yarn

      <span># 构建</span>
      <span>-</span> <span>name</span><span>:</span> Build
        <span>run</span><span>:</span> yarn build

      <span># 部署</span>
      <span>-</span> <span>name</span><span>:</span> Deploy
        <span>uses</span><span>:</span> easingthemes/ssh<span>-</span>deploy@main
        <span>env</span><span>:</span>
          <span>SSH_PRIVATE_KEY</span><span>:</span> $<span>{</span><span>{</span> secrets.REMOTE_SERVER_ACCESS_TOKEN <span>}</span><span>}</span>
          <span>ARGS</span><span>:</span> <span>"-avzr --delete"</span>
          <span>SOURCE</span><span>:</span> <span>"dist/"</span>
          <span>REMOTE_HOST</span><span>:</span> $<span>{</span><span>{</span> secrets.REMOTE_SERVER_HOST <span>}</span><span>}</span>
          <span>REMOTE_USER</span><span>:</span> $<span>{</span><span>{</span> secrets.REMOTE_SERVER_USER <span>}</span><span>}</span>
          <span>TARGET</span><span>:</span> <span>"${{ secrets.REMOTE_SERVER_TARGET }}"</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Markdown 语法</title>
      <link>https://docs.jeremyjone.com/document/markdown/</link>
      <guid>https://docs.jeremyjone.com/document/markdown/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">Markdown 语法</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="markdown-语法"> Markdown 语法</h1>
<h2 id="标题"> 标题</h2>
<p>使用 <code>#</code> 设置标题。
支持 1-6 级标题，直接使用对应数量的 <code>#</code> 即可。</p>
<p>对于第一级和第二级标题，还可以通过 <code>===</code> 和 <code>---</code> 的方式来实现。</p>
<p>示例：</p>
<div><pre><code><span><span>#</span> 一级标题</span>

<span><span>#</span> 一级标题</span>

<span><span>##</span> 二级标题</span>

<span><span>##</span> 二级标题</span>

...

<span><span>######</span> 六级标题</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>效果：</p>
<blockquote>
<h1 id="一级标题"> 一级标题</h1>
<h1 id="一级标题-2"> 一级标题</h1>
<h2 id="二级标题"> 二级标题</h2>
<h2 id="二级标题-2"> 二级标题</h2>
<h3 id="三级标题"> 三级标题</h3>
<h4 id="四级标题"> 四级标题</h4>
<h5 id="五级标题"> 五级标题</h5>
<h6 id="六级标题"> 六级标题</h6>
</blockquote>
<h3 id="目录"> 目录</h3>
<p>使用 <code>[TOC]</code>，markdown 会根据标题生成目录，并根据目录级别，自动划分层级。</p>
<p>示例：</p>
<div><pre><code>[TOC]
</code></pre>
<div><span>1</span><br></div></div><p>效果：</p>
<p><div><ul><li><ul><li></li></ul></li><li></li><li><ul><li></li><li><ul><li><ul><li><ul><li></li></ul></li></ul></li><li></li></ul></li><li><ul><li></li><li></li><li></li><li></li></ul></li><li><ul><li><ul><li></li></ul></li><li></li></ul></li><li></li><li></li><li></li><li><ul><li><ul><li></li></ul></li><li></li><li></li></ul></li><li><ul><li></li><li></li><li></li></ul></li><li><ul><li></li></ul></li><li><ul><li></li><li></li></ul></li><li></li></ul></li></ul></div></p>
<div><p>注意</p>
<p>有些编辑器或网站是区分大小写的，所以尽量使用大写格式来生成目录。</p>
</div>
<h2 id="字体"> 字体</h2>
<h3 id="加粗"> 加粗</h3>
<p>使用 <code>**</code> 将需要加粗的文字包裹起来即可。</p>
<p>示例：</p>
<div><pre><code>这段文字，<span><span>**</span><span>这里</span><span>**</span></span>需要加粗
</code></pre>
<div><span>1</span><br></div></div><p>效果：</p>
<blockquote>
<p>这段文字，<strong>这里</strong>需要加粗</p>
</blockquote>
<h3 id="斜体"> 斜体</h3>
<p>使用 <code>*</code> 将需要斜体的文字包裹起来即可。</p>
<p>示例：</p>
<div><pre><code>这段文字，<span><span>*</span><span>这里</span><span>*</span></span>需要斜体
</code></pre>
<div><span>1</span><br></div></div><p>效果：</p>
<blockquote>
<p>这段文字，<em>这里</em>需要斜体</p>
</blockquote>
<div><p>提示</p>
<p>如果需要加粗的斜体，可以通过 *** 实现。</p>
</div>
<h3 id="删除线"> 删除线</h3>
<p>使用 <code>~~</code> 将需要显示删除线的文字包裹起来即可。</p>
<p>示例：</p>
<div><pre><code>这段文字，<span><span>~~</span><span>这里</span><span>~~</span></span>需要删除线
</code></pre>
<div><span>1</span><br></div></div><p>效果：</p>
<blockquote>
<p>这段文字，<s>这里</s>需要删除线</p>
</blockquote>
<h3 id="重点"> 重点</h3>
<p>使用 <code>==</code> 将需要重点显示的文字包裹起来即可。</p>
<p>示例：</p>
<div><pre><code>这段文字，==这里==是重点
</code></pre>
<div><span>1</span><br></div></div><p>效果：</p>
<blockquote>
<p>这段文字，==这里==是重点</p>
</blockquote>
<h2 id="链接"> 链接</h2>
<h3 id="文字链接"> 文字链接</h3>
<p>使用 <code>[描述](地址)</code> 的方式可以增加链接。</p>
<p>示例：</p>
<div><pre><code><span>[<span>这是一个链接</span>](<span>https://www.jeremyjone.com</span>)</span>
</code></pre>
<div><span>1</span><br></div></div><p>效果：</p>
<blockquote>
<p><a href="https://www.jeremyjone.com" target="_blank" rel="noopener noreferrer">这是一个链接</a></p>
</blockquote>
<h4 id="内链接"> 内链接</h4>
<p>有时候，文件内需要跳转到指定目录位置，也可以使用链接进行跳转。</p>
<p>链接部分使用 <code>#</code> + 目录名 来实现跳转，不论几级目录，都这样写。所以，目录中的名称不应该有重复，这样会引起不必要的奇异。</p>
<p>示例：</p>
<div><pre><code>跳转到 <span>[<span>目录</span>](<span>#目录</span>)</span>
</code></pre>
<div><span>1</span><br></div></div><p>效果：</p>
<p>跳转到 </p>
<h3 id="图片链接"> 图片链接</h3>
<p>使用 <code>![alt](图片地址)</code> 的方式可以关联并展示一张图片，这适用于本地和远程。</p>
<p>示例：</p>
<div><pre><code><span><span>!</span>[<span>示例图片</span>](<span>https://desktop.jeremyjone.com/test/images/01.jpg</span>)</span>
</code></pre>
<div><span>1</span><br></div></div><p>效果：</p>
<blockquote>
<p><img src="https://desktop.jeremyjone.com/test/images/01.jpg" alt="示例图片" /></p>
</blockquote>
<h2 id="分割线"> 分割线</h2>
<p>使用 <code>***</code> 或者 <code>---</code> 可以实现分割线。</p>
<p>示例：</p>
<div><pre><code><span><span>---</span>
<span>---</span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>效果：</p>
<blockquote>
<p> </p>
<hr />
<hr />
<p> </p>
</blockquote>
<h2 id="注脚"> 注脚</h2>
<p>注脚通常用于解释某些内容，类似书本中的注释、详解。</p>
<p>使用 <code>[^keyword]</code> 的方式添加注脚名，然后在文本的任意位置（通常在最下方）添加注脚内容。当然，注脚的内容永远显示在最下方。</p>
<p>示例：</p>
<div><pre><code>这是一段 Markdown[^1]文本，它可以直接转为 HTML[^2]，可以使用插件[^script]实现更丰富的功能。

<span><span>[</span><span>^1</span><span>]</span><span>:</span> Markdown</span> 是一种文本标记语言。
<span><span>[</span><span>^2</span><span>]</span><span>:</span> HTML</span> 是一种超文本标记语言。
<span><span>[</span><span>^script</span><span>]</span><span>:</span> 用于</span> markdown 的插件。
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>效果：</p>
<p>这是一段 Markdown<sup></sup>文本，它可以直接转为 HTML<sup></sup>，可以使用插件<sup></sup>实现更丰富的功能。</p>
<h2 id="引用"> 引用</h2>
<p>使用 <code>&gt;</code> 实现引用，多个 <code>&gt;</code> 可以实现多级引用。</p>
<p>示例：</p>
<div><pre><code><span>></span> 一级引用
<span>></span>
<span>> ></span> 二级引用
<span>> ></span>
<span>> > ></span> 三级引用
<span>> > ></span> ...
<span>> > ></span>
<span>> > > > > > > > > > > > > > > > > > > ></span> n 级引用
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>效果：</p>
<blockquote>
<p>一级引用</p>
<blockquote>
<p>二级引用</p>
<blockquote>
<p>三级引用</p>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>n 级引用</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<h2 id="代码"> 代码</h2>
<p>代码内容是程序员必备，同时也可以突出一些重点内容。</p>
<h3 id="行内代码块"> 行内代码块</h3>
<p>通过 <code>`</code> 可以将你希望的代码内容或者重点内容包裹起来，像这样：</p>
<p>示例：</p>
<div><pre><code>这是一篇 <span>`markdown`</span> 文档。
</code></pre>
<div><span>1</span><br></div></div><p>效果：</p>
<blockquote>
<p>这是一篇 <code>markdown</code> 文档。</p>
</blockquote>
<h4 id="行内代码块中特殊字符的处理方式"> 行内代码块中特殊字符的处理方式</h4>
<p>如果你希望的内容中如果包含 <code>`</code>，这就比较棘手了，不过这对于 markdown 很简单。使用 <code>``</code> 来包裹包含 <code>`</code>的内容即可。同样的，你也可以使用 <code>`</code> 来包裹具有 <code>``</code>的内容。看上去它更像是一段绕口令，如果你对<code>python</code>熟悉，那么这样的方式应该并不陌生，它和<code>python</code>字符串的使用方式类似。</p>
<p>示例：</p>
<div><pre><code>如何使用 <span>`markdown`</span> 将 <span>`` ` ``</span> 包裹到行内块？这个问题很简单，使用 ` `` `的方式即可。
</code></pre>
<div><span>1</span><br></div></div><p>效果：</p>
<blockquote>
<p>如何使用 <code>markdown</code> 将 <code>`</code> 包裹到行内块？这个问题很简单，使用 <code>``</code>的方式即可。</p>
</blockquote>
<div><p>提示</p>
<p><code>``</code> 和 <code>`</code> 本身的功能是一样的，它们都可以包裹任意内容，区别是它们可以包含对方。</p>
</div>
<h3 id="代码块"> 代码块</h3>
<p>这是一个比较单独的区域，通过 <code>```</code>可以定义一个单独的代码区域。同时，在 <code>```</code> 后面跟上语言名称，可以根据对应的代码规则，高亮代码内容。</p>
<p>示例：</p>
<div><pre><code><span><span>```</span><span>js</span>
<span>    <span>function</span><span>(</span><span>)</span> <span>{</span>
        <span>/* content */</span>
    <span>}</span></span>
<span>```</span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>效果：</p>
<div><pre><code><span>function</span><span>(</span><span>)</span> <span>{</span>
   <span>/* content */</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><p>提示</p>
<p>markdown 支持的语言是通过不同插件实现的，不同编辑器、网站，支持的都不尽相同，可以查看 Prism 完整的语言列表：<a href="https://prismjs.com/#supported-languages" target="_blank" rel="noopener noreferrer">语言列表</a></p>
</div>
<h3 id="多代码块的处理"> 多代码块的处理</h3>
<p>有时候我们的文档中需要在代码块中嵌套内层代码块，这时的方式与行内代码块类似，仍然使用 <code>`</code> 来处理即可。</p>
<p>因为代码块使用的是 <code>```</code>，我们可以在外层代码块多加一个 <code>`</code>，以此类推，有多少层可以添加多少个 <code>`</code>。</p>
<p>示例（上面代码示例）：</p>
<div><pre><code><span><span>```</span><span>`markdown</span>
<span>```js
    function() {
        /<span><span>*</span><span> content </span><span>*</span></span>/
    }</span>
<span>```</span></span>
````
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>效果：</p>
<div><pre><code><span><span>```</span><span>js</span>
<span>    <span>function</span><span>(</span><span>)</span> <span>{</span>
        <span>/* content */</span>
    <span>}</span></span>
<span>```</span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id="列表"> 列表</h2>
<p>列表分为有序和无序，它们的功能是一样的，同时它们也可以混用，这很方便。</p>
<h3 id="无序列表"> 无序列表</h3>
<p>使用 <code>-</code> <code>+</code> <code>*</code> 的任意一种方式都可以实现无序列表，并且支持多级内容，每一级使用至少 2 个空格缩进。</p>
<p>示例：</p>
<div><pre><code><span>-</span> 内容 1

<span>*</span> 内容 2

<span>-</span> 内容 3
  <span>-</span> 子内容 1
  <span>*</span> 子内容 2
  <span>-</span> 子内容 3
    <span>-</span> 子内容
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>效果：</p>
<blockquote>
<ul>
<li>内容 1</li>
</ul>
<ul>
<li>内容 2</li>
</ul>
<ul>
<li>内容 3
<ul>
<li>子内容 1</li>
</ul>
<ul>
<li>子内容 2</li>
</ul>
<ul>
<li>子内容 3
<ul>
<li>子内容</li>
</ul>
</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="有序列表"> 有序列表</h3>
<p>有序列表需要使用数字 <code>1.</code>(数字 + <code>.</code>) 的方式来显式的声明。多级内容使用至少 3 个空格缩进。</p>
<p>示例：</p>
<div><pre><code><span>1.</span> 内容 1
<span>2.</span> 内容 2
<span>3.</span> 内容 3
   <span>1.</span> 子内容 1
   <span>2.</span> 子内容 2
   <span>3.</span> 子内容 3
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>效果：</p>
<ol>
<li>内容 1</li>
<li>内容 2</li>
<li>内容 3
<ol>
<li>子内容 1</li>
<li>子内容 2</li>
<li>子内容 3</li>
</ol>
</li>
</ol>
<div><p>:bulb: 小技巧</p>
<p>其实你可以使用自定义的有序文字来定义内容前的顺序数列，它更像是一个自定义的无序列表。</p>
</div>
<h3 id="todo-列表"> Todo 列表</h3>
<p>Todo 列表是常用的一种待办事宜列表，markdown 通过使用 <code>[ ]</code> 或 <code>[x]</code> 来表示 <strong>未完成</strong> 或 <strong>已完成</strong>。</p>
<p>示例：</p>
<div><pre><code><span>-</span> [x] 早上吃一个鸡蛋
<span>-</span> [ ] 中午定外卖要健康
<span>-</span> [ ] 晚上去超市买早餐
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>效果：</p>
<ul>
<li>[x] 早上吃一个鸡蛋</li>
<li>[ ] 中午定外卖要健康</li>
<li>[ ] 晚上去超市买早餐</li>
</ul>
<div><p>注意</p>
<p>它本质上是一个列表，所以不要忘记添加列表的 - 符号。</p>
</div>
<h2 id="表格"> 表格</h2>
<p>在 markdown 上绘制表格是一件很简单的事情，它通过简单的 <code>-</code> 、 <code>|</code> 和 <code>:</code> 组合起来，就可以完成表格的绘制。</p>
<p>具体方式：</p>
<ul>
<li>使用 <code>|</code> 分割每一列的内容。<em>有些编辑器是可以忽略两边的 <code>|</code>的。</em></li>
<li>使用 <code>-</code> 分割表头和内容。</li>
<li>使用 <code>:</code> 控制每一列的对齐方式，默认左对齐。</li>
</ul>
<p>示例：</p>
<div><pre><code><span><span><span>|</span><span> 表头 1       </span><span>|</span><span>    表头 2    </span><span>|</span><span>       表头 3 </span><span>|</span>
</span><span><span>|</span> <span>------------</span> <span>|</span> <span>:----------:</span> <span>|</span> <span>-----------:</span> <span>|</span>
</span><span><span>|</span><span> 第一列的内容 </span><span>|</span><span> 第二列的内容 </span><span>|</span><span> 第三列的内容 </span><span>|</span>
<span>|</span><span> 内容 1       </span><span>|</span><span>    内容 2    </span><span>|</span><span>       内容 3 </span><span>|</span>
</span></span></code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>效果：</p>
<blockquote>
<table>
<thead>
<tr>
<th>表头 1</th>
<th style="text-align:center">表头 2</th>
<th style="text-align:right">表头 3</th>
</tr>
</thead>
<tbody>
<tr>
<td>第一列的内容</td>
<td style="text-align:center">第二列的内容</td>
<td style="text-align:right">第三列的内容</td>
</tr>
<tr>
<td>内容 1</td>
<td style="text-align:center">内容 2</td>
<td style="text-align:right">内容 3</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="利用-html-绘制更为复杂的表格"> 利用 HTML 绘制更为复杂的表格</h3>
<p>虽然这样的表格可以满足绝大多数情况，但有时候我们仍然需要更为复杂的合并情况。可以利用 <code>HTML</code> 的 <code>table</code> 标签来实现。</p>
<p>当然，这需要一点点 <code>HTML</code> 的基础，不过没有关系，这很简单，下面代码对完全没有接触的人也很友好：</p>
<p>示例：</p>
<div><pre><code><span><span><span>&lt;</span>table</span><span>></span></span>
  <span><span><span>&lt;</span>tr</span><span>></span></span>
    <span><span><span>&lt;</span>th</span> <span>width</span><span><span>=</span><span>"</span>20%<span>"</span></span><span>></span></span>列宽 `width=20%`<span><span><span>&lt;/</span>th</span><span>></span></span>
    <span><span><span>&lt;</span>th</span> <span>width</span><span><span>=</span><span>"</span>45%<span>"</span></span> <span><span>style</span><span><span>=</span><span>"</span><span><span>text-align</span><span>:</span>center</span><span>"</span></span></span><span>></span></span>
      表头居中 `style="text-align:center"`
    <span><span><span>&lt;/</span>th</span><span>></span></span>
    <span><span><span>&lt;</span>th</span> <span>widht</span><span><span>=</span><span>"</span>20%<span>"</span></span> <span><span>style</span><span><span>=</span><span>"</span><span><span>text-align</span><span>:</span>right</span><span>"</span></span></span><span>></span></span>居右<span><span><span>&lt;/</span>th</span><span>></span></span>
    <span><span><span>&lt;</span>th</span> <span>widht</span><span><span>=</span><span>"</span>5%<span>"</span></span><span>></span></span>列3<span><span><span>&lt;/</span>th</span><span>></span></span>
  <span><span><span>&lt;/</span>tr</span><span>></span></span>
  <span><span><span>&lt;</span>tr</span><span>></span></span>
    <span><span><span>&lt;</span>td</span><span>></span></span>设置背景色<span><span><span>&lt;/</span>td</span><span>></span></span>
    <span><span><span>&lt;</span>td</span> <span>bgcolor</span><span><span>=</span>rgb(92,184,92)</span><span>></span></span>`bgcolor=rgb(92, 184, 92)`<span><span><span>&lt;/</span>td</span><span>></span></span>
    <span><span><span>&lt;</span>td</span> <span>bgcolor</span><span><span>=</span>#eea236</span><span>></span></span>`bgcolor=#eea236`<span><span><span>&lt;/</span>td</span><span>></span></span>
    <span><span><span>&lt;</span>td</span> <span>bgcolor</span><span><span>=</span>pink</span><span>></span></span>`bgcolor=pink`<span><span><span>&lt;/</span>td</span><span>></span></span>
  <span><span><span>&lt;/</span>tr</span><span>></span></span>
  <span><span><span>&lt;</span>tr</span><span>></span></span>
    <span><span><span>&lt;</span>td</span><span>></span></span>**合并列**<span><span><span>&lt;/</span>td</span><span>></span></span>
    <span><span><span>&lt;</span>td</span> <span>colspan</span><span><span>=</span><span>"</span>3<span>"</span></span> <span>align</span><span><span>=</span><span>"</span>center<span>"</span></span><span>></span></span>`起始列colspan=2` `align=center`<span><span><span>&lt;/</span>td</span><span>></span></span>
  <span><span><span>&lt;/</span>tr</span><span>></span></span>
  <span><span><span>&lt;</span>tr</span><span>></span></span>
    <span><span><span>&lt;</span>td</span> <span>rowspan</span><span><span>=</span><span>"</span>3<span>"</span></span><span>></span></span>**合并行** <span><span><span>&lt;</span>br</span> <span>/></span></span>`起始行rowspan=3`<span><span><span>&lt;/</span>td</span><span>></span></span>
    <span><span><span>&lt;</span>td</span> <span>align</span><span><span>=</span><span>"</span>center<span>"</span></span><span>></span></span>`align=center`对`th`无效<span><span><span>&lt;/</span>td</span><span>></span></span>
    <span><span><span>&lt;</span>td</span><span>></span></span>cell<span><span><span>&lt;/</span>td</span><span>></span></span>
    <span><span><span>&lt;</span>td</span><span>></span></span>cell<span><span><span>&lt;/</span>td</span><span>></span></span>
  <span><span><span>&lt;/</span>tr</span><span>></span></span>
  <span><span><span>&lt;</span>tr</span><span>></span></span>
    <span><span><span>&lt;</span>td</span> <span><span>style</span><span><span>=</span><span>"</span><span><span>text-align</span><span>:</span>right</span><span>"</span></span></span><span>></span></span>`style="text-align:right"`<span><span><span>&lt;/</span>td</span><span>></span></span>
    <span><span><span>&lt;</span>td</span><span>></span></span>cell<span><span><span>&lt;/</span>td</span><span>></span></span>
    <span><span><span>&lt;</span>td</span> <span>rowspan</span><span><span>=</span><span>"</span>2<span>"</span></span><span>></span></span>合并行 `rowspan=2`<span><span><span>&lt;/</span>td</span><span>></span></span>
  <span><span><span>&lt;/</span>tr</span><span>></span></span>
  <span><span><span>&lt;</span>tr</span><span>></span></span>
    <span><span><span>&lt;</span>td</span><span>></span></span>cell<span><span><span>&lt;/</span>td</span><span>></span></span>
    <span><span><span>&lt;</span>td</span><span>></span></span>cell<span><span><span>&lt;/</span>td</span><span>></span></span>
  <span><span><span>&lt;/</span>tr</span><span>></span></span>
  <span><span><span>&lt;</span>tr</span><span>></span></span>
    <span><span><span>&lt;</span>td</span><span>></span></span>cell<span><span><span>&lt;/</span>td</span><span>></span></span>
    <span><span><span>&lt;</span>td</span><span>></span></span>cell<span><span><span>&lt;/</span>td</span><span>></span></span>
    <span><span><span>&lt;</span>td</span><span>></span></span>cell<span><span><span>&lt;/</span>td</span><span>></span></span>
    <span><span><span>&lt;</span>td</span><span>></span></span>cell<span><span><span>&lt;/</span>td</span><span>></span></span>
  <span><span><span>&lt;/</span>tr</span><span>></span></span>
<span><span><span>&lt;/</span>table</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br></div></div><p>效果：</p>
<table>
   <tr>
        <th width=20%>列宽 `width=20%`</th>
        <th width=45% style="text-align:center">表头居中 `style="text-align:center"`</th>
        <th widht=20% style="text-align:right">居右</th>
        <th widht=5%>列3</th>
   </tr>
   <tr>
        <td >设置背景色 </td>
        <td bgcolor=rgb(92,184,92)>`bgcolor=rgb(92, 184, 92)`</td>
        <td bgcolor=#eea236>`bgcolor=#eea236`</td>
        <td bgcolor="pink">`bgcolor=pink`</td>
   </tr>
   <tr>
        <td>**合并列**</td>
        <td colspan=3 align=center> `起始列colspan=2` `align=center`</td>
   </tr>
   <tr>
        <td rowspan=3>**合并行** <br>`起始行rowspan=3`</td>
        <td align=center>`align=center`对`th`无效</td>
        <td>cell</td>
        <td>cell</td>
   </tr>
   <tr>
        <td style="text-align:right">`style="text-align:right"`</td>
        <td>cell</td>
        <td rowspan=2>合并行 `rowspan=2`</td>
   </tr>
   <tr>
        <td>cell</td>
        <td>cell</td>
   </tr>
   <tr><td>cell</td><td>cell</td><td>cell</td><td>cell</td></tr>
</table>
<h2 id="绘图"> 绘图</h2>
<p>markdown 本身并不可以绘图，但是通过一些插件可以实现，具体内容参看对应的插件文档。</p>
<h3 id="流程图"> 流程图</h3>
<p>具体的流程图语法，参看：<a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="noopener noreferrer">流程图语法 flowchart</a></p>
<div><pre><code>    ```flow
    st=>start: 开始:>https://www.jeremyjone.com
    op=>operation: My Operation
    cond=>condition: Yes or No?
    e=>end
    st->op->cond
    cond(yes)->e
    cond(no)->op
    ```
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><div><pre><code>st<span>=></span>start<span>:</span> 开始<span>:</span><span>></span>https<span>:</span><span>/</span><span>/</span>www<span>.</span>jeremyjone<span>.</span>com
op<span>=></span>operation<span>:</span> My Operation
cond<span>=></span>condition<span>:</span> Yes or No<span>?</span>
e<span>=></span>end
st<span>-</span><span>></span>op<span>-</span><span>></span>cond
<span>cond</span><span>(</span>yes<span>)</span><span>-</span><span>></span>e
<span>cond</span><span>(</span>no<span>)</span><span>-</span><span>></span>op
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id="序列图"> 序列图</h3>
<p>具体的序列图语法，参看：<a href="http://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="noopener noreferrer">序列图语法 js-sequence-diagrams</a></p>
<h2 id="公式"> 公式</h2>
<p>markdown 通过一系列的语法可以轻松绘制出复杂的公式。更多关于公式的语法，参看：<a href="https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="noopener noreferrer">数学公式语法 mathjax</a></p>
<p>示例：</p>
<div><pre><code>$\sqrt[3]{\frac xy}$

$\left(\frac{\sqrt x}{y^3}\right)$

$\sum_{i=0}^n i^2 = \frac{(n^2+n)(2n+1)}{6}$
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>效果：</p>
<p>\(\sqrt[3]{\frac xy}\)</p>
<p>\(\left(\frac{\sqrt x}{y^3}\right)\)</p>
<p>\(\sum_{i=0}^n i^2 = \frac{(n^2+n)(2n+1)}{6}\)</p>
<hr />
<section>
<ol>
<li id="fn1"><p>Markdown 是一种文本标记语言。 </p>
</li>
<li id="fn2"><p>HTML 是一种超文本标记语言。 </p>
</li>
<li id="fn3"><p>用于 markdown 的插件。 </p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    <item>
      <title>npm 使用</title>
      <link>https://docs.jeremyjone.com/document/npm/</link>
      <guid>https://docs.jeremyjone.com/document/npm/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">npm 使用</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="npm-使用"> npm 使用</h1>
<h2 id="安装"> 安装</h2>
<p><code>npm</code> 是 <code>Node</code> 默认的模块管理器，同时也是模块登记和管理系统，它随 <code>Node</code> 环境一起安装，不需要单独安装。</p>
<p>安装 <code>Node</code>，可以到 <a href="https://nodejs.org/en/" target="_blank" rel="noopener noreferrer">官网</a> 下载最新版本。</p>
<p>检查是否正确安装 <code>npm</code>，可以：</p>
<div><pre><code><span>npm</span> -v <span># 查看版本</span>
</code></pre>
<div><span>1</span><br></div></div><p>如果升级 <code>npm</code>，可以通过命令升级：</p>
<div><pre><code><span>npm</span> <span>install</span> npm@latest -g
</code></pre>
<div><span>1</span><br></div></div><h2 id="查看基本信息"> 查看基本信息</h2>
<h3 id="查看命令列表"> 查看命令列表</h3>
<div><pre><code><span>npm</span> <span>help</span>
</code></pre>
<div><span>1</span><br></div></div><p>该命令会显示所有命令列表。</p>
<h3 id="查看命令用法"> 查看命令用法</h3>
<div><pre><code><span>npm</span> -l
</code></pre>
<div><span>1</span><br></div></div><p>该命令会显示所有命令的使用说明，含各个命令的详细参数。</p>
<h3 id="查看版本"> 查看版本</h3>
<div><pre><code><span>npm</span> -v
</code></pre>
<div><span>1</span><br></div></div><h3 id="查看当前已安装的所有模块"> 查看当前已安装的所有模块</h3>
<div><pre><code><span>npm</span> list -global
<span># or</span>
<span>npm</span> list --g

<span># 显示这些包的第一层依赖关系，默认是 0</span>
<span>npm</span> list --g --depth<span>=</span><span>1</span> <span># 2 就是显示两层依赖关系</span>

<span># 显示项目中的模块结构</span>
<span>npm</span> list
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h2 id="配置"> 配置</h2>
<h3 id="查看配置"> 查看配置</h3>
<div><pre><code><span>npm</span> config list -json
</code></pre>
<div><span>1</span><br></div></div><p>该命令查看 <code>npm</code> 的详细配置信息。</p>
<h3 id="设置配置内容"> 设置配置内容</h3>
<p>所有配置内容都会存放到 <code>~/.npmrc</code> 文件中。</p>
<div><pre><code><span># 设置开发者名称</span>
<span>npm</span> config <span>set</span> init.author.name <span>'your name'</span>

<span># 设置开发者邮箱</span>
<span>npm</span> config <span>set</span> init.author.email <span>'your email'</span>

<span># 设置开发者地址</span>
<span>npm</span> config <span>set</span> init.author.url <span>'your url'</span>

<span># 设置许可证</span>
<span>npm</span> config <span>set</span> init.license <span>'MIT'</span> <span># 可以换成其他的，默认 ISC</span>

<span># 设置初始版本</span>
<span>npm</span> config <span>set</span> init.version <span>'0.0.1'</span> <span># 随意填写，默认 1.0.0</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>还有很多选项，可以参考查看命令自行修改。</p>
<p>修改完成后，每次初始化项目时，都会按照设置的内容创建 <code>package.json</code>，就不用每次单独修改了。</p>
<h2 id="查看、查找包"> 查看、查找包</h2>
<h3 id="查看包信息"> 查看包信息</h3>
<div><pre><code><span>npm</span> info <span>&lt;</span>module_name<span>></span>
<span># or</span>
<span>npm</span> view <span>&lt;</span>module_name<span>></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>所有模块都可以通过 <code>npm info</code> 命令查看具体信息，并且还可以快速获取字段内容：</p>
<div><pre><code><span>npm</span> info <span>&lt;</span>module_name<span>></span> <span>&lt;</span>field_name<span>></span>

<span># 例如</span>
<span>npm</span> info jz-gantt version
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>它可以快速查看任何包管理器中的所有包内容，无论是否安装在本地。</p>
<h3 id="查看包版本"> 查看包版本</h3>
<div><pre><code><span>npm</span> info <span>&lt;</span>module_name<span>></span> versions
<span># or</span>
<span>npm</span> view <span>&lt;</span>module_name<span>></span> versions
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>可以查看该包的所有版本</p>
<h3 id="打开包的地址"> 打开包的地址</h3>
<p>如果觉得信息不够多，可以尝试打开包的主页、仓库或者提交问题页面（如果存在）：</p>
<div><pre><code><span># 打开主页，对应 homepage 或者 repository 字段</span>
<span>npm</span> home <span>&lt;</span>package_name<span>></span>

<span># 打开仓库，对应 repository 字段</span>
<span>npm</span> repo <span>&lt;</span>package_name<span>></span>

<span># 提交 bug，对应 bugs 字段</span>
<span>npm</span> bug <span>&lt;</span>package_name<span>></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h3 id="查找包"> 查找包</h3>
<div><pre><code><span>npm</span> search <span>&lt;</span>keyword<span>></span>
</code></pre>
<div><span>1</span><br></div></div><p>用于搜索 <code>npm</code> 仓库，支持字符串和正则表达式（需要用 <code>//</code> 包裹，与 <code>JavaScript</code> 用法一样，例如：<code>npm serach /jz*/</code>）。</p>
<h2 id="初始化项目"> 初始化项目</h2>
<p>初始化用来生成一个 <code>package.json</code> 文件，可以快速生成一个 <code>npm</code> 初始项目。</p>
<div><pre><code><span>npm</span> init <span>[</span>-y -f<span>]</span>
</code></pre>
<div><span>1</span><br></div></div><p>生成过程中会对用户进行提问，附加参数可以免去</p>
<ul>
<li><code>-y</code>：全部 yes</li>
<li><code>-f</code>：强制生成</li>
</ul>
<blockquote>
<p>反正我在使用过程中没有发现什么区别，一般来说使用 <code>-y</code></p>
</blockquote>
<h2 id="安装包"> 安装包</h2>
<div><pre><code><span>npm</span> <span>install</span> <span>&lt;</span>package_name<span>></span>
</code></pre>
<div><span>1</span><br></div></div><p>模块可以被安装到项目中（默认），也可以安装到全局中。一般安装到全局的模块应该是工具模块，它可以被所有项目用到。</p>
<p>除了包名，还支持多种格式：</p>
<div><pre><code><span>npm</span> <span>install</span> <span>[</span><span>&lt;</span>@scope<span>></span>/<span>]</span><span>&lt;</span>pkg<span>></span>
<span>npm</span> <span>install</span> <span>[</span><span>&lt;</span>@scope<span>></span>/<span>]</span><span>&lt;</span>pkg<span>></span>@<span>&lt;</span>tag<span>></span>
<span>npm</span> <span>install</span> <span>[</span><span>&lt;</span>@scope<span>></span>/<span>]</span><span>&lt;</span>pkg<span>></span>@<span>&lt;</span>version<span>></span>
<span>npm</span> <span>install</span> <span>[</span><span>&lt;</span>@scope<span>></span>/<span>]</span><span>&lt;</span>pkg<span>></span>@<span>&lt;</span>version range<span>></span>
<span>npm</span> <span>install</span> <span>&lt;</span>alias<span>></span>@npm:<span>&lt;</span>name<span>></span>
<span>npm</span> <span>install</span> <span>&lt;</span>folder<span>></span>
<span>npm</span> <span>install</span> <span>&lt;</span>tarball file<span>></span>
<span>npm</span> <span>install</span> <span>&lt;</span>tarball url<span>></span>
<span>npm</span> <span>install</span> <span>&lt;</span>git:// url<span>></span>
<span>npm</span> <span>install</span> <span>&lt;</span>github username<span>></span>/<span>&lt;</span>github project<span>></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h3 id="强制重新安装"> 强制重新安装</h3>
<p>安装会首先检查是否存在，如果已经安装，则不会重复安装，即使有版本更新。如果希望覆盖安装，则需要使用 <code>-f</code> 来强制安装：</p>
<div><pre><code><span>npm</span> <span>install</span> <span>&lt;</span>package_name<span>></span> -f
</code></pre>
<div><span>1</span><br></div></div><p>或者也可以 。</p>
<h3 id="安装指定版本"> 安装指定版本</h3>
<div><pre><code><span>npm</span> <span>install</span> <span>&lt;</span>package_name<span>></span>@<span>&lt;</span>version<span>></span>
</code></pre>
<div><span>1</span><br></div></div><p>version 参数：</p>
<ul>
<li><code>latest</code>：安装最新的正式版本</li>
<li><code>beta</code>：安装最新的预览版</li>
<li><code>1.0.0</code>：安装指定版本</li>
<li><code>&gt;=1.0.0 &lt;2.0.0</code>：安装指定范围的最新版本</li>
</ul>
<p>如果使用 <code>--save-exact</code> 参数，则保证安装确切版本</p>
<h3 id="安装的依赖关系"> 安装的依赖关系</h3>
<p>安装的依赖关系分为两种：</p>
<ul>
<li><code>dependencies</code>：生产环境依赖</li>
<li><code>devDependencies</code>：开发环境依赖</li>
</ul>
<p>简单理解，就是在开发中需要用到的环境，和生产中需要用到的环境。比如一个 <code>vue</code> 项目，<code>vue</code> 一定是生产环境依赖，而类似 <code>scss-loader</code>、<code>babel</code> 等则属于开发环境依赖。</p>
<p>它们安装的参数也有所不同：</p>
<ul>
<li><code>--save</code> / <code>-S</code>：安装到生产环境依赖</li>
<li><code>--save-dev</code> / <code>-D</code>：安装到开发环境依赖</li>
</ul>
<p>在 <code>package.json</code> 文件中，可以看到会保存到不同字段中。</p>
<div><pre><code><span>npm</span> <span>install</span> jz-gantt -S
<span>npm</span> <span>install</span> jest -D
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h3 id="安装所有内容"> 安装所有内容</h3>
<p>在项目中，可以通过 <code>npm install</code> 来安装所有包。</p>
<div><pre><code><span>npm</span> <span>install</span>

<span># 仅安装生产环境包</span>
<span>npm</span> <span>install</span> --production
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id="检查项目中是否存在多余的包"> 检查项目中是否存在多余的包</h3>
<p>随着项目增大，可能会出现 <code>node_modules</code> 中包含多余的包，这些包已经在 <code>package.json</code> 中移除，通过命令可以快速查看：</p>
<div><pre><code><span>npm</span> prune
</code></pre>
<div><span>1</span><br></div></div><h2 id="更新包"> 更新包</h2>
<div><pre><code><span>npm</span> update <span>&lt;</span>package_name<span>></span>

<span># 升级全局包</span>
<span>npm</span> update -g <span>&lt;</span>package_name<span>></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>还可以先查看是否有新版本，然后再决定是否升级：</p>
<div><pre><code><span>npm</span> outdated <span>[</span><span>&lt;</span>package_name<span>></span><span>]</span>
</code></pre>
<div><span>1</span><br></div></div><h2 id="卸载包"> 卸载包</h2>
<div><pre><code><span>npm</span> uninstall <span>&lt;</span>package_name<span>></span>

<span># 卸载全局包</span>
<span>npm</span> uninstall -g <span>&lt;</span>package_name<span>></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="发布、管理包"> 发布、管理包</h2>
<h3 id="注册账户"> 注册账户</h3>
<p>首先需要在 <a href="https://www.npmjs.com/" target="_blank" rel="noopener noreferrer">npm 官网</a> 注册一个账号，然后添加到本地 <code>npm</code> 环境中：</p>
<div><pre><code><span>npm</span> adduser
</code></pre>
<div><span>1</span><br></div></div><p>输入后按照要求依次填入内容即可。</p>
<h3 id="登录账户"> 登录账户</h3>
<div><pre><code><span>npm</span> login
</code></pre>
<div><span>1</span><br></div></div><p>依次填入对应信息即可登录，登录后就可以发布自己的包了。</p>
<h3 id="管理维护者"> 管理维护者</h3>
<p>默认情况下，维护者就是作者本人，其他人无权操作。</p>
<div><pre><code><span># 查看维护者</span>
<span>npm</span> owner <span>ls</span> <span>&lt;</span>package_name<span>></span>

<span># 新增维护者</span>
<span>npm</span> owner <span>add</span> <span>&lt;</span>user<span>></span> <span>&lt;</span>package_name<span>></span>

<span># 删除维护者</span>
<span>npm</span> owner <span>rm</span> <span>&lt;</span>user<span>></span> <span>&lt;</span>package_name<span>></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h3 id="发布包"> 发布包</h3>
<p>通过命令：</p>
<div><pre><code><span>npm</span> publish
</code></pre>
<div><span>1</span><br></div></div><p>即可发布包。在发布前，需要将所有信息核对准确后方可发布。</p>
<ul>
<li>
<p><code>name</code> 与 <code>version</code> 字段：系统使用 <code>name</code> 字段生成包名，<code>version</code> 字段生成版本，所以这两个字段是必须且应该正确的。</p>
</li>
<li>
<p>所有即将公开发布的包，都应当是 <code>public</code> 状态的，即在 <code>package.json</code> 中：</p>
<div><pre><code><span>{</span>
  <span>"private"</span><span>:</span> <span>false</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>这样才可以正常发布。该字段为 <code>true</code> 适合发布到私有服务器中。</p>
</li>
<li>
<p>仓库地址要保证正确。可以通过  来查看和设置。</p>
</li>
</ul>
<div><p>提示</p>
<p>发布时需要注意，同一版本不能发布多次，它不会覆盖发布。</p>
</div>
<h4 id="发布测试版"> 发布测试版</h4>
<p>默认发布正式版，也就是 <code>latest</code>，如果想发布测试版，可以通过 <code>beta</code> 来标注：</p>
<div><pre><code><span>npm</span> publish --tag beta
</code></pre>
<div><span>1</span><br></div></div><p>注意，无论版本号是什么，必须带有 <code>--tag beta</code> 才会发布成为测试版。</p>
<p>通常来说，测试版本号为 <code>v1.0.0-beta.0</code>，但如果不带 <code>beta</code> 标签，也会按照正式版发布，这显然是很不友好的。</p>
<p>如果这样发布错了，也是可以通过命令修改的：</p>
<div><pre><code><span># 将某个包的某个版本修改为 beta 版本</span>
<span>npm</span> dist-tag <span>add</span> <span>&lt;</span>package_name<span>></span>@<span>&lt;</span>version<span>></span> beta

<span># 将某个包的某个版本修改为正式版本</span>
<span>npm</span> dist-tag <span>add</span> <span>&lt;</span>package_name<span>></span>@<span>&lt;</span>version<span>></span> latest

<span># 将某个包的某个版本修改为先行版本</span>
<span>npm</span> dist-tag <span>add</span> <span>&lt;</span>package_name<span>></span>@<span>&lt;</span>version<span>></span> next
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h4 id="发布带作用域的包"> 发布带作用域的包</h4>
<p>很多包都带有 <code>@xxx/yyy</code> 样式的作用域，这通常是私有包，需要付费发布。但是随着包越来越多，很多人也开始通过作用域作为一种区分。</p>
<ul>
<li>
<p>项目名就应该有作用域：</p>
<ul>
<li>新建一个带作用域的项目：</li>
</ul>
<div><pre><code><span>npm</span> init --scope<span>=</span>@<span>&lt;</span>username<span>></span> -y
</code></pre>
<div><span>1</span><br></div></div><p>这里需要使用你注册的用户名作为<strong>作用域名</strong>。</p>
<ul>
<li>或者将 <code>name</code> 字段修改为 <code>@&lt;username&gt;/&lt;package_name&gt;</code> 样式。</li>
</ul>
</li>
<li>
<p>然后可以发布包。与正常发布不一样，由于是带有域的包，必须添加参数：</p>
</li>
</ul>
<div><pre><code><span>npm</span> publish --access public
</code></pre>
<div><span>1</span><br></div></div><div><p>提示</p>
<p>我试了一下，免费用户想发布作用域应该只能是用户名，填写其它域名都发布失败，返回 403。</p>
</div>
<h3 id="升级包"> 升级包</h3>
<p>升级与发布一样，只是每次迭代之后，需要更新版本号。版本号的更新，应当按照变更规范进行：</p>
<table>
<thead>
<tr>
<th style="text-align:center">等级</th>
<th style="text-align:center">规则</th>
<th style="text-align:center">示例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">patch</td>
<td style="text-align:center">补丁版本，修复错误</td>
<td style="text-align:center">1.0.1</td>
</tr>
<tr>
<td style="text-align:center">minor</td>
<td style="text-align:center">小版本，有一些向后兼容的新功能</td>
<td style="text-align:center">1.1.1</td>
</tr>
<tr>
<td style="text-align:center">major</td>
<td style="text-align:center">大版本，有重大变更</td>
<td style="text-align:center">2.0.0</td>
</tr>
</tbody>
</table>
<p>这在 <a href="https://semver.org/" target="_blank" rel="noopener noreferrer">语义化版本</a> 中有详细的解释。</p>
<p>通过脚本可以修改版本号：</p>
<div><pre><code><span>npm</span> version <span>&lt;</span>level<span>></span>
</code></pre>
<div><span>1</span><br></div></div><ul>
<li><code>level</code>：支持具体版本号，也支持等级名称。</li>
</ul>
<p>最后可以通过 <code>npm publish</code> 进行发布。</p>
<h3 id="废弃包"> 废弃包</h3>
<p>废弃是指不再维护或者不再使用，但仓库中保留该包，安装时会有提示。</p>
<div><pre><code><span>npm</span> deprecate <span>[</span><span>&lt;</span>@scope<span>></span>/<span>]</span><span>&lt;</span>package_name<span>></span><span>[</span>@<span>&lt;</span>version<span>></span><span>]</span> <span>&lt;</span>message<span>></span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="删除包"> 删除包</h3>
<p>删除则是将某个包完全从库中移除，从此安装不了了。</p>
<div><pre><code><span># 删除某个版本</span>
<span>npm</span> unpublish <span>[</span><span>&lt;</span>@scope<span>></span>/<span>]</span><span>&lt;</span>package_name<span>></span>@<span>&lt;</span>version<span>></span>

<span># 删除整个包的所有版本内容</span>
<span>npm</span> unpublish <span>[</span><span>&lt;</span>@scope<span>></span>/<span>]</span><span>&lt;</span>package_name<span>></span> --force
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><div><p>警告</p>
<p>与其他操作不同，删除包可能会带来很多负面效果，所以具有如下限制：</p>
<ul>
<li>删除的版本 24 小时以后才可以再次发布</li>
<li>发布 72 小时之内的包才可以被删除</li>
</ul>
</div>
<h2 id="运行脚本"> 运行脚本</h2>
<p><code>npm</code> 还有一个很重要的功能，就是执行项目脚本。</p>
<p>在项目根目录下的 <code>package.json</code> 文件中，有一个 <code>scripts</code> 字段，里面是可执行的所有脚本内容，可以自定义，通过 <code>npm run</code> 可以执行。</p>
<div><pre><code><span># 例如一般的</span>
<span>npm</span> run dev
<span>npm</span> run serve
<span>npm</span> run build
<span>npm</span> run <span>test</span>
<span># 等等</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>这些在不同项目中都会有不同的具体定义。</p>
<h3 id="钩子脚本"> 钩子脚本</h3>
<p>每一条指令，都可以配置 <code>前置指令</code> 与 <code>后置指令</code>，分别对应：</p>
<ul>
<li><code>pre</code>：前置</li>
<li><code>post</code>：后置</li>
</ul>
<p>运行一条指令，系统会自动按照：<code>前置指令</code>、<code>指令</code>、<code>后置指令</code> 的顺序执行。</p>
<p>举个例子。有这么一段指令：</p>
<div><pre><code>scripts<span>:</span> <span>{</span>
    <span>"test"</span><span>:</span> <span>"echo \"This is test\" &amp;&amp; exit 0"</span><span>,</span>
    <span>"pretest"</span><span>:</span> <span>"echo \"This is pretest\" &amp;&amp; exit 0"</span><span>,</span>
    <span>"posttest"</span><span>:</span> <span>"echo \"This is posttest\" &amp;&amp; exit 0"</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>当我们执行 <code>npm run test</code> 的时候，系统会先执行 <code>pretest</code>，然后执行 <code>test</code>，最后执行 <code>posttest</code>。</p>
<img :src="$withBase('/assets/pic/npm-hook-script.png')" alt="npm-hook-script">
<h2 id="管理源"> 管理源</h2>
<p>对于多个仓库源，可以通过 <code>nrm</code> 快速管理。</p>
<h3 id="安装-nrm"> 安装 nrm</h3>
<div><pre><code><span>npm</span> i nrm -g
</code></pre>
<div><span>1</span><br></div></div><h3 id="查看-nrm-版本"> 查看 nrm 版本</h3>
<p>安装成功后，通过：</p>
<div><pre><code>nrm -V
</code></pre>
<div><span>1</span><br></div></div><h3 id="查看-nrm-文档"> 查看 nrm 文档</h3>
<p>可以查看安装版本，验证是否安装成功，然后可以查看帮助文档：</p>
<div><pre><code>nrm <span>help</span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="查看源列表"> 查看源列表</h3>
<div><pre><code>nrm <span>ls</span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="新增源"> 新增源</h3>
<div><pre><code>nrm <span>add</span> <span>&lt;</span>registry<span>></span> <span>&lt;</span>url<span>></span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="删除源"> 删除源</h3>
<div><pre><code>nrm del <span>&lt;</span>registry<span>></span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="切换源"> 切换源</h3>
<div><pre><code>nrm use <span>&lt;</span>registry<span>></span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="测试仓库的链接"> 测试仓库的链接</h3>
<div><pre><code>nrm <span>test</span> <span>[</span><span>&lt;</span>registry<span>></span><span>]</span>
</code></pre>
<div><span>1</span><br></div></div><p>不给 <code>registry</code> 则测试所有链接。</p>
]]></content:encoded>
    </item>
    <item>
      <title>正则表达式的使用</title>
      <link>https://docs.jeremyjone.com/document/regexp/</link>
      <guid>https://docs.jeremyjone.com/document/regexp/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">正则表达式的使用</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="正则表达式的使用"> 正则表达式的使用</h1>
<h2 id="什么是正则表达式"> 什么是正则表达式</h2>
<p>正则表达式是高级文本匹配模式，用于搜索文本中的指定字符串。其本质是由一些字符和特殊字符组成的字符串，其中的字符可以是字母，数字，特殊字符，可以是零个或多个。这个字符串可以用来搜索文本中的指定字符串。</p>
<h3 id="特点"> 特点</h3>
<ul>
<li>方便进行文本搜索和修改</li>
<li>它不基于某个语言，并且支持语言众多</li>
<li>使用灵活，变化多样</li>
</ul>
<p>通过正则表达式，可以快速查找、替换、修改特定文本内容。</p>
<h2 id="语法"> 语法</h2>
<h3 id="元字符"> 元字符</h3>
<h4 id="匹配字符"> 匹配字符</h4>
<table>
<thead>
<tr>
<th style="text-align:center">定义</th>
<th style="text-align:center">标识符</th>
<th style="text-align:left">规则</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">普通字符</td>
<td style="text-align:center"><code>abc</code></td>
<td style="text-align:left">匹配对应的普通字符</td>
<td style="text-align:left">就是一一对应关系</td>
</tr>
<tr>
<td style="text-align:center">任意单一字符</td>
<td style="text-align:center"><code>.</code></td>
<td style="text-align:left">匹配除 <code>\n</code> 外的任意一个字符</td>
<td style="text-align:left">任意匹配一个字符</td>
</tr>
<tr>
<td style="text-align:center">匹配字符集</td>
<td style="text-align:center"><code>[abc]</code></td>
<td style="text-align:left">匹配中括号中的字符集</td>
<td style="text-align:left">一个区间可以匹配到多个指定字符。通常该字符集有：<code>[0-9]</code>、<code>[a-z]</code>、<code>[A-Z]</code>，分别对应数字、小写字母、大写字母</td>
</tr>
<tr>
<td style="text-align:center">不匹配符号</td>
<td style="text-align:center"><code>[^]</code></td>
<td style="text-align:left">在字符集前面添加 <code>^</code> 表示不匹配区间</td>
<td style="text-align:left">一个区间不能包含指定字符。通常该字符集有：<code>[^0-9]</code>、<code>[^_0-9a-zA-Z]</code>，分别对应非数字、特殊符号（排除普通符号就是特殊符号）</td>
</tr>
<tr>
<td style="text-align:center">匹配任意数字</td>
<td style="text-align:center"><code>\d</code></td>
<td style="text-align:left">匹配任意数字</td>
<td style="text-align:left">可以匹配任意数字，等价 <code>[0-9]</code></td>
</tr>
<tr>
<td style="text-align:center">匹配任意非数字</td>
<td style="text-align:center"><code>\D</code></td>
<td style="text-align:left">匹配任意非数字</td>
<td style="text-align:left">可以匹配任意非数字，等价 <code>[^0-9]</code></td>
</tr>
<tr>
<td style="text-align:center">匹配任意普通字符</td>
<td style="text-align:center"><code>\w</code></td>
<td style="text-align:left">匹配任意普通字符</td>
<td style="text-align:left">可以匹配任意普通字符，等价 <code>[a-zA-Z0-9_]</code></td>
</tr>
<tr>
<td style="text-align:center">匹配任意非普通字符</td>
<td style="text-align:center"><code>\W</code></td>
<td style="text-align:left">匹配任意非普通字符</td>
<td style="text-align:left">可以匹配任意非普通字符，等价 <code>[^a-zA-Z0-9_]</code></td>
</tr>
<tr>
<td style="text-align:center">匹配任意空白字符</td>
<td style="text-align:center"><code>\s</code></td>
<td style="text-align:left">匹配任意空白字符</td>
<td style="text-align:left">可以匹配任意空白字符，等价 <code>[\t\n\r\f\0]</code></td>
</tr>
<tr>
<td style="text-align:center">匹配任意非空白字符</td>
<td style="text-align:center"><code>\S</code></td>
<td style="text-align:left">匹配任意非空白字符</td>
<td style="text-align:left">可以匹配任意非空白字符，等价 <code>[^\t\n\r\f\0]</code></td>
</tr>
<tr>
<td style="text-align:center">以某些字符起始</td>
<td style="text-align:center"><code>^(?=abc).*</code></td>
<td style="text-align:left"><code>^(?=)</code>括号中填写匹配的字符</td>
<td style="text-align:left">以abc起始</td>
</tr>
<tr>
<td style="text-align:center">以某些字符结尾</td>
<td style="text-align:center"><code>(?&lt;=abc)$</code></td>
<td style="text-align:left"><code>(?&lt;=)$</code>括号中填写匹配的字符</td>
<td style="text-align:left">以abc起始</td>
</tr>
</tbody>
</table>
<ul>
<li><code>-</code> 连接符在字符集中表示范围，如 <code>[a-zA-Z0-9]</code> 表示匹配 <code>a</code> 到 <code>z</code>、<code>A</code> 到 <code>Z</code>、<code>0</code> 到 <code>9</code>。</li>
</ul>
<h4 id="不匹配"> 不匹配</h4>
<table>
<thead>
<tr>
<th style="text-align:center">定义</th>
<th style="text-align:center">标识符</th>
<th style="text-align:left">规则</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">不匹配某字符集</td>
<td style="text-align:center"><code>[^a]</code></td>
<td style="text-align:left"><code>[^]</code>中括号中填写不匹配的字符集</td>
<td style="text-align:left">不匹配字符a</td>
</tr>
<tr>
<td style="text-align:center">不以某些字符起始</td>
<td style="text-align:center"><code>^(?!abc).*</code></td>
<td style="text-align:left"><code>^(?!)</code>括号中填写不匹配的字符</td>
<td style="text-align:left">不以abc起始</td>
</tr>
<tr>
<td style="text-align:center">不以某些字符结尾</td>
<td style="text-align:center"><code>(?&lt;!abc)$</code></td>
<td style="text-align:left"><code>(?&lt;!)$</code>括号中填写不匹配的字符</td>
<td style="text-align:left">不以abc起始</td>
</tr>
</tbody>
</table>
<h4 id="特殊字符"> 特殊字符</h4>
<table>
<thead>
<tr>
<th style="text-align:center">定义</th>
<th style="text-align:center">标识符</th>
<th style="text-align:left">规则</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">或</td>
<td style="text-align:center"><code>|</code></td>
<td style="text-align:left">同一地方匹配可以匹配多个指定的值</td>
<td style="text-align:left">与匹配字符集类似，但这里可以匹配更多内容。比如：<code>hello|world</code>，可以匹配 <code>hello</code>，也可以匹配到 <code>world</code>，不再拘泥于一个字符</td>
</tr>
<tr>
<td style="text-align:center">匹配起始</td>
<td style="text-align:center"><code>^</code> 或 <code>\A</code></td>
<td style="text-align:left">用于匹配一个字符串的起始位置</td>
<td style="text-align:left">通常 <code>^</code> 与其他匹配字符同时使用，用来匹配起始内容是否包含指定内容</td>
</tr>
<tr>
<td style="text-align:center">匹配结束</td>
<td style="text-align:center"><code>$</code> 或 <code>\Z</code></td>
<td style="text-align:left">用于匹配一个字符串的结束位置</td>
<td style="text-align:left">通常 <code>$</code> 与其他匹配字符同时使用，用来匹配结束内容是否包含指定内容</td>
</tr>
<tr>
<td style="text-align:center">匹配边界</td>
<td style="text-align:center"><code>\b</code></td>
<td style="text-align:left">匹配一个单词的边界（数字、字母、下划线和其他字符的交界处认为是单词边界）</td>
<td style="text-align:left">示例：<br />- <code>\bis\b</code> -&gt; <code>This is a test</code> -&gt; <code>[is]</code>(只匹配到 This 后面的 is)<br />- <code>is\b</code> -&gt; <code>This is a test</code> -&gt; <code>[is, is]</code>(匹配到 This 里面的 is 与 This 后面的 is)</td>
</tr>
<tr>
<td style="text-align:center">匹配非边界</td>
<td style="text-align:center"><code>\B</code></td>
<td style="text-align:left">匹配一个单词的非边界</td>
<td style="text-align:left">与 <code>\b</code> 正好相反</td>
</tr>
<tr>
<td style="text-align:center">匹配重复0至多次</td>
<td style="text-align:center"><code>*</code></td>
<td style="text-align:left">匹配前面的字符(集)0-n次</td>
<td style="text-align:left">示例：<code>glo*</code> -&gt; <code>Green glass globes glow greenly.</code> -&gt; <code>[gl, glo, glo]</code></td>
</tr>
<tr>
<td style="text-align:center">匹配重复1至多次</td>
<td style="text-align:center"><code>+</code></td>
<td style="text-align:left">匹配前面的字符(集)1-n次</td>
<td style="text-align:left">示例：<code>gre+</code> -&gt; <code>Green glass globes glow greenly.</code> -&gt; <code>[gree, gree]</code></td>
</tr>
<tr>
<td style="text-align:center">匹配重复0或1次</td>
<td style="text-align:center"><code>?</code></td>
<td style="text-align:left">匹配前面的字符(集)0-1次</td>
<td style="text-align:left">示例：<code>gr?</code> -&gt; <code>Green glass globes glow greenly.</code> -&gt; <code>[gr, g, g, g, gr]</code></td>
</tr>
<tr>
<td style="text-align:center">匹配指定次数</td>
<td style="text-align:center"><code>{n}</code></td>
<td style="text-align:left">匹配前面的字符(集)指定n次（n 为一个数值）</td>
<td style="text-align:left">示例：<code>gre{2}</code> -&gt; <code>Green glass globes glow greenly.</code> -&gt; <code>[gree, gree]</code></td>
</tr>
<tr>
<td style="text-align:center">匹配指定范围次数</td>
<td style="text-align:center"><code>{n,m}</code></td>
<td style="text-align:left">匹配前面的字符(集)指定n-m次（n、m 为一个数值）</td>
<td style="text-align:left">示例：<code>gre{1,2}</code> -&gt; <code>Green glass globes glow greenly.</code> -&gt; <code>[gree, gree]</code></td>
</tr>
</tbody>
</table>
<h3 id="转义"> 转义</h3>
<p>上面都是正则表达式的原始字符串，如果需要使用正则表达式中的特殊字符，可以使用转义字符来转义。</p>
<p>特殊字符一般都是用 <code>\</code> 来转义。如遇到匹配 <code>?</code>、<code>*</code>、<code>+</code>、<code>$</code> 等特殊具有意义的字符，都可以通过 <code>\</code> 转义:</p>
<ul>
<li><code>?</code> -&gt; <code>\?</code></li>
<li><code>*</code> -&gt; <code>\*</code></li>
<li><code>+</code> -&gt; <code>\+</code></li>
<li><code>$</code> -&gt; <code>\$</code></li>
</ul>
<p>其他同理。</p>
<p>对于转义字符 <code>\</code>，通过 <code>\\</code> 来转义匹配反斜杠。</p>
<h2 id="贪婪"> 贪婪</h2>
<p>贪婪是一种匹配规则，它会匹配尽可能多的内容，比如：<code>a+</code>，当遇到 <code>aaaaa</code> 的时候，会匹配全部，即：<code>aaaaa</code>。</p>
<p>如果我们不希望贪婪，而是尽可能少的去匹配（匹配一个甚至0个），使用 <code>?</code> 来禁用贪婪即可。</p>
<p>如：</p>
<table>
<thead>
<tr>
<th style="text-align:center">规则</th>
<th style="text-align:center">内容</th>
<th>匹配到的值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>a+?</code></td>
<td style="text-align:center"><code>aaaaa</code></td>
<td><code>[a]</code></td>
</tr>
<tr>
<td style="text-align:center"><code>a{2,4}?</code></td>
<td style="text-align:center"><code>aaaaa</code></td>
<td><code>[aa]</code></td>
</tr>
<tr>
<td style="text-align:center"><code>a{2,4}</code></td>
<td style="text-align:center"><code>aaaaa</code></td>
<td><code>[aaaaa]</code></td>
</tr>
</tbody>
</table>
<h2 id="分组"> 分组</h2>
<p>默认情况下，我们只有一个组，就是全部。也可以通过 <code>(...)</code> 来分组，可以获取到匹配的内容。默认返回一个数组，第一项是全部匹配到的内容，后面依次是小括号的添加顺序。比如：</p>
<table>
<thead>
<tr>
<th style="text-align:center">规则</th>
<th style="text-align:center">内容</th>
<th>匹配到的值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>(http[s]?)://(\S+)</code></td>
<td style="text-align:center"><code>https://www.jeremyjone.com</code></td>
<td>[<code>https://www.jeremyjone.com</code>, <code>https</code>, <code>www.jeremyjone.com</code>]</td>
</tr>
</tbody>
</table>
<ul>
<li>正则表达式增加子组后对整体匹配没有影响</li>
<li>每个正则表达式可以有很多子组，子组由外到内、从左到右排列</li>
<li>子组可以改变重复行为，将子组作为一个整体重复</li>
</ul>
<h2 id="修饰符"> 修饰符</h2>
<p>修饰符用于标记指定额外的匹配策略。它不在表达式内部，而是在表达式外部。</p>
<blockquote>
<p>不同语言的修饰符位置写法不太一样。</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">修饰符</th>
<th style="text-align:center">含义</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>i</code></td>
<td style="text-align:center">ignore 忽略大小写</td>
<td><code>[a-z]</code> -&gt; <code>[a-zA-Z]</code></td>
</tr>
<tr>
<td style="text-align:center"><code>m</code></td>
<td style="text-align:center">multi line 多行模式</td>
<td>使用 <code>^</code> 与 <code>$</code> 匹配每一行的起始和结尾</td>
</tr>
<tr>
<td style="text-align:center"><code>s</code></td>
<td style="text-align:center">dotall 匹配包括换行符的所有字符</td>
<td>默认 <code>.</code> 无法匹配到 <code>\n</code>。加上 <code>s</code> 后，<code>.</code> 是可以匹配到 <code>\n</code> 的</td>
</tr>
<tr>
<td style="text-align:center"><code>u</code></td>
<td style="text-align:center">Unicode 模式</td>
<td>使用 Unicode 编码，可以匹配中文</td>
</tr>
<tr>
<td style="text-align:center"><code>g</code></td>
<td style="text-align:center">global 全局匹配</td>
<td>全局匹配，匹配所有的匹配结果</td>
</tr>
</tbody>
</table>
]]></content:encoded>
    </item>
    <item>
      <title>Vim 使用说明</title>
      <link>https://docs.jeremyjone.com/document/vim/</link>
      <guid>https://docs.jeremyjone.com/document/vim/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">Vim 使用说明</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="vim-使用说明"> Vim 使用说明</h1>
<h2 id="打开文件"> 打开文件</h2>
<p><code>vim filename</code>     打开文件</p>
<p><code>vim -R filename</code>     只读打开文件</p>
<p><code>vim -M filename</code>     强制避免对文件进行修改打开文件</p>
<p><code>vim filename1 filename2 filename3</code>     同时打开多个文件，但是只显示第一个文件内容</p>
<p><code>:next | :n</code>     编辑下一个文件</p>
<p><code>:wnext | :wn</code>     保存当前文件内容并且继续编辑下一个文件</p>
<p><code>Ctrl+^</code>     在两个文件之间切换</p>
<p><code>vim -o filename1 filename2</code>     为每一个文件打开一个窗口</p>
<p><code>:args filename4 filename5 filename6</code>     在不关闭vim的同时，重新定义文件列表</p>
<h2 id="保存和退出"> 保存和退出</h2>
<p><code>:w</code>     保存</p>
<p><code>:q | :quit</code>     退出</p>
<p><code>ZZ | :wq | :x</code>     保存退出</p>
<p><code>ZQ | :q!</code>     不保存直接退出</p>
<p><code>:edit filename | :e filename</code>     编辑另一个文件</p>
<p><code>:e!</code>     放弃当前文件所有修改并重新载入原始内容</p>
<p><code>:qall</code>     放弃所有窗口的修改并退出</p>
<p><code>:wall</code>     保存所有窗口的修改</p>
<p><code>:wqall</code>     保存所有修改并退出</p>
<p><code>:w filename | :sav filename | :saveas filename</code>     另存为</p>
<p><code>:f filename | :file filename</code>     将修改的版本另存为新文件，同时不保存源文件的修改</p>
<p><code>:set autowrite</code>     设置自动存盘</p>
<div><pre><code>该命令在每个:next、:rewind、:last、:first、:previous、:stop、:suspend、:tag、:!、:make、Ctrl+]、Ctrl+^命令时执行。
</code></pre>
</div><h2 id="visual模式"> Visual模式</h2>
<p><code>v</code>     进入Visual模式，从光标当前位置开始，移动所经过的内容都会被选中，直到下一次v结束</p>
<p><code>V</code>     进入Visual模式，从光标当前行首开始，移动所经过的行都会被选中，直到下一次V结束</p>
<p><code>Ctrl+v</code>     从光标当前位置开始，选中光标起点和终点所构成的矩形区域，再按Ctrl+v结束</p>
<p><code>ggVG</code>     快速全选，gg：转到行首，V：选择整行，G：转到尾行</p>
<h2 id="显示设置"> 显示设置</h2>
<p><code>:args</code>     显示当前文件</p>
<p><code>:set number | :set nu!</code>     显示行号</p>
<p><code>:set nonumber | :set nonu!</code>     不显示行号</p>
<p><code>:set ruler</code>     在Vim窗口右下角显示当前光标位置</p>
<p><code>:set autoindent</code>     自动缩进</p>
<p><code>:set hlsearch</code>     查询结果高亮</p>
<p><code>:set nohlsearch</code>     取消查询结果高亮</p>
<p><code>:split | :vsplit</code>     分割窗口</p>
<p><code>Ctrl+w</code>     切换当前活动窗口</p>
<p><code>Ctrl+w h</code>     切换到左边窗口</p>
<p><code>Ctrl+w j</code>     切换到下边窗口</p>
<p><code>Ctrl+w k</code>     切换到上边窗口</p>
<p><code>Ctrl+w i</code>     切换到右边窗口</p>
<p><code>Ctrl+w t</code>     切换到顶部窗口</p>
<p><code>Ctrl+w b</code>     切换到底部窗口</p>
<p><code>:close</code>     关闭活动窗口，阻止关闭最后一个活动窗口</p>
<p><code>:only</code>    关闭除当前活动窗口之外的所有窗口，修改过的窗口不会关闭</p>
<p><code>:set warp</code>     自动换行</p>
<p><code>:set ignorecase</code>     忽略大小写</p>
<p><code>==</code>     对当前行自动格式化</p>
<p><code>数字==</code>     对当前行起的下面&quot;数字&quot;行进行格式化</p>
<p><code>gg=G</code>     对整个文档进行格式化</p>
<h2 id="编辑"> 编辑</h2>
<h3 id="增加"> 增加</h3>
<p><code>i</code>     在光标之前插入</p>
<div><pre><code>支持数字：3i!，在光标之前插入三个&quot;!&quot;
</code></pre>
</div><p><code>I</code>     在当前行首插入</p>
<div><pre><code>支持数字：3I@，在行首插入三个&quot;@&quot;
</code></pre>
</div><p><code>a</code>     在光标之后插入</p>
<div><pre><code>支持数字：3a!，在光标之后插入三个&quot;!&quot;
</code></pre>
</div><p><code>A</code>     在当前行尾插入</p>
<div><pre><code>支持数字：3A@，在行尾插入三个&quot;@&quot;
</code></pre>
</div><p><code>o</code>     在当前光标行之下插入空行</p>
<p><code>O</code>     在当前光标行之上插入空行</p>
<h3 id="删除"> 删除</h3>
<p><code>d+位移命令</code>     删除从光标位置到位移处的内容</p>
<div><pre><code>支持数字：    d+2+方向键，剪切左右方向的两个字符，剪切上下方向2行+当前行（共三行）的内容

- 3dw  |  d3w     删除当前光标后面的3个单词
- 3d2w     删除2光标后面两个单词，执行3次，共删除6个单词

- 左：    剪切前一个字符
- 右：    剪切后一个字符
- 上：    剪切当前行和上一行
- 下：    剪切当前行和下一行
- Shift+左：    剪切至当前单词首字符
- Shift+右：    剪切至下一个单词首字符
- dw     删除从当前位置到下一个单词词首
- db     删除从当前位置到前一个单词词首
- diw     删除光标所在的单词，不包括空白字符
- daw     删除当前光标所在单词，包括之后的空白字符
- dG     删除当前行至文件末尾的内容
- dgg     删除当前行至文件行首的内容
</code></pre>
</div><p><code>dd</code>     删除当前光标整行，并将之后内容上移一行</p>
<p><code>D | d$</code>     删除到行尾</p>
<p><code>c+位移命令</code> 删除从光标处到位移处的内容，并进入编辑模式。<em>具体参照 &quot;d+位移命令&quot;</em></p>
<p><code>C | c$</code> 删除光标处至行尾，并进入编辑模式</p>
<p><code>x | dl</code>     删除当前光标右边的一个字符</p>
<div><pre><code>支持数字：3x，删除光标右边三个字符
</code></pre>
</div><p><code>X | dh</code>     删除当前光标左边的一个字符</p>
<div><pre><code>支持数字：3X，删除光标左边三个字符
</code></pre>
</div><p><code>s | cl</code>      删除当前光标之后的一个字符并进入编辑模式</p>
<div><pre><code>支持数字：3s，删除光标右边三个字符
</code></pre>
</div><p><code>S | cc</code>       删除当前整行，保留该空行并且保留缩进，进入编辑模式。</p>
<div><pre><code>支持数字：3S，删除当前行开始往下3行内容
</code></pre>
</div><p><code>J</code>     删除当前行的换行符，相当于将下一行内容上移至当前行末尾</p>
<h2 id="复制和粘贴"> 复制和粘贴</h2>
<p><code>d+位移命令</code>     剪切。<strong>（不贴则用作删除）</strong></p>
<p><code>y</code>     复制</p>
<div><pre><code>具体操作同剪切(d)
</code></pre>
</div><p><code>+y</code>     复制到系统剪贴板</p>
<p><code>yy</code> 复制一行</p>
<div><pre><code>支持数字：3yy，复制当前行与下面两行
</code></pre>
</div><p><code>p</code>     粘贴到光标之后</p>
<div><pre><code>支持数字：3p，粘贴3次
</code></pre>
</div><p><code>P</code>     粘贴到光标之前</p>
<div><pre><code>支持数字：3P，粘贴3次
</code></pre>
</div><p><code>+p</code>     从系统剪贴板粘贴</p>
<h2 id="重复和撤销"> 重复和撤销</h2>
<p><code>u</code>     撤销</p>
<div><pre><code>支持数字，3u，撤销3次
</code></pre>
</div><p><code>Ctrl+r | .</code>     重做，&quot;.&quot;需要在Normal模式下执行</p>
<div><pre><code>支持数字，3 + Ctrl+R，重做三次
</code></pre>
</div><p><code>U</code>     重做，一次撤销对一行的操作，再次使用则会撤销前一次的&quot;U&quot;操作</p>
<h2 id="移动"> 移动</h2>
<p><code>方向键</code>    移动</p>
<p><code>数字+方向键</code>     移动</p>
<div><pre><code>- 左：向左移动&quot;数字&quot;个字符
- 右：向右移动&quot;数字&quot;个字符
- 上：向上移动&quot;数字&quot;行
- 下：向下移动&quot;数字&quot;行
</code></pre>
</div><p><code>w | W</code>     移动到下一单词首字符</p>
<div><pre><code>支持数字，3w，移动到后面3个单词首字符
</code></pre>
</div><p><code>b | B</code>     移动到前一单词首字符</p>
<div><pre><code>支持数字，3b，移动到前面3个单词首字符
</code></pre>
</div><p><code>e | E</code>     移动到下一个单词末字符</p>
<div><pre><code>支持数字，3e，移动到后面3个单词末字符
</code></pre>
</div><p><code>$ | &lt;END&gt;键</code>     移动到当前行末尾</p>
<div><pre><code>支持数字，3$，移动到下3行（当前行为第一行）末尾
</code></pre>
</div><p><code>0 | ^ | &lt;HOME&gt;键</code>     移动到当前行首</p>
<div><pre><code>不支持数字
</code></pre>
</div><p><code>G</code>     移动到最后一行</p>
<p><code>数字+G</code>     移动到指定行</p>
<p><code>gg</code>     移动到第一行</p>
<p><code>ge</code>     移动到前一单词末字符</p>
<div><pre><code>支持数字，3ge，移动到前面3个单词末字符
</code></pre>
</div><p><code>数字+%</code>     移动到文档某一位置，如：50%，移动到文档中间，90%，移动到文档靠近尾部</p>
<p><code>:+数字</code>     移动到文档的某一行</p>
<p><code>H</code>     移动到当前界面顶部</p>
<p><code>M</code>     移动到当前画面中部</p>
<p><code>L</code>     移动到当前界面底部</p>
<p><code>(</code>     移动到句首</p>
<p><code>)</code>     移动到句尾</p>
<p><code>{</code>     移动到段首</p>
<p><code>}</code>     移动到段尾</p>
<p><code>Ctrl+o</code>     光标跳转到之前的位置</p>
<p><code>Ctrl+i</code>     光标跳转到之后的位置（在使用Ctrl+o之后有效）</p>
<h2 id="标记"> 标记</h2>
<p><code>m+字符</code>    设定标记，将当前光标处用指定字符作为标记</p>
<p><code>`+字符</code>     跳转到指定标记，如果该字符标记位存在，则会跳转，使用m设定标记</p>
<p><code>:marks</code>     查看标记</p>
<p><code>``</code>     如果使用了G进行跳转，那么该命令则会在当前位置和跳转后的位置进行来回切换</p>
<p>##滚动屏幕</p>
<p><code>Ctrl+y</code>     向上一行</p>
<p><code>Ctrl+e</code>     向下一行</p>
<p><code>Ctrl+u</code>     向上半屏</p>
<p><code>Ctrl+d</code>     向下半屏</p>
<p><code>Ctrl+b</code>     向上整屏</p>
<p><code>Ctrl+f</code>     向下整屏</p>
<p><code>zt</code>     把当前行置于屏幕顶端</p>
<p><code>zz</code>     把当前行置于屏幕中央</p>
<p><code>zb</code>     把当前行置于屏幕底端</p>
<h2 id="查找和替换"> 查找和替换</h2>
<p><code>f+字符</code>     光标跳转到当前行的下一个该字符</p>
<p><code>F+字符</code>     光标跳转到当前行的前一个该字符</p>
<p><code>t+字符</code>     光标跳转到当前行的下一个该字符的前一个字符</p>
<p><code>T+字符</code>     光标跳转到当前行的前一个该字符的前一个字符</p>
<p><code>;</code>     用来重复  f  |  F  |  t  |  T  这四个命令</p>
<p><code>%</code>     跳转到匹配成对的括号，包括小括号，中括号，大括号</p>
<p><code>/ | ? +字符串</code>      搜索一个字符串，</p>
<p><code>/</code>     用于向后查找</p>
<p><code>?</code>     用于向前查找</p>
<p><code>n</code>     用于该目标字符串的下一个位置（与 /  |  ?  指定方向同向）</p>
<div><pre><code>支持数字，3n，该目标字符串在当前查找方向同向的第三次出现的位置
</code></pre>
</div><p><code>N</code>     用于该目标字符串的上一个位置（与 /  |  ?  指定方向反向）</p>
<div><pre><code>支持数字，3N，该目标字符串在当前查找方向反向的第三次出现的位置
</code></pre>
</div><p><code>\&lt;</code> 单词开始</p>
<p><code>\&gt;</code> 单词结尾</p>
<div><pre><code>/&lt;the\&gt;，这样只会搜索单词 &quot;the&quot;，而不会搜索到类似 &quot;there&quot;、&quot;them&quot;
</code></pre>
</div><p><code>$</code>  匹配一行结尾</p>
<p><code>.</code>  匹配任意字符</p>
<p><code>\</code>  匹配特殊字符</p>
<p><code>^</code>  匹配一行开头</p>
<p><code>*</code>     选取光标当前所在单词向后进行搜索</p>
<div><pre><code>支持数字，3*，该单词第三次出现的位置
</code></pre>
</div><p><code>#</code>     选取光标当前所在单词向前进行搜索</p>
<div><pre><code>支持数字，3#，该单词第三次出现的位置
</code></pre>
</div><h2 id="替换文本"> 替换文本</h2>
<p><code>:s/文本1/文本2/</code>     用文本2替换第一次出现的文本1</p>
<p><code>:s/文本1/文本2/g</code>     用文本2替换当前行所有匹配到的文本1</p>
<p><code>:%s/文本1/文本2/g</code>     用文本2替换整个文件中所有匹配到的文本1</p>
<p><code>:%s/文本1/文本2/gc</code>     用文本2替换整个文件中所有匹配到的文本1，并且每次替换时确认</p>
<p><code>r</code>     等待键入下一个字符，用于替换当前光标处的字符</p>
<div><pre><code>支持数字，3r+键入字符，当前光标处开始，往后3个字符替换为键入的字符，如果替换为换行符，则只会替换为一个
</code></pre>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Example Page</title>
      <link>https://docs.jeremyjone.com/example/</link>
      <guid>https://docs.jeremyjone.com/example/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">Example Page</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="example-page"> Example Page</h1>
<p>YAML config</p>
<div><pre><code><span>---</span>
<span>title</span><span>:</span> YAML front matter example
<span>lang</span><span>:</span> zh<span>-</span>CN
<span>description</span><span>:</span> 具体内容，参看 https<span>:</span>//vuepress.vuejs.org/zh/guide/frontmatter.html
<span>layout</span><span>:</span> CostomLayout  // 使用自定义布局页面替代当前默认布局页面
<span>permalink</span><span>:</span> 永久链接，参看 https<span>:</span>//vuepress.vuejs.org/zh/guide/permalinks.html
<span>metaTitle</span><span>:</span> 重写title
<span>meta</span><span>:</span> 注入额外的meta标签
<span>footer</span><span>:</span> Foo/Bar

<span>navbar</span><span>:</span> <span>true</span>
<span>sidebar</span><span>:</span> auto
<span>prev</span><span>:</span> <span>true</span>
<span>next</span><span>:</span> <span>true</span>
<span>search</span><span>:</span> <span>true</span>
<span>tags</span><span>:</span>
  <span>-</span> 一个Array
  <span>-</span> 用于优化搜索
<span>---</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>学习路线</title>
      <link>https://docs.jeremyjone.com/roadmap/</link>
      <guid>https://docs.jeremyjone.com/roadmap/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">学习路线</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="学习路线"> 学习路线</h1>
<p>保持学习，从 GitHub 搬运了一点学习路线图，以及对应的主页，方便查找和学习，可以快速查缺补漏。</p>
<ul>
<li><a href="./frontend/">前端学习之路</a></li>
<li><a href="./dotnetcore/">.NET 学习之路</a></li>
<li><a href="./java/">Java 学习之路</a></li>
<li><a href="./flutter/">Flutter 学习之路</a></li>
<li><a href="./android/">Android 学习之路</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Android 学习之路</title>
      <link>https://docs.jeremyjone.com/roadmap/android/</link>
      <guid>https://docs.jeremyjone.com/roadmap/android/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">Android 学习之路</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="android-学习之路"> Android 学习之路</h1>
<p>Android 的学习之路，页面只有图，不咋地。。。</p>
<p><a href="https://github.com/mobile-roadmap/android-developer-roadmap" target="_blank" rel="noopener noreferrer">英文</a></p>
<p><img src="https://github.com/mobile-roadmap/android-developer-roadmap/raw/master/images/android_roadmap.png" alt="android roadmap" /></p>
]]></content:encoded>
      <enclosure url="https://github.com/mobile-roadmap/android-developer-roadmap/raw/master/images/android_roadmap.png" type="image/png"/>
    </item>
    <item>
      <title>计算机基础</title>
      <link>https://docs.jeremyjone.com/roadmap/base/</link>
      <guid>https://docs.jeremyjone.com/roadmap/base/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">计算机基础</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="计算机基础"> 计算机基础</h1>
<p>计算机基础是计算机科学的重要基石。只有充分掌握了计算机的基础理论部分，才可以更快、更好的学习更高级的知识。</p>
]]></content:encoded>
    </item>
    <item>
      <title>算法</title>
      <link>https://docs.jeremyjone.com/roadmap/base/algorithm/</link>
      <guid>https://docs.jeremyjone.com/roadmap/base/algorithm/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">算法</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="算法"> 算法</h1>
]]></content:encoded>
    </item>
    <item>
      <title>计算机基础内容</title>
      <link>https://docs.jeremyjone.com/roadmap/base/computer/</link>
      <guid>https://docs.jeremyjone.com/roadmap/base/computer/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">计算机基础内容</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="计算机基础内容"> 计算机基础内容</h1>
]]></content:encoded>
    </item>
    <item>
      <title>数据结构</title>
      <link>https://docs.jeremyjone.com/roadmap/base/data-structure/</link>
      <guid>https://docs.jeremyjone.com/roadmap/base/data-structure/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">数据结构</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="数据结构"> 数据结构</h1>
]]></content:encoded>
    </item>
    <item>
      <title>数据库</title>
      <link>https://docs.jeremyjone.com/roadmap/base/database/</link>
      <guid>https://docs.jeremyjone.com/roadmap/base/database/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">数据库</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="数据库"> 数据库</h1>
]]></content:encoded>
    </item>
    <item>
      <title>网络基础</title>
      <link>https://docs.jeremyjone.com/roadmap/base/network/</link>
      <guid>https://docs.jeremyjone.com/roadmap/base/network/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">网络基础</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="网络基础"> 网络基础</h1>
<h2 id="osi-模型"> OSI 模型</h2>
<h3 id="七层模型"> 七层模型</h3>
<h3 id="四层模型"> 四层模型</h3>
<h2 id="网络协议"> 网络协议</h2>
<h3 id="tcp"> TCP</h3>
<h3 id="udp"> UDP</h3>
<h2 id="ip"> IP</h2>
<h2 id="域名"> 域名</h2>
<h3 id="域名的解析过程"> 域名的解析过程</h3>
<h2 id="万维网"> 万维网</h2>
<h2 id="浏览器的工作原理"> 浏览器的工作原理</h2>
]]></content:encoded>
    </item>
    <item>
      <title>域名</title>
      <link>https://docs.jeremyjone.com/roadmap/base/network/domain/</link>
      <guid>https://docs.jeremyjone.com/roadmap/base/network/domain/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">域名</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="域名"> 域名</h1>
]]></content:encoded>
    </item>
    <item>
      <title>IP 网际协议</title>
      <link>https://docs.jeremyjone.com/roadmap/base/network/ip/</link>
      <guid>https://docs.jeremyjone.com/roadmap/base/network/ip/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">IP 网际协议</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="ip-网际协议"> IP 网际协议</h1>
]]></content:encoded>
    </item>
    <item>
      <title>OSI 模型</title>
      <link>https://docs.jeremyjone.com/roadmap/base/network/osi/</link>
      <guid>https://docs.jeremyjone.com/roadmap/base/network/osi/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">OSI 模型</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="osi-模型"> OSI 模型</h1>
]]></content:encoded>
    </item>
    <item>
      <title>四层模型</title>
      <link>https://docs.jeremyjone.com/roadmap/base/network/osi/layer-4/</link>
      <guid>https://docs.jeremyjone.com/roadmap/base/network/osi/layer-4/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">四层模型</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="四层模型"> 四层模型</h1>
]]></content:encoded>
    </item>
    <item>
      <title>七层模型</title>
      <link>https://docs.jeremyjone.com/roadmap/base/network/osi/layer-7/</link>
      <guid>https://docs.jeremyjone.com/roadmap/base/network/osi/layer-7/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">七层模型</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="七层模型"> 七层模型</h1>
]]></content:encoded>
    </item>
    <item>
      <title>TCP 协议</title>
      <link>https://docs.jeremyjone.com/roadmap/base/network/protocol/tcp/</link>
      <guid>https://docs.jeremyjone.com/roadmap/base/network/protocol/tcp/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">TCP 协议</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="tcp-协议"> TCP 协议</h1>
]]></content:encoded>
    </item>
    <item>
      <title>万维网</title>
      <link>https://docs.jeremyjone.com/roadmap/base/network/www/</link>
      <guid>https://docs.jeremyjone.com/roadmap/base/network/www/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">万维网</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="万维网"> 万维网</h1>
]]></content:encoded>
    </item>
    <item>
      <title>UDP 协议</title>
      <link>https://docs.jeremyjone.com/roadmap/base/network/protocol/udp/</link>
      <guid>https://docs.jeremyjone.com/roadmap/base/network/protocol/udp/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">UDP 协议</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="udp-协议"> UDP 协议</h1>
]]></content:encoded>
    </item>
    <item>
      <title>HTTP</title>
      <link>https://docs.jeremyjone.com/roadmap/base/network/www/http/</link>
      <guid>https://docs.jeremyjone.com/roadmap/base/network/www/http/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">HTTP</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="http"> HTTP</h1>
<p><code>HTTP</code>：<code>hypertext transform protocol</code>，超文本传输协议。它允许将超文本标记语言（<code>HTML</code>）从 web 服务器传送到客户端的浏览器。为了使超文本的链接能够高效率的完成，需要使用 <code>HTTP</code> 协议来出阿松一些必需的信息。</p>
<p>从层次的角度看，<code>HTTP</code> 是面向事务的应用层协议，它是万维网上能够可靠地交换文件的重要基础。</p>
<p>其特点为：</p>
<ul>
<li>支持典型的客户端服务器模式（B/S）</li>
<li>灵活、简单</li>
<li>几乎支持所有的数据格式</li>
<li>无状态</li>
</ul>
<p>一个简单的通信示例：</p>
<img :src="$withBase('/assets/roadmap/frontend/http.png')" alt="">
<p>上面图中过程，显示了一个完整的 <code>HTTP</code> 请求过程：</p>
<ul>
<li>浏览器分析超链接指向页面的 URL</li>
<li>浏览器向域名系统（DNS）请求解析 <code>www.tsinghua.edu.cn</code> 的 IP 地址</li>
<li>域名系统（DNS）解析出该服务器的 IP 地址并告知浏览器</li>
<li>浏览器与服务器建立 TCP 连接</li>
<li>浏览器发出请求文档指令（一个 GET 请求）</li>
<li>服务器给出响应，把文档发送给浏览器</li>
<li>TCP 连接被释放</li>
<li>浏览器将获取到的文件内容进行渲染，呈现到浏览器中</li>
</ul>
<h2 id="请求-request"> 请求 Request</h2>
<p><code>HTTP</code> 的请求格式：</p>
<ul>
<li><code>请求行</code> 发送什么类型的请求</li>
<li><code>请求头</code> 对发送请求信息的描述</li>
<li><code>空行</code></li>
<li><code>请求体</code> 根据请求类型不同，请求体内容也不尽相同</li>
</ul>
<img :src="$withBase('/assets/roadmap/frontend/http-request-message.png')" alt="">
<p>这是一个具体的示例：</p>
<img :src="$withBase('/assets/roadmap/frontend/http-request.png')" alt="">
<h3 id="请求行"> 请求行</h3>
<p>请求行定义了请求方法、地址、以及协议版本。其语法：</p>
<div><pre><code>&amp;lt;METHOD&gt; &amp;lt;URI&gt; &amp;lt;protocol&gt;
</code></pre>
<div><span>1</span><br></div></div><p>例如：</p>
<div><pre><code>GET /index.html HTTP/1.1
</code></pre>
<div><span>1</span><br></div></div><p>不同的请求方法有不同的用法。根据 <code>HTTP</code> 标准，可以使用多种请求方法。</p>
<ul>
<li>在 <code>HTTP1.0</code> 中，定义了 <code>GET</code>、<code>POST</code> 和 <code>HEAD</code> 方法。</li>
<li>在 <code>HTTP1.1</code> 中，新增了 <code>OPTIONS</code>、<code>PUT</code>、<code>DELETE</code>、<code>TRACE</code> 和 <code>CONNECT</code> 方法。</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET" target="_blank" rel="noopener noreferrer">GET</a></td>
<td style="text-align:center">GET 方法请求一个指定资源的表示形式，使用 GET 的请求应该只被用于获取数据。</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST" target="_blank" rel="noopener noreferrer">POST</a></td>
<td style="text-align:center">POST 方法用于将实体提交到指定的资源，通常导致在服务器上的状态变化或副作用。</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/HEAD" target="_blank" rel="noopener noreferrer">HEAD</a></td>
<td style="text-align:center">HEAD 方法请求一个与 GET 请求的响应相同的响应，但没有响应体。</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/PUT" target="_blank" rel="noopener noreferrer">PUT</a></td>
<td style="text-align:center">PUT 方法用请求有效载荷替换目标资源的所有当前表示。</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/DELETE" target="_blank" rel="noopener noreferrer">DELETE</a></td>
<td style="text-align:center">DELETE 方法删除指定的资源。</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/CONNECT" target="_blank" rel="noopener noreferrer">CONNECT</a></td>
<td style="text-align:center">CONNECT 方法建立一个到由目标资源标识的服务器的隧道。</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/OPTIONS" target="_blank" rel="noopener noreferrer">OPTIONS</a></td>
<td style="text-align:center">OPTIONS 方法用于描述目标资源的通信选项。</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/TRACE" target="_blank" rel="noopener noreferrer">TRACE</a></td>
<td style="text-align:center">TRACE 方法沿着到目标资源的路径执行一个消息环回测试。</td>
</tr>
</tbody>
</table>
<p>所有请求方法的具体定义，可以参考 <a href="https://httpwg.org/specs/rfc7231.html#GET" target="_blank" rel="noopener noreferrer">rfc7231</a>。</p>
<h3 id="请求头"> 请求头</h3>
<p>请求头允许客户端和服务器传递附加信息。一个请求头由名称（不区分大小写）狗跟一个冒号<code>:</code>，冒号后根跟具体的值（不带换行符）组成。该值前面的引导空白会被忽略。</p>
<p>之前可通过 <code>X-</code> 前缀来描述自定义专用消息头，但该方法在 2012 年因为会造成不便而被弃用（<a href="https://tools.ietf.org/html/rfc6648" target="_blank" rel="noopener noreferrer">RFC6648</a>）。</p>
<p>请求头是 <code>HTTP</code> 头的一种，与请求主体无关。一些请求头还描述了请求的具体操作等。</p>
<p>完整的请求头列表，可以参考 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers" target="_blank" rel="noopener noreferrer">MDN</a>。</p>
<h2 id="响应-response"> 响应 Response</h2>
<p><code>HTTP</code> 的响应格式：</p>
<ul>
<li><code>响应行</code> 反馈响应情况</li>
<li><code>响应头</code> 对响应内容的描述</li>
<li><code>空行</code></li>
<li><code>响应体</code> 根据请求返回给客户端的内容</li>
</ul>
<img :src="$withBase('/assets/roadmap/frontend/http-response-message.png')" alt="">
<p>这是一个具体的示例：</p>
<img :src="$withBase('/assets/roadmap/frontend/http-response.png')" alt="">
<h3 id="响应行"> 响应行</h3>
<p>响应行定义了协议版本、响应码，以及响应信息：</p>
<div><pre><code>&amp;lt;protocol&gt; &amp;lt;code&gt; &amp;lt;message&gt;
</code></pre>
<div><span>1</span><br></div></div><p>例如：</p>
<div><pre><code>HTTP/1.1 200 OK
</code></pre>
<div><span>1</span><br></div></div><p>不同响应码表示不同的返回结果，通常规定：</p>
<ul>
<li>100~199：提示信息，表示请求已经接受，正在处理</li>
<li>200~299：访问成功</li>
<li>300~399：重定向，完成任务需要其他操作</li>
<li>400~499：客户端错误</li>
<li>500~599：服务器端错误</li>
</ul>
<div><p>提示</p>
<p>响应码是一种规定，并不是固定的，这是在 <a href="https://tools.ietf.org/html/rfc2616#section-10" target="_blank" rel="noopener noreferrer">section 10 of RFC 2616</a> 中定义的。它可以通过后端服务器进行自定义，但是我们仍然需要根据具体情况分别按规定定义，否则会带来很多不便。</p>
<p><strong>例如：</strong></p>
<p>我们通常使用 <code>404</code> 来表示资源不存在。我们同样可以在后端服务器定义 <code>444</code> 为资源不存在，这是允许的。</p>
<p>我们也可以使用 <code>222</code> 来表示资源不存在，这样虽然可以，但是绝对不能这样用。</p>
</div>
<h3 id="响应头"> 响应头</h3>
<p>响应头可以被定义为：被用于 <code>HTTP</code> 响应中并且和响应消息主体无关的那一类头信息。</p>
<p>并非所有出现在响应中的响应头内容都属于响应头，例如 <code>Content-Length</code> 表示响应体消息大小的实体头，虽然也可以叫做响应头。</p>
<p>完整的请求头列表，可以参考 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers" target="_blank" rel="noopener noreferrer">MDN</a>。</p>
<h2 id="常见的响应码"> 常见的响应码</h2>
<h3 id="_1xx：信息请求"> 1xx：信息请求</h3>
<p>它们表示服务器接收并理解了请求，浏览器应该等待服务器处理信息的时间更长一些。这些状态码不太常见，不会直接影响您的 SEO。</p>
<h3 id="_2xx：请求成功"> 2xx：请求成功</h3>
<p>这意味着，您访问文件的请求已成功。对于 SEO，2xx HTTP 状态码仅表明一切正常。</p>
<ul>
<li><code>200 OK</code>：请求成功。</li>
<li><code>201 Created</code>：服务器确认创建的资源。</li>
<li><code>202 Accepted</code>：客户端的请求已收到，但服务器仍在处理它。</li>
<li><code>203 Non-Authoritative Information</code>：服务器发送给客户端的响应与服务器发送时的响应不一样。</li>
<li><code>204 No Content</code>：服务器处理了请求，但没有给出任何内容。</li>
<li><code>205 Reset Content</code>：客户端应刷新文档样本。</li>
<li><code>206 Partial Content</code>：服务器只发送资源的一部分。</li>
<li><code>207 Multi-Status</code>：默认情况下，消息正文是 XML 消息，可以包含多个单独的响应代码。</li>
<li><code>208 Already Reported</code>：WebDAV 绑定的成员已在（多状态）响应的前面部分中列举，不再包括在内。</li>
</ul>
<h3 id="_3xx：重定向"> 3xx：重定向</h3>
<p>当用户或搜索引擎遇到 3xx 状态码时，他们将被重定向到与初始 URL 不同的 URL。如果 SEO 对您的业务成功至关重要，那么您必须自学这些代码以及如何正确使用它们。</p>
<ul>
<li><code>300 Multiple Choices</code>：客户端发出的请求有几种可能的响应。</li>
<li><code>301 Moved Permanently</code>：服务器告诉客户端他们寻找的资源已经永久移动到另一个 URL。所有用户和机器人都将被重定向到新的 URL。这是 SEO 的一个非常重要的状态- 代码。</li>
<li><code>302 Found</code>：网站或页面已临时移动到不同的 URL。这是另一个与 SEO 相关的状态代- 码。</li>
<li><code>303 See Other</code>：此代码告诉客户端服务器不是将它们重定向到请求的资源，而是重定向到另一个页面。</li>
<li><code>304 Not Modified</code>：请求的资源自上次传输后没有改变。</li>
<li><code>305 Use Proxy</code>：客户端只能通过响应中给出的代理访问请求的资源。</li>
<li><code>307 Temporary Redirect</code>：服务器告诉客户端他们寻找的资源已经被临时重定向到另一个 URL。它与 SEO 性能有关。</li>
<li><code>308 Permanent Redirect</code>：服务器告诉客户端他们寻找的资源已被临时重定向到另一个 URL。</li>
</ul>
<h3 id="_4xx：客户端错误"> 4xx：客户端错误</h3>
<p>这意味着找不到该页面，并且请求有问题。客户端发生的事情就是问题所在。这可能是不正确的数据格式、未经授权的访问或请求中的错误。</p>
<ul>
<li><code>400 Bad Request</code>：客户端发送的请求包含不完整的数据、构造不良的数据或无效的数据。</li>
<li><code>401 Unauthorized</code>：客户端访问请求的资源需要授权。</li>
<li><code>403 Forbidden</code>：客户端尝试访问的资源被禁止。</li>
<li><code>404 Not Found</code>：服务器可访问，但客户端查找的特定页面不可访问。如果一个网站有太多的 404 错误，谷歌和雅虎等搜索引擎就会得到负面印象。修复 404 错误代码的最简单和最简单的方法是使用 301 重定向来重定向页面。</li>
<li><code>405 Method Not Allowed</code>：服务器已接收并识别请求，但拒绝了特定的请求方法。</li>
<li><code>406 Not Acceptable</code>：状态码是一条错误消息，表示您的网站或 Web 应用程序不支持具有特定协议的客户端请求</li>
<li><code>407 Proxy Authentication Required</code>：此状态码类似于 401 未授权。唯一的区别是授权需要由代理完成。</li>
<li><code>408 Request Timeout</code>：客户端发送给网站服务器的请求已经过期。</li>
<li><code>409 Conflict</code>：发送的请求与服务器内部操作冲突。</li>
<li><code>410 Gone</code>：客户端想要访问的资源已被永久删除。</li>
</ul>
<p>另外，还应该了解以下 4xx 状态码：</p>
<ul>
<li><code>402 Payment Required</code>：需要付款</li>
<li><code>412 Precondition Failed</code>：前置条件失败</li>
<li><code>415 Unsupported Media Type</code>：不支持的媒体类型</li>
<li><code>416 Requested Range Not Satisfiable</code>：请求范围不满足</li>
<li><code>417 Expectation Failed</code>：期待落空</li>
<li><code>422 Unprocessable Entity</code>：不可处理的实体</li>
<li><code>423 Locked</code>：锁定</li>
<li><code>424 Failed Dependency</code>：依赖失败</li>
<li><code>426 Upgrade Required</code>：需要升级</li>
<li><code>429 Too Many Requests</code>：请求过多</li>
<li><code>431 Request Header Fields Too Large</code>：请求头字段太大</li>
<li><code>451 Unavailable for Legal Reasons</code>：因法律原因不可用</li>
</ul>
<h3 id="_5xx：服务器错误"> 5xx：服务器错误</h3>
<p>这些错误不是客户端的错，而是表明服务器端存在问题。客户端发出的请求是好的，但是服务器无法生成请求的资源。</p>
<ul>
<li><code>500 Internal Server Error</code>：服务器在处理客户端请求时遇到无法处理的情况。</li>
<li><code>501 Not Implemented</code>：服务器不知道或无法解析客户端发送的请求方法。</li>
<li><code>502 Bad Gateway</code>：服务器充当网关或代理并从入站服务器收到无效消息。</li>
<li><code>503 Service Unavailable</code>：服务器可能已关闭并且无法处理客户端的请求。此 HTTP 状态码是您在 Web 上可能遇到的最常见的服务器问题之一。它也会对您的 SEO 产生负面影响。如果 503 错误没有很快得到解决，搜索引擎会将其注册为永久性问题并取消对页面的索引。</li>
<li><code>511 Network Authentication Required</code>：客户端需要在网络上进行身份验证才能访问资源。</li>
</ul>
<p>另外，还应该了解以下 5xx 状态码：</p>
<ul>
<li><code>504 Gateway Timeout</code>：网关超时</li>
<li><code>505 HTTP Version Not Supported</code>：不支持 HTTP 版本</li>
<li><code>506 Variant Also Negotiates</code>：变种也商量</li>
<li><code>507 Insufficient Storage</code>：存储空间不足</li>
<li><code>508 Loop Detected</code>：检测到环路</li>
<li><code>510 Not Extended</code>：未扩展</li>
</ul>
<h3 id="更多"> 更多</h3>
<p>更多状态码的内容，可以参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status" target="_blank" rel="noopener noreferrer">MDN</a>。</p>
<h2 id="http-1-1-的持续链接"> HTTP 1.1 的持续链接</h2>
<p>HTTP 1.1 的持续链接有两种工作方式，即：</p>
<ul>
<li>
<p>非流水线方式：客户在收到前一个响应后才能发出下一个请求。</p>
<p>这比非持续链接的两倍 RTT 开销节省了建立 TCP 连接所需的一个 RTT 时间。但服务器在发送完一个对象后，其 TCP 就处于空闲状态，浪费了服务器的资源。</p>
</li>
<li>
<p>流水线方式：客户在收到 HTTP 的响应报文之前就能够接着发送新的请求报文。</p>
<p>使用流水线方式时，一个接一个的请求报文到达服务器后，服务器就可以连续发回响应报文。这样客户访问所有对象就只需花费一个 RTT 时间，使 TCP 连接中的空间时间减少，提高了下载文档的效率。</p>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>HTTPS</title>
      <link>https://docs.jeremyjone.com/roadmap/base/network/www/https/</link>
      <guid>https://docs.jeremyjone.com/roadmap/base/network/www/https/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">HTTPS</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="https"> HTTPS</h1>
<h2 id="什么是-https"> 什么是 HTTPS</h2>
<p><code>HTTPS</code>：（Hyper Text Transfer Protocol over SecureSocket Layer），是以安全为目标的 <code>HTTP</code> 通道。在 <code>HTTP</code> 的基础上，通过传输加密和身份认证保证了传输过程的安全性。</p>
<h2 id="http-的缺陷"> HTTP 的缺陷</h2>
<p><code>HTTP</code> 存在如下问题：</p>
<ul>
<li>请求信息都是明文传输，容易被嗅探</li>
<li>数据没有完整性校验，容易被篡改</li>
</ul>
<p>针对这些问题，就有了 <code>HTTP</code> + <code>TLS/SSL</code> 构建的可进行加密传输、身份认证的网络协议 <code>HTTPS</code>。它主要通过数字证书、加密算法、非对称秘钥等技术完成互联网数据传输加密，实现互联网传输安全保护。</p>
<h2 id="什么是-ssl"> 什么是 SSL</h2>
<p><code>SSL</code> 是网景公司为了保证隐私数据的加密传输而设计开发的用于 <code>HTTP</code> 上的协议。它的出现，为数据传输提供了安全支持。</p>
<h2 id="https-的工作原理"> HTTPS 的工作原理</h2>
<p>客户端在使用 <code>HTTPS</code> 方式与服务器通信时，可以分为如下所示：</p>
<img :src="$withBase('/assets/roadmap/base/network/https.png')" alt="">
<ul>
<li>客户使用 <code>HTTPS</code> 的 <code>URL</code> 访问服务器，要求与服务器建立 <code>SSL</code> 连接</li>
<li>服务器收到客户端请求后，会将网站的证书信息（含公钥）传送一份给客户端</li>
<li>客户端与服务器开始协商 <code>SSL</code> 连接的安全等级，也就是信息加密的等级</li>
<li>客户端根据双方同意的安全等级，建立会话密钥，然后利用网站的公钥将会话密钥加密，并传送给网站</li>
<li>服务器利用自己的私钥解密出会话密钥</li>
<li>服务器利用会话密钥加密与客户端之间的通信</li>
</ul>
<p>与 <code>HTTP</code> 不同，<code>HTTPS</code> 使用了 443 端口，而非 <code>HTTP</code> 的 80 端口。</p>
<h2 id="https-的优缺点"> HTTPS 的优缺点</h2>
<h3 id="优点"> 优点</h3>
<ul>
<li>使用 <code>HTTPS</code> 协议可认证用户和服务器，确保数据发送到正确的客户端和服务器</li>
<li><code>HTTPS</code> 协议由 <code>SSL</code> + <code>HTTP</code> 构建，相比单独的 <code>HTTP</code> 协议更加安全，可以防止数据在传输过程中被窃取、篡改，确保数据的完整性</li>
<li><code>HTTPS</code> 是现行架构下最安全的解决方案，它大幅增加的中间人攻击的成本</li>
</ul>
<h3 id="缺点"> 缺点</h3>
<ul>
<li>相同网络环境下，<code>HTTPS</code> 协议会使页面加载时间延长 50%，增加 10%~20% 的耗电。此外，还会影响缓存等</li>
<li><code>HTTPS</code> 协议的安全是有范围的，在黑客攻击、拒绝服务攻击和服务器劫持等方面几乎不起作用</li>
<li><code>SSL</code> 证书信用链体系并不安全，中间人攻击是可行的，只是成本增加</li>
<li>服务器成本增加。服务器在部署了 <code>HTTPS</code> 协议之后，会频繁的进行加解密工作，但这些成本基本可以接受</li>
<li><code>SSL</code> 证书通常不是免费的，而且功能越强，费用越高，这需要额外一笔开支。</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>URL</title>
      <link>https://docs.jeremyjone.com/roadmap/base/network/www/url/</link>
      <guid>https://docs.jeremyjone.com/roadmap/base/network/www/url/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">URL</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="url"> URL</h1>
<p><code>URL</code>：<code>Uniform Resource Identifier</code>，即统一资源定位符。是对可以从因特网上得到的资源的位置和防蚊方法的一种简洁的表示。<code>URL</code> 给资源的位置提供一种抽象的识别方法，并用这种方法给资源定位。只要能够对资源定位，系统就可以对资源进行各种操作，如存取、更新、替换和查找等。</p>
<p><code>URL</code> 相当于一个文件名在网络范围的扩展。因此 <code>URL</code> 是与因特网相连的机器上的任何可访问对象的一个指针。</p>
<img :src="$withBase('/assets/roadmap/base/network/url.png')" alt="">
<h2 id="uri、url-与-urn"> URI、URL 与 URN</h2>
<ul>
<li><code>URI</code>：<code>Uniform Resource Identifier</code>，统一资源标识符。一个紧凑的字符串，用来表示抽象或物理资源</li>
<li><code>URL</code>：<code>Uniform Resource Locator</code>，统一资源定位符。是 URI 的子集，除了确定一个资源，还提供一种定位该资源的主要访问机制</li>
<li><code>URN</code>：<code>Uniform Resource Name</code>，统一资源名称。作为特定内容的唯一名称使用的，与当前资源的所在地无关。使用 URN，就可以将资源四处迁移，而不用担心迁移后无法访问。</li>
</ul>
<div><p>题外话</p>
<p>P2P 下载中使用的磁力链接是 URN 的一种实现，它可以持久化的标识一个 BT 资源，资源分布式的存储在 P2P 网络中，无需中心服务器用户即可找到并下载它。</p>
</div>
<p>它们的关系：</p>
<img :src="$withBase('/assets/roadmap/frontend/uri.png')" alt="">
<p>更详细的内容可以参考 <a href="https://stackoverflow.com/questions/4913343/what-is-the-difference-between-uri-url-and-urn" target="_blank" rel="noopener noreferrer">stackoverflow</a></p>
<p>对于 <code>URL</code> 的设计，可以参考 <a href="https://www.biaodianfu.com/url-design.html" target="_blank" rel="noopener noreferrer">网站 URL 设计远没那么简单</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>ASP.NET Core 开发者学习路线图</title>
      <link>https://docs.jeremyjone.com/roadmap/dotnetcore/</link>
      <guid>https://docs.jeremyjone.com/roadmap/dotnetcore/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">ASP.NET Core 开发者学习路线图</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="asp-net-core-开发者学习路线图"> ASP.NET Core 开发者学习路线图</h1>
<p>.NET Core 的学习之路，中文更新速度很好。</p>
<p><a href="https://github.com/MoienTajik/AspNetCore-Developer-Roadmap" target="_blank" rel="noopener noreferrer">英文文档</a></p>
<p><a href="https://github.com/MoienTajik/AspNetCore-Developer-Roadmap/blob/master/ReadMe.zh-Hans.md" target="_blank" rel="noopener noreferrer">中文文档</a></p>
<p>路线图（中文）：- <a href="https://github.com/MoienTajik/AspNetCore-Developer-Roadmap/raw/master/aspnetcore-developer-roadmap.zh-Hans.png" target="_blank" rel="noopener noreferrer">原链接</a> <img src="https://github.com/MoienTajik/AspNetCore-Developer-Roadmap/raw/master/aspnetcore-developer-roadmap.zh-Hans.png" alt="aspnetcore roadmap" /></p>
]]></content:encoded>
      <enclosure url="https://github.com/MoienTajik/AspNetCore-Developer-Roadmap/raw/master/aspnetcore-developer-roadmap.zh-Hans.png" type="image/png"/>
    </item>
    <item>
      <title>概述</title>
      <link>https://docs.jeremyjone.com/roadmap/dotnetcore/auth/</link>
      <guid>https://docs.jeremyjone.com/roadmap/dotnetcore/auth/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">概述</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="概述"> 概述</h1>
<h2 id="开始之前"> 开始之前</h2>
<p>先贴上官方地址：
<a href="https://identityserver4.readthedocs.io/en/latest/" target="_blank" rel="noopener noreferrer">IdentityServer 官方文档（英文）</a></p>
<p>英文麻烦的，可以看中文，但并不是官方的，同时内容也不是很全：
<a href="http://www.identityserver.com.cn/" target="_blank" rel="noopener noreferrer">中文文档</a></p>
<p>学习之前，需要了解：</p>
<p>OAuth2 和 OpenID Connect 两种协议机制。</p>
<h3 id="oauth-2-0"> OAuth 2.0</h3>
<p>OAuth2 是一种协议，允许应用程序从安全令牌服务请求访问令牌并使用它们与 API 进行通信。由于可以集中身份验证和授权，因此这种委派降低了客户端应用程序和 API 的复杂性。</p>
<h3 id="openid-connect"> OpenID Connect</h3>
<p>OpenID Connect 是一种身份验证协议。它被认为是未来，因为它在现代应用程序中具有最大的潜力。它从一开始就针对移动应用程序场景而构建，并且旨在实现 API 友好。</p>
<h3 id="结合-oauth2-与-openid-connect"> 结合 OAuth2 与 OpenID Connect</h3>
<p>实际上，OpenID Connect 是 OAuth 2.0 的扩展。身份验证和 API 访问这两个基本的安全问题被组合为一个协议，通常只需一次往返于安全令牌服务即可。在可预见的将来，OpenID Connect 和 OAuth 2.0 的结合是保护现代应用程序安全的最佳方法。</p>
<p><img src="https://www.jeremyjone.com/wp-content/uploads/2021/03/image-1616402595899.png" alt="file" /></p>
<h3 id="identityserver"> IdentityServer</h3>
<p>IdentityServer 是将符合规范的 OpenID Connect 和 OAuth 2.0 端点添加到任意 ASP.NET Core 应用程序的中间件。</p>
<h2 id="正文开始"> 正文开始</h2>
<h3 id="认证介绍"> 认证介绍</h3>
<p>认证又称身份验证、鉴权等，其英文都是 Authentication。</p>
<p>认证是对用户进行身份校验。由用户提供凭据，然后将其与存储在服务端的凭据进行比较，如果匹配，则身份验证成功。只有在用户认证通过之后，系统才会执行向其授权的操作。</p>
<h3 id="授权介绍"> 授权介绍</h3>
<p>授权（Authorization）是指确定用户可执行的操作的过程。例如，允许管理用户创建文档库、添加文档、编辑文档和删除文档。使用库的非管理用户仅获得读取文档的权限。</p>
<p>授权有多种形式。 ASP.NET Core 的授权提供简单的声明性角色和基于策略的丰富模型。</p>
<h3 id="对比认证与授权的例子"> 对比认证与授权的例子</h3>
<p>简单来说，就是你要去 ATM 机取钱：</p>
<ul>
<li>首先你要输密码，密码正确才能进入取钱的界面，否则可能被吞卡。这个过程就是认证。</li>
<li>进入取钱界面，发现你是个普通用户，每天只能取 5000 块，所以你取 5000 块之内都是可以的。这就是授权。</li>
<li>超过 5000 块怎么办？当然是被拒绝，因为没有权限嘛。这时候就要尝试提升权限啥的，这都是后话了。</li>
</ul>
<h2 id="认证"> 认证</h2>
<p>认证是确定用户身份的过程。在 .NET 中，身份验证由 <code>IAuthenticationService</code> 负责，而它供身份验证中间件使用。身份验证由 Startup.ConfigureServices 中的注册身份验证服务指定。</p>
<h3 id="添加认证服务"> 添加认证服务</h3>
<p>例如，为程序添加 cookie 和 JWT 持有者分身验证方案：</p>
<div><pre><code>services<span>.</span><span>AddAuthentication</span><span>(</span>JwtBearerDefaults<span>.</span>AuthenticationScheme<span>)</span>
    <span>.</span><span>AddJwtBearer</span><span>(</span>JwtBearerDefaults<span>.</span>AuthenticationScheme<span>,</span> options <span>=></span> Configuration<span>.</span><span>Bind</span><span>(</span><span>"JwtSettings"</span><span>,</span> options<span>)</span><span>)</span>
    <span>.</span><span>AddCookie</span><span>(</span>CookieAuthenticationDefaults<span>.</span>AuthenticationScheme<span>,</span> options <span>=></span> Configuration<span>.</span><span>Bind</span><span>(</span><span>"CookieSettings"</span><span>,</span> options<span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>其中，<code>JwtBearerDefaults.AuthenticationScheme</code> 是方案名称，为请求特定方案时，都会默认使用此名称。</p>
<p>如果使用了多个方案，授权策略可指定对用户进行身份验证时要依据的一个或多个身份验证方案。如上，可通过指定 cookie 方案的名称来使用该方案进行验证。</p>
]]></content:encoded>
      <enclosure url="https://www.jeremyjone.com/wp-content/uploads/2021/03/image-1616402595899.png" type="image/png"/>
    </item>
    <item>
      <title>在 ASP.NET 中使用授权与认证</title>
      <link>https://docs.jeremyjone.com/roadmap/dotnetcore/auth/example/</link>
      <guid>https://docs.jeremyjone.com/roadmap/dotnetcore/auth/example/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">在 ASP.NET 中使用授权与认证</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="在-asp-net-中使用授权与认证"> 在 ASP.NET 中使用授权与认证</h1>
<p>下面通过一组渐进式的例子，来学习 ASP.NET 是如何认证并授权的。</p>
<h2 id="添加认证中间件"> 添加认证中间件</h2>
<p>在 Startup.Configure 中添加身份验证中间件，通过调用 <code>UseAuthenticaiton</code> 扩展方法来实现。中间件的添加需要顺序，要保持：</p>
<ul>
<li>在 <code>UseRouting</code> 之后调用，以便路由信息可用于身份验证。</li>
<li>在 <code>UseEndpoints</code> 之前调用，以便用户在经过身份验证之后才能访问端点。</li>
</ul>
<div><pre><code><span>public</span> <span><span>void</span></span> <span>Configure</span><span>(</span><span>IApplicationBuilder</span> app<span>,</span> <span>IWebHostEnvironment</span> env<span>)</span>
<span>{</span>
    <span>if</span> <span>(</span>env<span>.</span><span>IsDevelopment</span><span>(</span><span>)</span><span>)</span>
    <span>{</span>
        app<span>.</span><span>UseDeveloperExceptionPage</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
    <span>else</span>
    <span>{</span>
        app<span>.</span><span>UseExceptionHandler</span><span>(</span><span>"/Error"</span><span>)</span><span>;</span>
    <span>}</span>

    app<span>.</span><span>UseStaticFiles</span><span>(</span><span>)</span><span>;</span>

    app<span>.</span><span>UseRouting</span><span>(</span><span>)</span><span>;</span>
    <span>// 鉴权放在路由之后，授权之前</span>
    app<span>.</span><span>UseAuthentication</span><span>(</span><span>)</span><span>;</span>
    <span>// 授权</span>
    app<span>.</span><span>UseAuthorization</span><span>(</span><span>)</span><span>;</span>

    app<span>.</span><span>UseEndpoints</span><span>(</span>endpoints <span>=></span>
    <span>{</span>
        endpoints<span>.</span><span>MapDefaultControllerRoute</span><span>(</span><span>)</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><h3 id="使用-cookie-认证"> 使用 Cookie 认证</h3>
<p>添加一个简单的 Cookie 认证方案，每次请求需要携带对应的 Cookie 才可以访问。</p>
<div><p>示例代码</p>
<p>具体代码可以看 <a href="https://github.com/jeremyjone/dotnet-study-road/tree/master/AuthenticationAndAuthorization/AuthenticationAndAuthorization.Basic" target="_blank" rel="noopener noreferrer">示例代码</a></p>
</div>
<p>首先在 <code>Startup.cs</code> 中添加服务：</p>
<div><pre><code>services<span>.</span><span>AddAuthentication</span><span>(</span>CookieAuthenticationDefaults<span>.</span>AuthenticationScheme<span>)</span>
    <span>.</span><span>AddCookie</span><span>(</span>CookieAuthenticationDefaults<span>.</span>AuthenticationScheme<span>,</span> config <span>=></span>
    <span>{</span>
        config<span>.</span>Cookie<span>.</span>Name <span>=</span> <span>"MyCookie"</span><span>;</span>
        <span>// 没有授权时，跳转到该页面</span>
        config<span>.</span>LoginPath <span>=</span> <span>"/Home/Auth"</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>然后在 <code>HomeController</code> 控制器前添加授权方案：</p>
<div><pre><code><span>[</span><span><span>Authorize</span></span><span>]</span>
<span>public</span> <span>class</span> <span>HomeController</span> <span>:</span> <span><span>Controller</span></span>
<span>{</span>
    <span>public</span> <span>IActionResult</span> <span>Index</span><span>(</span><span>)</span>
    <span>{</span>
        <span>return</span> <span>View</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>

    <span>public</span> <span>IActionResult</span> <span>Secret</span><span>(</span><span>)</span>
    <span>{</span>
        <span>return</span> <span>View</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>并在控制器中添加一个名为 <code>Auth</code> 的应用：</p>
<div><pre><code><span>/// &lt;summary></span>
<span>/// 认证</span>
<span>/// &lt;/summary></span>
<span>/// &lt;returns>&lt;/returns></span>
<span>// 不需要任何授权</span>
<span>[</span><span><span>AllowAnonymous</span></span><span>]</span>
<span>public</span> <span>IActionResult</span> <span>Auth</span><span>(</span><span>)</span>
<span>{</span>
    <span>// 添加一些声明</span>
    <span><span>var</span></span> claims1 <span>=</span> <span>new</span> <span>List<span>&lt;</span>Claim<span>></span></span><span>(</span><span>)</span>
    <span>{</span>
        <span>new</span> <span>Claim</span><span>(</span>ClaimTypes<span>.</span>Name<span>,</span> <span>"Jz"</span><span>)</span><span>,</span>
        <span>new</span> <span>Claim</span><span>(</span>ClaimTypes<span>.</span>Email<span>,</span> <span>"Jz@qq.com"</span><span>)</span><span>,</span>
        <span>// 声明的键是可以自定义的</span>
        <span>new</span> <span>Claim</span><span>(</span><span>"Custom-Claim"</span><span>,</span> <span>"This is a custom claim."</span><span>)</span>
    <span>}</span><span>;</span>

    <span>// 创建一个身份声明</span>
    <span><span>var</span></span> identity1 <span>=</span> <span>new</span> <span>ClaimsIdentity</span><span>(</span>claims1<span>,</span> <span>"Claims1"</span><span>)</span><span>;</span>

    <span>// 添加第二个声明</span>
    <span><span>var</span></span> claims2 <span>=</span> <span>new</span> <span>List<span>&lt;</span>Claim<span>></span></span><span>(</span><span>)</span>
    <span>{</span>
        <span>new</span> <span>Claim</span><span>(</span>ClaimTypes<span>.</span>Name<span>,</span> <span>"Tom"</span><span>)</span><span>,</span>
        <span>new</span> <span>Claim</span><span>(</span>ClaimTypes<span>.</span>Email<span>,</span> <span>"Tom@qq.com"</span><span>)</span>
    <span>}</span><span>;</span>

    <span>// 创建第二个身份声明</span>
    <span><span>var</span></span> identity2 <span>=</span> <span>new</span> <span>ClaimsIdentity</span><span>(</span>claims2<span>,</span> <span>"Claims2"</span><span>)</span><span>;</span>

    <span>// 将两个身份声明放到用户身份中</span>
    <span><span>var</span></span> principal <span>=</span> <span>new</span> <span>ClaimsPrincipal</span><span>(</span><span>new</span><span>[</span><span>]</span> <span>{</span>identity1<span>,</span> identity2<span>}</span><span>)</span><span>;</span>

    <span>// 签入身份验证方案的主体</span>
    HttpContext<span>.</span><span>SignInAsync</span><span>(</span>principal<span>)</span><span>;</span>

    <span>return</span> <span>RedirectToAction</span><span>(</span><span>"Index"</span><span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br></div></div><p>是的，这样就完成了一个非常简单的认证。当我们第一次登录 Index 的时候，因为没有权限，会跳转到我们配置好的目录：<code>/Home/Auth</code>，然后获取到身份验证内容后，重新跳转回 Index，这一切都是这么的丝滑。</p>
<h2 id="授权"> 授权</h2>
<p>授权通常是针对用户可执行的操作。在 .NET 的解决方案中，授权的使用是非常简单的。它通过 <code>AuthorizeAttribute</code> 和其各种参数来控制。</p>
<p>所有的授权都是在认证之后的，如果开启了授权，而没有提供认证方案，则会报错。
下面的代码，都默认已经配置好了 JWT 认证方案。</p>
<h3 id="授权的使用"> 授权的使用</h3>
<p>其最简单的形式就是将 <code>[Authrize]</code> 属性应用于控制器、操作或 Razor 页面。</p>
<div><pre><code><span>[</span><span><span>Authorize</span></span><span>]</span>
<span>public</span> <span>class</span> <span>AccountController</span> <span>:</span> <span><span>Controller</span></span>
<span>{</span>
    <span>public</span> <span>ActionResult</span> <span>Login</span><span>(</span><span>)</span>
    <span>{</span>
    <span>}</span>

    <span>public</span> <span>ActionResult</span> <span>Logout</span><span>(</span><span>)</span>
    <span>{</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>如果要对操作应用授权而非控制器，则置于操作本身即可：</p>
<div><pre><code><span>public</span> <span>class</span> <span>AccountController</span> <span>:</span> <span><span>Controller</span></span>
<span>{</span>
   <span>public</span> <span>ActionResult</span> <span>Login</span><span>(</span><span>)</span>
   <span>{</span>
   <span>}</span>

   <span>[</span><span><span>Authorize</span></span><span>]</span>
   <span>public</span> <span>ActionResult</span> <span>Logout</span><span>(</span><span>)</span>
   <span>{</span>
   <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>对于控制器需要权限，而里面某些应用不需要授权的情况，使用 <code>[AllowAnonymous]</code> 属性进行控制：</p>
<div><pre><code><span>[</span><span><span>Authorize</span></span><span>]</span>
<span>public</span> <span>class</span> <span>AccountController</span> <span>:</span> <span><span>Controller</span></span>
<span>{</span>
    <span>[</span><span><span>AllowAnonymous</span></span><span>]</span>
    <span>public</span> <span>ActionResult</span> <span>Login</span><span>(</span><span>)</span>
    <span>{</span>
    <span>}</span>

    <span>public</span> <span>ActionResult</span> <span>Logout</span><span>(</span><span>)</span>
    <span>{</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p><code>AllowAnonymous</code> 属性会跳过所有授权语句，如果它与 <code>Authorize</code> 组合使用，则会忽略 <code>Authorize</code> 属性，并且该效果向下兼容。</p>
<h3 id="基于角色授权"> 基于角色授权</h3>
<p>想要使用角色授权，首先要在令牌中添加角色：</p>
<div><p>示例代码</p>
<p>具体代码可以看 <a href="https://github.com/jeremyjone/dotnet-study-road/tree/master/AuthenticationAndAuthorization/AuthenticationAndAuthorization.Role" target="_blank" rel="noopener noreferrer">示例代码</a></p>
</div>
<h4 id="添加角色"> 添加角色</h4>
<div><pre><code><span><span>var</span></span> token <span>=</span> <span>new</span> <span>JwtSecurityToken</span><span>(</span>
<span>issuer</span><span>:</span> <span>"jeremyjone@qq.com"</span><span>,</span>
<span>audience</span><span>:</span> <span>"jeremyjone"</span><span>,</span>
<span>expires</span><span>:</span> DateTime<span>.</span>UtcNow<span>.</span><span>AddHours</span><span>(</span><span>1</span><span>)</span><span>,</span>
<span>signingCredentials</span><span>:</span> <span>new</span> <span>SigningCredentials</span><span>(</span>key<span>,</span> SecurityAlgorithms<span>.</span>HmacSha256<span>)</span><span>,</span>
<span>claims</span><span>:</span> <span>new</span> <span>Claim<span>[</span><span>]</span></span>
<span>{</span>
    <span>// 角色需要在这里填写</span>
    <span>new</span> <span>Claim</span><span>(</span>ClaimTypes<span>.</span>Role<span>,</span> <span>"Admin"</span><span>)</span><span>,</span>
    <span>// 多个角色可以重复写，生成的 JWT 会是一个数组</span>
    <span>new</span> <span>Claim</span><span>(</span>ClaimTypes<span>.</span>Role<span>,</span> <span>"Super"</span><span>)</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h4 id="使用角色进行授权"> 使用角色进行授权</h4>
<p>在 <code>[Authorize]</code> 后面跟上角色参数，即可使用角色授权。</p>
<div><pre><code><span>// 只有角色为 Admin 的用户可以使用</span>
<span>[</span><span>Authorize</span><span>(</span>Roles <span>=</span> <span>"Admin"</span><span>)</span><span>]</span>
<span>public</span> <span>IEnumerable<span>&lt;</span>WeatherForecast<span>></span></span> <span>Get</span><span>(</span><span>)</span>
<span>{</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>如果想使用两个或以上的角色，则可以：</p>
<div><pre><code><span>// 多个角色使用逗号（,）分开，它们是 “或” 的关系</span>
<span>[</span><span>Authorize</span><span>(</span>Roles <span>=</span> <span>"Admin,User"</span><span>)</span><span>]</span>
<span>public</span> <span>IEnumerable<span>&lt;</span>WeatherForecast<span>></span></span> <span>Get</span><span>(</span><span>)</span>
<span>{</span>
<span>}</span>

<span>// 多个角色分开写是 “且” 的关系</span>
<span>[</span><span><span>Authorize</span><span><span>(</span>Roles <span>=</span> <span>"Admin"</span><span>)</span></span></span><span>]</span>
<span>[</span><span><span>Authorize</span><span><span>(</span>Roles <span>=</span> <span>"Super"</span><span>)</span></span></span><span>]</span>
<span>public</span> <span>IEnumerable<span>&lt;</span>WeatherForecast<span>></span></span> <span>Get</span><span>(</span><span>)</span>
<span>{</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h3 id="基于策略授权"> 基于策略授权</h3>
<div><p>示例代码</p>
<p>具体代码可以看 <a href="https://github.com/jeremyjone/dotnet-study-road/tree/master/AuthenticationAndAuthorization/AuthenticationAndAuthorization.Policy" target="_blank" rel="noopener noreferrer">示例代码</a></p>
</div>
<p>上面的角色过于简单，.NET 提供了更加强大的功能--基于策略。</p>
<p>简单来说，就是将上面的 <code>Roles</code> 改为 <code>Policy</code> 即可。</p>
<div><pre><code><span>[</span><span><span>Authorize</span><span><span>(</span>Policy <span>=</span> <span>"AdminAndSuper"</span><span>)</span></span></span><span>]</span>
<span>public</span> <span>IEnumerable<span>&lt;</span>WeatherForecast<span>></span></span> <span>Get</span><span>(</span><span>)</span>
<span>{</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>策略授权使用起来确实方便很多，但是其配置也更复杂。</p>
<h4 id="配置角色策略"> 配置角色策略</h4>
<p>在 Startup.ConfigureServices 中添加授权服务：</p>
<div><pre><code>services<span>.</span><span>AddAuthorization</span><span>(</span>options <span>=></span>
<span>{</span>
    <span>// 配置角色策略</span>
    options<span>.</span><span>AddPolicy</span><span>(</span><span>"AdminAndSuper"</span><span>,</span> ploicy <span>=></span> policy<span>.</span><span>RequireRole</span><span>(</span><span>"Admin"</span><span>)</span><span>.</span><span>RequireRole</span><span>(</span><span>"Super"</span><span>)</span><span>)</span><span>;</span>
    options<span>.</span><span>AddPolicy</span><span>(</span><span>"AdminOrSuper"</span><span>,</span> ploicy <span>=></span> policy<span>.</span><span>RequireRole</span><span>(</span><span>"Admin"</span><span>,</span> <span>"Super"</span><span>)</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>关键通过 <code>RequireRole</code> 方法可以实现匹配角色，多参数为“或”的关系，链式为“且”的关系。</p>
<h4 id="配置声明策略"> 配置声明策略</h4>
<p>声明策略通过匹配令牌中的声明（Claim）进行授权。其方式与角色策略的配置方式差不多：</p>
<div><pre><code>services<span>.</span><span>AddAuthorization</span><span>(</span>options <span>=></span>
<span>{</span>
    <span>// 创建声明的策略</span>
    options<span>.</span><span>AddPolicy</span><span>(</span><span>"EmployeeOnly"</span><span>,</span> policy <span>=></span> policy<span>.</span><span>RequireClaim</span><span>(</span><span>"EmployeeNo"</span><span>)</span><span>)</span><span>;</span>
    options<span>.</span><span>AddPolicy</span><span>(</span><span>"Founders"</span><span>,</span> policy <span>=></span>
        <span>// 给声明添加指定允许值的列表</span>
        policy<span>.</span><span>RequireClaim</span><span>(</span><span>"EmployeeNo"</span><span>,</span> <span>"1"</span><span>,</span> <span>"2"</span><span>,</span> <span>"3"</span><span>,</span> <span>"4"</span><span>,</span> <span>"5"</span><span>)</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h4 id="配置自定义策略"> 配置自定义策略</h4>
<p>上面的方式还是比较简单，有时候需要一些更为复杂的方案，比如是否存在某一个声明属性，或者进行一些更高级的判断等，这时候就需要自定义。</p>
<p>比如实现一个查询是否包含某一声明属性：</p>
<div><pre><code>services<span>.</span><span>AddAuthorization</span><span>(</span>options <span>=></span>
<span>{</span>
    <span>// 自定义策略</span>
    options<span>.</span><span>AddPolicy</span><span>(</span><span>"HasBirthDay"</span><span>,</span>
        <span>// 实现一个简易的自定义策略</span>
        policy <span>=></span> policy<span>.</span><span>RequireAssertion</span><span>(</span>context <span>=></span>
            context<span>.</span>User<span>.</span><span>HasClaim</span><span>(</span>c <span>=></span> c<span>.</span>Type <span>==</span> ClaimTypes<span>.</span>DateOfBirth<span>)</span><span>)</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h5 id="创建自定义策略类"> 创建自定义策略类</h5>
<p>这样还是不方便，则可以使用自定义策略类来处理：</p>
<div><pre><code>services<span>.</span><span>AddAuthorization</span><span>(</span>options <span>=></span>
<span>{</span>
    <span>// 继承自 IAuthorizationRequirement 接口的策略</span>
    options<span>.</span><span>AddPolicy</span><span>(</span><span>"AtLeast18"</span><span>,</span> policy <span>=></span>
        <span>// 实现一个至少18岁的策略</span>
        policy<span>.</span>Requirements<span>.</span><span>Add</span><span>(</span><span>new</span> <span>MinimumAgeRequirement</span><span>(</span><span>18</span><span>)</span><span>)</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>创建一个 <code>MinimumAgeRequirement</code> 类：</p>
<div><pre><code><span>/// &lt;summary></span>
<span>/// 最小年龄策略要求类，它需要实现 IAuthorizationRequirement 接口</span>
<span>/// &lt;/summary></span>
<span>public</span> <span>class</span> <span>MinimumAgeRequirement</span> <span>:</span> <span><span>IAuthorizationRequirement</span></span>
<span>{</span>
    <span>public</span> <span>MinimumAgeRequirement</span><span>(</span><span><span>int</span></span> minAge<span>)</span>
    <span>{</span>
        MinAge <span>=</span> minAge<span>;</span>
    <span>}</span>

    <span>public</span> <span><span>int</span></span> MinAge <span>{</span> <span>get</span><span>;</span> <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>然后创建一个针对我们需要的策略（至少 18 岁）进行处理。创建一个 <code>MinimumAgeHandle</code> 类，它继承自 <code>AuthorizationHandler&lt;TRequirement&gt;</code> 抽象类，<code>TRequirement</code> 是一个泛型，这里应该使用 <code>MinimumAgeRequirement</code> 进行替换。</p>
<div><pre><code><span>/// &lt;summary></span>
<span>/// 最小年龄的处理类，它需要实现 AuthorizationHandler&lt;TRequirement> 抽象类</span>
<span>/// &lt;/summary></span>
<span>public</span> <span>class</span> <span>MinimumAgeHandler</span> <span>:</span> <span><span>AuthorizationHandler<span>&lt;</span>MinimumAgeRequirement<span>></span></span></span>
<span>{</span>
    <span>protected</span> <span>override</span> <span>Task</span> <span>HandleRequirementAsync</span><span>(</span><span>AuthorizationHandlerContext</span> context<span>,</span>
        <span>MinimumAgeRequirement</span> requirement<span>)</span>
    <span>{</span>
        <span>if</span> <span>(</span><span>!</span>context<span>.</span>User<span>.</span><span>HasClaim</span><span>(</span>c <span>=></span> c<span>.</span>Type <span>==</span> ClaimTypes<span>.</span>DateOfBirth<span>)</span><span>)</span>
        <span>{</span>
            <span>return</span> Task<span>.</span>CompletedTask<span>;</span>
        <span>}</span>

        <span><span>var</span></span> dateOfBirth <span>=</span> context<span>.</span>User<span>.</span><span>FindFirstValue</span><span>(</span>ClaimTypes<span>.</span>DateOfBirth<span>)</span><span>;</span>
        <span>if</span> <span>(</span><span>string</span><span>.</span><span>IsNullOrWhiteSpace</span><span>(</span>dateOfBirth<span>)</span><span>)</span> <span>return</span> Task<span>.</span>CompletedTask<span>;</span>

        <span><span>var</span></span> birth <span>=</span> Convert<span>.</span><span>ToDateTime</span><span>(</span>dateOfBirth<span>)</span><span>;</span>
        <span><span>var</span></span> age <span>=</span> DateTime<span>.</span>Today<span>.</span>Year <span>-</span> birth<span>.</span>Year<span>;</span>
        <span>if</span> <span>(</span>birth <span>></span> DateTime<span>.</span>Today<span>.</span><span>AddYears</span><span>(</span><span>-</span>age<span>)</span><span>)</span> age<span>--</span><span>;</span>

        <span>if</span> <span>(</span>age <span>>=</span> requirement<span>.</span>MinAge<span>)</span>
            <span>// Succeed 方法是验证成功的必要语句</span>
            context<span>.</span><span>Succeed</span><span>(</span>requirement<span>)</span><span>;</span>

        <span>return</span> Task<span>.</span>CompletedTask<span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><p>最后需要将操作类在服务中注入：</p>
<div><pre><code><span>// 注册自定义策略的处理程序</span>
services<span>.</span><span><span>AddSingleton</span><span><span>&lt;</span>IAuthorizationHandler<span>,</span> MinimumAgeHandler<span>></span></span></span><span>(</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>然后，我们可以将控制器中的策略改为 <code>[Authorize(Policy = &quot;AtLeast18&quot;)]</code> 以查看效果。如果令牌中包含年龄，并且年龄大于 18 岁则会正常进入，反之不会。</p>
<h5 id="在策略中使用参数"> 在策略中使用参数</h5>
<p>上面的例子中，年龄是写死的，这样对控制器应用非常不友好，如果要获取很多不同年龄段的权限，需要配置对应多项的策略，这样就很麻烦。好在 .NET 给我们提供了一个 Provider，让我们可以方便配置。</p>
<div><p>示例代码</p>
<p>具体代码可以看 <a href="https://github.com/jeremyjone/dotnet-study-road/tree/master/AuthenticationAndAuthorization/AuthenticationAndAuthorization.CustomPolicy" target="_blank" rel="noopener noreferrer">示例代码</a></p>
</div>
<p>基于上例，继续创建一个 <code>MinimumAgeAuthorizeAttribute</code> 类，它继承自 <code>AuthorizeAttribute</code>：</p>
<div><pre><code><span>/// &lt;summary></span>
<span>/// 通过将参数映射到一个字符串，用于检索相应的授权策略。</span>
<span>/// &lt;/summary></span>
<span>internal</span> <span>class</span> <span>MinimumAgeAuthorizeAttribute</span> <span>:</span> <span><span>AuthorizeAttribute</span></span>
<span>{</span>
    <span>private</span> <span>const</span> <span><span>string</span></span> POLICY_PREFIX <span>=</span> <span>"MinimumAge"</span><span>;</span>
    <span>public</span> <span>MinimumAgeAuthorizeAttribute</span><span>(</span><span><span>int</span></span> age<span>)</span> <span>=></span> Age <span>=</span> age<span>;</span>

    <span>public</span> <span><span>int</span></span> Age
    <span>{</span>
        <span>get</span> <span>=></span> <span>int</span><span>.</span>TryParse<span><span>(</span>Policy<span>.</span>Substring<span>(</span>POLICY_PREFIX<span>.</span>Length<span>)</span><span>,</span> <span>out</span> <span>var</span> age<span>)</span> <span>?</span></span> age <span>:</span> <span>default</span><span>;</span>
        <span>set</span> <span>=></span> Policy <span>=</span> <span><span>$"</span><span><span>{</span><span>POLICY_PREFIX</span><span>}</span></span><span><span>{</span><span><span>value</span><span>.</span><span>ToString</span><span>(</span><span>)</span></span><span>}</span></span><span>"</span></span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>写完了它，在控制器就可以使用 <code>[MinimumAgeAuthorize(18)]</code> 属性了。</p>
<p>但是还没有对应的处理程序，它并不能真正运行起来。该属性仅仅是收集授权参数为一个特定字符串，我们需要通过程序将该字符串解析为一个年龄数字，然后判断数字是不是符合标准。</p>
<p>创建一个 <code>MinimumAgePolicyProvider</code> 类，它继承自 <code>IAuthorizationPolicyProvider</code>：</p>
<div><pre><code><span>/// &lt;summary></span>
<span>/// 提供最小年龄的授权服务，通过 IAuthorizationPolicyProvider 接口，实现 GetPolicyAsync 方法即可。</span>
<span>/// &lt;/summary></span>
<span>internal</span> <span>class</span> <span>MinimumAgePolicyProvider</span><span>:</span> <span><span>IAuthorizationPolicyProvider</span></span>
<span>{</span>
    <span>private</span> <span>const</span> <span><span>string</span></span> POLICY_PREFIX <span>=</span> <span>"MinimumAge"</span><span>;</span>

    <span>public</span> <span>DefaultAuthorizationPolicyProvider</span> FallbackPolicyProvider <span>{</span> <span>get</span><span>;</span> <span>}</span>

    <span>public</span> <span>MinimumAgePolicyProvider</span><span>(</span><span>IOptions<span>&lt;</span>AuthorizationOptions<span>></span></span> options<span>)</span>
    <span>{</span>
        <span>// 提供其他授权策略方案，这里使用默认方案</span>
        FallbackPolicyProvider <span>=</span> <span>new</span> <span>DefaultAuthorizationPolicyProvider</span><span>(</span>options<span>)</span><span>;</span>
    <span>}</span>

    <span>/// &lt;summary></span>
    <span>/// 获取策略并进行处理</span>
    <span>/// &lt;/summary></span>
    <span>/// &lt;param name="policyName">&lt;/param></span>
    <span>/// &lt;returns>&lt;/returns></span>
    <span>public</span> <span>Task<span>&lt;</span>AuthorizationPolicy<span>></span></span> <span>GetPolicyAsync</span><span>(</span><span><span>string</span></span> policyName<span>)</span>
    <span>{</span>
        <span>// 获取策略字符串并解析出年龄</span>
        <span>if</span> <span>(</span>policyName<span>.</span><span>StartsWith</span><span>(</span>POLICY_PREFIX<span>,</span> StringComparison<span>.</span>OrdinalIgnoreCase<span>)</span> <span>&amp;&amp;</span>
            <span>int</span><span>.</span><span>TryParse</span><span>(</span>policyName<span>.</span><span>Substring</span><span>(</span>POLICY_PREFIX<span>.</span>Length<span>)</span><span>,</span> <span>out</span> <span><span>var</span></span> age<span>)</span><span>)</span>
        <span>{</span>
            <span>// 这里其实和 Startup.ConfigureService 中的配置差不多，都是添加一个 Requirement</span>
            <span><span>var</span></span> policy <span>=</span> <span>new</span> <span>AuthorizationPolicyBuilder</span><span>(</span><span>)</span><span>;</span>
            policy<span>.</span><span>AddRequirements</span><span>(</span><span>new</span> <span>MinimumAgeRequirement</span><span>(</span>age<span>)</span><span>)</span><span>;</span>
            <span>return</span> Task<span>.</span><span>FromResult</span><span>(</span>policy<span>.</span><span>Build</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>}</span>

        <span>//return Task.FromResult&lt;AuthorizationPolicy>(null);</span>
        <span>// 当上述授权流程出现问题（例如获取不到年龄），则使用该备选方案</span>
        <span>return</span> FallbackPolicyProvider<span>.</span><span>GetPolicyAsync</span><span>(</span>policyName<span>)</span><span>;</span>
    <span>}</span>

    <span>//public Task&lt;AuthorizationPolicy> GetDefaultPolicyAsync()</span>
    <span>//{</span>
    <span>//    throw new NotImplementedException();</span>
    <span>//}</span>

    <span>//public Task&lt;AuthorizationPolicy> GetFallbackPolicyAsync()</span>
    <span>//{</span>
    <span>//    throw new NotImplementedException();</span>
    <span>//}</span>

    <span>public</span> <span>Task<span>&lt;</span>AuthorizationPolicy<span>></span></span> <span>GetDefaultPolicyAsync</span><span>(</span><span>)</span> <span>=></span> FallbackPolicyProvider<span>.</span><span>GetDefaultPolicyAsync</span><span>(</span><span>)</span><span>;</span>

    <span>public</span> <span>Task<span>&lt;</span>AuthorizationPolicy<span>></span></span> <span>GetFallbackPolicyAsync</span><span>(</span><span>)</span> <span>=></span> FallbackPolicyProvider<span>.</span><span>GetFallbackPolicyAsync</span><span>(</span><span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br></div></div><p>最后，将 Handler 和 Provider 都注册到服务中：</p>
<div><pre><code><span>// 注入授权服务</span>
services<span>.</span><span><span>AddSingleton</span><span><span>&lt;</span>IAuthorizationHandler<span>,</span> MinimumAgeHandler<span>></span></span></span><span>(</span><span>)</span><span>;</span>
services<span>.</span><span><span>AddSingleton</span><span><span>&lt;</span>IAuthorizationPolicyProvider<span>,</span> MinimumAgePolicyProvider<span>></span></span></span><span>(</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>这样再启动服务器，就可以进行正常而灵活的授权了。</p>
]]></content:encoded>
    </item>
    <item>
      <title>IdentityServer4 的使用</title>
      <link>https://docs.jeremyjone.com/roadmap/dotnetcore/auth/is4/</link>
      <guid>https://docs.jeremyjone.com/roadmap/dotnetcore/auth/is4/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">IdentityServer4 的使用</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="identityserver4-的使用"> IdentityServer4 的使用</h1>
<p>IdentityServer4 是基于 OpenId Connect（OIDC）、OAuth 2.0 统一的身份认证和授权系统。它拥有很多功能：</p>
<ul>
<li>保护你的资源</li>
<li>使用本地帐户或通过外部身份提供程序对用户进行身份验证</li>
<li>提供会话管理和单点登录</li>
<li>管理和验证客户机</li>
<li>向客户发出标识和访问令牌</li>
<li>验证令牌</li>
</ul>
<h2 id="openid-connect（oidc）"> OpenId Connect（OIDC）</h2>
<p>OpenId 是一种认证机制，用于对用于的身份进行认证，它允许用户使用单个账号登录多个网站。</p>
<p>OIDC 提供者必须记录其将哪些声明包含在其标识令牌中，有关认证的必须声明：</p>
<ul>
<li>aud（读者）：必须包含在发行者注册的 RP 的客户机标识</li>
<li>iss（发行者）：OP 的发行者标识</li>
<li>exp（到期时间）：RP 必须再次时间之前验证标识令牌</li>
<li>iat（发行时间）：发放标识令牌的时间</li>
</ul>
<p>以下声明是有关用户的必须声明：</p>
<ul>
<li>sub（主题）：发行者的用户的本地唯一且永久标识</li>
</ul>
<h2 id="oauth-2-0"> OAuth 2.0</h2>
<p>OAuth 2.0 是一种授权机制，主要用于颁发令牌。</p>
<blockquote>
<p><strong>举个例子</strong>
你入职了一家公司，HR 小姐姐给了你一张门禁卡，你通过门禁卡就可以进入公司。但不一定每一间屋子都能进。-- 这就相当于颁发访问令牌。
非本公司的人没有门禁卡，他们就进不来。而你拿着这张门禁卡在公司到处溜达，不见得每个门都能打开，比如老总办公室。-- 这就是权限控制。
当你离职的时候，HR 小姐姐会收回你的门禁卡，你也就进不了公司了，这就是授权过期。</p>
</blockquote>
<p>OAuth 2.0 规定了四中获得令牌的流程：</p>
<ul>
<li>授权码（authorization-code）</li>
<li>隐藏式（implicit）</li>
<li>密码式（password）</li>
<li>客户端凭证（client-credentials）</li>
</ul>
<p>1、授权码：</p>
<p>即客户先申请一个授权，然后再用该授权码获取令牌。这种方式最常用，安全性也最高。</p>
<p>因为发送参数通常都在 URL 中，并且 secret 参数是保密的，所以一定要在后端发送请求。</p>
<p>2、隐藏式：</p>
<p>即允许直接向前端颁发令牌，没有授权码的步骤。</p>
<p>因为随着前后端分离，大量纯前端项目的出现，导致授权码的方式在一定程度上不能实行，所以必须将令牌存储在前端，于是就有了隐藏式。</p>
<p>这种方式很不安全，所以只用于特定安全要求不高的环境下，并且有效期应该设置的尽量短。而且，这种回调的跳转参数通常使用<strong>锚点</strong>形式。</p>
<p>3、密码式：</p>
<p>即通过某个第三方应用输入密码进行验证，并由该应用向目标服务器请求令牌。</p>
<p>这种方式要求客户完全信赖其使用的第三方应用，否则不应该将密码告诉它们。</p>
<p>4、客户端凭证：</p>
<p>该方案适用于命令行应用。这种方式给出的令牌是针对第三方应用的，而非针对用户，所以可能多个用户使用同一令牌。</p>
<p>无论哪种方式，客户（第三方应用）都应在申请令牌之前进行系统备案，说明自己的身份，然后才会拿到两个身份识别码：</p>
<ul>
<li>客户端 Id（client ID）</li>
<li>客户端秘钥（client secret）</li>
</ul>
<p>没有备案的客户，是不会拿到令牌的。</p>
<h2 id="创建-is4-服务"> 创建 IS4 服务</h2>
<p>IS4 官方教程：<a href="https://identityserver4.readthedocs.io/en/latest/" target="_blank" rel="noopener noreferrer">英文文档</a></p>
<div><p>示例代码</p>
<p>具体代码可以看 <a href="https://github.com/jeremyjone/dotnet-study-road/tree/master/AuthenticationAndAuthorization/AuthenticationAndAuthorization.IdentityServer4" target="_blank" rel="noopener noreferrer">示例代码</a></p>
</div>
<h3 id="安装-is4-包"> 安装 IS4 包</h3>
<p>通过 <code>NuGet</code> 管理器安装 <code>IdentityServer4</code>。</p>
<h3 id="添加配置文件"> 添加配置文件</h3>
<p>添加一个 <code>Config.cs</code> 文件，并且添加如下内容：</p>
<div><pre><code><span>public</span> <span>static</span> <span>class</span> <span>Config</span>
<span>{</span>
    <span>/// &lt;summary></span>
    <span>/// 配置认证资源信息</span>
    <span>/// &lt;/summary></span>
    <span>public</span> <span>static</span> <span>IEnumerable<span>&lt;</span>IdentityResource<span>></span></span> Ids <span>=></span>
        <span>new</span> <span>IdentityResource<span>[</span><span>]</span></span>
        <span>{</span>
            <span>// 认证资源，OpenId 是必须要添加的</span>
            <span>new</span> <span>IdentityResources<span>.</span>OpenId</span><span>(</span><span>)</span><span>,</span>
            <span>// Profile 也是需要带上的</span>
            <span>new</span> <span>IdentityResources<span>.</span>Profile</span><span>(</span><span>)</span>
        <span>}</span><span>;</span>

    <span>/// &lt;summary></span>
    <span>/// 配置 Api 信息</span>
    <span>/// &lt;/summary></span>
    <span>public</span> <span>static</span> <span>IEnumerable<span>&lt;</span>ApiScope<span>></span></span> Apis <span>=></span>
        <span>new</span><span>[</span><span>]</span>
        <span>{</span>
            <span>new</span> <span>ApiScope</span><span>(</span><span>"api.jeremyjone.com"</span><span>,</span> <span>"Jz.Api"</span><span>)</span><span>,</span>
        <span>}</span><span>;</span>

    <span>/// &lt;summary></span>
    <span>/// 配置客户端</span>
    <span>/// &lt;/summary></span>
    <span>public</span> <span>static</span> <span>IEnumerable<span>&lt;</span>Client<span>></span></span> Clients <span>=></span>
        <span>new</span> <span>[</span><span>]</span>
        <span>{</span>
            <span>new</span> <span>Client</span>
            <span>{</span>
                <span>// 客户端 Id</span>
                ClientId <span>=</span> <span>"jz"</span><span>,</span>
                <span>// 客户端获取 Token</span>
                ClientSecrets <span>=</span> <span>new</span><span>[</span><span>]</span> <span>{</span><span>new</span> <span>Secret</span><span>(</span><span>"www.jeremyjone.com"</span><span>.</span><span>Sha256</span><span>(</span><span>)</span><span>)</span> <span>}</span><span>,</span>
                <span>// 使用客户端认证</span>
                AllowedGrantTypes <span>=</span> GrantTypes<span>.</span>ClientCredentials<span>,</span>
                <span>// 允许访问的 Api</span>
                AllowedScopes <span>=</span> <span>new</span><span>[</span><span>]</span> <span>{</span> <span>"api.jeremyjone.com"</span> <span>}</span>
            <span>}</span>
        <span>}</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br></div></div><div><p>提示</p>
<p>这是基本配置，更多配置，请参考 <a href="./intro-config">详解配置</a></p>
</div>
<h3 id="配置服务"> 配置服务</h3>
<p>在 <code>Startup.cs</code> 中配置 IS4 的服务。</p>
<div><pre><code><span>public</span> <span><span>void</span></span> <span>ConfigureServices</span><span>(</span><span>IServiceCollection</span> services<span>)</span>
<span>{</span>
    <span><span>var</span></span> builder <span>=</span> services<span>.</span><span>AddIdentityServer</span><span>(</span><span>)</span>
        <span>.</span><span>AddInMemoryApiScopes</span><span>(</span>Config<span>.</span>Apis<span>)</span>
        <span>.</span><span>AddInMemoryClients</span><span>(</span>Config<span>.</span>Clients<span>)</span><span>;</span>

    <span>// 开发环境下配置临时签名认证</span>
    builder<span>.</span><span>AddDeveloperSigningCredential</span><span>(</span><span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>然后添加中间件：</p>
<div><pre><code>app<span>.</span><span>UseIdentityServer</span><span>(</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="密码认证"> 密码认证</h3>
<p>如果需要使用密码认证，两个步骤：</p>
<ul>
<li>
<p>需要将客户端的配置中 <code>AllowedGrantTypes</code> 字段的值修改为 <code>GrantTypes.ResourceOwnerPassword</code>。</p>
</li>
<li>
<p>同时添加一个测试用户以供测试：</p>
<ul>
<li>在 <code>Config.cs</code> 文件中添加一个静态方法：</li>
</ul>
<div><pre><code><span>/// &lt;summary></span>
<span>/// 配置测试账户</span>
<span>/// &lt;/summary></span>
<span>public</span> <span>static</span> <span>List<span>&lt;</span>TestUser<span>></span></span> Users <span>=></span>
  <span>new</span> <span>List<span>&lt;</span>TestUser<span>></span></span>
  <span>{</span>
      <span>new</span> <span>TestUser</span>
      <span>{</span>
          SubjectId <span>=</span> <span>"1"</span><span>,</span>
          Username <span>=</span> <span>"jeremyjone"</span><span>,</span>
          Password <span>=</span> <span>"123456"</span>
      <span>}</span>
  <span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><ul>
<li>然后在 <code>Startup.cs</code> 文件中的服务配置中追加一个 <code>AddTestUsers(Config.Users)</code> 即可。</li>
</ul>
</li>
</ul>
<p>这样一个简单的认证中心就配置完成。</p>
<h3 id="测试一下"> 测试一下</h3>
<p>通过 Postman 进行测试：</p>
<img :src="$withBase('/assets/roadmap/dotnet/is4_postman_test.png')" alt="postman 测试">
<p>通过后台代码测试：</p>
<div><p>示例代码</p>
<p>具体代码可以看 <a href="https://github.com/jeremyjone/dotnet-study-road/tree/master/AuthenticationAndAuthorization/AuthenticationAndAuthorization.IdentityServerConsoleTest" target="_blank" rel="noopener noreferrer">示例代码</a></p>
</div>
<div><pre><code><span>public</span> <span>static</span> <span>async</span> <span><span>void</span></span> <span>GetToken</span><span>(</span><span>)</span>
<span>{</span>
    <span><span>var</span></span> client <span>=</span> <span>new</span> <span>HttpClient</span><span>(</span><span>)</span><span>;</span>
    <span><span>var</span></span> discovery <span>=</span> <span>await</span> client<span>.</span><span>GetDiscoveryDocumentAsync</span><span>(</span><span>"http://localhost:5000"</span><span>)</span><span>;</span>
    <span>if</span> <span>(</span>discovery<span>.</span>IsError<span>)</span>
    <span>{</span>
        Console<span>.</span><span>WriteLine</span><span>(</span><span>"ERR: "</span> <span>+</span> discovery<span>.</span>Error<span>)</span><span>;</span>
    <span>}</span>

    <span><span>var</span></span> resp <span>=</span> <span>await</span> client<span>.</span><span>RequestClientCredentialsTokenAsync</span><span>(</span><span>new</span> <span>ClientCredentialsTokenRequest</span>
    <span>{</span>
        Address <span>=</span> discovery<span>.</span>TokenEndpoint<span>,</span>
        ClientId <span>=</span> <span>"jz"</span><span>,</span>
        ClientSecret <span>=</span> <span>"www.jeremyjone.com"</span><span>,</span>
    <span>}</span><span>)</span><span>;</span>

    <span>if</span> <span>(</span>resp<span>.</span>IsError<span>)</span>
    <span>{</span>
        Console<span>.</span><span>WriteLine</span><span>(</span><span>"ERR: "</span> <span>+</span> resp<span>.</span>Error<span>)</span><span>;</span>
    <span>}</span>

    Console<span>.</span><span>WriteLine</span><span>(</span>resp<span>.</span>Json<span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><p>测试结果同样是成功的。</p>
<p>这样就完成了基于 OAuth 2.0 协议的认证过程。</p>
<h2 id="实现-oidc-认证"> 实现 OIDC 认证</h2>
<p>使用 IS4 实现一个 OIDC 认证。</p>
<h3 id="建立认证服务器"> 建立认证服务器</h3>
<p>基于上面的认证服务器进行修改，首先添加 UI。</p>
<div><p>示例代码</p>
<p>具体代码可以看 <a href="https://github.com/jeremyjone/dotnet-study-road/tree/master/AuthenticationAndAuthorization/AuthenticationAndAuthorization.IS4WithUI" target="_blank" rel="noopener noreferrer">示例代码</a></p>
</div>
<p>在项目根目录下添加 UI 文件，有两种方式：</p>
<ul>
<li>
<p>打开 <a href="https://github.com/IdentityServer/IdentityServer4.Quickstart.UI/" target="_blank" rel="noopener noreferrer">IdentityServer4.Quickstart.UI</a>，下载全部内容并复制到项目文件夹下。</p>
</li>
<li>
<p>使用 命令行：</p>
<div><pre><code><span># powershell</span>
<span>iex</span> <span>(</span><span>(</span><span>New-Object</span> System<span>.</span>Net<span>.</span>WebClient<span>)</span><span>.</span>DownloadString<span>(</span><span>'https://raw.githubusercontent.com/IdentityServer/IdentityServer4.Quickstart.UI/main/getmain.ps1'</span><span>)</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>或者在 macOS 或者 Linux 中：</p>
<div><pre><code><span>curl</span> -L https://raw.githubusercontent.com/IdentityServer/IdentityServer4.Quickstart.UI/main/getmain.sh <span>|</span> <span>bash</span>
</code></pre>
<div><span>1</span><br></div></div></li>
</ul>
<p>除了上面两种方式，还可以通过 cli 的模板工具进行添加（前提是你得有对应模板，如果没有，就用上面的命令即可）：</p>
<div><pre><code>dotnet new -i identityserver4.templates
dotnet new is4ui
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><blockquote>
<p>了解更多 IS4 提供的模板，可以查看 </p>
</blockquote>
<p>安装成功后，目录结构如下：</p>
<img :src="$withBase('/assets/roadmap/dotnet/is4_quickstart_ui_dir.png')" alt="is4_quickstart_ui_dir">
<p>直接运行可以看到界面了:</p>
<img :src="$withBase('/assets/roadmap/dotnet/is4_quickstart_ui_page1.png')" alt="is4_quickstart_ui_page1">
<blockquote>
<p>这里有个细节问题，如果点登录后没有跳转页面，而后台出现了类似 <code>SameSite</code> 的错误，请参照微软的文档操作：<a href="https://docs.microsoft.com/en-us/aspnet/core/security/samesite?view=aspnetcore-5.0" target="_blank" rel="noopener noreferrer">SameSite Cookie</a></p>
</blockquote>
<p>然后修改之前的代码，只需要修改配置文件即可。</p>
<p>在 <code>Config.Clients</code> 中添加一个客户端：</p>
<div><pre><code><span>new</span> <span>Client</span>
<span>{</span>
    ClientId <span>=</span> <span>"mvc_client"</span><span>,</span>
    ClientName <span>=</span> <span>"MVC Client"</span><span>,</span>
    ClientSecrets <span>=</span> <span>{</span><span>new</span> <span>Secret</span><span>(</span><span>"www.jeremyjone.com"</span><span>.</span><span>Sha256</span><span>(</span><span>)</span><span>)</span><span>}</span><span>,</span>
    <span>// 使用授权码</span>
    AllowedGrantTypes <span>=</span> GrantTypes<span>.</span>Code<span>,</span>
    <span>// 重定向，地址是客户端的地址</span>
    RedirectUris <span>=</span> <span>{</span><span>"http://localhost:6000/signin-oidc"</span><span>}</span><span>,</span>
    PostLogoutRedirectUris <span>=</span> <span>{</span><span>"http://localhost:6000/signout-callback-oidc"</span><span>}</span><span>,</span>
    <span>// 用户的授权范围</span>
    AllowedScopes <span>=</span>
    <span>{</span>
        <span>// 允许用户的授权</span>
        IdentityServerConstants<span>.</span>StandardScopes<span>.</span>OpenId<span>,</span>
        IdentityServerConstants<span>.</span>StandardScopes<span>.</span>Profile<span>,</span>
        <span>"api.jeremyjone.com"</span>
    <span>}</span><span>,</span>
    <span>// 是否需要用户同意（需要的话，会跳转到一个同意页面）</span>
    RequireConsent <span>=</span> <span>true</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><blockquote>
<p><em>重定向地址是标准地址，也可以自定义。</em></p>
</blockquote>
<h3 id="建立客户端"> 建立客户端</h3>
<p>新建一个项目，MVC、API 或者其他客户端项目都可以。</p>
<div><p>示例代码</p>
<p>具体代码可以看 <a href="https://github.com/jeremyjone/dotnet-study-road/tree/master/AuthenticationAndAuthorization/AuthenticationAndAuthorization.IS4WithUIMvcClient" target="_blank" rel="noopener noreferrer">示例代码</a></p>
</div>
<h4 id="配置客户端的服务"> 配置客户端的服务</h4>
<p>在 <code>Startup.ConfigureServices</code> 中添加认证服务：</p>
<div><pre><code><span>// 关闭默认 Token 命名空间</span>
JwtSecurityTokenHandler<span>.</span>DefaultMapInboundClaims <span>=</span> <span>false</span><span>;</span>
services<span>.</span><span>AddAuthentication</span><span>(</span>options <span>=></span>
    <span>{</span>
        <span>// 配置协议</span>
        options<span>.</span>DefaultScheme <span>=</span> <span>"Cookies"</span><span>;</span>
        options<span>.</span>DefaultChallengeScheme <span>=</span> <span>"oidc"</span><span>;</span>
    <span>}</span><span>)</span>
    <span>.</span><span>AddCookie</span><span>(</span><span>"Cookies"</span><span>)</span>
    <span>// 如果使用 Chrome 在登录后无法从 signin-oidc 路径跳转到目标路径，如下操作：</span>
    <span>// 打开浏览器键入 chrome://flags，搜索 Cookies without SameSite must be secure，将其设置为 Disabled 即可。</span>
    <span>.</span><span>AddOpenIdConnect</span><span>(</span><span>"oidc"</span><span>,</span> options <span>=></span>
    <span>{</span>
        <span>// 如果不启用 https，则需要添加该 meta 项</span>
        options<span>.</span>RequireHttpsMetadata <span>=</span> <span>false</span><span>;</span>
        <span>// 这个地址是认证服务器的地址</span>
        options<span>.</span>Authority <span>=</span> <span>"http://localhost:5000"</span><span>;</span>
        <span>// 下面内容需要与认证服务器的内容保持一致</span>
        options<span>.</span>ClientId <span>=</span> <span>"mvc_client"</span><span>;</span>
        options<span>.</span>ClientSecret <span>=</span> <span>"www.jeremyjone.com"</span><span>;</span>
        <span>// 认证方式</span>
        options<span>.</span>ResponseType <span>=</span> <span>"code"</span><span>;</span>
        options<span>.</span>SaveTokens <span>=</span> <span>true</span><span>;</span>
        <span>// 验证是否包含某个作用域</span>
        options<span>.</span>Scope<span>.</span><span>Add</span><span>(</span><span>"api.jeremyjone.com"</span><span>)</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><p>然后在中间件中注册 <code>UseAuthentication()</code> 即可。</p>
<h4 id="修改控制器"> 修改控制器</h4>
<p>在控制器中给一个方法添加 <code>[Authorize]</code> 控制访问权限。</p>
<p>这样就配置好了，可以整体测试一下。</p>
<h3 id="测试认证连接"> 测试认证连接</h3>
<ul>
<li>
<p>命令行打开认证服务器，确保打开地址是客户端填写的地址。</p>
</li>
<li>
<p>启动客户端，客户端地址应该是服务器填写的重定向根地址。</p>
</li>
</ul>
<p>打开浏览器，输入客户端地址，点击被限制的接口按钮时，就会跳转到对应服务器的登录认证页面，成功后可以跳转回客户端地址。</p>
<h2 id="丰富的模板"> 丰富的模板</h2>
<p>通过安装 IS4 的模板，可以快速创建多种类型的 IS4 服务。</p>
<p>首先需要安装模板：</p>
<div><pre><code>dotnet new -i IdentityServer4.Templates
</code></pre>
<div><span>1</span><br></div></div><p>安装好之后，通过 <code>dotnet new</code> 会看到多出来的模板：</p>
<img :src="$withBase('/assets/roadmap/dotnet/is4_template.png')" alt="is4 模板列表">
<p>记住它们的命令：</p>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">is4admin</td>
<td style="text-align:center">创建一个带后台管理的完整 IdentityServer 项目，但仅可用于测试</td>
</tr>
<tr>
<td style="text-align:center">is4aspid</td>
<td style="text-align:center">创建一个将使用 ASP.NET Core Identity 的新 IdentityServer 项目</td>
</tr>
<tr>
<td style="text-align:center">is4empty</td>
<td style="text-align:center">创建一个空的 IdentityServer 项目</td>
</tr>
<tr>
<td style="text-align:center">is4ef</td>
<td style="text-align:center">创建带有 EntityFramework 支持的新项目</td>
</tr>
<tr>
<td style="text-align:center">is4inmem</td>
<td style="text-align:center">创建内存存储的新项目，通常用于快速测试</td>
</tr>
<tr>
<td style="text-align:center">is4ui</td>
<td style="text-align:center">创建一个带 UI 的完整 MVC 示例</td>
</tr>
</tbody>
</table>
]]></content:encoded>
    </item>
    <item>
      <title>外部身份验证</title>
      <link>https://docs.jeremyjone.com/roadmap/dotnetcore/auth/is4/external-account/</link>
      <guid>https://docs.jeremyjone.com/roadmap/dotnetcore/auth/is4/external-account/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">外部身份验证</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="外部身份验证"> 外部身份验证</h1>
<p>基于 OAuth2 的特性，我们可以轻松通过外部账户进行登录。</p>
<p>外部账户登录的好处：</p>
<ul>
<li>方便用户操作。</li>
<li>将管理登录流程的许多复杂性转移到了第三方。</li>
</ul>
<h2 id="添加一个预定义的身份验证"> 添加一个预定义的身份验证</h2>
<p>IS4 在 ASP.NET Core 框架的基础上提供了更丰富和完整的预定义外部登录配置。</p>
<h3 id="配置一个-microsoft-身份验证"> 配置一个 Microsoft 身份验证</h3>
<p>下面通过创建一个使用 Microsoft 身份进行验证的最小实例来介绍外部验证过程。</p>
<div><p>示例代码</p>
<p>具体代码可以看 <a href="https://github.com/jeremyjone/dotnet-study-road/tree/master/AuthenticationAndAuthorization/AuthenticationAndAuthorization.ExternalAccount" target="_blank" rel="noopener noreferrer">示例代码</a></p>
</div>
<p>使用命令创建一个全新项目：</p>
<div><pre><code>dotnet new is4aspid --name ExternailAccount
</code></pre>
<div><span>1</span><br></div></div><p>会得到一个完整使用 IS4 的项目，而且已经内置好了 Google 的外部认证。</p>
<p>因为我们需要的是 Microsoft 的身份认证，所以需要添加包：</p>
<div><pre><code>Microsoft.AspNetCore.Authentication.MicrosoftAccount（3.1.5）
</code></pre>
<div><span>1</span><br></div></div><div><p>提示</p>
<p>下载时需要注意版本。</p>
</div>
<p>在 <code>Startup.cs</code> 配置中的认证服务后面追加如下内容：</p>
<div><pre><code>services<span>.</span><span>AddAuthentication</span><span>(</span><span>)</span>
    <span>.</span><span>AddGoogle</span><span>(</span>options <span>=></span>
    <span>{</span>
        options<span>.</span>SignInScheme <span>=</span> IdentityServerConstants<span>.</span>ExternalCookieAuthenticationScheme<span>;</span>

        <span>// register your IdentityServer with Google at https://console.developers.google.com</span>
        <span>// enable the Google+ API</span>
        <span>// set the redirect URI to https://localhost:5001/signin-google</span>
        options<span>.</span>ClientId <span>=</span> <span>"copy client ID from Google here"</span><span>;</span>
        options<span>.</span>ClientSecret <span>=</span> <span>"copy client secret from Google here"</span><span>;</span>
    <span>}</span><span>)</span>
    <span>// 添加 Microsoft 认证</span>
    <span>.</span><span>AddMicrosoftAccount</span><span>(</span><span>"Microsoft"</span><span>,</span> options <span>=></span>
    <span>{</span>
        options<span>.</span>SignInScheme <span>=</span> IdentityServerConstants<span>.</span>ExternalCookieAuthenticationScheme<span>;</span>
        options<span>.</span>ClientId <span>=</span> <span>"microsoft_client_id"</span><span>;</span>
        options<span>.</span>ClientSecret <span>=</span> <span>"microsoft_client_secret"</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><p>运行项目，已经可以看到登录按钮。</p>
<img :src="$withBase('/assets/roadmap/dotnet/is4_external_ms.png')" alt="is4_external_ms">
<p>如果你的 Id 和 Secret 配置正确，现在已经可以正常登录了。没错，就是这么简单的使用。但是如果没有配置相应的 Id 和 Secret，没关系，按照下面步骤操作即可。</p>
<h3 id="创建一个新的-microsoft-身份认证客户端"> 创建一个新的 Microsoft 身份认证客户端</h3>
<p>打开 <a href="https://go.microsoft.com/fwlink/?linkid=2083908" target="_blank" rel="noopener noreferrer">应用注册页面</a>，这是 Microsoft 的 Azure 门户，我们开发的客户端需要在这里注册。登录 Microsoft 账户后即可看到主页面。</p>
<h4 id="注册客户端"> 注册客户端</h4>
<ul>
<li>选择左上角的 <strong>新注册</strong>。</li>
</ul>
<img :src="$withBase('/assets/roadmap/dotnet/is4_external_ms_azurepage.png')" alt="is4_external_ms_azurepage">
<ul>
<li>输入 “名称”。</li>
<li>为 <strong>支持的账户类型</strong> 选择一个选项（如果不是组织，一定选择下面两项包含个人的）。</li>
<li>在 <strong>重定向 URI</strong> 中输入开发的 URL 并追加 <code>/signin-microsoft</code>。</li>
</ul>
<img :src="$withBase('/assets/roadmap/dotnet/is4_external_ms_azure_register.png')" alt="is4_external_ms_azure_register">
<ul>
<li>最后点击 <strong>注册</strong> 即可。</li>
</ul>
<h4 id="添加秘钥"> 添加秘钥</h4>
<ul>
<li>选择左侧的 <strong>证书和密码</strong>。</li>
</ul>
<img :src="$withBase('/assets/roadmap/dotnet/is4_external_ms_azure_registed.png')" alt="is4_external_ms_azure_registed">
<ul>
<li>在 <strong>客户端密码</strong> 下面选择 <strong>新的客户端密码</strong>。</li>
<li>添加客户端密码的说明并选择有效期，然后点击 <strong>添加</strong>。</li>
<li>复制 <strong>客户端秘钥</strong> 的 <strong>值</strong> 与 <strong>ID</strong>。（一定要复制 <strong>值</strong>，离开了页面再打开就不能查看和复制该值了）</li>
</ul>
<img :src="$withBase('/assets/roadmap/dotnet/is4_external_ms_azure_create_secret.png')" alt="is4_external_ms_azure_create_secret">
<h3 id="登录测试"> 登录测试</h3>
<p>有了 ID 和秘钥，添加到我们的代码中，再次运行，已经可以登录该客户端了。</p>
<img :src="$withBase('/assets/roadmap/dotnet/is4_external_ms_azure_login.png')" alt="is4_external_ms_azure_login">
<h2 id="执行过程"> 执行过程</h2>
<h3 id="登录过程"> 登录过程</h3>
<p>整个外部验证的流程是从点击登录按钮开始的。</p>
<p>1、看 <code>Login.cshtml</code> 页面的代码，点击按钮后会定向到 <code>Login</code> URI，因为是配置的外部登录信息，所以会包含对应的 <code>scheme</code> 和 <code>returnUrl</code> 信息，这是页面写好的。</p>
<p>2、当控制器收到请求之后，检查这是一个外部验证请求，于是跳转到 <code>Challenge</code> Action 中，
它会触发身份验证处理程序，通过 <code>HttpContext</code> 中的 <code>ChallengeAsync</code> 或者是 MVC 项目中的 <code>ChallengeResult</code> 来调用外部身份验证处理程序。</p>
<p>3、回调接收，通过定义好的 <code>RedirectUri</code>，可以在完成验证之后调转到指定接收器。剩下的事情就是在回调方法中添加需要的内容即可。典型的任务如：</p>
<ul>
<li>检查外部提供者返回的身份</li>
<li>决定如何与该用户进行交互，新、老用户的区别等</li>
<li>新用户如何才被允许</li>
<li>是否需要创建本地账户并关联到外部账户</li>
<li>存储需要保留的外部声明</li>
<li>删除临时 Cookie</li>
<li>登录用户</li>
</ul>
<h3 id="登出过程"> 登出过程</h3>
<p>用户登出时，通常被重定向至外部程序进行登出，但是并不是所有外部程序都支持登出，这取决于它们的协议和特性。</p>
<p>要检测用户必须重定向到外部标识提供者以进行登出，通常可以使用 IdentityServer 上发布到 Cookie 中的 idp 声明。声明中设置的值是对应的认证中间件的 AuthenticationScheme。在登出时，会咨询该声明以了解是否需要外部登出。</p>
<p>由于正常的登出工作流已经需要清理和状态管理，将用户重定向到外部身份提供程序是有问题的。然后，在 IdentityServer 上完成正常的登出和清理过程的唯一方法是，在用户注销后，从外部标识提供者请求将用户重定向回 IdentityServer。</p>
<p>登出后撤销 IdentityServer 的身份验证的 Cookie，然后重定向到请求注销后外部程序的重定向链接。登出后应该维护必要的登出状态，要在外部程序登出后重定向回 IdentityServer，当使用 SignOut 时，RedirectUri 应该在 AuthenticationProperties 中使用：</p>
<div><pre><code><span>[</span><span><span>HttpPost</span></span><span>]</span>
<span>[</span><span><span>ValidateAntiForgeryToken</span></span><span>]</span>
<span>public</span> <span>async</span> <span>Task<span>&lt;</span>IActionResult<span>></span></span> <span>Logout</span><span>(</span><span>LogoutInputModel</span> model<span>)</span>
<span>{</span>
    <span>// ...</span>

    <span>if</span> <span>(</span>vm<span>.</span>TriggerExternalSignout<span>)</span>
    <span>{</span>
        <span>// build a return URL so the upstream provider will redirect back</span>
        <span>// to us after the user has logged out. this allows us to then</span>
        <span>// complete our single sign-out processing.</span>
        <span><span>string</span></span> url <span>=</span> Url<span>.</span><span>Action</span><span>(</span><span>"Logout"</span><span>,</span> <span>new</span> <span>{</span> logoutId <span>=</span> vm<span>.</span>LogoutId <span>}</span><span>)</span><span>;</span>

        <span>// this triggers a redirect to the external provider for sign-out</span>
        <span>return</span> <span>SignOut</span><span>(</span><span>new</span> <span>AuthenticationProperties</span> <span>{</span> RedirectUri <span>=</span> url <span>}</span><span>,</span> vm<span>.</span>ExternalAuthenticationScheme<span>)</span><span>;</span>
    <span>}</span>

    <span>// ...</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><h3 id="cookie-的作用"> Cookie 的作用</h3>
<p>在上面示例中，我们的 <code>SignInScheme</code> 是 Cookie 的方式：</p>
<div><pre><code>options<span>.</span>SignInScheme <span>=</span> IdentityServerConstants<span>.</span>ExternalCookieAuthenticationScheme<span>;</span>
</code></pre>
<div><span>1</span><br></div></div><p>该 Cookie 将临时存储外部身份验证的结果，这是必要的，因为在过程完成之前，通常都会设计几个重定向。鉴于这是一种通常的做法，IS4 专门为一些外部程序注册了 Cookie 处理程序，通过上面代码的常量表示。</p>
<p>但是也可以使用自定义的方式：</p>
<div><pre><code>services<span>.</span><span>AddAuthentication</span><span>(</span><span>)</span>
    <span>.</span><span>AddCookie</span><span>(</span><span>"CustomCookieScheme"</span><span>)</span>
    <span>.</span><span>AddMicrosoftAccount</span><span>(</span><span>"Microsoft"</span><span>,</span> options <span>=></span>
    <span>{</span>
        options<span>.</span>SignInScheme <span>=</span> <span>"CustomCookieScheme"</span><span>;</span>
        options<span>.</span>ClientId <span>=</span> <span>"microsoft_client_id"</span><span>;</span>
        options<span>.</span>ClientSecret <span>=</span> <span>"microsoft_client_secret"</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>对于特殊情况，还可以使外部 Cookie 机制短路，直接将外部用户转发到主 Cookie 处理程序，来确保外部标识源进行正确的声明转换。</p>
]]></content:encoded>
    </item>
    <item>
      <title>详解认证中心的配置</title>
      <link>https://docs.jeremyjone.com/roadmap/dotnetcore/auth/is4/intro-config/</link>
      <guid>https://docs.jeremyjone.com/roadmap/dotnetcore/auth/is4/intro-config/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">详解认证中心的配置</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="详解认证中心的配置"> 详解认证中心的配置</h1>
<p>在 <code>IdentityServer</code> 中，需要我们进行配置的内容，大体分成：<code>IdentityResource</code>、<code>ApiScope</code>、<code>ApiResource</code> 和 <code>Client</code>，它们都是在 <code>IdentityServer4.Models</code> 中定义的。</p>
<p>我们在创建一个 Ids 服务之后，也要首先进行配置初始数据（之前写过的 Config.cs），也就是配置这些内容。</p>
<p>今天要详细梳理一下这些配置，因为它们尤为重要。我们按照官方示例依次梳理：</p>
<div><pre><code><span>public</span> <span>static</span> <span>IEnumerable<span>&lt;</span>IdentityResource<span>></span></span> IdentityResources <span>=></span> <span>new</span> <span>IdentityResource<span>[</span><span>]</span></span> <span>{</span><span>}</span><span>;</span>

<span>public</span> <span>static</span> <span>IEnumerable<span>&lt;</span>ApiScope<span>></span></span> ApiScopes <span>=></span> <span>new</span> <span>ApiScope<span>[</span><span>]</span></span> <span>{</span><span>}</span><span>;</span>

<span>public</span> <span>static</span> <span>IEnumerable<span>&lt;</span>ApiResource<span>></span></span> ApiResources <span>=></span> <span>new</span> <span>ApiResource<span>[</span><span>]</span></span> <span>{</span><span>}</span><span>;</span>

<span>public</span> <span>static</span> <span>IEnumerable<span>&lt;</span>Client<span>></span></span> Clients <span>=></span> <span>new</span> <span>Client<span>[</span><span>]</span></span> <span>{</span><span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="identityresource"> IdentityResource</h2>
<p><code>IdentityResource</code> 是预定义的用户身份资源，它包含一些用户的基本信息，如：个人信息、地址、电话号码、邮箱等。</p>
<p>通常，<code>OpenId</code> 和 <code>Profile</code> 是一定给出的，尤其是 <code>OpenId</code>，默认就是强制使用，用户无法取消选择。因为没有这两项信息，就无法确定是哪个用户，而且这些信息本身就是公开的。其余都是可以选项，也都可以调整。</p>
<h3 id="identityresource-的作用"> IdentityResource 的作用</h3>
<p>IdentityResource 用于确认用户身份，它所包含的内容通常会在 <code>id_token</code> 中，主要是允许哪些资源（claim）可以添加到 <code>id_token</code> 中。尤其是当需要一些自定义授权权限时，这些是必要且灵活的选择。</p>
<h3 id="创建-identityresource-内容"> 创建 IdentityResource 内容</h3>
<div><pre><code><span>public</span> <span>static</span> <span>IEnumerable<span>&lt;</span>IdentityResource<span>></span></span> IdentityResources <span>=></span>
    <span>new</span> <span>IdentityResource<span>[</span><span>]</span></span>
    <span>{</span>
        <span>new</span> <span>IdentityResources<span>.</span>OpenId</span><span>(</span><span>)</span><span>,</span>
        <span>new</span> <span>IdentityResources<span>.</span>Profile</span><span>(</span><span>)</span><span>,</span>
        <span>new</span> <span>IdentityResources<span>.</span>Email</span><span>(</span><span>)</span><span>,</span>
        <span>new</span> <span>IdentityResources<span>.</span>Phone</span><span>(</span><span>)</span><span>,</span>
        <span>new</span> <span>IdentityResources<span>.</span>Address</span><span>(</span><span>)</span>
    <span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h3 id="自定义-identityresource-内容"> 自定义 IdentityResource 内容</h3>
<p>这些是预定义好的五项内容，我们还可以通过自定义的方式进行内容的增加：</p>
<div><pre><code><span>new</span> <span>IdentityResource</span><span>(</span><span>"roles"</span><span>,</span> <span>"角色信息"</span><span>,</span> <span>new</span> <span>List<span>&lt;</span><span>string</span><span>></span></span> <span>{</span>JwtClaimTypes<span>.</span>Role<span>}</span><span>)</span>
</code></pre>
<div><span>1</span><br></div></div><p>这些身份信息读取用户的 <code>Claim</code>，将其放入 token 中，我们得到的 token 中就会包含这些信息，从而达到获取用户信息的目的。</p>
<p>比如：我们查看预定义的 <code>new IdentityResources.Email()</code> 源码，就会看到其内部已经填写好 <code>JwtClaimTypes.Email</code> 与 <code>JwtClaimType.EmailVerified</code> 两个 claim。当我们的客户端配置了 <code>Email</code> 资源时，获取到的 token 中就会包含这两个 claim。</p>
<h3 id="修改-identityresource-内容"> 修改 IdentityResource 内容</h3>
<p>框架给我提供了非常方便好用的扩展空间，通过构造函数就可以替换掉我们不希望的内容：</p>
<div><pre><code><span>new</span> <span>IdentityResources<span>.</span>Email</span>
<span>{</span>
    <span>//Name = IdentityServerConstants.StandardScopes.Email,</span>
    DisplayName <span>=</span> <span>"您的邮箱"</span><span>,</span>
    Description <span>=</span> <span>"您的邮箱地址"</span><span>,</span>
    Required <span>=</span> <span>true</span><span>,</span>
    <span>//Emphasize = true,</span>
    UserClaims <span>=</span> <span>new</span> <span>List<span>&lt;</span><span>string</span><span>></span></span><span>{</span> IdentityServerConstants<span>.</span>StandardScopes<span>.</span>Email <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>这样配置之后，它将显示为中文而不是默认的英文内容，并且它是必须项，用户无法取消选择，同时在获取到的 token 中也没有了默认的 <code>EmailVerified</code> 项。</p>
<img :src="$withBase('/assets/roadmap/dotnet/is4/identityresource1.png')" alt="自定义的邮箱内容">
<img :src="$withBase('/assets/roadmap/dotnet/is4/identityresource2.png')" alt="自定义的邮箱的 token 内容">
<h3 id="identityresource-的参数"> IdentityResource 的参数</h3>
<ul>
<li>Enabled</li>
</ul>
<blockquote>
<p>否启用了该资源并且可以请求该资源。默认为 true。</p>
</blockquote>
<ul>
<li>Name</li>
</ul>
<blockquote>
<p>身份资源的唯一名称。该值对应于客户端授权请求中的 scope 参数的值。</p>
</blockquote>
<ul>
<li>DisplayName</li>
</ul>
<blockquote>
<p>显示的名称，如在同意界面中将使用此值。</p>
</blockquote>
<ul>
<li>Description</li>
</ul>
<blockquote>
<p>显示的描述，如在同意界面中将使用此值。</p>
</blockquote>
<ul>
<li>Required</li>
</ul>
<blockquote>
<p>指定用户是否可以在同意界面中取消选择范围（如果同意界面要实现这样的功能）。false 表示可以取消，true 则为必须。默认为 false。</p>
</blockquote>
<ul>
<li>Emphasize</li>
</ul>
<blockquote>
<p>指定同意界面是否会强调此范围（如果同意界面要实现此功能）。将此设置用于敏感或重要的作用域。默认为 false。</p>
</blockquote>
<ul>
<li>ShowInDiscoveryDocument</li>
</ul>
<blockquote>
<p>指定此范围是否显示在发现文档中。默认为 true。</p>
</blockquote>
<ul>
<li>UserClaims</li>
</ul>
<blockquote>
<p><code>id_token</code> 中应包含的相关用户声明类型的列表。</p>
</blockquote>
<h2 id="apiscope"> ApiScope</h2>
<p><code>ApiScope</code> 顾名思义就是对一个 OAuth API 的范围定义。</p>
<h3 id="版本说明"> 版本说明</h3>
<p>老版本使用 <code>ApiResource</code> 即可，而新的版本已经开始使用 <code>ApiScope</code> 进行配置。</p>
<div><p>请注意</p>
<p>目前大部分能在网上上找到的博客、帖子，基本上还是老版本的内容，很多视频也是直接使用的 <code>ApiResource</code>，已经不再适用新版本了，需要注意。</p>
</div>
<h3 id="apiscope-的作用"> ApiScope 的作用</h3>
<p><code>ApiScope</code> 主要用于定义一个 Api 的作用域范围，该范围可以很小。只有当客户端配置的域名与该域名相匹配时才验证通过，否则返回 <code>invalid_scope</code>。</p>
<h3 id="创建-apiscope"> 创建 ApiScope</h3>
<p>创建一个 ApiScope 十分简单方便：</p>
<div><pre><code><span>new</span> <span>ApiScope</span><span>(</span><span>"mvc"</span><span>,</span> <span>"Mvc Client"</span><span>)</span>
</code></pre>
<div><span>1</span><br></div></div><p>它真的仅仅是一个范围的作用，作用就是控制 OAuth API 的范围。</p>
<h3 id="apiscope-的参数"> ApiScope 的参数</h3>
<ul>
<li>Enabled</li>
</ul>
<blockquote>
<p>是否启用此资源并且可以请求该资源。默认为 true。</p>
</blockquote>
<ul>
<li>Name</li>
</ul>
<blockquote>
<p>API 的唯一名称。该值用于自检身份验证，并将添加到 <code>access_token</code> 中的 <code>audience</code> 中。</p>
</blockquote>
<ul>
<li>DisplayName</li>
</ul>
<blockquote>
<p>显示的名称。可以在同意界面中使用该值。</p>
</blockquote>
<ul>
<li>Description</li>
</ul>
<blockquote>
<p>显示的描述，可以在同意界面中使用该值。</p>
</blockquote>
<ul>
<li>UserClaims</li>
</ul>
<blockquote>
<p>应包含在 <code>access_token</code> 中的相关用户声明类型的列表。</p>
</blockquote>
<h3 id="通过-appsettings-json-配置-apiscope"> 通过 appsettings.json 配置 ApiScope</h3>
<p>使用 <code>AddInMemoryApiScope</code> 扩展方法，可以通过配置文件添加 ApiScope：</p>
<div><pre><code><span>"IdentityServer"</span><span>:</span> <span>{</span>
    <span>"IssuerUri"</span><span>:</span> <span>"urn:sso.company.com"</span><span>,</span>
    <span>"ApiScopes"</span><span>:</span> <span>[</span>
        <span>{</span>
            <span>"Name"</span><span>:</span> <span>"IdentityServerApi"</span>
        <span>}</span><span>,</span>
        <span>{</span>
            <span>"Name"</span><span>:</span> <span>"resource1.scope1"</span>
        <span>}</span><span>,</span>
        <span>{</span>
            <span>"Name"</span><span>:</span> <span>"resource2.scope1"</span>
        <span>}</span><span>,</span>
        <span>{</span>
            <span>"Name"</span><span>:</span> <span>"scope3"</span>
        <span>}</span><span>,</span>
        <span>{</span>
            <span>"Name"</span><span>:</span> <span>"shared.scope"</span>
        <span>}</span><span>,</span>
        <span>{</span>
            <span>"Name"</span><span>:</span> <span>"transaction"</span><span>,</span>
            <span>"DisplayName"</span><span>:</span> <span>"Transaction"</span><span>,</span>
            <span>"Description"</span><span>:</span> <span>"A transaction"</span>
        <span>}</span>
    <span>]</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><p>然后将配置部分传递给 AddInMemoryApiScopes 方法：</p>
<div><pre><code><span>AddInMemoryApiScopes</span><span>(</span>configuration<span>.</span><span>GetSection</span><span>(</span><span>"IdentityServer:ApiScopes"</span><span>)</span><span>)</span>
</code></pre>
<div><span>1</span><br></div></div><h2 id="apiresource"> ApiResource</h2>
<p><code>ApiResource</code> 定义的是一个 web API 资源。它代表客户端需要访问的功能。通常，它们是基于 HTTP 的终点（API），亦可是消息队列终点或类似的终点。</p>
<h3 id="apiresource-在新版本中的作用"> ApiResource 在新版本中的作用</h3>
<p>新版本的 ApiResource 不再适用于客户端的 <code>AllowedScopes</code> 作用域，反而是作为一个更复杂更大的概念而存在。简单来说，每个 API 都可以具有 <code>scope</code>，一些 <code>scope</code> 是针对当前 <code>resource</code> 专属的，而另一些 <code>scope</code> 则是共享与多个 <code>resouce</code> 的。它们的关系好像：</p>
<img :src="$withBase('/assets/roadmap/dotnet/is4/apiresource-explain.png')" alt="ApiResource 与 ApiScope 的关系示意图">
<p>随着 <code>scope</code> 越来越大，需要引入某种命名空间来组织这些作用域，或者将它们分组在一起并获得一些更高层次的结构，比如 <code>access_token</code> 中的 <code>audience claim</code>。此时需要对这些 <code>scope</code> 进行资源整合 -- 将它们配置到一个或多个 <code>ApiResouce</code> 中。</p>
<h3 id="apiresource-的参数"> ApiResource 的参数</h3>
<ul>
<li>Enabled</li>
</ul>
<blockquote>
<p>否启用了该资源并且可以请求该资源。默认为 true。</p>
</blockquote>
<ul>
<li>Name</li>
</ul>
<blockquote>
<p>API 的唯一名称。该值用于自检身份验证，并将添加到 <code>access_token</code> 中的 <code>audience</code> 中。</p>
</blockquote>
<ul>
<li>DisplayName</li>
</ul>
<blockquote>
<p>显示的名称。可以在同意界面中使用该值。</p>
</blockquote>
<ul>
<li>Description</li>
</ul>
<blockquote>
<p>显示的描述，可以在同意界面中使用该值。</p>
</blockquote>
<ul>
<li>ApiSecrets</li>
</ul>
<blockquote>
<p>用于自检端点。该 API 可以使用 API​​ 名称和密码进行自检身份验证。</p>
</blockquote>
<ul>
<li>AllowedAccessTokenSigningAlgorithms</li>
</ul>
<blockquote>
<p><code>access_token</code> 允许的签名算法列表。如果为空，将使用服务器默认的签名算法。</p>
</blockquote>
<ul>
<li>UserClaims</li>
</ul>
<blockquote>
<p>应包含在 <code>access_token</code> 中的相关用户声明类型的列表。</p>
</blockquote>
<ul>
<li>Scopes</li>
</ul>
<blockquote>
<p>API Scope 名称列表。</p>
</blockquote>
<h3 id="定义-apiresource"> 定义 ApiResource</h3>
<p>在定义 <code>ApiResource</code> 之前，需要首先定义一些 Scope，比如：</p>
<div><pre><code><span>public</span> <span>static</span> <span>IEnumerable<span>&lt;</span>ApiScope<span>></span></span> <span>GetApiScopes</span><span>(</span><span>)</span>
<span>{</span>
    <span>return</span> <span>new</span> <span>List<span>&lt;</span>ApiScope<span>></span></span>
    <span>{</span>
        <span>// invoice API specific scopes</span>
        <span>new</span> <span>ApiScope</span><span>(</span><span>name</span><span>:</span> <span>"invoice.read"</span><span>,</span>   <span>displayName</span><span>:</span> <span>"Reads your invoices."</span><span>)</span><span>,</span>
        <span>new</span> <span>ApiScope</span><span>(</span><span>name</span><span>:</span> <span>"invoice.pay"</span><span>,</span>    <span>displayName</span><span>:</span> <span>"Pays your invoices."</span><span>)</span><span>,</span>

        <span>// customer API specific scopes</span>
        <span>new</span> <span>ApiScope</span><span>(</span><span>name</span><span>:</span> <span>"customer.read"</span><span>,</span>    <span>displayName</span><span>:</span> <span>"Reads you customers information."</span><span>)</span><span>,</span>
        <span>new</span> <span>ApiScope</span><span>(</span><span>name</span><span>:</span> <span>"customer.contact"</span><span>,</span> <span>displayName</span><span>:</span> <span>"Allows contacting one of your customers."</span><span>)</span><span>,</span>

        <span>// shared scope</span>
        <span>new</span> <span>ApiScope</span><span>(</span><span>name</span><span>:</span> <span>"manage"</span><span>,</span> <span>displayName</span><span>:</span> <span>"Provides administrative access to invoice and customer data."</span><span>)</span>
    <span>}</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>现在，我们使用 <code>ApiResource</code> 对上面的作用域定义两个逻辑 API：</p>
<div><pre><code><span>public</span> <span>static</span> <span>readonly</span> <span>IEnumerable<span>&lt;</span>ApiResource<span>></span></span> <span>GetApiResources</span><span>(</span><span>)</span>
<span>{</span>
    <span>return</span> <span>new</span> <span>List<span>&lt;</span>ApiResource<span>></span></span>
    <span>{</span>
        <span>new</span> <span>ApiResource</span><span>(</span><span>"invoice"</span><span>,</span> <span>"Invoice API"</span><span>)</span>
        <span>{</span>
            Scopes <span>=</span> <span>{</span> <span>"invoice.read"</span><span>,</span> <span>"invoice.pay"</span><span>,</span> <span>"manage"</span> <span>}</span>
        <span>}</span><span>,</span>

        <span>new</span> <span>ApiResource</span><span>(</span><span>"customer"</span><span>,</span> <span>"Customer API"</span><span>)</span>
        <span>{</span>
            Scopes <span>=</span> <span>{</span> <span>"customer.read"</span><span>,</span> <span>"customer.contact"</span><span>,</span> <span>"manage"</span> <span>}</span>
        <span>}</span>
    <span>}</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>如上，我们就有了两个 <code>ApiResource</code>，它的功能如下：</p>
<ul>
<li>支持 Jwt 的 <code>aud</code> 声明，audience 值就是 <code>ApiResource</code> 的值</li>
<li>支持在所有包含的范围内添加普通用户声明</li>
<li>支持通过添加 <code>ApiSecret</code> 进行自检</li>
<li>支持为资源配置 <code>access_token</code> 的签名算法</li>
</ul>
<h3 id="通过-appsettings-json-配置-apiresource"> 通过 appsettings.json 配置 ApiResource</h3>
<p>与 <code>ApiScope</code> 一样，<code>ApiResource</code> 同样可以通过配置文件添加：</p>
<div><pre><code><span>"IdentityServer"</span><span>:</span> <span>{</span>
    <span>"IssuerUri"</span><span>:</span> <span>"urn:sso.company.com"</span><span>,</span>
    <span>"ApiResources"</span><span>:</span> <span>[</span>
        <span>{</span>
            <span>"Name"</span><span>:</span> <span>"resource1"</span><span>,</span>
            <span>"DisplayName"</span><span>:</span> <span>"Resource #1"</span><span>,</span>

            <span>"Scopes"</span><span>:</span> <span>[</span>
                <span>"resource1.scope1"</span><span>,</span>
                <span>"shared.scope"</span>
            <span>]</span>
        <span>}</span><span>,</span>
        <span>{</span>
            <span>"Name"</span><span>:</span> <span>"resource2"</span><span>,</span>
            <span>"DisplayName"</span><span>:</span> <span>"Resource #2"</span><span>,</span>

            <span>"UserClaims"</span><span>:</span> <span>[</span>
                <span>"name"</span><span>,</span>
                <span>"email"</span>
            <span>]</span><span>,</span>

            <span>"Scopes"</span><span>:</span> <span>[</span>
                <span>"resource2.scope1"</span><span>,</span>
                <span>"shared.scope"</span>
            <span>]</span>
        <span>}</span>
    <span>]</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div><p>然后将配置部分通过 <code>AddInMemoryApiResource</code> 方法添加：</p>
<div><pre><code><span>AddInMemoryApiResources</span><span>(</span>configuration<span>.</span><span>GetSection</span><span>(</span><span>"IdentityServer:ApiResources"</span><span>)</span><span>)</span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="如何使用-apiresource"> 如何使用 ApiResource</h3>
<p>根据上面的功能介绍，总结下来就是在客户端配置对应的 <code>Scope</code>，比如 <code>&quot;customer.read&quot;</code>，系统会自动查找对应的资源名称，如果存在，就给声明中的 <code>audience</code> 字段添加 <code>ApiResource</code> 的名称。</p>
<p>如果添加了多个 <code>Scope</code>，比如 <code>&quot;customer.read&quot;</code> 与 <code>&quot;invoice.read&quot;</code>，则会在 <code>audience</code> 字段中添加多个值 -- 即： <code>[&quot;customer&quot;, &quot;invoice&quot;]</code>。</p>
<p>同时要注意，如果使用内存模式，在添加到服务时，要先添加 <code>AddInMemoryApiScopes(Config.ApiScopes)</code> 再添加 <code>AddInMemoryApiResources(Config.ApiResources)</code>，否则永远找不到 <code>ApiResource</code>。</p>
<h3 id="何时使用-apiresource"> 何时使用 ApiResource</h3>
<p>对于对于需要进行资源认证的客户端，需要将所对应的 Scope 配置到 Resource 中，并且设置资源的秘钥。客户端验证名称和秘钥即可。</p>
<p>比如前后端分离，前端通过 <code>oidc-client</code> 获取到 token，后端服务器使用该方法可以验证 token。</p>
<h2 id="client"> Client</h2>
<p>这个很好理解，就是客户端，一条配置就是一个客户端。客户端就是一个可以从身份服务器请求令牌的应用、网站等程序。</p>
<h3 id="定义-client"> 定义 Client</h3>
<p>定义 Client 时，通常会有以下通用设置：</p>
<ul>
<li>唯一的 Client Id</li>
<li>一个秘钥（需要的话）</li>
<li>授权类型</li>
<li>重定向 URI</li>
<li>访问范围列表</li>
</ul>
<h3 id="服务器访问服务器的客户端-clientcredentials"> 服务器访问服务器的客户端 ClientCredentials</h3>
<p>该情况不存在用户的交互行为，仅仅是服务器之间的通信，属于高度可信的通信状态。比如服务集群中的两台服务器之间的数据交互行为。这种情况使用 <code>ClientCredentials</code> 类型即可。大体配置如下：</p>
<div><pre><code><span>public</span> <span>static</span> <span>IEnumerable<span>&lt;</span>Client<span>></span></span> Clients <span>=></span>
    <span>new</span> <span>[</span><span>]</span>
    <span>{</span>
        <span>new</span> <span>Client</span>
        <span>{</span>
            <span>// 客户端 Id</span>
            ClientId <span>=</span> <span>"jz"</span><span>,</span>
            <span>// 客户端获取 Token</span>
            ClientSecrets <span>=</span> <span>new</span><span>[</span><span>]</span> <span>{</span><span>new</span> <span>Secret</span><span>(</span><span>"www.jeremyjone.com"</span><span>.</span><span>Sha256</span><span>(</span><span>)</span><span>)</span> <span>}</span><span>,</span>
            <span>// 使用客户端认证</span>
            AllowedGrantTypes <span>=</span> GrantTypes<span>.</span>ClientCredentials<span>,</span>
            <span>// 允许访问的 Api</span>
            AllowedScopes <span>=</span> <span>new</span><span>[</span><span>]</span> <span>{</span> <span>"api.jeremyjone.com"</span> <span>}</span>
        <span>}</span>
    <span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h3 id="交互客户端-code"> 交互客户端 Code</h3>
<p>该情况通常是具有交互行为的 MVC 的 Web 应用程序，或者移动应用程序。</p>
<p>它包含两个物理操作：</p>
<ul>
<li>
<p><code>authorization</code>：所有的交互行为（登录、同意等）都通过浏览器发生 <code>front-channel</code> 的步骤中，此步骤生成一个 <code>authorization_code</code> 表示 <code>font-channel</code> 的结果。</p>
</li>
<li>
<p><code>code</code>：通过 <code>back-channel</code> 的步骤将获取到的 <code>authorization_code</code> 与请求令牌交换，同时机密客户端需要验证身份。</p>
</li>
</ul>
<p>这个流程具有不错的安全性，但还是可能泄露个人数据，所以需要使用 <code>PKCE</code> 秘钥模式，它在 <code>.net core</code> 中默认开启。对于 <code>PKCE</code>，详情请阅读<a href="https://tools.ietf.org/html/rfc7636" target="_blank" rel="noopener noreferrer">此处</a>。</p>
<p>大体配置如下：</p>
<div><pre><code><span>new</span> <span>Client</span>
<span>{</span>
    ClientId <span>=</span> <span>"interactive"</span><span>,</span>
    ClientSecrets <span>=</span> <span>{</span> <span>new</span> <span>Secret</span><span>(</span><span>"49C1A7E1-0C79-4A89-A3D6-A37998FB86B0"</span><span>.</span><span>Sha256</span><span>(</span><span>)</span><span>)</span> <span>}</span><span>,</span>

    AllowedGrantTypes <span>=</span> GrantTypes<span>.</span>Code<span>,</span>

    RedirectUris <span>=</span> <span>{</span> <span>"http://localhost:44300/signin-oidc"</span> <span>}</span><span>,</span>
    PostLogoutRedirectUris <span>=</span> <span>{</span> <span>"http://localhost:44300/signout-callback-oidc"</span> <span>}</span><span>,</span>

    RequireConsent <span>=</span> <span>true</span><span>,</span>
    AllowOfflineAccess <span>=</span> <span>true</span><span>,</span>
    AllowedScopes <span>=</span> <span>{</span>
        IdentityServerConstants<span>.</span>StandardScopes<span>.</span>OpenId<span>,</span>
        IdentityServerConstants<span>.</span>StandardScopes<span>.</span>Email<span>,</span>
        IdentityServerConstants<span>.</span>StandardScopes<span>.</span>Profile
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><h3 id="密码模式-password"> 密码模式 Password</h3>
<p>该情况应用于绝对信任的站点交互，因为第三方客户端会收集用户的密码信息。一般情况下不推荐使用该方式，但不排除一些绝对信任的情况，如公司内部不同部门之间登录的情况等。</p>
<p>大体配置如下：</p>
<div><pre><code><span>new</span> <span>Client</span>
<span>{</span>
    ClientId <span>=</span> <span>"pwd client"</span><span>,</span>
    ClientSecrets <span>=</span> <span>{</span> <span>new</span> <span>Secret</span><span>(</span><span>"pwd client secret"</span><span>.</span><span>Sha256</span><span>(</span><span>)</span><span>)</span> <span>}</span><span>,</span>
    AllowedGrantTypes <span>=</span> GrantTypes<span>.</span>ResourceOwnerPassword<span>,</span>
    AllowedScopes <span>=</span>
    <span>{</span>
        IdentityServerConstants<span>.</span>StandardScopes<span>.</span>OpenId<span>,</span>
        IdentityServerConstants<span>.</span>StandardScopes<span>.</span>Profile<span>,</span>
        IdentityServerConstants<span>.</span>StandardScopes<span>.</span>Email<span>,</span>
        IdentityServerConstants<span>.</span>StandardScopes<span>.</span>Address
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h3 id="隐匿模式-implicit"> 隐匿模式 Implicit</h3>
<p>该模式相对来说比较常用吧，随着前后端分离，前端使用的情况还是比较多的。</p>
<p>该模式安全性比密码方式高很多，用户直接在身份服务器登录，客户端不需要知道用户密码。缺陷是前端需要保存对应的 token，而考虑到 token 的安全性，可以适当缩短有效时间。</p>
<p>大体的配置方式：</p>
<div><pre><code><span>new</span> <span>Client</span>
<span>{</span>
    ClientId <span>=</span> <span>"implicit client"</span><span>,</span>
    ClientName <span>=</span> <span>"Implicit 客户端"</span><span>,</span>
    ClientUri <span>=</span> <span>"http://localhost:8080"</span><span>,</span>

    AllowedGrantTypes <span>=</span> GrantTypes<span>.</span>Implicit<span>,</span>
    AllowAccessTokensViaBrowser <span>=</span> <span>true</span><span>,</span>
    RequireConsent <span>=</span> <span>true</span><span>,</span>
    AccessTokenLifetime <span>=</span> <span>60</span> <span>*</span> <span>5</span><span>,</span>
    AlwaysIncludeUserClaimsInIdToken <span>=</span> <span>true</span><span>,</span>

    RedirectUris <span>=</span>
    <span>{</span>
        <span>"http://localhost:8080/callback"</span><span>,</span>
        <span>"http://localhost:8080/callback-refresh"</span>
    <span>}</span><span>,</span>

    PostLogoutRedirectUris <span>=</span>
    <span>{</span>
        <span>"http://localhost:8080/logout"</span>
    <span>}</span><span>,</span>

    AllowedCorsOrigins <span>=</span>
    <span>{</span>
        <span>"http://localhost:8080"</span>
    <span>}</span><span>,</span>

    AllowedScopes <span>=</span>
    <span>{</span>
        <span>"api.read"</span><span>,</span> <span>"api.create"</span><span>,</span> <span>"api.update"</span><span>,</span> <span>"api.delete"</span><span>,</span> <span>"mvc.delete"</span><span>,</span>
        IdentityServerConstants<span>.</span>StandardScopes<span>.</span>OpenId<span>,</span>
        IdentityServerConstants<span>.</span>StandardScopes<span>.</span>Profile<span>,</span>
        IdentityServerConstants<span>.</span>StandardScopes<span>.</span>Email
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br></div></div><h3 id="混合模式-hybrid"> 混合模式 Hybrid</h3>
<p>这个混合是指特定的组合了 <code>Implicit</code> 与 <code>Code</code> 的两种方式，它也是使用比较多的模式。对比单纯的 Code 模式，它结合了隐匿模式，更加适合 Web 应用程序、原生桌面以及移动应用程序。</p>
<p>大体的配置方式：</p>
<div><pre><code><span>new</span> <span>Client</span>
    <span>{</span>
        ClientId <span>=</span> <span>"hybrid client"</span><span>,</span>
        ClientName <span>=</span> <span>"Hybrid 客户端"</span><span>,</span>
        ClientSecrets <span>=</span> <span>{</span><span>new</span> <span>Secret</span><span>(</span><span>"hybrid client secret"</span><span>.</span><span>Sha256</span><span>(</span><span>)</span><span>)</span><span>}</span><span>,</span>

        AllowedGrantTypes <span>=</span> GrantTypes<span>.</span>Hybrid<span>,</span>
        AccessTokenType <span>=</span> AccessTokenType<span>.</span>Reference<span>,</span>
        RequireConsent <span>=</span> <span>true</span><span>,</span>
        RequirePkce <span>=</span> <span>false</span><span>,</span>
        AllowAccessTokensViaBrowser <span>=</span> <span>true</span><span>,</span>
        RedirectUris <span>=</span> <span>{</span><span>"http://localhost:7100/signin-oidc"</span><span>}</span><span>,</span>
        PostLogoutRedirectUris <span>=</span> <span>{</span><span>"http://localhost:7100/signout-callback-oidc"</span><span>}</span><span>,</span>
        AllowOfflineAccess <span>=</span> <span>true</span><span>,</span>
        AlwaysIncludeUserClaimsInIdToken <span>=</span> <span>true</span><span>,</span>
        AllowedScopes <span>=</span>
        <span>{</span>
            <span>"mvc.read"</span><span>,</span> <span>"mvc.create"</span><span>,</span> <span>"mvc.update"</span><span>,</span> <span>"mvc.delete"</span><span>,</span>
            <span>"api.read"</span><span>,</span> <span>"api.create"</span><span>,</span> <span>"api.update"</span><span>,</span> <span>"api.delete"</span><span>,</span>
            IdentityServerConstants<span>.</span>StandardScopes<span>.</span>OpenId<span>,</span>
            IdentityServerConstants<span>.</span>StandardScopes<span>.</span>Email<span>,</span>
            IdentityServerConstants<span>.</span>StandardScopes<span>.</span>Address<span>,</span>
            IdentityServerConstants<span>.</span>StandardScopes<span>.</span>Phone<span>,</span>
            IdentityServerConstants<span>.</span>StandardScopes<span>.</span>Profile<span>,</span>
            <span>"roles"</span><span>,</span>
        <span>}</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><h2 id="更多"> 更多</h2>
<p>关于本节的具体代码，可以查看<a href="https://github.com/jeremyjone/dotnet-study-road/tree/master/AuthenticationAndAuthorization/Example" target="_blank" rel="noopener noreferrer">代码示例</a>。有完整的多端，可以直接运行测试。</p>
]]></content:encoded>
    </item>
    <item>
      <title>数据的持久化（使用数据库）</title>
      <link>https://docs.jeremyjone.com/roadmap/dotnetcore/auth/is4/useef/</link>
      <guid>https://docs.jeremyjone.com/roadmap/dotnetcore/auth/is4/useef/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">数据的持久化（使用数据库）</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="数据的持久化（使用数据库）"> 数据的持久化（使用数据库）</h1>
<p>前面只是一个最简单的基础使用方案，虽然已经实现了认证与授权，但是明显并不能满足生产需求，下面就按不同需求进行配置。</p>
<p>上面的例子中，所有数据都在内存中，并不能持久化。如果要数据持久化，上数据库是必然的。</p>
<h2 id="创建使用数据库的项目"> 创建使用数据库的项目</h2>
<ul>
<li>
<p>通过命令可以快速创建一个带有模板的项目：</p>
<div><pre><code>dotnet new is4ef
</code></pre>
<div><span>1</span><br></div></div></li>
<li>
<p>下载 <a href="https://github.com/jeremyjone/dotnet-study-road/tree/master/AuthenticationAndAuthorization/AuthenticationAndAuthorization.EF" target="_blank" rel="noopener noreferrer">示例代码</a> 可以获取完整的配置内容。</p>
</li>
<li>
<p>也可以创建空项目后按照下面内容自行配置。</p>
</li>
</ul>
<h2 id="配置数据库服务"> 配置数据库服务</h2>
<p>使用上面命令创建的项目会包含比较完整的内容，下面对项目稍作修改。</p>
<h3 id="添加数据库相关依赖"> 添加数据库相关依赖</h3>
<div><pre><code>IdentityServer4.AspNetIdentity（4.1.2）
IdentityServer4.EntityFramework（4.0.0）
Microsoft.EntityFrameworkCore.Tools（3.1.5）
Microsoft.AspNetCore.Identity.EntityFrameworkCore（3.1.5）
Pomelo.EntityFrameworkCore.MySql（3.1.1）
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><div><p>注意</p>
<p>截至 2021.3.20，Pomelo.EntityFrameworkCore.MySql 不支持 Net5（想尝鲜可以使用 alpha-5 版本），项目是 net core 3.1 的，对应的 Pomelo.EntityFrameworkCore.MySql 使用的是 3.1.1 版本，对应的 Microsoft.EntityFrameworkCore.Tools 也应该是 3.x 版本。</p>
</div>
<div><p>提示</p>
<p>本配置为 MySQL，如果使用其他数据库，请自行下载。</p>
</div>
<h3 id="添加数据库连接字符串"> 添加数据库连接字符串</h3>
<p>在 <code>appsettings.json</code> 中添加如下内容：</p>
<div><pre><code><span>{</span>
  <span>"ConnectionStrings"</span><span>:</span> <span>{</span>
    <span>// 使用命令创建的项目自带默认字符串，连接 SQLite 的</span>
    <span>"DefaultConnection"</span><span>:</span> <span>"Data Source=IdentityServer.db;"</span><span>,</span>
    <span>// 添加 MySQL 的连接字符串</span>
    <span>"MySQL"</span><span>:</span> <span>"server=192.168.1.126;userid=jeremyjone;pwd=123456;port=3306;database=ids-test"</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h3 id="注册数据库的相关服务"> 注册数据库的相关服务</h3>
<p>在 <code>Startup.cs</code> 的配置服务中添加如下内容：</p>
<h4 id="添加数据库上下文"> 添加数据库上下文</h4>
<div><pre><code><span><span>var</span></span> connectionMySql <span>=</span> Configuration<span>[</span><span>"ConnectionStrings:MySQL"</span><span>]</span><span>;</span>
<span>if</span> <span>(</span><span>string</span><span>.</span><span>IsNullOrWhiteSpace</span><span>(</span>connectionMySql<span>)</span><span>)</span>
<span>{</span>
    <span>throw</span> <span>new</span> <span>Exception</span><span>(</span><span>"数据库配置异常，请检查 appsettings.json"</span><span>)</span><span>;</span>
<span>}</span>

services<span>.</span><span><span>AddDbContext</span><span><span>&lt;</span>ApplicationDbContext<span>></span></span></span><span>(</span>options <span>=></span> options<span>.</span><span>UseMySql</span><span>(</span>connectionMySql<span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h4 id="配置身份参数"> 配置身份参数</h4>
<div><pre><code>services<span>.</span><span><span>AddIdentity</span><span><span>&lt;</span>ApplicationUser<span>,</span> ApplicationRole<span>></span></span></span><span>(</span><span>)</span>
    <span>// 添加实体库</span>
    <span>.</span><span><span>AddEntityFrameworkStores</span><span><span>&lt;</span>ApplicationDbContext<span>></span></span></span><span>(</span><span>)</span>
    <span>.</span><span>AddDefaultTokenProviders</span><span>(</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h4 id="配置-is4-为数据库模式"> 配置 IS4 为数据库模式</h4>
<p>空项目不需要添加被注释掉的内容。如果使用命令创建的项目，会默认使用 SQLite 进行配置，按中文注释稍作修改即可。</p>
<div><pre><code><span><span>var</span></span> migrationsAssembly <span>=</span> <span>typeof</span><span>(</span><span>Startup</span><span>)</span><span>.</span><span>GetTypeInfo</span><span>(</span><span>)</span><span>.</span>Assembly<span>.</span><span>GetName</span><span>(</span><span>)</span><span>.</span>Name<span>;</span>
<span><span>var</span></span> builder <span>=</span> services<span>.</span><span>AddIdentityServer</span><span>(</span>options <span>=></span>
    <span>{</span>
        options<span>.</span>Events<span>.</span>RaiseErrorEvents <span>=</span> <span>true</span><span>;</span>
        options<span>.</span>Events<span>.</span>RaiseInformationEvents <span>=</span> <span>true</span><span>;</span>
        options<span>.</span>Events<span>.</span>RaiseFailureEvents <span>=</span> <span>true</span><span>;</span>
        options<span>.</span>Events<span>.</span>RaiseSuccessEvents <span>=</span> <span>true</span><span>;</span>

        <span>// see https://identityserver4.readthedocs.io/en/latest/topics/resources.html</span>
        options<span>.</span>EmitStaticAudienceClaim <span>=</span> <span>true</span><span>;</span>
    <span>}</span><span>)</span>
    <span>// 注释掉测试用户，使用数据库的内容</span>
    <span>//.AddTestUsers(TestUsers.Users)</span>
    <span>// 配置 IS4 使用哪种用户模型</span>
    <span>.</span><span><span>AddAspNetIdentity</span><span><span>&lt;</span>ApplicationUser<span>></span></span></span><span>(</span><span>)</span>
    <span>// this adds the config data from DB (clients, resources, CORS)</span>
    <span>.</span><span>AddConfigurationStore</span><span>(</span>options <span>=></span>
    <span>{</span>
        <span>//options.ConfigureDbContext = builder => builder.UseSqlite(connectionString);</span>
        <span>// 使用 MySQL</span>
        options<span>.</span>ConfigureDbContext <span>=</span> b <span>=></span>
            b<span>.</span><span>UseMySql</span><span>(</span>connectionMySQL<span>,</span> sql <span>=></span> sql<span>.</span><span>MigrationsAssembly</span><span>(</span>migrationsAssembly<span>)</span><span>)</span><span>;</span>
    <span>}</span><span>)</span>
    <span>// this adds the operational data from DB (codes, tokens, consents)</span>
    <span>.</span><span>AddOperationalStore</span><span>(</span>options <span>=></span>
    <span>{</span>
        <span>//options.ConfigureDbContext = builder => builder.UseSqlite(connectionString);</span>
        <span>// 使用 MySQL</span>
        options<span>.</span>ConfigureDbContext <span>=</span> b <span>=></span>
            b<span>.</span><span>UseMySql</span><span>(</span>connectionMySQL<span>,</span> sql <span>=></span> sql<span>.</span><span>MigrationsAssembly</span><span>(</span>migrationsAssembly<span>)</span><span>)</span><span>;</span>

        <span>// this enables automatic token cleanup. this is optional.</span>
        options<span>.</span>EnableTokenCleanup <span>=</span> <span>true</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>

<span>// not recommended for production - you need to store your key material somewhere secure</span>
builder<span>.</span><span>AddDeveloperSigningCredential</span><span>(</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br></div></div><h4 id="不要忘记在中间件注册使用-is4"> 不要忘记在中间件注册使用 IS4</h4>
<div><pre><code>app<span>.</span><span>UseRouting</span><span>(</span><span>)</span><span>;</span>

<span>// 注册使用 IS4 服务。它需要在 *路由* 之后，*授权* 之前。</span>
app<span>.</span><span>UseIdentityServer</span><span>(</span><span>)</span><span>;</span>

app<span>.</span><span>UseAuthorization</span><span>(</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id="创建数据模型"> 创建数据模型</h2>
<p>上面配置了自定义的 <code>ApplicationDbContext</code> 和 <code>ApplicationUser</code>，因为通常用户的内容我们需要自定义，如果完全不用自定义的话，那么直接使用原型（IdentityUser）即可。</p>
<p>在项目根目录下新建一个 <code>Models</code> 文件夹并创建下面几个模型类：</p>
<h3 id="创建自定义用户模型"> 创建自定义用户模型</h3>
<div><pre><code><span>// ApplicationUser.cs</span>

<span>public</span> <span>class</span> <span>ApplicationUser</span> <span>:</span> <span><span>IdentityUser<span>&lt;</span><span>int</span><span>></span></span></span>
<span>{</span>
    <span>/// &lt;summary></span>
    <span>/// 有效</span>
    <span>/// &lt;/summary></span>
    <span>public</span> <span><span>bool</span></span> Validity <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span> <span>=</span> <span>true</span><span>;</span>

    <span>/// &lt;summary></span>
    <span>/// 昵称</span>
    <span>/// &lt;/summary></span>
    <span>public</span> <span><span>string</span></span> NickName <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>

    <span>/// &lt;summary></span>
    <span>/// 出生日期</span>
    <span>/// &lt;/summary></span>
    <span>public</span> <span>DateTime</span> BirthDate <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>

    <span>public</span> <span>ICollection<span>&lt;</span>ApplicationUserRole<span>></span></span> UserRoles <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><h3 id="创建自定义角色模型"> 创建自定义角色模型</h3>
<div><pre><code><span>// ApplicationRole.cs</span>

<span>public</span> <span>class</span> <span>ApplicationRole</span><span>:</span> <span><span>IdentityRole<span>&lt;</span><span>int</span><span>></span></span></span>
<span>{</span>
    <span>/// &lt;summary></span>
    <span>/// 有效</span>
    <span>/// &lt;/summary></span>
    <span>public</span> <span><span>bool</span></span> Validity <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span> <span>=</span> <span>true</span><span>;</span>

    <span>/// &lt;summary></span>
    <span>/// 启用</span>
    <span>/// &lt;/summary></span>
    <span>public</span> <span><span>bool</span></span> Enabled <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span> <span>=</span> <span>true</span><span>;</span>

    <span>/// &lt;summary></span>
    <span>/// 描述</span>
    <span>/// &lt;/summary></span>
    <span>public</span> <span><span>string</span></span> Description <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>

    <span>public</span> <span>ICollection<span>&lt;</span>ApplicationUserRole<span>></span></span> UserRoles <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><h3 id="创建用户角色模型"> 创建用户角色模型</h3>
<p>将用户和角色进行关联</p>
<div><pre><code><span>// ApplicationUserRole.cs</span>

<span>public</span> <span>class</span> <span>ApplicationUserRole</span><span>:</span> <span><span>IdentityUserRole<span>&lt;</span><span>int</span><span>></span></span></span>
<span>{</span>
    <span>public</span> <span>virtual</span> <span>ApplicationUser</span> User <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span>virtual</span> <span>ApplicationRole</span> Role <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id="创建自定义数据库上下文"> 创建自定义数据库上下文</h3>
<div><pre><code><span>// ApplicationDbContext.cs</span>

<span>public</span> <span>class</span> <span>ApplicationDbContext</span> <span>:</span> <span><span>IdentityDbContext<span>&lt;</span>ApplicationUser<span>,</span> ApplicationRole<span>,</span> <span>int</span><span>,</span> IdentityUserClaim<span>&lt;</span><span>int</span><span>></span><span>,</span> ApplicationUserRole<span>,</span> IdentityUserLogin<span>&lt;</span><span>int</span><span>></span><span>,</span> IdentityRoleClaim<span>&lt;</span><span>int</span><span>></span><span>,</span> IdentityUserToken<span>&lt;</span><span>int</span><span>></span><span>></span></span></span>
<span>{</span>
    <span>public</span> <span>ApplicationDbContext</span><span>(</span><span>DbContextOptions<span>&lt;</span>ApplicationDbContext<span>></span></span> options<span>)</span> <span>:</span> <span>base</span><span>(</span>options<span>)</span>
    <span>{</span>

    <span>}</span>

    <span>protected</span> <span>override</span> <span><span>void</span></span> <span>OnModelCreating</span><span>(</span><span>ModelBuilder</span> builder<span>)</span>
    <span>{</span>
        <span>base</span><span>.</span><span>OnModelCreating</span><span>(</span>builder<span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>这样就做好了数据模型，下面可以根据模型创建数据库</p>
<h2 id="创建种子数据"> 创建种子数据</h2>
<h3 id="创建配置资源与客户端"> 创建配置资源与客户端</h3>
<p>使用命令创建的项目，在根目录下已经存在一个 <code>Config.cs</code> 的文件。如果没有，则创建该文件并添加如下内容即可：</p>
<div><pre><code><span>public</span> <span>static</span> <span>class</span> <span>Config</span>
<span>{</span>
    <span>public</span> <span>static</span> <span>IEnumerable<span>&lt;</span>IdentityResource<span>></span></span> IdentityResources <span>=></span>
                <span>new</span> <span>IdentityResource<span>[</span><span>]</span></span>
                <span>{</span>
            <span>new</span> <span>IdentityResources<span>.</span>OpenId</span><span>(</span><span>)</span><span>,</span>
            <span>new</span> <span>IdentityResources<span>.</span>Profile</span><span>(</span><span>)</span><span>,</span>
                <span>}</span><span>;</span>

    <span>public</span> <span>static</span> <span>IEnumerable<span>&lt;</span>ApiScope<span>></span></span> ApiScopes <span>=></span>
        <span>new</span> <span>ApiScope<span>[</span><span>]</span></span>
        <span>{</span>
            <span>new</span> <span>ApiScope</span><span>(</span><span>"scope1"</span><span>)</span><span>,</span>
            <span>new</span> <span>ApiScope</span><span>(</span><span>"scope2"</span><span>)</span><span>,</span>
        <span>}</span><span>;</span>

    <span>public</span> <span>static</span> <span>IEnumerable<span>&lt;</span>Client<span>></span></span> Clients <span>=></span>
        <span>new</span> <span>Client<span>[</span><span>]</span></span>
        <span>{</span>
            <span>// m2m client credentials flow client</span>
            <span>new</span> <span>Client</span>
            <span>{</span>
                ClientId <span>=</span> <span>"m2m.client"</span><span>,</span>
                ClientName <span>=</span> <span>"Client Credentials Client"</span><span>,</span>

                AllowedGrantTypes <span>=</span> GrantTypes<span>.</span>ClientCredentials<span>,</span>
                ClientSecrets <span>=</span> <span>{</span> <span>new</span> <span>Secret</span><span>(</span><span>"511536EF-F270-4058-80CA-1C89C192F69A"</span><span>.</span><span>Sha256</span><span>(</span><span>)</span><span>)</span> <span>}</span><span>,</span>

                AllowedScopes <span>=</span> <span>{</span> <span>"scope1"</span> <span>}</span>
            <span>}</span><span>,</span>

            <span>// interactive client using code flow + pkce</span>
            <span>new</span> <span>Client</span>
            <span>{</span>
                ClientId <span>=</span> <span>"interactive"</span><span>,</span>
                ClientSecrets <span>=</span> <span>{</span> <span>new</span> <span>Secret</span><span>(</span><span>"49C1A7E1-0C79-4A89-A3D6-A37998FB86B0"</span><span>.</span><span>Sha256</span><span>(</span><span>)</span><span>)</span> <span>}</span><span>,</span>

                AllowedGrantTypes <span>=</span> GrantTypes<span>.</span>Code<span>,</span>

                RedirectUris <span>=</span> <span>{</span> <span>"https://localhost:44300/signin-oidc"</span> <span>}</span><span>,</span>
                FrontChannelLogoutUri <span>=</span> <span>"https://localhost:44300/signout-oidc"</span><span>,</span>
                PostLogoutRedirectUris <span>=</span> <span>{</span> <span>"https://localhost:44300/signout-callback-oidc"</span> <span>}</span><span>,</span>

                AllowOfflineAccess <span>=</span> <span>true</span><span>,</span>
                AllowedScopes <span>=</span> <span>{</span> <span>"openid"</span><span>,</span> <span>"profile"</span><span>,</span> <span>"scope2"</span> <span>}</span>
            <span>}</span><span>,</span>
        <span>}</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br></div></div><p>其中内容都是基础配置，不再赘述。</p>
<h3 id="创建种子用户与角色"> 创建种子用户与角色</h3>
<p>还是在 <code>Config.cs</code> 文件中即可：</p>
<div><pre><code><span>public</span> <span>static</span> <span>IEnumerable<span>&lt;</span>ApplicationUser<span>></span></span> Users <span>=></span>
    <span>new</span><span>[</span><span>]</span>
    <span>{</span>
        <span>new</span> <span>ApplicationUser</span>
        <span>{</span>
            BirthDate <span>=</span> DateTime<span>.</span>Now<span>,</span>
            Email <span>=</span> <span>"user1@qq.com"</span><span>,</span>
            UserName <span>=</span> <span>"user1"</span><span>,</span>
            NickName <span>=</span> <span>"用户1"</span><span>,</span>
            EmailConfirmed <span>=</span> <span>true</span>
        <span>}</span><span>,</span>
        <span>new</span> <span>ApplicationUser</span>
        <span>{</span>
            BirthDate <span>=</span> DateTime<span>.</span>Now<span>,</span>
            Email <span>=</span> <span>"user2@qq.com"</span><span>,</span>
            UserName <span>=</span> <span>"user2"</span><span>,</span>
            NickName <span>=</span> <span>"用户2"</span><span>,</span>
            EmailConfirmed <span>=</span> <span>true</span>
        <span>}</span><span>,</span>
    <span>}</span><span>;</span>

<span>public</span> <span>static</span> <span>IEnumerable<span>&lt;</span>ApplicationRole<span>></span></span> Roles <span>=></span>
    <span>new</span><span>[</span><span>]</span>
    <span>{</span>
        <span>new</span> <span>ApplicationRole</span>
        <span>{</span>
            Name <span>=</span> <span>"admin"</span><span>,</span>
            Description <span>=</span> <span>"管理员"</span><span>,</span>
        <span>}</span><span>,</span>
        <span>new</span> <span>ApplicationRole</span>
        <span>{</span>
            Name <span>=</span> <span>"user"</span><span>,</span>
            Description <span>=</span> <span>"用户"</span><span>,</span>
        <span>}</span><span>,</span>
        <span>new</span> <span>ApplicationRole</span>
        <span>{</span>
            Name <span>=</span> <span>"guest"</span><span>,</span>
            Description <span>=</span> <span>"访客"</span><span>,</span>
        <span>}</span><span>,</span>
    <span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br></div></div><h3 id="创建种子数据的生成操作"> 创建种子数据的生成操作</h3>
<p>使用命令创建的项目，在根目录下有一个 <code>SeedData.cs</code> 的文件，修改为如下内容。如果没有，则创建并将下面内容粘贴到文件中：</p>
<div><pre><code><span>public</span> <span>class</span> <span>SeedData</span>
<span>{</span>
    <span>public</span> <span>static</span> <span><span>void</span></span> <span>EnsureSeedData</span><span>(</span><span>IServiceProvider</span> serviceProvider<span>)</span>
    <span>{</span>
        <span>// var services = new ServiceCollection();</span>

        <span>// 不需要 SQLite</span>
        <span>//services.AddOperationalDbContext(options =></span>
        <span>//{</span>
        <span>//    options.ConfigureDbContext = db => db.UseSqlite(connectionString, sql => sql.MigrationsAssembly(typeof(SeedData).Assembly.FullName));</span>
        <span>//});</span>
        <span>//services.AddConfigurationDbContext(options =></span>
        <span>//{</span>
        <span>//    //options.ConfigureDbContext = db => db.UseMySql(connectionString, sql => sql.MigrationsAssembly(typeof(SeedData).Assembly.FullName));</span>
        <span>//});</span>

        <span>// 不使用模板提供的 serviceProvider，通过 host 直接传递 ServiceProvider</span>
        <span>// var serviceProvider = services.BuildServiceProvider();</span>
        <span>using</span> <span>(</span><span><span>var</span></span> scope <span>=</span> serviceProvider<span>.</span><span><span>GetRequiredService</span><span><span>&lt;</span>IServiceScopeFactory<span>></span></span></span><span>(</span><span>)</span><span>.</span><span>CreateScope</span><span>(</span><span>)</span><span>)</span>
        <span>{</span>
            scope<span>.</span>ServiceProvider<span>.</span><span><span>GetService</span><span><span>&lt;</span>PersistedGrantDbContext<span>></span></span></span><span>(</span><span>)</span><span>.</span>Database<span>.</span><span>Migrate</span><span>(</span><span>)</span><span>;</span>

            <span><span>var</span></span> context <span>=</span> scope<span>.</span>ServiceProvider<span>.</span><span><span>GetService</span><span><span>&lt;</span>ConfigurationDbContext<span>></span></span></span><span>(</span><span>)</span><span>;</span>
            context<span>.</span>Database<span>.</span><span>Migrate</span><span>(</span><span>)</span><span>;</span>
            <span>EnsureSeedData</span><span>(</span>context<span>)</span><span>;</span>

            <span>#<span>region</span> 添加用户数据</span>

            <span><span>var</span></span> ctx <span>=</span> scope<span>.</span>ServiceProvider<span>.</span><span><span>GetService</span><span><span>&lt;</span>ApplicationDbContext<span>></span></span></span><span>(</span><span>)</span><span>;</span>
            ctx<span>.</span>Database<span>.</span><span>Migrate</span><span>(</span><span>)</span><span>;</span>
            <span>EnsureSeedData</span><span>(</span>scope<span>)</span><span>;</span>

            <span>#<span>endregion</span></span>
        <span>}</span>
    <span>}</span>

    <span>#<span>region</span> 命令创建的函数，无修改</span>

    <span>private</span> <span>static</span> <span><span>void</span></span> <span>EnsureSeedData</span><span>(</span><span>ConfigurationDbContext</span> context<span>)</span>
    <span>{</span>
        <span>if</span> <span>(</span><span>!</span>context<span>.</span>Clients<span>.</span><span>Any</span><span>(</span><span>)</span><span>)</span>
        <span>{</span>
            Log<span>.</span><span>Debug</span><span>(</span><span>"Clients being populated"</span><span>)</span><span>;</span>
            <span>foreach</span> <span>(</span><span><span>var</span></span> client <span>in</span> Config<span>.</span>Clients<span>.</span><span>ToList</span><span>(</span><span>)</span><span>)</span>
            <span>{</span>
                context<span>.</span>Clients<span>.</span><span>Add</span><span>(</span>client<span>.</span><span>ToEntity</span><span>(</span><span>)</span><span>)</span><span>;</span>
            <span>}</span>
            context<span>.</span><span>SaveChanges</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>
        <span>else</span>
        <span>{</span>
            Log<span>.</span><span>Debug</span><span>(</span><span>"Clients already populated"</span><span>)</span><span>;</span>
        <span>}</span>

        <span>if</span> <span>(</span><span>!</span>context<span>.</span>IdentityResources<span>.</span><span>Any</span><span>(</span><span>)</span><span>)</span>
        <span>{</span>
            Log<span>.</span><span>Debug</span><span>(</span><span>"IdentityResources being populated"</span><span>)</span><span>;</span>
            <span>foreach</span> <span>(</span><span><span>var</span></span> resource <span>in</span> Config<span>.</span>IdentityResources<span>.</span><span>ToList</span><span>(</span><span>)</span><span>)</span>
            <span>{</span>
                context<span>.</span>IdentityResources<span>.</span><span>Add</span><span>(</span>resource<span>.</span><span>ToEntity</span><span>(</span><span>)</span><span>)</span><span>;</span>
            <span>}</span>
            context<span>.</span><span>SaveChanges</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>
        <span>else</span>
        <span>{</span>
            Log<span>.</span><span>Debug</span><span>(</span><span>"IdentityResources already populated"</span><span>)</span><span>;</span>
        <span>}</span>

        <span>if</span> <span>(</span><span>!</span>context<span>.</span>ApiResources<span>.</span><span>Any</span><span>(</span><span>)</span><span>)</span>
        <span>{</span>
            Log<span>.</span><span>Debug</span><span>(</span><span>"ApiScopes being populated"</span><span>)</span><span>;</span>
            <span>foreach</span> <span>(</span><span><span>var</span></span> resource <span>in</span> Config<span>.</span>ApiScopes<span>.</span><span>ToList</span><span>(</span><span>)</span><span>)</span>
            <span>{</span>
                context<span>.</span>ApiScopes<span>.</span><span>Add</span><span>(</span>resource<span>.</span><span>ToEntity</span><span>(</span><span>)</span><span>)</span><span>;</span>
            <span>}</span>
            context<span>.</span><span>SaveChanges</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>
        <span>else</span>
        <span>{</span>
            Log<span>.</span><span>Debug</span><span>(</span><span>"ApiScopes already populated"</span><span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>

    <span>#<span>endregion</span></span>

    <span>#<span>region</span> 创建用户和角色</span>

    <span>private</span> <span>static</span> <span><span>void</span></span> <span>EnsureSeedData</span><span>(</span><span>IServiceScope</span> scope<span>)</span>
    <span>{</span>
        <span><span>var</span></span> userManager <span>=</span> scope<span>.</span>ServiceProvider<span>.</span><span><span>GetRequiredService</span><span><span>&lt;</span>UserManager<span>&lt;</span>ApplicationUser<span>></span><span>></span></span></span><span>(</span><span>)</span><span>;</span>
        <span><span>var</span></span> roleManager <span>=</span> scope<span>.</span>ServiceProvider<span>.</span><span><span>GetRequiredService</span><span><span>&lt;</span>RoleManager<span>&lt;</span>ApplicationRole<span>></span><span>></span></span></span><span>(</span><span>)</span><span>;</span>

        <span>// 创建角色</span>
        <span>foreach</span> <span>(</span><span><span>var</span></span> role <span>in</span> Config<span>.</span>Roles<span>)</span>
        <span>{</span>
            <span><span>var</span></span> res <span>=</span> roleManager<span>.</span><span>CreateAsync</span><span>(</span>role<span>)</span><span>.</span>Result<span>;</span>
            <span>if</span> <span>(</span><span>!</span>res<span>.</span>Succeeded<span>)</span>
            <span>{</span>
                <span>throw</span> <span>new</span> <span>Exception</span><span>(</span>res<span>.</span>Errors<span>.</span><span>First</span><span>(</span><span>)</span><span>.</span>Description<span>)</span><span>;</span>
            <span>}</span>
            Console<span>.</span><span>WriteLine</span><span>(</span><span><span>$"</span><span><span>{</span><span>role<span>.</span>Name</span><span>}</span></span><span> created!"</span></span><span>)</span><span>;</span>
        <span>}</span>

        <span>// 创建用户</span>
        <span>foreach</span> <span>(</span><span><span>var</span></span> user <span>in</span> Config<span>.</span>Users<span>)</span>
        <span>{</span>
            <span>// 默认密码为 Test23</span>
            <span><span>var</span></span> res <span>=</span> userManager<span>.</span><span>CreateAsync</span><span>(</span>user<span>,</span> <span>"Test_123"</span><span>)</span><span>.</span>Result<span>;</span>
            <span>if</span> <span>(</span><span>!</span>res<span>.</span>Succeeded<span>)</span>
            <span>{</span>
                <span>throw</span> <span>new</span> <span>Exception</span><span>(</span>res<span>.</span>Errors<span>.</span><span>First</span><span>(</span><span>)</span><span>.</span>Description<span>)</span><span>;</span>
            <span>}</span>

            <span>// 创建用户的声明</span>
            <span><span>var</span></span> claims <span>=</span> <span>new</span> <span>List<span>&lt;</span>Claim<span>></span></span>
            <span>{</span>
                <span>new</span> <span>Claim</span><span>(</span>JwtClaimTypes<span>.</span>Name<span>,</span> user<span>.</span>NickName<span>)</span><span>,</span>
                <span>new</span> <span>Claim</span><span>(</span>JwtClaimTypes<span>.</span>Email<span>,</span> user<span>.</span>Email<span>)</span>
            <span>}</span><span>;</span>

            res <span>=</span> userManager<span>.</span><span>AddClaimsAsync</span><span>(</span>user<span>,</span> claims<span>)</span><span>.</span>Result<span>;</span>
            <span>if</span> <span>(</span><span>!</span>res<span>.</span>Succeeded<span>)</span>
            <span>{</span>
                <span>throw</span> <span>new</span> <span>Exception</span><span>(</span>res<span>.</span>Errors<span>.</span><span>First</span><span>(</span><span>)</span><span>.</span>Description<span>)</span><span>;</span>
            <span>}</span>

            <span>// 创建用户的角色</span>
            <span><span>var</span></span> role <span>=</span> user<span>.</span>UserName <span>==</span> <span>"user1"</span> <span>?</span> <span>"admin"</span> <span>:</span> <span>"user"</span><span>;</span>
            res <span>=</span> userManager<span>.</span><span>AddToRoleAsync</span><span>(</span>user<span>,</span> role<span>)</span><span>.</span>Result<span>;</span>
            <span>if</span> <span>(</span><span>!</span>res<span>.</span>Succeeded<span>)</span>
            <span>{</span>
                <span>throw</span> <span>new</span> <span>Exception</span><span>(</span>res<span>.</span>Errors<span>.</span><span>First</span><span>(</span><span>)</span><span>.</span>Description<span>)</span><span>;</span>
            <span>}</span>

            Console<span>.</span><span>WriteLine</span><span>(</span><span><span>$"</span><span><span>{</span><span>user<span>.</span>NickName</span><span>}</span></span><span> created!"</span></span><span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>

    <span>#<span>endregion</span></span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br><span>110</span><br><span>111</span><br><span>112</span><br><span>113</span><br><span>114</span><br><span>115</span><br><span>116</span><br><span>117</span><br><span>118</span><br><span>119</span><br><span>120</span><br><span>121</span><br><span>122</span><br><span>123</span><br><span>124</span><br><span>125</span><br><span>126</span><br><span>127</span><br><span>128</span><br><span>129</span><br><span>130</span><br><span>131</span><br><span>132</span><br><span>133</span><br><span>134</span><br><span>135</span><br><span>136</span><br><span>137</span><br><span>138</span><br><span>139</span><br><span>140</span><br></div></div><h2 id="将数据写入数据库"> 将数据写入数据库</h2>
<p>下面就可以将前面费了好大劲写的种子数据写入到数据库了。</p>
<h3 id="在添加数据之前需要创建数据库"> 在添加数据之前需要创建数据库</h3>
<p>但是我们不要急于写入数据，现在还没有数据库。一切已经准备就绪，我们只需要通过几行命令就可以轻松创建数据库。</p>
<p>在 <code>vs</code> 的控制台直接执行命令是最简单的方式，依次执行：</p>
<div><pre><code>PM&gt; add-migration InitialIdentityServerPersistedGrantDbMigrationMysql -c PersistedGrantDbContext -o MigrationsMySql/PersistedGrantDb
Build started...
Build succeeded.
To undo this action, use Remove-Migration.
PM&gt; update-database -context PersistedGrantDbContext
Build started...
Build succeeded.
Done.
PM&gt; add-migration InitialIdentityServerConfigurationDbMigrationMysql -c ConfigurationDbContext -o MigrationsMySql/ConfigurationDb
Build started...
Build succeeded.
To undo this action, use Remove-Migration.
PM&gt; update-database -context ConfigurationDbContext
Build started...
Build succeeded.
Done.
PM&gt; add-migration AppDbMigration -c ApplicationDbContext -o MigrationsMySql
Build started...
Build succeeded.
To undo this action, use Remove-Migration.
PM&gt; update-database -context ApplicationDbContext
Build started...
Build succeeded.
Done.
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><div><p>提示</p>
<p>因为可能版本不一致，旧版的 <code>update-database</code> 的 <code>-c</code> 是没有问题的，但新版由于新增了参数，会报冲突，使用全称即可。</p>
<p>下同，但全称是 <code>--context</code>。</p>
</div>
<p>也可以通过 <code>dotnet</code> 命令执行，需要先安装 Entity Framework Core CLI，并在项目中安装 <code>Microsoft.EntityFrameworkCore.Design</code>：</p>
<div><pre><code>dotnet tool <span>install</span> --global dotnet-ef
dotnet <span>add</span> package Microsoft.EntityFrameworkCore.Design
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>然后依次执行下面命令：</p>
<div><pre><code>dotnet ef migrations <span>add</span> InitialIdentityServerPersistedGrantDbMigrationMysql -c PersistedGrantDbContext -o MigrationsMySql/PersistedGrantDb

dotnet ef database update -c PersistedGrantDbContext

dotnet ef migrations <span>add</span> InitialIdentityServerConfigurationDbMigrationMysql -c ConfigurationDbContext -o MigrationsMySql/ConfigurationDb

dotnet ef database update -c ConfigurationDbContext

dotnet ef migrations <span>add</span> AppDbMigration -c ApplicationDbContext -o MigrationsMySql

dotnet ef database update -c ApplicationDbContext
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>运行之后，可以看到在项目中多了一个 <code>MigrationsMySql</code> 的文件夹，里面有很多自动生成的文件：</p>
<img :src="$withBase('/assets/roadmap/dotnet/is4_ef_migration_file.png')" alt="is4_ef_migration_file">
<p>同时，在数据库中可以看到已经生成了对应的表：</p>
<img :src="$withBase('/assets/roadmap/dotnet/is4_ef_migration_database.png')" alt="is4_ef_migration_database">
<div><p>提示</p>
<p>生成的文件为模型文件，如果没有修改我们的自定义实体模型，可以一直使用，只需要执行 update 命令即可创建数据库。如果修改了模型结构，将整个文件夹删掉重新生成，并执行全部命令即可。</p>
</div>
<h3 id="将写好的数据通过命令添加到数据库"> 将写好的数据通过命令添加到数据库</h3>
<p>通过命令创建的项目中，已经贴心的为我们添加好了添加数据的命令，甚至在我们刚刚创建好的时候就会询问我们是否需要执行它。如果我们一开始就运行了，那么在项目根目录下回生成一个 <code>IdentityServer.db</code> 数据库文件，它是 SQLite 格式的。因为我们现在使用 MySQL，所以需要重新跑一遍。</p>
<p>空项目自行配置的也没关系，可以将下面代码粘贴到 <code>Program.cs</code> 文件中：</p>
<div><pre><code><span>public</span> <span>static</span> <span><span>int</span></span> <span>Main</span><span>(</span><span><span>string</span><span>[</span><span>]</span></span> args<span>)</span>
<span>{</span>
    <span><span>var</span></span> seed <span>=</span> args<span>.</span><span>Contains</span><span>(</span><span>"/seed"</span><span>)</span><span>;</span>
    <span>if</span> <span>(</span>seed<span>)</span>
    <span>{</span>
        args <span>=</span> args<span>.</span><span>Except</span><span>(</span><span>new</span><span>[</span><span>]</span> <span>{</span> <span>"/seed"</span> <span>}</span><span>)</span><span>.</span><span>ToArray</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>

    <span><span>var</span></span> host <span>=</span> <span>CreateHostBuilder</span><span>(</span>args<span>)</span><span>.</span><span>Build</span><span>(</span><span>)</span><span>;</span>

    <span>if</span> <span>(</span>seed<span>)</span>
    <span>{</span>
        Log<span>.</span><span>Information</span><span>(</span><span>"Seeding database..."</span><span>)</span><span>;</span>
        SeedData<span>.</span><span>EnsureSeedData</span><span>(</span>host<span>.</span>Services<span>)</span><span>;</span>
        Log<span>.</span><span>Information</span><span>(</span><span>"Done seeding database."</span><span>)</span><span>;</span>
        <span>return</span> <span>0</span><span>;</span>
    <span>}</span>

    Log<span>.</span><span>Information</span><span>(</span><span>"Starting host..."</span><span>)</span><span>;</span>
    host<span>.</span><span>Run</span><span>(</span><span>)</span><span>;</span>
    <span>return</span> <span>0</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><p>这样，我们通过命令行启动项目，并且输入 <code>/seed</code> 参数的时候，它就会执行前面写的内容将种子数据添加到数据库中。</p>
<p>可以通过命令行运行项目：</p>
<div><pre><code>dotnet run /seed
</code></pre>
<div><span>1</span><br></div></div><p>同时，也可以在 vs 中添加参数执行，不要忘记执行之后删除就行，项目属性添加即可：</p>
<img :src="$withBase('/assets/roadmap/dotnet/is4_ef_migration_add_seed_args.png')" alt="is4_ef_migration_add_seed_args">
<p>运行项目，在控台看到如下信息则表示已经成功：</p>
<img :src="$withBase('/assets/roadmap/dotnet/is4_ef_migration_seed_info.png')" alt="is4_ef_migration_seed_info">
<p>同时在数据库可以看到数据已经写入：</p>
<img :src="$withBase('/assets/roadmap/dotnet/is4_ef_migration_database_succeed.png')" alt="is4_ef_migration_database_succeed">
<h2 id="使用数据库的数据"> 使用数据库的数据</h2>
<p>删掉项目属性中的 <code>/seed</code> 参数，或者直接命令行启动项目，使用我们创建的用户登录：</p>
<img :src="$withBase('/assets/roadmap/dotnet/is4_ef_login_1.png')" alt="登录失败">
<p>发现并不能成功登录。不要灰心，因为我们还没有修改控制器的内容。</p>
<h3 id="让控制器可以调用数据库"> 让控制器可以调用数据库</h3>
<p>找到 <code>Quickstart/Account/AccountController.cs</code> 文件，在构造器中可以发现它目前使用的用户仍然是测试账户信息，修改构造器的内容：</p>
<div><pre><code><span>public</span> <span>AccountController</span><span>(</span><span>IIdentityServerInteractionService</span> interaction<span>,</span>
    <span>IClientStore</span> clientStore<span>,</span>
    <span>IAuthenticationSchemeProvider</span> schemeProvider<span>,</span>
    <span>IEventService</span> events<span>,</span>
    <span>UserManager<span>&lt;</span>ApplicationUser<span>></span></span> userManager<span>,</span>
    <span>SignInManager<span>&lt;</span>ApplicationUser<span>></span></span> signInManager<span>)</span>
<span>{</span>
    <span>//_users = users ?? new TestUserStore(TestUsers.Users);</span>

    _interaction <span>=</span> interaction<span>;</span>
    _clientStore <span>=</span> clientStore<span>;</span>
    _schemeProvider <span>=</span> schemeProvider<span>;</span>
    _events <span>=</span> events<span>;</span>
    <span>// 添加用户管理器</span>
    _userManager <span>=</span> userManager<span>;</span>
    <span>// 添加登录管理器</span>
    _signInManager <span>=</span> signInManager<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><p>并生成只读的 <code>_userManager</code> 和 <code>_signInManager</code>：</p>
<div><pre><code><span>private</span> <span>readonly</span> <span>UserManager<span>&lt;</span>ApplicationUser<span>></span></span> _userManager<span>;</span>
<span>private</span> <span>readonly</span> <span>SignInManager<span>&lt;</span>ApplicationUser<span>></span></span> _signInManager<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h4 id="修改登录方式"> 修改登录方式</h4>
<p>找到登录函数：</p>
<div><pre><code><span>[</span><span><span>HttpPost</span></span><span>]</span>
<span>[</span><span><span>ValidateAntiForgeryToken</span></span><span>]</span>
<span>public</span> <span>async</span> <span>Task<span>&lt;</span>IActionResult<span>></span></span> <span>Login</span><span>(</span><span>LoginInputModel</span> model<span>,</span> <span><span>string</span></span> button<span>)</span>
<span>{</span>
    <span>// ...</span>

    <span>if</span> <span>(</span>ModelState<span>.</span>IsValid<span>)</span>
    <span>{</span>
        <span>// ... 登录验证部分</span>
    <span>}</span>

    <span>// ...</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>找到其中的登录验证部分，并完全将其替换为如下内容：</p>
<div><pre><code><span>if</span> <span>(</span>ModelState<span>.</span>IsValid<span>)</span>
<span>{</span>
    <span>// 允许用户使用用户名</span>
    <span><span>var</span></span> user <span>=</span> <span>await</span> _userManager<span>.</span><span>FindByNameAsync</span><span>(</span>model<span>.</span>Username<span>)</span><span>;</span>

    <span>if</span> <span>(</span>user <span>!=</span> <span>null</span> <span>&amp;&amp;</span> user<span>.</span>Validity<span>)</span>
    <span>{</span>
        <span>// 使用密码验证</span>
        <span><span>var</span></span> result <span>=</span> <span>await</span> _signInManager<span>.</span><span>PasswordSignInAsync</span><span>(</span>user<span>.</span>UserName<span>,</span> model<span>.</span>Password<span>,</span> model<span>.</span>RememberLogin<span>,</span> <span>lockoutOnFailure</span><span>:</span> <span>true</span><span>)</span><span>;</span>
        <span>if</span> <span>(</span>result<span>.</span>Succeeded<span>)</span>
        <span>{</span>
            <span>// TODO 更新登录信息</span>

            <span>await</span> _events<span>.</span><span>RaiseAsync</span><span>(</span><span>new</span> <span>UserLoginSuccessEvent</span><span>(</span>user<span>.</span>UserName<span>,</span> user<span>.</span>Id<span>.</span><span>ToString</span><span>(</span><span>)</span><span>,</span> user<span>.</span>UserName<span>)</span><span>)</span><span>;</span>

            <span>// make sure the returnUrl is still valid, and if so redirect back to authorize endpoint or a local page</span>
            <span>// the IsLocalUrl check is only necessary if you want to support additional local pages, otherwise IsValidReturnUrl is more strict</span>
            <span>if</span> <span>(</span>_interaction<span>.</span><span>IsValidReturnUrl</span><span>(</span>model<span>.</span>ReturnUrl<span>)</span> <span>||</span> Url<span>.</span><span>IsLocalUrl</span><span>(</span>model<span>.</span>ReturnUrl<span>)</span><span>)</span>
            <span>{</span>
                <span>return</span> <span>Redirect</span><span>(</span>model<span>.</span>ReturnUrl<span>)</span><span>;</span>
            <span>}</span>
            <span>return</span> <span>Redirect</span><span>(</span><span>"~/"</span><span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>
    <span>await</span> _events<span>.</span><span>RaiseAsync</span><span>(</span><span>new</span> <span>UserLoginFailureEvent</span><span>(</span>model<span>.</span>Username<span>,</span> <span>"invalid credentials"</span><span>)</span><span>)</span><span>;</span>
    ModelState<span>.</span><span>AddModelError</span><span>(</span><span>string</span><span>.</span>Empty<span>,</span> AccountOptions<span>.</span>InvalidCredentialsErrorMessage<span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><h4 id="修改登出方式"> 修改登出方式</h4>
<p>找到登出函数，并进行修改：</p>
<div><pre><code><span>[</span><span><span>HttpPost</span></span><span>]</span>
<span>[</span><span><span>ValidateAntiForgeryToken</span></span><span>]</span>
<span>public</span> <span>async</span> <span>Task<span>&lt;</span>IActionResult<span>></span></span> <span>Logout</span><span>(</span><span>LogoutInputModel</span> model<span>)</span>
<span>{</span>
    <span>// ...</span>

    <span>if</span> <span>(</span>User<span>?.</span>Identity<span>.</span>IsAuthenticated <span>==</span> <span>true</span><span>)</span>
    <span>{</span>
        <span>// delete local authentication cookie</span>
        <span>//await HttpContext.SignOutAsync();</span>

        <span>// 注释掉上面的模板登出，改为下面的通过管理器登出的方式</span>
        <span>await</span> _signInManager<span>.</span><span>SignOutAsync</span><span>(</span><span>)</span><span>;</span>

        <span>// raise the logout event</span>
        <span>await</span> _events<span>.</span><span>RaiseAsync</span><span>(</span><span>new</span> <span>UserLogoutSuccessEvent</span><span>(</span>User<span>.</span><span>GetSubjectId</span><span>(</span><span>)</span><span>,</span> User<span>.</span><span>GetDisplayName</span><span>(</span><span>)</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>

    <span>// ...</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><h2 id="完成"> 完成</h2>
<p>现在重新运行项目，通过创建的用户登录，发现已经可以正常登录。</p>
<img :src="$withBase('/assets/roadmap/dotnet/is4_ef_login_2.png')" alt="登陆成功">
<p>至此，整个项目已经完整的使用了数据库，后面可以围绕数据库的数据进行任何操作。</p>
<h2 id="说明"> 说明</h2>
<p>上文中出现 <code>Log</code> 对象，可以参考 <a href="/document/roadmap/dotnetcore/log/Serilog.html">SeriLog 的使用</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>JWT</title>
      <link>https://docs.jeremyjone.com/roadmap/dotnetcore/auth/jwt/</link>
      <guid>https://docs.jeremyjone.com/roadmap/dotnetcore/auth/jwt/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">JWT</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="jwt"> JWT</h1>
<h2 id="什么是-jwt"> 什么是 JWT</h2>
<p>Jwt，Json Web Token 是一个开放标准（<a href="https://tools.ietf.org/html/rfc7519" target="_blank" rel="noopener noreferrer">RFC 7519</a>），它定义了一种紧凑且独立的方法，用于在各方之间安全地将信息作为 JSON 对象传输。由于此信息是经过数字签名的，因此可以被验证和信任。可以使用密码（使用 HMAC 算法）或使用 RSA 或 ECDSA 的公钥/私钥对对 JWT 进行签名。</p>
<p>基于 Token 的鉴权机制类似于 http 协议，也是无状态的，它不需要在服务端保留用户的认证信息，这也就意味着基于 Token 认证机制的应用不需要去考虑用户在哪一台设备登录，这为应用扩展提供了便利。</p>
<h2 id="什么时候使用-jwt"> 什么时候使用 JWT</h2>
<p>以下是 JWT 有用的一些情况：</p>
<ul>
<li>
<p>授权：这是使用 JWT 最常见的方案。用户登录后，每个后续请求都将包含 JWT，从而允许用户访问该令牌锁允许的路由、服务和资源。单一登录是当今广泛使用 JWT 的一项功能，因为它的开销很小并且可以在不同的域中轻松使用。</p>
</li>
<li>
<p>信息交换：JWT 是在各方之间安全地传输信息的一种好方法。因为可以对 JWT 进行签名，所以您可以确定发件人是他们所说的人。此外，由于签名是使用标头和有效负载计算的，因此还可以验证内容是否被篡改。</p>
</li>
</ul>
<h2 id="jwt-的结构"> JWT 的结构</h2>
<p>JWT 以紧凑的形式将三部分内容由点（.）分隔，其三部分内容分别是：</p>
<ul>
<li>标头</li>
<li>有效载荷</li>
<li>签名</li>
</ul>
<p>因此，JWT 通常如下所示：</p>
<div><pre><code>xxxxx.yyyyy.zzzzz
</code></pre>
<div><span>1</span><br></div></div><h3 id="标头-header"> 标头 Header</h3>
<p>标头通常由两部分组成：令牌类型（即 JWT）和所使用的签名算法。</p>
<p>算法通常为：</p>
<ul>
<li>HMAC</li>
<li>SHA256</li>
<li>RSA</li>
</ul>
<p>例如：</p>
<div><pre><code><span>{</span>
  <span>"alg"</span><span>:</span> <span>"HS256"</span><span>,</span>
  <span>"typ"</span><span>:</span> <span>"JWT"</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>然后，此 JSON 以 Base64Url 编码格式形成 JWT 的第一部分。</p>
<h3 id="有效载荷-payload"> 有效载荷 Payload</h3>
<p>JWT 的第二部分是有效载荷，其中包含声明。声明有关实体和其他数据声明。声明有三种类型：注册声明、公共声明以及私有声明。</p>
<ul>
<li>
<p><a href="https://tools.ietf.org/html/rfc7519#section-4.1" target="_blank" rel="noopener noreferrer"><strong>注册声明</strong></a>：这些是一组非强制性的但建议使用的预定义声明，以提供一组有用的可互操作的声明。包含：</p>
<ul>
<li>iss（发布者）</li>
<li>exp（到期时间）</li>
<li>sub（主题）</li>
<li>aud （受众）</li>
</ul>
<p>等。需要注意，声明名称是三个字符，因为 JWT 的含义是紧凑的。</p>
</li>
<li>
<p><a href="https://tools.ietf.org/html/rfc7519#section-4.2" target="_blank" rel="noopener noreferrer"><strong>公共声明</strong></a>：这些可以由使用 JWT 的人员随意定义。但为了避免冲突，应在 <a href="https://www.iana.org/assignments/jwt/jwt.xhtml" target="_blank" rel="noopener noreferrer">IANA JSON Web Token 注册表</a>中定义它们，或将其定义为包含抗冲突名称空间的 URI。</p>
</li>
<li>
<p><a href="https://tools.ietf.org/html/rfc7519#section-4.3" target="_blank" rel="noopener noreferrer"><strong>私有声明</strong></a>：这些是自定义声明，旨在在同意使用它们的各方之间共享信息，既不是注册声明也不是公共声明。</p>
</li>
</ul>
<p>有效载荷的示例：</p>
<div><pre><code><span>{</span>
  <span>"sub"</span><span>:</span> <span>"1234567890"</span><span>,</span>
  <span>"name"</span><span>:</span> <span>"Jeremy Jone"</span><span>,</span>
  <span>"admin"</span><span>:</span> <span>true</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>然后，对此载荷进行 Base64Url 编码，以形成 JWT 的第二部分。</p>
<p>注意：对于已签名的令牌，此信息尽管可以防止篡改，但任何人都可以读取，除非将其加密，否则请勿将机密信息放入其中。</p>
<h3 id="签名-signature"> 签名 Signature</h3>
<p>要创建签名部分，您必须获取编码的标头、有效载荷、秘钥和标头中制定算法，并对其进行签名。</p>
<p>例如，如果要使用 HMAC SHA256 算法，则将通过以下方式创建签名：</p>
<div><pre><code>HMACSHA256(
  base64UrlEncode(header) + &quot;.&quot; +
  base64UrlEncode(payload),
  www.jermeyjone.com)
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>签名用于验证消息在此过程中没有更改，并且对于使用私钥进行签名的令牌，它还可以验证 JWT 的发送者是它所说的真实身份。</p>
<h3 id="拼在一起"> 拼在一起</h3>
<p>将上述三部分拼在一起，得到一个完整的 JWT：</p>
<div><pre><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkplcmVteSBKb25lIiwiYWRtaW4iOnRydWV9.Vyj5QsI_6T4R5lJH-1uS1lpwDo1uIfosYmrOIdd9L18
</code></pre>
<div><span>1</span><br></div></div><p>将其放在 <a href="https://jwt.io" target="_blank" rel="noopener noreferrer">jwt.io</a> 中进行验证：</p>
<p><img src="https://www.jeremyjone.com/wp-content/uploads/2021/03/jwt1.png" alt="jwt 验证" /></p>
<h2 id="jwt-如何工作"> JWT 如何工作</h2>
<p>在身份验证中，当用户使用凭据登录成功时，服务器将返回 JWT。由于 token 是凭据，因此必须格外小心，防止出现安全问题。通常，token 的保留时间不应超过要求的时间。</p>
<p>每当用户想要访问受保护的路由或资源时，user agent 都会发送 JWT，通常使用 Bearer 模式的 Authorization 标头，内容如下：</p>
<div><pre><code>Authorization: Bearer &amp;lt;token&gt;
</code></pre>
<div><span>1</span><br></div></div><p>在某些情况下，这可以是无状态授权机制。服务器的受保护路由将在 Authorization 标头中检查有效的 JWT，如果存在，则将允许用户访问受保护的资源。如果 JWT 包含必要的数据，则可以减少查询数据库以进行某些操作的需求，尽管这种情况并非总是如此。</p>
<p>如果 token 在授权标头中发送，则跨域资源共享（CORS）不会成为问题，因为它不使用 cookie。</p>
<h2 id="在-net-中使用-jwt"> 在 .NET 中使用 JWT</h2>
<p>创建一个 web 控制器项目，具体代码可以参考 <a href="https://github.com/jeremyjone/dotnet-study-road/tree/master/AuthenticationAndAuthorization/AuthenticationAndAuthorization.Jwt" target="_blank" rel="noopener noreferrer">示例代码</a></p>
<h3 id="安装-jwt"> 安装 Jwt</h3>
<p>在 NuGet 中搜索 <code>Microsoft.AspNetCore.Authentication.JwtBearer</code> 并安装。</p>
<h3 id="生成-token"> 生成 token</h3>
<p>在控制器添加一个 <code>GetToken</code> 的方法：</p>
<div><pre><code><span>/// &lt;summary></span>
<span>/// 颁发 token</span>
<span>/// &lt;/summary></span>
<span>/// &lt;returns>&lt;/returns></span>
<span>[</span><span>HttpGet</span><span>(</span><span>"token"</span><span>)</span><span>]</span>
<span>public</span> <span>ActionResult</span> <span>GetToken</span><span>(</span><span>)</span>
<span>{</span>
    <span>// 秘钥，绝对私有的，使用该秘钥可以生成和验证所有 token</span>
    <span><span>var</span></span> key <span>=</span> <span>new</span> <span>SymmetricSecurityKey</span><span>(</span>Encoding<span>.</span>ASCII<span>.</span><span>GetBytes</span><span>(</span><span>"www.jeremyjone.com"</span><span>)</span><span>)</span><span>;</span>
    <span>// 创建令牌</span>
    <span><span>var</span></span> token <span>=</span> <span>new</span> <span>JwtSecurityToken</span><span>(</span>
        <span>// 发行人</span>
        issuer<span>:</span> <span>"jeremyjone@qq.com"</span><span>,</span>
        <span>// 接收人</span>
        audience<span>:</span> <span>"jeremyjone"</span><span>,</span>
        <span>// 有效时间</span>
        expires<span>:</span> DateTime<span>.</span>UtcNow<span>.</span><span>AddHours</span><span>(</span><span>1</span><span>)</span><span>,</span>
        <span>// 数字签名，使用指定的加密方式对秘钥进行加密</span>
        signingCredentials<span>:</span> <span>new</span> <span>SigningCredentials</span><span>(</span>key<span>,</span> SecurityAlgorithms<span>.</span>HmacSha256<span>)</span><span>,</span>
        <span>// 其他声明，这里可以任意填写</span>
        claims<span>:</span> <span>new</span> <span>Claim<span>[</span><span>]</span></span>
        <span>{</span>
            <span>// 角色需要在这里填写</span>
            <span>new</span> <span>Claim</span><span>(</span>ClaimTypes<span>.</span>Role<span>,</span> <span>"Admin"</span><span>)</span><span>,</span>
            <span>// 多个角色可以重复写，生成的 JWT 会是一个数组</span>
            <span>new</span> <span>Claim</span><span>(</span>ClaimTypes<span>.</span>Role<span>,</span> <span>"Super"</span><span>)</span>
        <span>}</span><span>)</span><span>;</span>

    <span>// 写入 token 并生成 JWT</span>
    <span>return</span> <span>Ok</span><span>(</span><span>new</span> <span>JwtSecurityTokenHandler</span><span>(</span><span>)</span><span>.</span><span>WriteToken</span><span>(</span>token<span>)</span><span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br></div></div><h3 id="验证-token"> 验证 token</h3>
<p>在 <code>Startup.cs</code> 中的服务添加验证即可：</p>
<div><pre><code><span>// 注入认证</span>
services<span>.</span><span>AddAuthentication</span><span>(</span>JwtBearerDefaults<span>.</span>AuthenticationScheme<span>)</span>
    <span>// 需要认证哪些内容，就填写哪些</span>
    <span>.</span><span>AddJwtBearer</span><span>(</span>options <span>=></span> options<span>.</span>TokenValidationParameters <span>=</span> <span>new</span> <span>TokenValidationParameters</span>
    <span>{</span>
        <span>// 这里将 audience 的值修改。如果不验证，则通过，需要验证则不通过，可以修改 false 为 true 测试</span>
        ValidateAudience <span>=</span> <span>false</span><span>,</span>
        ValidAudience <span>=</span> <span>"jeremyjone1"</span><span>,</span> <span>// 应该是 jeremyjone</span>

        <span>// 所有验证内容需要和颁发时的内容一致</span>
        ValidateIssuer <span>=</span> <span>true</span><span>,</span>
        ValidIssuer <span>=</span> <span>"jeremyjone@qq.com"</span><span>,</span>

        <span>// 尤其是该秘钥字段，该字段属于绝密内容</span>
        ValidateIssuerSigningKey <span>=</span> <span>true</span><span>,</span>
        IssuerSigningKey <span>=</span> <span>new</span> <span>SymmetricSecurityKey</span><span>(</span>Encoding<span>.</span>ASCII<span>.</span><span>GetBytes</span><span>(</span><span>"www.jeremyjone.com"</span><span>)</span><span>)</span><span>,</span>

        <span>// 验证有效期</span>
        ValidateLifetime <span>=</span> <span>true</span>

        <span>// 上面的内容属于建议但不强制验证</span>
        <span>// 还可以添加其他内容</span>
    <span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><h3 id="添加授权"> 添加授权</h3>
<p>给控制器中的 <code>Get</code> 方法添加 <code>[Authorize]</code> 属性。</p>
<h3 id="测试"> 测试</h3>
<p>可以通过 Postman 进行测试，因为验证中 <code>ValidAudience</code> 不匹配，所以不能访问到 <code>Get</code> 方法了。</p>
]]></content:encoded>
      <enclosure url="https://www.jeremyjone.com/wp-content/uploads/2021/03/jwt1.png" type="image/png"/>
    </item>
    <item>
      <title>基础知识</title>
      <link>https://docs.jeremyjone.com/roadmap/dotnetcore/basic/</link>
      <guid>https://docs.jeremyjone.com/roadmap/dotnetcore/basic/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">基础知识</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="基础知识"> 基础知识</h1>
<p>本文将学习 <code>.NET</code> 需要的一些前置基础知识。</p>
<blockquote>
<p>永远要记住一点，学习巨硬的内容，一定要去巨硬的<a href="https://docs.microsoft.com/zh-cn/aspnet/core/" target="_blank" rel="noopener noreferrer"><strong>官方文档</strong></a>，比任何市面的书籍或视频都官方和详细，而且对中文支持比较好。踩过不少坑，百度、google 过很多内容，认真学习过后，再回过头发现大部分都是官方文档的内容直接摘抄下来的。所以最好的方式是，当你需要学习一个内容时，去官方文档照着给出的例子做一遍，你就会了，而且不必担心版本问题。</p>
</blockquote>
<h2 id="c-语言"> C# 语言</h2>
<p><code>.NET</code> 平台使用 <code>C#</code> 语言作为开发语言。</p>
<p>C#（读作“See Sharp”）是一种新式编程语言，不仅面向对象，还类型安全。C# 是面向对象的、面向组件的编程语言。 开发人员利用 C# 能够生成在 .NET 生态系统中运行的多种安全可靠的应用程序。 C# 源于 C 语言系列，C、C++、Java 和 JavaScript 程序员很快就可以上手使用。</p>
<p>推荐教程：<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/tour-of-csharp/" target="_blank" rel="noopener noreferrer">官方文档</a></p>
<h2 id="net-平台"> .NET 平台</h2>
<p>.NET 是一种用于构建多种应用的免费开源开发平台，可以为许多操作系统创建 .NET 应用。通过 .NET，可以使用特定于平台的功能，如操作系统 API。Microsoft 支持在 Windows、macOS 和 Linux 上使用 .NET。</p>
<p>推荐教程：<a href="https://docs.microsoft.com/zh-cn/dotnet/core/introduction" target="_blank" rel="noopener noreferrer">官方文档</a></p>
<p>安装 .NET：</p>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/core/install/windows?tabs=net50" target="_blank" rel="noopener noreferrer">在 Windows 上安装 .NET</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/core/install/macos" target="_blank" rel="noopener noreferrer">在 macOS 上安装 .NET</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/core/install/linux" target="_blank" rel="noopener noreferrer">在 Linux 上安装 .NET</a></li>
</ul>
<h2 id="cli-工具"> CLI 工具</h2>
<p>.NET 使用 <code>dotnet cli</code> 作为 CLI 工具。如果你已经安装了 .NET，那么 CLI 已经可以使用。</p>
<p>如果你已经安装好了 CLI 工具，可以尝试如下命令：</p>
<div><pre><code>dotnet new
</code></pre>
<div><span>1</span><br></div></div><p>将会查看到当前已经安装好的模板。</p>
<p>推荐教程：<a href="https://docs.microsoft.com/zh-cn/dotnet/core/tools/" target="_blank" rel="noopener noreferrer">官方文档</a></p>
<h2 id="学习-asp-net-框架"> 学习 ASP.NET 框架</h2>
<p>当前面的内容已经掌握，可以开始学习 <code>ASP.NET Core</code> 框架。<code>ASP.NET Core</code> 是一个跨平台的高性能开源框架，<code>ASP.NET Core</code> 是对 <code>ASP.NET 4.x</code> 的重新设计，其中包括体系结构上的更改，产生了更精简、更模块化的框架。</p>
<p>推荐教程：<a href="https://docs.microsoft.com/zh-cn/aspnet/core/introduction-to-aspnet-core?view=aspnetcore-5.0" target="_blank" rel="noopener noreferrer">官方文档</a></p>
<p>需要注意的是，<code>ASP.NET Core</code> 与 <code>ASP.NET</code> 是两个不同的框架。大体上的区分就是：</p>
<ul>
<li><code>ASP.NET</code> 是专注于 Windows 平台，运行时为 <code>.NET Framework</code>。</li>
<li><code>ASP.NET Core</code> 则是开源的，跨平台的，运行时为 <code>.NET Core</code>。</li>
</ul>
<p>截取官网的对比表格：</p>
<table>
<thead>
<tr>
<th style="text-align:center">ASP.NET Core</th>
<th style="text-align:center">ASP.NET 4.x</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">针对 Windows、macOS 或 Linux 进行生成</td>
<td style="text-align:center">针对 Windows 进行生成</td>
</tr>
<tr>
<td style="text-align:center">Razor Pages 是在 ASP.NET Core 2.x 及更高版本中创建 Web UI 时建议使用的方法。</td>
<td style="text-align:center">使用 Web Forms、SignalR、MVC、Web API、WebHook 或网页</td>
</tr>
<tr>
<td style="text-align:center">每个计算机多个版本</td>
<td style="text-align:center">每个计算机一个版本</td>
</tr>
<tr>
<td style="text-align:center">使用 C# 或 F# 通过 Visual Studio、Visual Studio for Mac 或 Visual Studio Code 进行开发</td>
<td style="text-align:center">使用 C#、VB 或 F# 通过 Visual Studio 进行开发</td>
</tr>
<tr>
<td style="text-align:center">比 ASP.NET 4.x 性能更高</td>
<td style="text-align:center">良好的性能</td>
</tr>
<tr>
<td style="text-align:center">使用 .NET Core 运行时</td>
<td style="text-align:center">使用 .NET Framework 运行时</td>
</tr>
</tbody>
</table>
<p>更多比较区别，可以参考 <a href="https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/choose-aspnet-framework?view=aspnetcore-5.0" target="_blank" rel="noopener noreferrer">官方文档</a></p>
<p>平台区别，可以参考 <a href="https://docs.microsoft.com/zh-cn/dotnet/standard/choosing-core-framework-server?toc=%2Faspnet%2Fcore%2Ftoc.json&amp;bc=%2Faspnet%2Fcore%2Fbreadcrumb%2Ftoc.json&amp;view=aspnetcore-5.0" target="_blank" rel="noopener noreferrer">官方文档</a></p>
<h2 id="其他知识"> 其他知识</h2>
<p>为了更好地学习 .NET，你需要但并不强制掌握以下内容。</p>
<ul>
<li>Web 相关知识</li>
<li>设计原则</li>
<li>设计模式</li>
<li>数据库相关知识</li>
<li>算法和数据结构相关知识</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>概述</title>
      <link>https://docs.jeremyjone.com/roadmap/dotnetcore/cache/</link>
      <guid>https://docs.jeremyjone.com/roadmap/dotnetcore/cache/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">概述</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="概述"> 概述</h1>
<p>在互联网中，因为服务器性能、网络带宽等各种原因，传输数据时需要考虑的问题相比单机程序要更多。缓存的出现有效解决了这个问题。缓存可以有效降低服务器的重复工作量，进而提高服务器的性能和效率。</p>
<p>缓存适用于不经常修改的数据，如媒体文件等。而且缓存一般存在于高速介质中，同时网络中各个节点均可设置缓存，所以使用缓存的效率会更高。</p>
<h2 id="响应缓存"> 响应缓存</h2>
<p>在 HTTP 1.1 的缓存规范中，详细介绍了互联网的缓存行为方式。它使用 <code>Cache-Control</code> 报头指令通知浏览器缓存当前数据，同时配合 <code>max-age</code> 报头设置最大的缓存时间。更多详细内容可以参看 <a href="https://datatracker.ietf.org/doc/html/rfc7234" target="_blank" rel="noopener noreferrer">缓存规范</a>。</p>
<p>这种缓存方式简单方便，对于一些媒体文件是非常有效的方式，可以降低客户端、代理和服务器网络中的开销。但是开发人员无法控制缓存行为，因为它需要遵循上述规范。</p>
<h2 id="在-asp-net-中启用响应缓存"> 在 ASP.NET 中启用响应缓存</h2>
<p>ASP.NET 使用响应缓存非常简单，它通过 <code>ResponseCache</code> 来实现。</p>
<p>首先，在 <code>Startup.cs</code> 中添加：</p>
<div><div><br><br><div>&nbsp;</div><br><br></div><pre><code><span>public</span> <span><span>void</span></span> <span>ConfigureServices</span><span>(</span><span>IServiceCollection</span> services<span>)</span>
<span>{</span>
    services<span>.</span><span>AddResponseCaching</span><span>(</span><span>)</span><span>;</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>然后将中间件添加到管道中：</p>
<div><div><br><br><br><br><br><div>&nbsp;</div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><pre><code><span>public</span> <span><span>void</span></span> <span>Configure</span><span>(</span><span>IApplicationBuilder</span> app<span>,</span> <span>IWebHostEnvironment</span> env<span>)</span>
<span>{</span>
    <span>// 如果启用了 CORS，则必须在缓存之前调用</span>
    <span>// app.UseCors("myAllowSpecificOrigins");</span>

    app<span>.</span><span>UseResponseCaching</span><span>(</span><span>)</span><span>;</span>

    <span>// 控制缓存</span>
    app<span>.</span><span>Use</span><span>(</span><span>async</span> <span>(</span>context<span>,</span> next<span>)</span> <span>=></span>
    <span>{</span>
        context<span>.</span>Response<span>.</span><span>GetTypedHeaders</span><span>(</span><span>)</span><span>.</span>CacheControl <span>=</span>
            <span>new</span> <span>Microsoft<span>.</span>Net<span>.</span>Http<span>.</span>Headers<span>.</span>CacheControlHeaderValue</span><span>(</span><span>)</span>
            <span>{</span>
                Public <span>=</span> <span>true</span><span>,</span>
                <span>// 设置响应缓存时长为10秒</span>
                MaxAge <span>=</span> TimeSpan<span>.</span><span>FromSeconds</span><span>(</span><span>10</span><span>)</span>
            <span>}</span><span>;</span>
        <span>// 添加 Vary 报头，接受编码报头与请求编码报头匹配才提供缓存响应，该报头信息可以查看 https://datatracker.ietf.org/doc/html/rfc7231#section-7.1.4</span>
        context<span>.</span>Response<span>.</span>Headers<span>[</span>Microsoft<span>.</span>Net<span>.</span>Http<span>.</span>Headers<span>.</span>HeaderNames<span>.</span>Vary<span>]</span> <span>=</span>
            <span>new</span> <span><span>string</span><span>[</span><span>]</span></span> <span>{</span> <span>"Accept-Encoding"</span> <span>}</span><span>;</span>

        <span>await</span> <span>next</span><span>(</span><span>)</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><h3 id="缓存条件"> 缓存条件</h3>
<p>只有当如下条件时，响应缓存才会生效：</p>
<ul>
<li>请求必须使用 <code>200</code> 状态代码来生成服务器响应。</li>
<li>请求方法必须为 <code>GET</code> 或 <code>HEAD</code>。</li>
<li>在 <code>Startup.Configure</code> 中，必须将响应缓存中间件置于需要缓存的中间件之前。</li>
<li>确保不存在 <code>Authorization</code> 报头。</li>
<li><code>Cache-Control</code> 报头参数必须是有效的，并且响应必须标记为 <code>public</code>。</li>
<li>如果 <code>Cache-Control</code> 报头不存在，则 <code>Pragma: no-cache</code> 报头不得出现。</li>
<li><code>Set-Cookie</code> 报头不得存在。</li>
<li><code>Vary</code> 报头参数必须有效且不应为 <code>*</code>。</li>
<li>如果设置了 <code>Content-Length</code> 报头，则其值必须与响应正文的大小匹配。</li>
</ul>
<h3 id="缓存相关报头信息"> 缓存相关报头信息</h3>
<p>ASP.NET 提供了完整的报头信息，具体如下：</p>
<table>
<thead>
<tr>
<th>报头</th>
<th>详细信息</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Authorization</code></td>
<td>包含身份验证的客户端内容，响应必须标记为不可缓存，以防止中间件存储和服务这些响应</td>
</tr>
<tr>
<td><code>Cache-Control</code></td>
<td>中间件应该使用 <code>public</code> 来标记</td>
</tr>
<tr>
<td><code>Pragma</code></td>
<td>HTTP 1.0 内容。<code>Pragma: no-cache</code> 与 <code>Cache-Control: no-cache</code> 效果相同。它会被 <code>Cache-Control</code> 报头覆盖（如果有）</td>
</tr>
<tr>
<td><code>Set-Cookie</code></td>
<td>如果该报头存在，则响应不会被缓存。请求处理管道中设置一个或多个 cookie 的任何中间件都将阻止响应缓存中间件缓存响应</td>
</tr>
<tr>
<td><code>Vary</code></td>
<td><code>Vary</code> 报头用于改变另一个报头的缓存响应。例如，通过包含 <code>Vary: Accept-Encoding</code> 报头来缓存响应，它分别缓存带有报头 <code>Accept-Encoding: gzip</code> 和 <code>Accept-Encoding: text/plain</code> 的请求响应。头值为 <code>*</code> 的响应不会被存储。</td>
</tr>
<tr>
<td><code>Expires</code></td>
<td>除非被其他 <code>Cache-Control</code> 标头覆盖，否则该标头认为过期的响应不会被存储或检索。</td>
</tr>
<tr>
<td><code>If-None-Match</code></td>
<td>如果值不是 <code>*</code>，并且响应的 ETag 不匹配提供的任何值，则从缓存提供完整的响应。否则，将提供一个 304（未修改）的响应。</td>
</tr>
<tr>
<td><code>If-Modified-Since</code></td>
<td>如果 <code>If-none-match</code> 报头不存在，当缓存的响应日期比提供的值新，则从缓存提供完整响应。否则，将提供一个 304（未修改）的响应。</td>
</tr>
<tr>
<td><code>Date</code></td>
<td>当从缓存提供服务时，如果没有在原始响应上提供日期头，则中间件将设置它。</td>
</tr>
<tr>
<td><code>Content-Length</code></td>
<td>当从缓存提供服务时，如果 <code>Content-Length</code> 报头没有在原始响应上提供，则由中间件设置。</td>
</tr>
<tr>
<td><code>Age</code></td>
<td>原始响应中发送的 <code>Age</code> 报头将被忽略。中间件在提供缓存响应时计算一个新值。</td>
</tr>
</tbody>
</table>
]]></content:encoded>
    </item>
    <item>
      <title>分布式缓存</title>
      <link>https://docs.jeremyjone.com/roadmap/dotnetcore/cache/distributed/</link>
      <guid>https://docs.jeremyjone.com/roadmap/dotnetcore/cache/distributed/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">分布式缓存</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="分布式缓存"> 分布式缓存</h1>
<h2 id="概述"> 概述</h2>
<p>分布式缓存，顾名思义就是多个服务器共享一个缓存。</p>
<p>与内存缓存不同的是，分布式缓存的接口只能为 <code>byte[]</code>。</p>
<h2 id="服务"> 服务</h2>
<p>因为是分布式的，所以不能像内存缓存一样使用本地存储。它需要配置特定实现，比如 <code>SQL Server</code>、<code>Redis</code> 或者其它第三方实现。在 ASP.NET 中，无论是哪种实现，都是通过 <code>IDistributedCache</code> 进行交互。</p>
<ul>
<li>若要使用 <code>SQL Server</code> 缓存，请添加 <code>Microsoft.Extensions.Caching.SqlServer</code> 包。</li>
<li>若要使用 <code>Redis</code> 分布式缓存，请添加 <code>Microsoft.Extensions.Caching.StackExchangeRedis</code> 包。</li>
<li>若要使用 <code>NCache</code> 分布式缓存，请添加 <code>NCache.Microsoft.Extensions.Caching.OpenSource</code> 包。</li>
</ul>
<h3 id="idistributedcache-接口"> IDistributedCache 接口</h3>
<p><code>IDistributedCache</code> 提供以下方法：</p>
<ul>
<li>获取：<code>Get</code>、<code>GetAsync</code>，接受字符串的键，如果存在则返回 <code>byte[]</code>。</li>
<li>设置：<code>Set</code>、<code>SetAsync</code>，将字符串的键和 <code>byte[]</code> 的值添加到缓存中。</li>
<li>刷新：<code>Refresh</code>、<code>RefreshAsync</code>，根据键刷新值，并重置其可调用到期超时。</li>
<li>删除：<code>Remove</code>、<code>RemoveAsync</code>，根据键删除缓存项。</li>
</ul>
<p>另外，为了方便操作，新版本增加了两个字符串的扩展方法：</p>
<ul>
<li>获取： <code>GetString</code> 和 <code>GetStringAsync</code></li>
<li>设置： <code>SetString</code> 和 <code>SetStringAsync</code></li>
</ul>
<p>功能和上面的获取设置一样，但是方便了我们的后续操作，不再需要我们自行转换。</p>
<h2 id="配置"> 配置</h2>
<h3 id="内存模式"> 内存模式</h3>
<p>分布式内存缓存是一个测试内容，它不是真正的分布式缓存，仅限开发和测试使用。它用过 <code>services.AddDistributedMemoryCache();</code> 启用，这里不过多说明。</p>
<h3 id="sql-server-模式"> SQL Server 模式</h3>
<p>通过 SQL Server，通过创建缓存表来达到分布式的目的，多个服务器可以同时连接同一数据库。</p>
<p>在 <code>Startup.ConfigureServices</code> 中配置：</p>
<div><pre><code>services<span>.</span><span>AddDistributedSqlServerCache</span><span>(</span>options <span>=></span>
<span>{</span>
    options<span>.</span>ConnectionString <span>=</span> <span>"Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=DistCache;Integrated Security=True;"</span><span>;</span>
    options<span>.</span>SchemaName <span>=</span> <span>"dbo"</span><span>;</span>
    options<span>.</span>TableName <span>=</span> <span>"TestCache"</span><span>;</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h4 id="创建数据库"> 创建数据库</h4>
<p>因为是数据库，所以需要有数据库的存在作为支持。先创建数据库：</p>
<img :src="$withBase('/assets/roadmap/dotnet/cache/distributed-create-sql-dbo.png')" alt="distributed-create-sql-dbo">
<p>名字填写 <code>DistCache</code>，创建成功之后继续创建一张名为 <code>TestCache</code> 的表：</p>
<div><pre><code><span>CREATE</span> <span>TABLE</span> <span>[</span>dbo<span>]</span><span>.</span><span>[</span>TestCache<span>]</span> <span>(</span>
    <span>[</span>Id<span>]</span>                         NVARCHAR <span>(</span><span>449</span><span>)</span>     <span>COLLATE</span> SQL_Latin1_General_CP1_CS_AS <span>NOT</span> <span>NULL</span><span>,</span>
    <span>[</span><span>Value</span><span>]</span>                      <span>VARBINARY</span> <span>(</span>MAX<span>)</span>    <span>NOT</span> <span>NULL</span><span>,</span>
    <span>[</span>ExpiresAtTime<span>]</span>              DATETIMEOFFSET <span>(</span><span>7</span><span>)</span> <span>NOT</span> <span>NULL</span><span>,</span>
    <span>[</span>SlidingExpirationInSeconds<span>]</span> <span>BIGINT</span>             <span>NULL</span><span>,</span>
    <span>[</span>AbsoluteExpiration<span>]</span>         DATETIMEOFFSET <span>(</span><span>7</span><span>)</span> <span>NULL</span><span>,</span>
    <span>PRIMARY</span> <span>KEY</span> <span>CLUSTERED</span> <span>(</span><span>[</span>Id<span>]</span> <span>ASC</span><span>)</span>
<span>)</span><span>;</span>


GO
<span>CREATE</span> <span>NONCLUSTERED</span> <span>INDEX</span> <span>[</span>Index_ExpiresAtTime<span>]</span>
    <span>ON</span> <span>[</span>dbo<span>]</span><span>.</span><span>[</span>TestCache<span>]</span><span>(</span><span>[</span>ExpiresAtTime<span>]</span> <span>ASC</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>或者通过命令行创建表（相对简单）：</p>
<div><pre><code>dotnet sql-cache create <span>"Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=DistCache;Integrated Security=True;"</span> dbo TestCache
</code></pre>
<div><span>1</span><br></div></div><div><p>请注意</p>
<p>如果使用命令行，需要注意是在 <code>cmd</code> 环境下而非 <code>PM</code> 环境。</p>
</div>
<div><p>安装提示</p>
<p><code>cmd</code> 环境相当友好，如果没有 <code>sql-cache</code>，它会直接提示你用什么命令进行安装，按提示操作即可。</p>
<img :src="$withBase('/assets/roadmap/dotnet/cache/distributed-install-sql-cache-tool.png')" alt="distributed-install-sql-cache-tool">
</div>
<h3 id="redis-模式"> Redis 模式</h3>
<p>Redis 是一种常用的开源内存存储，通常用于分布式缓存。</p>
<p>在 <code>Startup.ConfigureServices</code> 中配置：</p>
<div><pre><code>services<span>.</span><span>AddStackExchangeRedisCache</span><span>(</span>options <span>=></span>
<span>{</span>
    options<span>.</span>Configuration <span>=</span> <span>"localhost:6379"</span><span>;</span>
    options<span>.</span>InstanceName <span>=</span> <span>"myredis"</span><span>;</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>Redis 需要单独配置，其安装配置不在这里讨论。</p>
<h3 id="ncache-模式"> NCache 模式</h3>
<p>NCache 是以本机方式开发的开源内存中分布式缓存。</p>
<p>在 <code>Startup.ConfigureServices</code> 中配置：</p>
<div><pre><code>services<span>.</span><span>AddNCacheDistributedCache</span><span>(</span>configuration <span>=></span>
<span>{</span>
    configuration<span>.</span>CacheName <span>=</span> <span>"demoClusteredCache"</span><span>;</span>
    configuration<span>.</span>EnableLogs <span>=</span> <span>true</span><span>;</span>
    configuration<span>.</span>ExceptionsEnabled <span>=</span> <span>true</span><span>;</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id="使用"> 使用</h2>
<p>虽然配置略有不同，但是分布式缓存再用上并没有什么区别，都是基于上面的 <code>IDistributedCache</code> 接口所提供的方法进行操作。</p>
<div><p>示例代码</p>
<p>具体代码可以看 <a href="https://github.com/jeremyjone/dotnet-study-road/tree/master/Cache/DistributedCache" target="_blank" rel="noopener noreferrer">示例代码</a></p>
</div>
<h3 id="创建第一个项目"> 创建第一个项目</h3>
<p>要看出分布式的效果，我们需要创建至少两个项目方便查看。首先我们创建第一个项目，并在 <code>Index</code> 控制器方法中填写如下内容：</p>
<div><pre><code><span>public</span> <span>async</span> <span>Task<span>&lt;</span>IActionResult<span>></span></span> <span>Index</span><span>(</span><span>)</span>
<span>{</span>
    <span><span>string</span></span> time<span>;</span>
    <span>const</span> <span><span>string</span></span> key <span>=</span> <span>"CachedTime"</span><span>;</span>

    <span>// 获取到的内容是 byte[]</span>
    <span><span>var</span></span> encodedTime <span>=</span> <span>await</span> _cache<span>.</span><span>GetAsync</span><span>(</span>key<span>)</span><span>;</span>
    <span>if</span> <span>(</span>encodedTime <span>!=</span> <span>null</span><span>)</span>
    <span>{</span>
        <span>// 转换格式</span>
        time <span>=</span> Encoding<span>.</span>UTF8<span>.</span><span>GetString</span><span>(</span>encodedTime<span>)</span><span>;</span>
    <span>}</span>
    <span>else</span>
    <span>{</span>
        <span>// 为空的话，创建一个缓存</span>
        time <span>=</span> DateTime<span>.</span>Now<span>.</span><span>ToLongTimeString</span><span>(</span><span>)</span><span>;</span>
        <span><span>var</span></span> byteTime <span>=</span> Encoding<span>.</span>UTF8<span>.</span><span>GetBytes</span><span>(</span>time<span>)</span><span>;</span>
        <span><span>var</span></span> options <span>=</span> <span>new</span> <span>DistributedCacheEntryOptions</span><span>(</span><span>)</span>
            <span>.</span><span>SetSlidingExpiration</span><span>(</span>TimeSpan<span>.</span><span>FromSeconds</span><span>(</span><span>10</span><span>)</span><span>)</span><span>;</span>
        <span>await</span> _cache<span>.</span><span>SetAsync</span><span>(</span>key<span>,</span> byteTime<span>,</span> options<span>)</span><span>;</span>
    <span>}</span>

    ViewData<span>[</span><span>"time"</span><span>]</span> <span>=</span> time<span>;</span>
    <span>return</span> <span>View</span><span>(</span><span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><p>然后在视图中填加如下内容：</p>
<div><pre><code><span><span><span>&lt;</span>span</span><span>></span></span>当前时间：<span><span><span>&lt;/</span>span</span><span>></span></span>
<span><span><span>&lt;</span>span</span><span>></span></span>@DateTime.Now<span><span><span>&lt;/</span>span</span><span>></span></span>

<span><span><span>&lt;</span>hr</span> <span>/></span></span>

<span><span><span>&lt;</span>span</span><span>></span></span>缓存时间：<span><span><span>&lt;/</span>span</span><span>></span></span>
<span><span><span>&lt;</span>span</span><span>></span></span>@ViewData["time"]<span><span><span>&lt;/</span>span</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id="创建第二个项目"> 创建第二个项目</h3>
<p>我们将第一个项目直接复制一份即可。为了看到更好的效果，我们稍作修改，这次我们在 <code>Index</code> 方法中使用扩展的 String 方法：</p>
<div><div><br><br><br><br><br><br><div>&nbsp;</div><br><br><br><br><br><br><br><div>&nbsp;</div><br><br><br><br><br><br></div><pre><code><span>public</span> <span>async</span> <span>Task<span>&lt;</span>IActionResult<span>></span></span> <span>Index</span><span>(</span><span>)</span>
<span>{</span>
    <span><span>string</span></span> time<span>;</span>
    <span>const</span> <span><span>string</span></span> key <span>=</span> <span>"CachedTime"</span><span>;</span>

    <span>// 获取到的内容是 byte[]</span>
    <span><span>var</span></span> encodedTime <span>=</span> <span>await</span> _cache<span>.</span><span>GetStringAsync</span><span>(</span>key<span>)</span><span>;</span>
    <span>if</span> <span>(</span>encodedTime <span>!=</span> <span>null</span><span>)</span> time <span>=</span> encodedTime<span>;</span>
    <span>else</span>
    <span>{</span>
        <span>// 为空的话，创建一个缓存</span>
        time <span>=</span> DateTime<span>.</span>Now<span>.</span><span>ToLongTimeString</span><span>(</span><span>)</span><span>;</span>
        <span><span>var</span></span> options <span>=</span> <span>new</span> <span>DistributedCacheEntryOptions</span><span>(</span><span>)</span>
            <span>.</span><span>SetSlidingExpiration</span><span>(</span>TimeSpan<span>.</span><span>FromSeconds</span><span>(</span><span>10</span><span>)</span><span>)</span><span>;</span>
        <span>await</span> _cache<span>.</span><span>SetStringAsync</span><span>(</span>key<span>,</span> time<span>,</span> options<span>)</span><span>;</span>
    <span>}</span>

    ViewData<span>[</span><span>"time"</span><span>]</span> <span>=</span> time<span>;</span>
    <span>return</span> <span>View</span><span>(</span><span>)</span><span>;</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><p>视图保持不变即可。</p>
<h3 id="联调"> 联调</h3>
<p>现在我们启动两个项目，当我们刷新 App1 的时候，缓存时间和当前时间为一致，说明时间缓存成功。等待两秒之后，我们再刷新 App2，可以看到缓存时间被读取成功：</p>
<img :src="$withBase('/assets/roadmap/dotnet/cache/test.png')" alt="联调">
<h2 id="说明"> 说明</h2>
<p>使用缓存，尤其是分布式缓存时，一定要注意其性能。更多时候使用的是 <code>Redis</code> 这样吞吐量很高的缓存，同时要考虑硬件成本，切勿盲目使用缓存。</p>
<h2 id="更多"> 更多</h2>
<p>更多内容可以参看 <a href="https://docs.microsoft.com/zh-cn/aspnet/core/performance/caching/distributed" target="_blank" rel="noopener noreferrer">官方文档</a>。</p>
]]></content:encoded>
    </item>
    <item>
      <title>内存缓存</title>
      <link>https://docs.jeremyjone.com/roadmap/dotnetcore/cache/memory/</link>
      <guid>https://docs.jeremyjone.com/roadmap/dotnetcore/cache/memory/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">内存缓存</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="内存缓存"> 内存缓存</h1>
<h2 id="概述"> 概述</h2>
<p>ASP.NET 支持多个不同缓存。通过 <code>IMemoryCache</code> 可以创建一个简单的内存缓存，它用于在 web 服务器的内存中创建一块缓存。当服务器运行时应确保会话在使用内存中缓存时处于粘滞状态。粘滞会话确保来自客户端的后续请求都将发送到相同服务器。</p>
<p>内存缓存支持存储任何对象。</p>
<h2 id="缓存准则"> 缓存准则</h2>
<p>在使用缓存时，应确保：</p>
<ul>
<li>代码应始终具有用于提取数据的回退选项，而不是依赖缓存值。</li>
<li>应当限制缓存增长。</li>
<li>缓存不应存储具有时效性的数据。</li>
</ul>
<h2 id="使用-imemorycache"> 使用 IMemoryCache</h2>
<div><p>示例代码</p>
<p>具体代码可以看 <a href="https://github.com/jeremyjone/dotnet-study-road/tree/master/Cache/MemoryCache" target="_blank" rel="noopener noreferrer">示例代码</a></p>
</div>
<p>因为是 ASP.NET 内置好的中间件，所以我们可以直接使用。在 <code>Controller</code> 中直接注入：</p>
<div><pre><code><span>private</span> <span>readonly</span> <span>IMemoryCache</span> _memoryCache<span>;</span>

<span>public</span> <span>HomeController</span><span>(</span><span>IMemoryCache</span> memoryCache<span>)</span>
<span>{</span>
    _memoryCache <span>=</span> memoryCache<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>然后修改 <code>Index</code> 请求：</p>
<div><pre><code><span>public</span> <span>IActionResult</span> <span>Index</span><span>(</span><span>)</span>
<span>{</span>
    <span>if</span> <span>(</span><span>!</span>_memoryCache<span>.</span><span>TryGetValue</span><span>(</span><span>"Entry"</span><span>,</span> <span>out</span> <span>DateTime</span> date<span>)</span><span>)</span>
    <span>{</span>
        date <span>=</span> DateTime<span>.</span>Now<span>;</span>

        <span><span>var</span></span> options <span>=</span> <span>new</span> <span>MemoryCacheEntryOptions</span><span>(</span><span>)</span>
            <span>.</span><span>SetSlidingExpiration</span><span>(</span>TimeSpan<span>.</span><span>FromSeconds</span><span>(</span><span>5</span><span>)</span><span>)</span><span>;</span>

        _memoryCache<span>.</span><span>Set</span><span>(</span><span>"Entry"</span><span>,</span> date<span>,</span> options<span>)</span><span>;</span>
    <span>}</span>

    ViewData<span>[</span><span>"date"</span><span>]</span> <span>=</span> date<span>;</span>
    <span>return</span> <span>View</span><span>(</span><span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>接着修改一下 <code>Index.cshtml</code> 视图，添加如下代码：</p>
<div><pre><code><span><span><span>&lt;</span>span</span><span>></span></span>缓存时间：<span><span><span>&lt;/</span>span</span><span>></span></span>
<span><span><span>&lt;</span>span</span><span>></span></span>@ViewData["date"]<span><span><span>&lt;/</span>span</span><span>></span></span>

<span><span><span>&lt;</span>hr</span> <span>/></span></span>

<span><span><span>&lt;</span>span</span><span>></span></span>当前时间：<span><span><span>&lt;/</span>span</span><span>></span></span>
<span><span><span>&lt;</span>span</span><span>></span></span>@DateTime.Now<span><span><span>&lt;/</span>span</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>此时运行程序，可以看到视图中显示的两个时间是一致的。刷新之后，当前时间发生变化，而缓存时间不会改变。</p>
<p>让我们等待5秒钟，再刷新页面，发现两个时间同时改变。这说明在 <code>Index</code> 中的 <code>options</code> 起到了作用。</p>
<p><code>SetSlidingExpiration(TimeSpan.FromSeconds(5))</code> 的作用是使缓存数据生效时间顺延5秒钟，如果我们一直使用改数据，则它一直有效不会改变。只有当最近5秒内没有用到该数据它才会失效。</p>
<p>让我们继续修改代码。</p>
<p>添加一个删除缓存的方法：</p>
<div><pre><code><span>public</span> <span>IActionResult</span> <span>Clear</span><span>(</span><span>)</span>
<span>{</span>
    <span>// 清空缓存</span>
    _memoryCache<span>.</span><span>Remove</span><span>(</span><span>"Entry"</span><span>)</span><span>;</span>

    <span>return</span> <span>RedirectToAction</span><span>(</span><span>"Index"</span><span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>同时修改视图，添加一个清除按钮：</p>
<div><pre><code><span><span><span>&lt;</span>a</span> <span>class</span><span><span>=</span><span>"</span>btn btn-primary<span>"</span></span> <span>asp-action</span><span><span>=</span><span>"</span>Clear<span>"</span></span><span>></span></span>清除缓存<span><span><span>&lt;/</span>a</span><span>></span></span>
</code></pre>
<div><span>1</span><br></div></div><p>再次运行，当我们点击按钮之后，缓存直接会被清空，两个时间会再次一致。</p>
<h2 id="更多"> 更多</h2>
<p>更多内容可以参照 <a href="https://docs.microsoft.com/zh-cn/aspnet/core/performance/caching/memory" target="_blank" rel="noopener noreferrer">官方文档</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>跨域</title>
      <link>https://docs.jeremyjone.com/roadmap/dotnetcore/cors/</link>
      <guid>https://docs.jeremyjone.com/roadmap/dotnetcore/cors/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">跨域</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="跨域"> 跨域</h1>
<h2 id="什么是跨域"> 什么是跨域</h2>
<h2 id="配置-cors"> 配置 CORS</h2>
<p>最简单的方式：</p>
<div><pre><code>services<span>.</span><span>AddCors</span><span>(</span>options <span>=></span>
<span>{</span>
    <span>// 添加策略，名称需要和中间件使用的名称一致</span>
    options<span>.</span><span>AddPolicy</span><span>(</span><span>"allowedCors"</span><span>,</span> policy <span>=></span>
    <span>{</span>
        policy<span>.</span><span>WithOrigins</span><span>(</span><span>"http://localhost:5000"</span><span>)</span>
            <span>.</span><span>AllowAnyHeader</span><span>(</span><span>)</span>
            <span>.</span><span>AllowAnyMethod</span><span>(</span><span>)</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>添加中间件：</p>
<div><pre><code>app<span>.</span><span>UseRouting</span><span>(</span><span>)</span><span>;</span>
<span>// 在 routing 之后添加跨域中间件</span>
app<span>.</span><span>UseCors</span><span>(</span><span>"allowedCors"</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>概述</title>
      <link>https://docs.jeremyjone.com/roadmap/dotnetcore/db/</link>
      <guid>https://docs.jeremyjone.com/roadmap/dotnetcore/db/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">概述</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="概述"> 概述</h1>
<p>数据库就是存储数据的仓库。数据库在保存数据上具有显而易见的优势：</p>
<ul>
<li>数据组织结构化</li>
<li>冗余度小</li>
<li>容易扩充</li>
<li>查找效率高</li>
<li>方便使用程序自动处理</li>
<li>可以长期保存</li>
</ul>
<p>但是也具有一定缺点，比如关系型数据库的 <code>sql</code> 语句相对复杂，需要一定学习成本等。</p>
<p>它从大的种类上可以分为：</p>
<ul>
<li>关系型</li>
<li>非关系型</li>
</ul>
<h2 id="关系型数据库"> 关系型数据库</h2>
<p>关系型数据库是创建在关系模型基础上的数据库，任何实体间的各种联系都可以通过关系模型来表示。简单来说，关系型数据库的可信内容就是 <strong>关系</strong>，它通过一张 <strong>二维表</strong> 来表示。</p>
<img :src="$withBase('/assets/roadmap/dotnet/db/db_relation_example.png')" alt="关系型数据库二维表示例">
<p>关系型数据库常用的数据库有：</p>
<ul>
<li><a href="https://www.mysql.com/" target="_blank" rel="noopener noreferrer">MySQL</a></li>
<li><a href="https://www.microsoft.com/zh-cn/sql-server/sql-server-2019" target="_blank" rel="noopener noreferrer">SQL Server</a></li>
<li><a href="https://mariadb.org/" target="_blank" rel="noopener noreferrer">MariaDB</a></li>
<li><a href="http://www.sqlite.org/" target="_blank" rel="noopener noreferrer">SQLite</a></li>
</ul>
<p>所有的关系型数据库一定具有如下特点：</p>
<ul>
<li>
<p>优点</p>
<ul>
<li>通过表格模型创建关系</li>
<li>通过 <code>SQL</code> 语句操作</li>
<li>数据一致性高，完整性好</li>
</ul>
</li>
<li>
<p>缺点</p>
<ul>
<li>读写性能一般，并发性不是特别高，相对比较消耗资源</li>
<li>有些字段数据比较浪费资源</li>
<li>不易于扩展</li>
</ul>
</li>
</ul>
<h2 id="非关系型数据库"> 非关系型数据库</h2>
<p>非关系型数据库是区别于传统关系型数据库的所有数据库的统称。其最大区别是不使用 <code>SQL</code> 语句查询数据。</p>
<p>非关系型数据库的种类有很多种：</p>
<ul>
<li>键值型数据库</li>
<li>列存储数据库</li>
<li>文档型数据库</li>
<li>图形数据库</li>
</ul>
<p>因为关系型数据库的一些缺陷，使得非关系型数据库在某些场景下可以发挥更大优势。</p>
<p>常用的非关系型数据库有：</p>
<ul>
<li><a href="https://docs.mongodb.com/" target="_blank" rel="noopener noreferrer">MongoDB</a></li>
<li><a href="https://redis.io/" target="_blank" rel="noopener noreferrer">Redis</a></li>
</ul>
<p>非关系型数据库具有以下特点：</p>
<ul>
<li>
<p>优点</p>
<ul>
<li>读写能力强，高并发</li>
<li>容易扩展</li>
<li>冗余低</li>
</ul>
</li>
<li>
<p>缺点</p>
<ul>
<li>通用性较差</li>
<li>事务支持较差</li>
<li>复杂查询支持较差</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>概述</title>
      <link>https://docs.jeremyjone.com/roadmap/dotnetcore/db/efcore/</link>
      <guid>https://docs.jeremyjone.com/roadmap/dotnetcore/db/efcore/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">概述</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="概述"> 概述</h1>
<p>Entity Framework (EF) Core 是轻量化、可扩展、开源和跨平台版的常用 Entity Framework 数据访问技术。
EF Core 可用作对象关系映射程序 (O/RM)，这可以实现以下两点：</p>
<ul>
<li>使 .NET 开发人员能够使用 .NET 对象处理数据库。</li>
<li>无需再像通常那样编写大部分数据访问代码。</li>
</ul>
<h2 id="安装-ef-core"> 安装 EF Core</h2>
<p>要运行 EF，首先需要安装对应环境，通过 <code>NuGet</code> 包或者命令行 <code>dotnet add package 包名</code> 进行安装即可。请参照下表对应的不同数据库进行选择：</p>
<ul>
<li>Microsoft.EntityFrameworkCore.SqlServer</li>
<li>Microsoft.EntityFrameworkCore.Sqlite</li>
<li>Microsoft.EntityFrameworkCore.InMemory</li>
<li>Pomelo.EntityFrameworkCore.MySql</li>
<li>MySql.EntityFrameworkCore</li>
<li>Npgsql.EntityFrameworkCore.PostgreSQL</li>
<li>Oracle.EntityFrameworkCore</li>
</ul>
<p>同时需要注意安装版本，一般来说都与 ASP.NET 版本对应。</p>
<p>更多请查看 <a href="https://docs.microsoft.com/zh-cn/ef/core/providers/?tabs=dotnet-core-cli" target="_blank" rel="noopener noreferrer">官方文档</a>。</p>
<h2 id="安装-cli-工具"> 安装 CLI 工具</h2>
<p>有时需要安装 <code>dotnet ef</code> 工具，此时可以通过以下命令进行全局安装：</p>
<div><pre><code>dotnet tool <span>install</span> --global dotnet-ef
</code></pre>
<div><span>1</span><br></div></div><h2 id="一个最简单的例子"> 一个最简单的例子</h2>
<p>通过一个简单的例子来快速了解该框架的用法。</p>
<div><p>示例代码</p>
<p>完整代码可以看 <a href="https://github.com/jeremyjone/dotnet-study-road/tree/master/Database/Database.Basic" target="_blank" rel="noopener noreferrer">示例代码</a></p>
</div>
<p>首先创建一个空白控制台项目，可以在 vs 中添加，亦可以通过命令来添加：</p>
<div><pre><code>dotnet new console -o Database.Basic
</code></pre>
<div><span>1</span><br></div></div><h3 id="添加-ef-包"> 添加 EF 包</h3>
<p>该示例使用 <code>SQLite</code> 包，其他包同理：</p>
<div><pre><code>Microsoft.EntityFrameworkCore.Sqlite
</code></pre>
<div><span>1</span><br></div></div><h3 id="添加模型"> 添加模型</h3>
<p>创建部门模型，根目录添加一个 <code>Department.cs</code> 文件并添加如下内容：</p>
<div><pre><code><span>public</span> <span>class</span> <span>Department</span>
<span>{</span>
    <span>/// &lt;summary></span>
    <span>/// 部门 Id</span>
    <span>/// &lt;/summary></span>
    <span>public</span> <span><span>int</span></span> Id <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>

    <span>/// &lt;summary></span>
    <span>/// 部门名称</span>
    <span>/// &lt;/summary></span>
    <span>public</span> <span><span>string</span></span> Name <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>创建用户模型，根目录添加一个 <code>User.cs</code> 文件并添加如下内容：</p>
<div><pre><code><span>public</span> <span>class</span> <span>User</span>
<span>{</span>
    <span>/// &lt;summary></span>
    <span>/// 用户 Id</span>
    <span>/// &lt;/summary></span>
    <span>public</span> <span><span>int</span></span> Id <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>

    <span>/// &lt;summary></span>
    <span>/// 用户名</span>
    <span>/// &lt;/summary></span>
    <span>public</span> <span><span>string</span></span> Username <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>

    <span>/// &lt;summary></span>
    <span>/// 用户昵称</span>
    <span>/// &lt;/summary></span>
    <span>public</span> <span><span>string</span></span> Nickname <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>

    <span>/// &lt;summary></span>
    <span>/// 用户所在部门</span>
    <span>/// &lt;/summary></span>
    <span>public</span> <span><span>int</span></span> DepartmentId <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><h3 id="添加上下文"> 添加上下文</h3>
<p>在根目录添加一个 <code>UserDbContext.cs</code> 文件并添加如下内容：</p>
<div><pre><code><span>public</span> <span>class</span> <span>UserDbContext</span><span>:</span> <span><span>DbContext</span></span>
<span>{</span>
    <span>public</span> <span>DbSet<span>&lt;</span>Department<span>></span></span> Departments <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span>DbSet<span>&lt;</span>User<span>></span></span> Users <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>

    <span>protected</span> <span>override</span> <span><span>void</span></span> <span>OnConfiguring</span><span>(</span><span>DbContextOptionsBuilder</span> optionsBuilder<span>)</span>
    <span>{</span>
        <span>if</span> <span>(</span><span>!</span>optionsBuilder<span>.</span>IsConfigured<span>)</span>
        <span>{</span>
            optionsBuilder<span>.</span><span>UseSqlite</span><span>(</span><span>@"Data Source=UserDB.db"</span><span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h3 id="创建数据库"> 创建数据库</h3>
<p><code>DF Core</code> 可以从现有数据库对模型进行 <a href="./manage.html#反向工程">反向工程</a>，同时也可以按照现有模型生成对应的数据库。</p>
<p>在 vs 中，可以通过 <strong>包管理器控制台</strong> 操作：</p>
<div><pre><code><span>Install-Package</span> Microsoft<span>.</span>EntityFrameworkCore<span>.</span>Design
<span>Install-Package</span> Microsoft<span>.</span>EntityFrameworkCore<span>.</span>Tools
<span>Add-Migration</span> InitialCreate
<span>Update-Database</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>或者通过命令行：</p>
<div><pre><code>dotnet tool <span>install</span> --global dotnet-ef
dotnet <span>add</span> package Microsoft.EntityFrameworkCore.Design
dotnet ef migrations <span>add</span> InitialCreate
dotnet ef database update
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>就可以在根目录下看到一个名为 <code>UserDB.db</code> 的文件和一个名为 <code>Migrations</code> 文件夹。</p>
<div><p>注意</p>
<p>如果使用的是像 SQLite 这样的本地文件式数据库，一定要修改输出方式为 <strong>始终复制</strong>，如下如：</p>
<img :src="$withBase('/assets/roadmap/dotnet/db/db_basic_demo_copydb.png')" alt="修改数据库文件的输出方式">
<p>否则会报：<code>SQLite Error 1: 'no such table: Users'.</code> 这样的错误。</p>
</div>
<h3 id="使用"> 使用</h3>
<p>修改 <code>Program.cs</code> 中的内容为：</p>
<div><pre><code><span>private</span> <span>static</span> <span><span>void</span></span> <span>Main</span><span>(</span><span><span>string</span><span>[</span><span>]</span></span> args<span>)</span>
<span>{</span>
    Console<span>.</span><span>WriteLine</span><span>(</span><span>"Start..."</span><span>)</span><span>;</span>

    <span>using</span> <span><span>var</span></span> db <span>=</span> <span>new</span> <span>UserDbContext</span><span>(</span><span>)</span><span>;</span>

    <span>#<span>region</span> 创建数据</span>

    Console<span>.</span><span>WriteLine</span><span>(</span><span>"创建数据"</span><span>)</span><span>;</span>
    db<span>.</span><span>Add</span><span>(</span><span>new</span> <span>Department</span> <span>{</span> Id <span>=</span> <span>1</span><span>,</span> Name <span>=</span> <span>"IT"</span> <span>}</span><span>)</span><span>;</span>
    db<span>.</span><span>Add</span><span>(</span><span>new</span> <span>User</span>
    <span>{</span>
        Id <span>=</span> <span>1</span><span>,</span>
        DepartmentId <span>=</span> <span>1</span><span>,</span>
        Username <span>=</span> <span>"jeremyjone"</span><span>,</span>
        Nickname <span>=</span> <span>"Jeremy Jone"</span>
    <span>}</span><span>)</span><span>;</span>
    db<span>.</span><span>SaveChanges</span><span>(</span><span>)</span><span>;</span>
    Console<span>.</span><span>WriteLine</span><span>(</span><span>"创建数据完成"</span><span>)</span><span>;</span>

    <span>#<span>endregion</span></span>


    <span>#<span>region</span> 查询数据</span>

    Console<span>.</span><span>WriteLine</span><span>(</span><span>"查询数据"</span><span>)</span><span>;</span>
    <span><span>var</span></span> user <span>=</span> db<span>.</span>Users<span>.</span><span>FirstOrDefault</span><span>(</span><span>)</span><span>;</span>
    <span>if</span> <span>(</span>user <span>!=</span> <span>null</span><span>)</span>
    <span>{</span>
        <span><span>var</span></span> department <span>=</span> db<span>.</span>Departments<span>.</span><span>FirstOrDefault</span><span>(</span>x <span>=></span> x<span>.</span>Id <span>==</span> user<span>.</span>DepartmentId<span>)</span><span>;</span>
        <span>if</span> <span>(</span>department <span>==</span> <span>null</span><span>)</span>
        <span>{</span>
            Console<span>.</span><span>WriteLine</span><span>(</span><span>"部门为空"</span><span>)</span><span>;</span>
        <span>}</span>
        Console<span>.</span><span>WriteLine</span><span>(</span><span><span>$"读取到 </span><span><span>{</span><span>user<span>.</span>Username</span><span>}</span></span><span>，昵称为：</span><span><span>{</span><span>user<span>.</span>Nickname</span><span>}</span></span><span>，部门为：</span><span><span>{</span><span>department<span>?.</span>Name</span><span>}</span></span><span>"</span></span><span>)</span><span>;</span>
    <span>}</span>
    <span>else</span>
    <span>{</span>
        Console<span>.</span><span>WriteLine</span><span>(</span><span>"没有读取到用户信息"</span><span>)</span><span>;</span>
    <span>}</span>

    <span>#<span>endregion</span></span>


    <span>#<span>region</span> 更新数据</span>

    Console<span>.</span><span>WriteLine</span><span>(</span><span>"更新数据"</span><span>)</span><span>;</span>
    <span>if</span> <span>(</span>user <span>!=</span> <span>null</span><span>)</span>
    <span>{</span>
        user<span>.</span>Nickname <span>=</span> <span>"Jz"</span><span>;</span>
    <span>}</span>
    db<span>.</span><span>SaveChanges</span><span>(</span><span>)</span><span>;</span>
    Console<span>.</span><span>WriteLine</span><span>(</span><span>"更新数据完成"</span><span>)</span><span>;</span>

    <span>#<span>endregion</span></span>


    <span>#<span>region</span> 删除数据</span>

    Console<span>.</span><span>WriteLine</span><span>(</span><span>"删除数据"</span><span>)</span><span>;</span>
    <span>if</span> <span>(</span>user <span>!=</span> <span>null</span><span>)</span>
    <span>{</span>
        db<span>.</span><span>Remove</span><span>(</span>user<span>)</span><span>;</span>
    <span>}</span>
    db<span>.</span><span>SaveChanges</span><span>(</span><span>)</span><span>;</span>
    Console<span>.</span><span>WriteLine</span><span>(</span><span>"删除数据完成"</span><span>)</span><span>;</span>

    <span>#<span>endregion</span></span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br></div></div><p>然后运行，会得到如下内容：</p>
<div><pre><code>Start...
创建数据
创建数据完成
查询数据
读取到 jeremyjone，昵称为：Jeremy Jone，部门为：IT
更新数据
更新数据完成
删除数据
删除数据完成
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>一个最简单的示例就做完了。</p>
]]></content:encoded>
    </item>
    <item>
      <title>DbContext 的配置</title>
      <link>https://docs.jeremyjone.com/roadmap/dotnetcore/db/efcore/context/</link>
      <guid>https://docs.jeremyjone.com/roadmap/dotnetcore/db/efcore/context/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">DbContext 的配置</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="dbcontext-的配置"> DbContext 的配置</h1>
<p><code>DbContext</code> 实例表示与数据库的会话，可用于查询和保存实体实例。<code>DbContext</code> 是工作单元和存储库模式的组合。</p>
<p>通常，你将创建一个从 <code>DbContext</code> 派生的类，并在 <code>DbSet&lt;TEntity&gt;</code> 模型中包含每个实体的属性。如果 <code>DbSet&lt;TEntity&gt;</code> 属性具有公共资源库，则在创建派生上下文的实例时，它们会自动初始化。</p>
<p>重写 <code>OnConfiguring(DbContextOptionsBuilder)</code> 方法以配置要用于上下文的数据库（和其他选项）。或者，如果你想要在上下文中以外部方式而不是内联方式执行配置，则可以使用 <code>DbContextOptionsBuilder&lt;TContext&gt;</code>（或 <code>DbContextOptionsBuilder</code>）外部创建 <code>DbContextOptions&lt;TContext&gt;</code>（或 <code>DbContextOptions</code>）的实例，然后将其传递给的基本构造函数 DbContext。</p>
<p>通过在派生上下文的属性中找到的实体类上运行一组约定来发现模型 <code>DbSet&lt;TEntity&gt;</code>。若要进一步配置由约定发现的模型，可以重写 <code>OnModelCreating(ModelBuilder)</code> 方法。</p>
<h2 id="dbcontext-的生命周期"> DbContext 的生命周期</h2>
<p>DbContext 的生命周期从创建实例时开始，并在释放实例时结束。该实例用于单个工作单元，在许多 Web 应用程序中，每个 HTTP 请求都对应于单个工作单元。这意味着 DbContext 实例的生存期通常很短。</p>
<div><p>提示</p>
<p>默认情况下，<code>AddDbContext</code> 就是作用域的生命周期。</p>
</div>
<h2 id="asp-net-core-注入-dbcontext"> ASP.NET Core 注入 DbContext</h2>
<p>通过依赖注入，在 <code>Startup.cs</code> 中通过 <code>AddDbContext</code> 可以将 EF Core 添加到配置中：</p>
<div><pre><code><span>public</span> <span><span>void</span></span> <span>ConfigureServices</span><span>(</span><span>IServiceCollection</span> services<span>)</span>
<span>{</span>
    services<span>.</span><span><span>AddDbContext</span><span><span>&lt;</span>ApplicationDbContext<span>></span></span></span><span>(</span>
        <span>// 使用 Sql Server</span>
        options <span>=></span> options<span>.</span><span>UseSqlServer</span><span>(</span><span>"ConnectionStrings"</span><span>)</span><span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>此配置将一个继承自 <code>DbContext</code> 的 <code>ApplicationDbContext</code> 子类注册为应用程序中的作用域服务，它必须具有 <code>DbContextOptions&lt;ApplicationDbContext&gt;</code> 参数的公共构造函数：</p>
<div><pre><code><span>public</span> <span>class</span> <span>ApplicationDbContext</span> <span>:</span> <span><span>DbContext</span></span>
<span>{</span>
    <span>public</span> <span>ApplicationDbContext</span><span>(</span><span>DbContextOptions<span>&lt;</span>ApplicationDbContext<span>></span></span> options<span>)</span>
        <span>:</span> <span>base</span><span>(</span>options<span>)</span>
    <span>{</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>然后在控制器等使用的地方可以通过构造器注入：</p>
<div><pre><code><span>public</span> <span>class</span> <span>MyController</span>
<span>{</span>
    <span>private</span> <span>readonly</span> <span>ApplicationDbContext</span> _context<span>;</span>

    <span>public</span> <span>MyController</span><span>(</span><span>ApplicationDbContext</span> context<span>)</span>
    <span>{</span>
        _context <span>=</span> context<span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h2 id="dbcontextoptions"> DbContextOptions</h2>
<p>要使用 <code>DbContext</code>，通常会重写 <code>OnConfiguring(DbContextOptionsBuilder)</code> 或使用 <code>DbContextOptionsBuilder</code> 来创建此类的实例，而不是在应用程序代码中直接构造。</p>
<p>所有 <code>DbContext</code> 配置的起始点都是 <code>DbContextOptionsBuilder</code>。可以通过三种方式获取此生成器：</p>
<ul>
<li>在 <code>AddDbContext</code> 和相关方法中</li>
<li>在 <code>OnConfiguring</code> 中</li>
<li>使用 <code>new</code> 显式构造</li>
</ul>
<p><code>DbContextOptionsBuilder</code> 提供了一个用于配置的简单 API <code>DbContextOptions</code>。数据库通常在此对象上定义扩展方法，该方法允许您将数据库连接配置用于上下文的选项。</p>
<p>无论生成器来自何处，都可以应用相同的配置。此外，无论如何构造上下文，都将始终调用 <code>OnConfiguring</code>。这意味着即使使用 <code>AddDbContext</code>，<code>OnConfiguring</code> 也可以用于执行其它配置。</p>
<div><p>提示</p>
<p>每个 <code>DbContext</code> 实例都必须配置为使用一个且仅一个数据库提供程序。这表示多个数据库可以分别配置，但每个 DbContext 子类都必须对应一个数据库实例。</p>
</div>
<h2 id="了解更多"> 了解更多</h2>
<p>了解更多内容，可以参考 <a href="https://docs.microsoft.com/zh-cn/ef/core/dbcontext-configuration/" target="_blank" rel="noopener noreferrer">官方文档</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>管理数据库</title>
      <link>https://docs.jeremyjone.com/roadmap/dotnetcore/db/efcore/manage/</link>
      <guid>https://docs.jeremyjone.com/roadmap/dotnetcore/db/efcore/manage/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">管理数据库</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="管理数据库"> 管理数据库</h1>
<h2 id="迁移数据库"> 迁移数据库</h2>
<p>迁移数据库是将模型转换为数据库表。</p>
<p><a href="./index.html#创建数据库">前文</a> 已经生成过数据库，通过下面命令：</p>
<div><pre><code>dotnet ef migrations <span>add</span> InitialCreate
</code></pre>
<div><span>1</span><br></div></div><p>所以下面只介绍更新模型。</p>
<p>还是我们的 <code>User</code> 模型，它现在需要一个生日字段，那么我们就在 <code>User</code> 模型中添加一个生日字段：</p>
<div><div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><br><br></div><pre><code><span>public</span> <span>class</span> <span>User</span>
<span>{</span>
    <span>/// &lt;summary></span>
    <span>/// 用户 Id</span>
    <span>/// &lt;/summary></span>
    <span>public</span> <span><span>int</span></span> Id <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>

    <span>/// &lt;summary></span>
    <span>/// 用户名</span>
    <span>/// &lt;/summary></span>
    <span>public</span> <span><span>string</span></span> Username <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>

    <span>/// &lt;summary></span>
    <span>/// 用户昵称</span>
    <span>/// &lt;/summary></span>
    <span>public</span> <span><span>string</span></span> Nickname <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>

    <span>/// &lt;summary></span>
    <span>/// 用户所在部门</span>
    <span>/// &lt;/summary></span>
    <span>public</span> <span><span>int</span></span> DepartmentId <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>

    <span>/// &lt;summary></span>
    <span>/// 用户的生日</span>
    <span>/// &lt;/summary></span>
    <span>public</span> <span>DateTime</span> BirthDate <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><p>模型更新好了，就可以开始更新数据库：</p>
<div><pre><code>dotnet ef migrations <span>add</span> AddUserBirthDate
dotnet ef database udpate
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>EF Core 会在添加列之前将更新的模型与旧模型的快照进行比较，快照是迁移时生成的文件之一，并签入到源代码管理中。基于比较，EF Core 会检测到添加一列，并添加适当的迁移。</p>
<h2 id="反向工程"> 反向工程</h2>
<p>反向工程是基架实体类型类的过程，通过 <code>Scaffold-DbContext</code> 或者 <code>dotnet ef dbcontext scaffold</code> 命令来完成。</p>
<div><pre><code>Scaffold<span>-</span>DbContext <span>'连接字符串'</span> 框架名
</code></pre>
<div><span>1</span><br></div></div><p>此外，还可以有如下参数：</p>
<ul>
<li><code>-OutputDir 输出文件名</code>： 反向工程生成模型的输出目录</li>
<li><code>-ContextDir 上下文文件夹</code>： 将 <code>DbContext</code> 类生成到单独文件夹</li>
<li><code>-Tables 表名</code>： 指定哪些表进行反向工程</li>
<li><code>-Force</code>: 强制覆盖已存在文件</li>
</ul>
<p>比如如下示例：</p>
<div><pre><code><span># SqlServer</span>
Scaffold<span>-</span>DbContext <span>'Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=Chinook'</span> Microsoft<span>.</span>EntityFrameworkCore<span>.</span>SqlServer

<span># MySQL</span>
Scaffold<span>-</span>DbContext <span>"server=localhost;userid=jeremyjone;pwd=123;port=3306;database=db1;"</span> Pomelo<span>.</span>EntityFrameworkCore<span>.</span>MySql <span>-</span>OutputDir Models <span>-</span>Force
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>模型</title>
      <link>https://docs.jeremyjone.com/roadmap/dotnetcore/db/efcore/model/</link>
      <guid>https://docs.jeremyjone.com/roadmap/dotnetcore/db/efcore/model/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">模型</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="模型"> 模型</h1>
<p>Entity Framework Core 使用一组约定来根据实体类的形状生成模型。可指定其他配置以补充或替代约定的内容。模型对应于数据库中的表，每一张数据表都应该对应一个数据模型。</p>
<div><p>示例代码</p>
<p>完整代码可以看 <a href="https://github.com/jeremyjone/dotnet-study-road/tree/master/Database/Database.ModelBase" target="_blank" rel="noopener noreferrer">示例代码</a></p>
</div>
<h2 id="创建模型"> 创建模型</h2>
<p>在前面的文章中已经有了基本的模型创建，详细内容可以参考 <a href="./#添加模型">添加模型</a></p>
<p>每个类对应一张数据库表，每一个属性对应数据表中的一个字段，我们可以对每个数据表甚至每个字段进行单独配置。有两种方法：</p>
<ul>
<li>fluent API（优先级更高）</li>
<li>数据注释</li>
</ul>
<p>这两种方式都是很常见的使用方式，后面详细介绍。</p>
<h3 id="一对多关联"> 一对多关联</h3>
<p>对于属性中的关联关系，EF Core 为我们提供了非常简便的方式 - 添加属性。</p>
<p>比如我们现在有一个 Data 表，它需要关联我们的 User 表：</p>
<div><div><br><br><br><br><br><div>&nbsp;</div><div>&nbsp;</div><br><br></div><pre><code><span>public</span> <span>class</span> <span>Data</span>
<span>{</span>
    <span>public</span> <span><span>int</span></span> Id <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span><span>string</span></span> Name <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>// 通过创建对象属性，在生成数据表时，会自动生成外键</span>
    <span>public</span> <span><span>int</span></span> CreatorId <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span>virtual</span> <span>User</span> Creator <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>这样就生成了关联，这是一个一对多的关联方式。</p>
<h3 id="多对多关联"> 多对多关联</h3>
<p>在数据库中，一对多是通过列字段属性关联，而多对多通常都是通过第三方表进行关联的。在 EF Core 中，多对多的关联方式仍然可以通过属性字段表示，比如常用的角色与权限：</p>
<div><div><br><br><br><br><br><div>&nbsp;</div><br><br><br><br><br><br><div>&nbsp;</div><br><br></div><pre><code><span>public</span> <span>class</span> <span>Permission</span>
<span>{</span>
    <span>public</span> <span><span>int</span></span> Id <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span><span>string</span></span> Name <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span><span>bool</span></span> Value <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span>virtual</span> <span>ICollection<span>&lt;</span>Role<span>></span></span> R <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>

<span>public</span> <span>class</span> <span>Role</span>
<span>{</span>
    <span>public</span> <span><span>int</span></span> Id <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span><span>string</span></span> Name <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span>virtual</span> <span>ICollection<span>&lt;</span>Permission<span>></span></span> P <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>在两个类中使用了对应类型属性的集合。实际上在生成之后，它们会形成多对多的关联。</p>
<p>但是与普通属性不同，在实际使用过程中我发现，在多对多属性中添加数据注释，有一些是不起作用的，比如列名：</p>
<div><pre><code><span>[</span><span><span>Column</span><span><span>(</span><span>"r_id"</span><span>,</span> TypeName <span>=</span> <span>"smallint"</span><span>)</span></span></span><span>]</span>
<span>public</span> <span>virtual</span> <span>ICollection<span>&lt;</span>Permission<span>></span></span> P <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>有趣的效果是，在生成数据表之后，TypeName 生效了，而列名无效。于是这就需要使用 fluent API 的方式了，但是问题又来了，既然没有实际的对象，如何添加呢？</p>
<p>这里需要一个比较特殊的方式：</p>
<div><pre><code>modelBuilder<span>.</span><span><span>Entity</span><span><span>&lt;</span>Role<span>></span></span></span><span>(</span><span>)</span>
    <span>.</span><span>HasMany</span><span>(</span>r <span>=></span> r<span>.</span>P<span>)</span>
    <span>.</span><span>WithMany</span><span>(</span>p <span>=></span> p<span>.</span>R<span>)</span>
    <span>.</span><span>UsingEntity</span><span>(</span>x <span>=></span>
    <span>{</span>
        x<span>.</span><span>ToTable</span><span>(</span><span>"my_role_permission"</span><span>)</span><span>;</span>
        x<span>.</span><span><span>Property</span><span><span>&lt;</span><span>short</span><span>></span></span></span><span>(</span><span>"PId"</span><span>)</span><span>.</span><span>HasColumnType</span><span>(</span><span>"smallint"</span><span>)</span><span>.</span><span>HasColumnName</span><span>(</span><span>"p_id"</span><span>)</span><span>;</span>
        x<span>.</span><span><span>Property</span><span><span>&lt;</span><span>short</span><span>></span></span></span><span>(</span><span>"RId"</span><span>)</span><span>.</span><span>HasColumnType</span><span>(</span><span>"smallint"</span><span>)</span><span>.</span><span>HasColumnName</span><span>(</span><span>"r_id"</span><span>)</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><div><p>提示</p>
<p>使用上述方法，需要安装 EF Core 对应的反射工具 <code>Microsoft.EntityFrameworkCore.Relational</code>。如果已经安装了第三方的数据库扩展工具，它可能已经包含了该反射工具。</p>
</div>
<div><p>注意</p>
<p>这里我特意将列的类型换成了<code>smallint</code>，对应的属性为 <code>short</code>，以作说明之用，需要注意。</p>
</div>
<p>通过 <code>HasMany</code> 与 <code>WithMany</code> 方法形成了多对多关联，然后使用 <code>UsingEntity</code> 就可以对该对应关系表进行详细设置。设置属性时确保注意类型的正确性，这一点尤为重要。</p>
<h2 id="通过-fluent-api-配置模型"> 通过 fluent API 配置模型</h2>
<p>在派生的上下文中替代 <code>OnModelCreating</code> 方法，并使用 ModelBuilder API 来配置模型，此配置方法最为有效，并且可在不修改是提累的情况下指定配置。</p>
<div><pre><code><span>public</span> <span>class</span> <span>ApplicationDbContext</span> <span>:</span> <span><span>DbContext</span></span>
<span>{</span>
    <span>public</span> <span>ApplicationDbContext</span><span>(</span><span>DbContextOptions<span>&lt;</span>ApplicationDbContext<span>></span></span> options<span>)</span>
        <span>:</span> <span>base</span><span>(</span>options<span>)</span>
    <span>{</span>
    <span>}</span>

    <span>protected</span> <span>override</span> <span><span>void</span></span> <span>OnModelCreating</span><span>(</span><span>ModelBuilder</span> modelBuilder<span>)</span>
    <span>{</span>
        modelBuilder<span>.</span><span><span>Entity</span><span><span>&lt;</span>User<span>></span></span></span><span>(</span><span>)</span>
            <span>// 用户名是必须的</span>
            <span>.</span><span>Property</span><span>(</span>user <span>=></span> user<span>.</span>Username<span>)</span>
            <span>.</span><span>IsRequired</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h3 id="设置实体属性"> 设置实体属性</h3>
<p>多个实体可以单独进行配置，比如设置索引：</p>
<div><pre><code>modelBuilder<span>.</span><span><span>Entity</span><span><span>&lt;</span>User<span>></span></span></span><span>(</span>entity <span>=></span>
<span>{</span>
    entity<span>.</span><span>HasIndex</span><span>(</span>e <span>=></span> e<span>.</span>Username<span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id="配置多个属性"> 配置多个属性</h3>
<div><pre><code><span>public</span> <span>class</span> <span>ApplicationDbContext</span> <span>:</span> <span><span>DbContext</span></span>
<span>{</span>
    <span>public</span> <span>ApplicationDbContext</span><span>(</span><span>DbContextOptions<span>&lt;</span>ApplicationDbContext<span>></span></span> options<span>)</span>
        <span>:</span> <span>base</span><span>(</span>options<span>)</span>
    <span>{</span>
    <span>}</span>

    <span>protected</span> <span>override</span> <span><span>void</span></span> <span>OnModelCreating</span><span>(</span><span>ModelBuilder</span> modelBuilder<span>)</span>
    <span>{</span>
        modelBuilder<span>.</span><span><span>Entity</span><span><span>&lt;</span>User<span>></span></span></span><span>(</span>entity <span>=></span>
        <span>{</span>
            <span>// 用户名是必须的</span>
            entity<span>.</span><span>Property</span><span>(</span>e <span>=></span> e<span>.</span>Username<span>)</span>
                <span>.</span><span>IsRequired</span><span>(</span><span>)</span><span>;</span>

            <span>// 部门 Id 是必须的</span>
            entity<span>.</span><span>Property</span><span>(</span>e <span>=></span> e<span>.</span>DepartmentId<span>)</span>
                <span>.</span><span>IsRequired</span><span>(</span><span>)</span><span>;</span>
        <span>}</span><span>)</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><h3 id="时间的创建与更新"> 时间的创建与更新</h3>
<p>时间的更新可以通过两个方式实现：</p>
<ul>
<li>通过设置 <code>ValueGeneratedOnAddOrUpdate()</code> 方法</li>
<li>给出默认值。我们都知道在写 SQL 的时候，更新时间是通过 <code>ON UPDATE CURRENT_TIMESTAMP</code> 实现的，那么我们可以直接将默认值写成这个即可。</li>
</ul>
<div><p>注意</p>
<p>两种方式不能共存。在起初的阶段，我将默认值设置为 <code>CURRENT_TIMESTAMP</code>，同时提供了 <code>ValueGeneratedOnAddOrUpdate()</code> 方法，然后发现并没有生效。</p>
</div>
<div><pre><code>modelBuilder<span>.</span><span><span>Entity</span><span><span>&lt;</span>Data<span>></span></span></span><span>(</span>entity <span>=></span>
<span>{</span>
    <span>// HasDefaultValueSql 和 ValueGeneratedOnAdd 属性二选一</span>
    entity<span>.</span><span>Property</span><span>(</span>e <span>=></span> e<span>.</span>CreateTime<span>)</span>
        <span>// .HasDefaultValueSql("CURRENT_TIMESTAMP")</span>
        <span>.</span><span>HasComment</span><span>(</span><span>"创建时间"</span><span>)</span>
        <span>.</span><span>ValueGeneratedOnAdd</span><span>(</span><span>)</span><span>;</span>

    <span>// HasDefaultValueSql 和 ValueGeneratedOnAddOrUpdate 属性二选一</span>
    entity<span>.</span><span>Property</span><span>(</span>e <span>=></span> e<span>.</span>UpdateTime<span>)</span>
        <span>// .HasDefaultValueSql("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP")</span>
        <span>.</span><span>HasComment</span><span>(</span><span>"更新时间"</span><span>)</span>
        <span>.</span><span>ValueGeneratedOnAddOrUpdate</span><span>(</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>同时还要注意，字段类型是否需要设置为 <code>timestamp</code>。</p>
<h3 id="分组配置"> 分组配置</h3>
<p>甚至可以通过分组，对多个配置封装到单独的类中，新建一个 <code>UserEntityTypeConfiguration.cs</code> 文件，并添加如下内容：</p>
<div><pre><code><span>public</span> <span>class</span> <span>UserEntityTypeConfiguration</span> <span>:</span> <span><span>IEntityTypeConfiguration<span>&lt;</span>User<span>></span></span></span>
<span>{</span>
    <span>public</span> <span><span>void</span></span> <span>Configure</span><span>(</span><span>EntityTypeBuilder<span>&lt;</span>User<span>></span></span> builder<span>)</span>
    <span>{</span>
        builder
            <span>// 用户名是必须的</span>
            <span>.</span><span>Property</span><span>(</span>user <span>=></span> user<span>.</span>Username<span>)</span>
            <span>.</span><span>IsRequired</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>在 <code>OnModelCreating</code> 中调用 <code>Configure</code> 方法，并进行配置：</p>
<div><pre><code><span>new</span> <span>UserEntityTypeConfiguration</span><span>(</span><span>)</span><span>.</span><span>Configure</span><span>(</span>modelBuilder<span>.</span><span><span>Entity</span><span><span>&lt;</span>User<span>></span></span></span><span>(</span><span>)</span><span>)</span><span>;</span>
modelBuilder<span>.</span><span>ApplyConfigurationsFromAssembly</span><span>(</span><span>typeof</span><span>(</span><span>UserEntityTypeConfiguration</span><span>)</span><span>.</span>Assembly<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h2 id="通过数据注释配置模型"> 通过数据注释配置模型</h2>
<p>有时候我们在定义模型时就可以对属性进行约束，这种方式更加清晰。</p>
<div><p>注意</p>
<p>数据注释的方式会被 fluent API 配置替代。</p>
</div>
<p>在 <code>Username</code> 属性上面添加 <code>[Required]</code>，其作用与上面示例一致。</p>
<div><div><br><br><br><br><br><div>&nbsp;</div><br><br><br></div><pre><code><span>public</span> <span>class</span> <span>User</span>
<span>{</span>
    <span>/// &lt;summary></span>
    <span>/// 用户名</span>
    <span>/// &lt;/summary></span>
    <span>[</span>Required<span>]</span>
    <span>public</span> <span><span>string</span></span> Username <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>下面是一些常用的数据注释方法，基于 SQL Server，其他数据库设置大体相同，有差别请自行查找。</p>
<h3 id="设置表名"> 设置表名</h3>
<div><div><div>&nbsp;</div><br><br><br><br></div><pre><code><span>[</span><span><span>Table</span><span><span>(</span><span>"users"</span><span>)</span></span></span><span>]</span>
<span>public</span> <span>class</span> <span>User</span>
<span>{</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id="不映射某一属性到数据表"> 不映射某一属性到数据表</h3>
<div><div><div>&nbsp;</div><br><br><div>&nbsp;</div><br><br><br></div><pre><code><span>[</span><span><span>NotMapped</span></span><span>]</span>
<span>public</span> <span>class</span> <span>UserMetadata</span>
<span>{</span>
    <span>[</span><span><span>NotMapped</span></span><span>]</span>
    <span>public</span> <span>DateTime</span> PostTime <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><div><div><br><br><div>&nbsp;</div><br><br></div><pre><code><span>protected</span> <span>override</span> <span><span>void</span></span> <span>OnModelCreating</span><span>(</span><span>ModelBuilder</span> modelBuilder<span>)</span>
<span>{</span>
    modelBuilder<span>.</span><span><span>Ignore</span><span><span>&lt;</span>UserMetadata<span>></span></span></span><span>(</span><span>)</span><span>;</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>该数据属性在类型和属性上均可使用。</p>
<h3 id="必须值"> 必须值</h3>
<div><div><br><br><div>&nbsp;</div><br><br><br></div><pre><code><span>public</span> <span>class</span> <span>User</span>
<span>{</span>
    <span>[</span><span><span>Required</span></span><span>]</span>
    <span>public</span> <span><span>int</span></span> Id <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id="设置列名"> 设置列名</h3>
<div><div><br><br><div>&nbsp;</div><br><br><br></div><pre><code><span>public</span> <span>class</span> <span>User</span>
<span>{</span>
    <span>[</span><span><span>Column</span><span><span>(</span><span>"d_id"</span><span>)</span></span></span><span>]</span>
    <span>public</span> <span><span>int</span></span> DepartmentId <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id="设置列的数据类型"> 设置列的数据类型</h3>
<div><div><br><br><div>&nbsp;</div><br><br><br></div><pre><code><span>public</span> <span>class</span> <span>User</span>
<span>{</span>
    <span>[</span><span><span>Column</span><span><span>(</span>TypeName <span>=</span> <span>"varchar(20)"</span><span>)</span></span></span><span>]</span>
    <span>public</span> <span><span>string</span></span> Username <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id="设置最大长度"> 设置最大长度</h3>
<div><div><br><br><div>&nbsp;</div><br><br><br></div><pre><code><span>public</span> <span>class</span> <span>User</span>
<span>{</span>
    <span>[</span><span><span>MaxLength</span><span><span>(</span><span>20</span><span>)</span></span></span><span>]</span>
    <span>public</span> <span><span>string</span></span> Username <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id="配置主键"> 配置主键</h3>
<p>默认情况下使用 <code>Id</code> 或者 <code>**Id</code>(如 MyId) 的字段配置为主键，也可以通过数据注释来自定义主键：</p>
<div><div><br><br><div>&nbsp;</div><br><br><br></div><pre><code><span>public</span> <span>class</span> <span>User</span>
<span>{</span>
    <span>[</span><span><span>Key</span></span><span>]</span>
    <span>public</span> <span><span>int</span></span> Id <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id="配置索引"> 配置索引</h3>
<div><div><div>&nbsp;</div><br><br><br><br><br><br></div><pre><code><span>[</span><span><span>Index</span><span><span>(</span><span>nameof</span><span>(</span>Username<span>)</span><span>)</span></span></span><span>]</span>
<span>public</span> <span>class</span> <span>User</span>
<span>{</span>
    <span>public</span> <span><span>int</span></span> Id <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span><span>string</span></span> Username <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h4 id="复合索引"> 复合索引</h4>
<div><div><div>&nbsp;</div><br><br><br><br><br><br></div><pre><code><span>[</span><span><span>Index</span><span><span>(</span><span>nameof</span><span>(</span>Id<span>)</span><span>,</span> <span>nameof</span><span>(</span>Username<span>)</span><span>)</span></span></span><span>]</span>
<span>public</span> <span>class</span> <span>User</span>
<span>{</span>
    <span>public</span> <span><span>int</span></span> Id <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span><span>string</span></span> Username <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h4 id="唯一索引"> 唯一索引</h4>
<div><div><div>&nbsp;</div><br><br><br><br><br><br></div><pre><code><span>[</span><span><span>Index</span><span><span>(</span><span>nameof</span><span>(</span>Username<span>)</span><span>,</span> IsUnique <span>=</span> <span>true</span><span>)</span></span></span><span>]</span>
<span>public</span> <span>class</span> <span>User</span>
<span>{</span>
    <span>public</span> <span><span>int</span></span> Id <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span><span>string</span></span> Username <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h4 id="设置索引名称"> 设置索引名称</h4>
<div><div><div>&nbsp;</div><br><br><br><br><br><br></div><pre><code><span>[</span><span><span>Index</span><span><span>(</span><span>nameof</span><span>(</span>Username<span>)</span><span>,</span> Name <span>=</span> <span>"Index_Username"</span><span>)</span></span></span><span>]</span>
<span>public</span> <span>class</span> <span>User</span>
<span>{</span>
    <span>public</span> <span><span>int</span></span> Id <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span><span>string</span></span> Username <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id="了解更多"> 了解更多</h2>
<p>了解更多内容，可以参考 <a href="https://docs.microsoft.com/zh-cn/ef/core/modeling/" target="_blank" rel="noopener noreferrer">官方文档</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>使用</title>
      <link>https://docs.jeremyjone.com/roadmap/dotnetcore/db/efcore/use/</link>
      <guid>https://docs.jeremyjone.com/roadmap/dotnetcore/db/efcore/use/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">使用</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="使用"> 使用</h1>
<h2 id="查询数据"> 查询数据</h2>
<p>Entity Framework Core 使用语言集成查询 (LINQ) 来查询数据库中的数据。</p>
<div><pre><code><span>using</span> <span>(</span><span><span>var</span></span> db <span>=</span> <span>new</span> <span>UserDbContext</span><span>(</span><span>)</span><span>)</span>
<span>{</span>
    <span>// 获取全部用户</span>
    <span><span>var</span></span> users <span>=</span> db<span>.</span>Users<span>.</span><span>ToList</span><span>(</span><span>)</span><span>;</span>

    <span>// 获取第一个用户</span>
    <span><span>var</span></span> user1 <span>=</span> db<span>.</span>Users<span>.</span><span>FirstOrDefault</span><span>(</span><span>)</span><span>;</span>

    <span>// 获取指定 Id 的用户</span>
    <span><span>var</span></span> user2 <span>=</span> db<span>.</span>Users<span>.</span><span>Single</span><span>(</span>u <span>=></span> u<span>.</span>Id <span>==</span> <span>1</span><span>)</span><span>;</span>

    <span>// 获取指定条件的用户</span>
    <span><span>var</span></span> users2 <span>=</span> db<span>.</span>Users<span>.</span><span>Where</span><span>(</span>u <span>=></span> u<span>.</span>DepartmentId <span>==</span> <span>1</span><span>)</span><span>.</span><span>ToList</span><span>(</span><span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h3 id="加载数据"> 加载数据</h3>
<p>Entity Framework Core 允许你在模型中使用导航属性来加载相关实体。有三种常见的 O/RM 模式可用于加载关联数据。</p>
<h4 id="预先加载"> 预先加载</h4>
<p>预先加载表示从数据库中加载关联数据，作为初始查询的一部分。可以使用 <code>Include</code> 方法来指定要包含在查询结果中的关联数据。</p>
<p>这个方法对于关联数据的查询非常有用，直接通过例子演示。</p>
<div><div><br><br><br><br><br><br><br><br><br><br><br><br><div>&nbsp;</div><br><br><br></div><pre><code><span>public</span> <span>class</span> <span>Data</span>
<span>{</span>
    <span>public</span> <span><span>int</span></span> Id <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span><span>string</span></span> Name <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>// 下面是外键格式，关联创建者</span>
    <span>public</span> <span><span>int</span></span> CreatorId <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span>virtual</span> <span>User</span> Creator <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>

<span>using</span> <span>(</span><span><span>var</span></span> db <span>=</span> <span>new</span> <span>DbContext</span><span>(</span><span>)</span><span>)</span>
<span>{</span>
    <span><span>var</span></span> data <span>=</span> db<span>.</span>Data
        <span>.</span><span>Include</span><span>(</span>d <span>=></span> d<span>.</span>Creator<span>)</span>
        <span>.</span><span>ToList</span><span>(</span><span>)</span><span>;</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>上面例子中，通过 <code>Include</code> 可以一次性获得相关的创建者信息，而不需要进行二次查询，这极大方便了我们的查询效率。</p>
<p>如果有多个关联属性，可以并联使用 <code>Include</code> 方法连续获取。进而还可以使用 <code>ThenInclude</code> 来进一步获取通过 <code>Include</code> 获取到的对象中更深一层的关联数据。比如：</p>
<div><pre><code><span><span>var</span></span> data <span>=</span> db<span>.</span>Data<span>.</span><span>Include</span><span>(</span>d <span>=></span> d<span>.</span>Creator<span>)</span><span>.</span><span>ThenInclude</span><span>(</span>c <span>=></span> c<span>.</span>Department<span>)</span><span>.</span><span>ToList</span><span>(</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><p>也可以将多个级别和多个根的关联数据合并到一起进行查询 <a href="https://docs.microsoft.com/zh-cn/ef/core/querying/related-data/eager#including-multiple-levels" target="_blank" rel="noopener noreferrer">参考</a>。</p>
<h4 id="显式加载"> 显式加载</h4>
<p><a href="https://docs.microsoft.com/zh-cn/ef/core/querying/related-data/explicit" target="_blank" rel="noopener noreferrer">显式加载</a> 表示稍后从数据库中显式加载关联数据。</p>
<h4 id="延迟加载"> 延迟加载</h4>
<p><a href="https://docs.microsoft.com/zh-cn/ef/core/querying/related-data/lazy" target="_blank" rel="noopener noreferrer">延迟加载</a> 表示在访问导航属性时，从数据库中以透明方式加载关联数据。</p>
<h3 id="使用原生-sql-查询"> 使用原生 SQL 查询</h3>
<p>EF Core 支持使用原生 SQL 查询数据，当 LINQ 查询效率低下时，可以通过原生 SQL 查询。</p>
<div><pre><code><span><span>var</span></span> users <span>=</span> db<span>.</span>Users<span>.</span><span>FromSqlRaw</span><span>(</span><span>"SELETE * FROM users"</span><span>)</span><span>.</span><span>ToList</span><span>(</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><div><p>注意</p>
<p>使用原生 SQL，需要注意防范注入攻击。</p>
</div>
<h2 id="保存数据"> 保存数据</h2>
<p>在上下文中有 <code>SaveChanges()</code> 和 <code>SaveChangesAsync()</code> 方法，根据具体情况使用。</p>
<p>当上下文和实体类中添加、修改和删除数据时，调用上面方法进行保存即可。</p>
<div><pre><code><span>using</span> <span>(</span><span><span>var</span></span> db <span>=</span> <span>new</span> <span>UserDbContext</span><span>(</span><span>)</span><span>)</span>
<span>{</span>
    <span><span>var</span></span> user <span>=</span> <span>new</span> <span>User</span>
    <span>{</span>
        Id <span>=</span> <span>1</span><span>,</span>
        DepartmentId <span>=</span> <span>1</span><span>,</span>
        Username <span>=</span> <span>"jeremyjone"</span><span>,</span>
        Nickname <span>=</span> <span>"Jeremy Jone"</span>
    <span>}</span><span>;</span>
    db<span>.</span><span>Add</span><span>(</span>user<span>)</span><span>;</span>
    db<span>.</span><span>SaveChanges</span><span>(</span><span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h2 id="了解更多"> 了解更多</h2>
<p>了解更多内容，参考 <a href="https://docs.microsoft.com/zh-cn/ef/core/" target="_blank" rel="noopener noreferrer">官方文档</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>其他映射工具</title>
      <link>https://docs.jeremyjone.com/roadmap/dotnetcore/db/other/</link>
      <guid>https://docs.jeremyjone.com/roadmap/dotnetcore/db/other/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">其他映射工具</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="其他映射工具"> 其他映射工具</h1>
<ul>
<li><a href="http://www.donet5.com/Doc/1/1180" target="_blank" rel="noopener noreferrer">SqlSugar</a></li>
<li><a href="https://github.com/StackExchange/Dapper" target="_blank" rel="noopener noreferrer">Dapper</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>概述</title>
      <link>https://docs.jeremyjone.com/roadmap/dotnetcore/di/</link>
      <guid>https://docs.jeremyjone.com/roadmap/dotnetcore/di/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">概述</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="概述"> 概述</h1>
<blockquote>
<p>高内聚，低耦合</p>
</blockquote>
<p>作为程序设计的高级奥义，依赖注入是很好的实现。</p>
<h2 id="什么是依赖注入"> 什么是依赖注入</h2>
<p>依赖注入，Dependency Injection，简写为 DI，它是控制反转（Inversion of Control，简写为 IoC）的一种。</p>
<blockquote>
<p>控制反转是面向对象编程中的一种设计原则，可以用来降低计算机代码之间的耦合度。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。 -- 百度</p>
</blockquote>
<p>听上去有点绕，说人话，就是原来我们的程序使用的一个具体的类，现在不用了，用一个接口就可以了。</p>
<h2 id="依赖注入的好处"> 依赖注入的好处</h2>
<p>网上有很多介绍和总结，我总结了一下，无外乎下面几点：</p>
<ul>
<li>符合设计原则</li>
<li>对于上层的依赖更加稳定</li>
<li>易于维护与测试</li>
</ul>
<p>还有一些其他优点的介绍，但无外乎都是针对上面的优点进行的扩展。比如分离关注点、封装性好等特点，在我看来，都可以归类为<strong>符合设计原则</strong>，这在设计原则中已经很清晰的提出过。</p>
<h2 id="依赖注入的实现原理"> 依赖注入的实现原理</h2>
<p>那么多的好处，它是如何实现的呢？参考下面图片：</p>
<img :src="$withBase('/assets/roadmap/dotnet/di/di_direct_graph.png')" alt="di_direct_graph">
<p>编译时依赖关系顺着运行时执行的方向，从而生成一个直接依赖关系图。也就是说，如果 <code>Class A</code> 调用 <code>Class B</code> 中的函数，而 <code>Class B</code> 又调用 <code>Class C</code> 中的函数，则编译时 A 取决于 B，而 B 又取决于 C。这样的方式显然在编译时带来很多不便，如果我们修改了 C，则后续都需要重新编译。</p>
<p>如果我们将 B 提取出抽象方法，让 A 调用 B 的抽象，这样就让 A 可以在运行时调用 B，而 B 又在编译时依赖于 A 控制的接口（B 的抽象），此时程序执行时流程保持不变，但编译时发生依赖项的翻转，此改变就是依赖倒置和控制反转。接口（抽象）的引入意味着可以轻松插入这些接口的不同实现，A 再也不管用关心 B 的内部是如何实现的了。</p>
<p>同理，将 C 提取出抽象方法，让 B 调用 C 的抽象，就完全将整个程序流程进行了 <code>IoC</code>。</p>
<img :src="$withBase('/assets/roadmap/dotnet/di/di_inverted_graph.png')" alt="di_inverted_graph">
<p>依赖项反转是生成松散耦合应用程序的关键一环，因为可以将实现详细信息编写为依赖并实现更高级别的抽象，而不是相反。 因此，生成的应用程序的可测试性、模块化程度以及可维护性更高。 遵循依赖关系反转原则可实现依赖关系注入。</p>
<h2 id="依赖注入的示例"> 依赖注入的示例</h2>
<h3 id="错误的用法"> 错误的用法</h3>
<p>比如我们现在需要一个发送邮件的对象，其他类需要使用该对象的 <code>SendEmail</code> 方法：</p>
<div><pre><code><span>public</span> <span>class</span> <span>EmailHandler</span>
<span>{</span>
    <span>public</span> <span><span>void</span></span> <span>SendEmail</span><span>(</span><span><span>string</span></span> address<span>,</span> <span><span>string</span></span> message<span>)</span>
    <span>{</span>
        <span>// 模拟方法</span>
        <span>Send</span><span>(</span>address<span>,</span> message<span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>我们现在需要使用发送邮件的功能：</p>
<div><pre><code><span>public</span> <span>class</span> <span>Page</span>
<span>{</span>
    <span>private</span> <span>readonly</span> <span>EmailHandler</span> _emailHandler <span>=</span> <span>new</span> <span>EmailHandler</span><span>(</span><span>)</span><span>;</span>

    <span>public</span> <span><span>void</span></span> <span>NoticeUser</span><span>(</span><span><span>string</span></span> userEmail<span>)</span>
    <span>{</span>
        _emailHandler<span>.</span><span>SendEmail</span><span>(</span>userEmail<span>,</span> <span>"notice message."</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>以上做法是通过直接创建实例完成的，它会产生如下问题：</p>
<ul>
<li>如果使用不同的实现替换现有 <code>EmailHandler</code>，必须修改 <code>Page</code> 类。</li>
<li>如果 <code>EmailHandler</code> 有其他配置，必须在 <code>page</code> 类中全部重新配置。</li>
<li>编译时的逻辑会更加复杂，也很难进行单元测试。</li>
</ul>
<p>上述问题还只是这一个类，如果多个类同时使用 <code>EmailHandler</code>，上面的问题带来的未知结果将不可预测。</p>
<h3 id="正确的用法"> 正确的用法</h3>
<p>按照上面的实现原理进行改造，并通过 DI 容器创建，在使用 <code>EmailHandler</code> 时只是注入到当前类即可。</p>
<p>生成一个 <code>EmailHandler</code> 的接口：</p>
<div><pre><code><span>public</span> <span>interface</span> <span>IEmailHandler</span>
<span>{</span>
    <span><span>void</span></span> <span>SendEmail</span><span>(</span><span><span>string</span></span> address<span>,</span> <span><span>string</span></span> message<span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>修改一下实现类，让其实现上面接口：</p>
<div><pre><code><span>public</span> <span>class</span> <span>EmailHandler</span><span>:</span> <span><span>IEmailHandler</span></span>
<span>{</span>
    <span>public</span> <span><span>void</span></span> <span>SendEmail</span><span>(</span><span><span>string</span></span> address<span>,</span> <span><span>string</span></span> message<span>)</span>
    <span>{</span>
        <span>// 模拟方法</span>
        <span>Send</span><span>(</span>address<span>,</span> message<span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>然后通过 <code>ASP.NET Core</code> 的注册服务进行注册：</p>
<div><pre><code><span>public</span> <span><span>void</span></span> <span>ConfigureServices</span><span>(</span><span>IServiceCollection</span> services<span>)</span>
<span>{</span>
    services<span>.</span><span><span>AddSingleton</span><span><span>&lt;</span>IEmailHandler<span>,</span> EmailHandler<span>></span></span></span><span>(</span><span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>最后在 <code>Page</code> 类中注入 <code>EmailHandler</code> 方法：</p>
<div><pre><code><span>public</span> <span>class</span> <span>Page</span>
<span>{</span>
    <span>private</span> <span>readonly</span> <span>IEmailHandler</span> _emailHandler<span>;</span>

    <span>public</span> <span>Page</span><span>(</span><span>IEmailHandler</span> emailHandler<span>)</span>
    <span>{</span>
        _emailHandler <span>=</span> emailHandler<span>;</span>
    <span>}</span>

    <span>public</span> <span><span>void</span></span> <span>NoticeUser</span><span>(</span><span><span>string</span></span> userEmail<span>)</span>
    <span>{</span>
        _emailHandler<span>.</span><span>SendEmail</span><span>(</span>userEmail<span>,</span> <span>"notice message."</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>这样，在我们的 <code>Page</code> 类中，已经完全不需要关心这个 <code>SendEmail</code> 方法和它的类是如何创建和运行的，当我们修改 <code>SendEmail</code> 或者更改 <code>EmailHandler</code> 时，<code>Page</code> 类也完全不用关心。</p>
]]></content:encoded>
    </item>
    <item>
      <title>服务容器</title>
      <link>https://docs.jeremyjone.com/roadmap/dotnetcore/di/collections/</link>
      <guid>https://docs.jeremyjone.com/roadmap/dotnetcore/di/collections/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">服务容器</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="服务容器"> 服务容器</h1>
<h2 id="默认容器"> 默认容器</h2>
<p>使用内置的服务容器可以满足框架和大多数消费者应用的需求。在一个基本框架的 <code>Startup.cs</code> 中已经添加好了相应的代码，我们只需要直接使用即可：</p>
<div><pre><code><span>public</span> <span><span>void</span></span> <span>ConfigureServices</span><span>(</span><span>IServiceCollection</span> services<span>)</span>
<span>{</span>
    <span>// add services</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p><code>services</code> 就是我们需要的容器实例，它依赖 <code>Microsoft.Extensions.DependencyInjection</code>，我们将所有需要的内容注入到依赖容器中就可以使用。</p>
<p>默认容器更多内容可以查看 <a href="https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/dependency-injection" target="_blank" rel="noopener noreferrer">官方文档</a>。</p>
<h2 id="不使用默认服务容器的条件"> 不使用默认服务容器的条件</h2>
<p>除非你需要的特定功能不受它支持，例如：</p>
<ul>
<li>属性注入</li>
<li>基于名称的注入</li>
<li>子容器</li>
<li>自定义生存期管理</li>
<li>对迟缓初始化的 <code>Func&lt;T&gt;</code> 支持</li>
<li>基于约定的注册</li>
<li>不限于上面的内容并且默认容器没有提供支持的</li>
</ul>
<h2 id="第三方容器"> 第三方容器</h2>
<p>可以使用的第三方容器：</p>
<ul>
<li><a href="https://autofac.readthedocs.io/en/latest/integration/aspnetcore.html" target="_blank" rel="noopener noreferrer">Autofac</a></li>
<li><a href="http://www.ninject.org/" target="_blank" rel="noopener noreferrer">Ninject</a></li>
<li><a href="https://www.nuget.org/packages/DryIoc.Microsoft.DependencyInjection" target="_blank" rel="noopener noreferrer">Dryloc</a></li>
<li><a href="https://www.nuget.org/packages/Grace.DependencyInjection.Extensions" target="_blank" rel="noopener noreferrer">Grace</a></li>
<li><a href="https://github.com/seesharper/LightInject.Microsoft.DependencyInjection" target="_blank" rel="noopener noreferrer">LightInject</a></li>
<li><a href="https://jasperfx.github.io/lamar/" target="_blank" rel="noopener noreferrer">Lamar</a></li>
</ul>
<p>推荐使用 <code>Autofac</code></p>
]]></content:encoded>
    </item>
    <item>
      <title>生命周期</title>
      <link>https://docs.jeremyjone.com/roadmap/dotnetcore/di/lifetimes/</link>
      <guid>https://docs.jeremyjone.com/roadmap/dotnetcore/di/lifetimes/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">生命周期</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="生命周期"> 生命周期</h1>
<p>在 <code>ASP.NET Core</code> 中，可以将服务注册为以下任一生存周期：</p>
<ul>
<li>Transient（暂时）</li>
<li>Scoped（作用域）</li>
<li>Singleton（单例）</li>
</ul>
<h2 id="transient（暂时）"> Transient（暂时）</h2>
<p><strong>暂时</strong> 是每次从服务容器进行请求时创建的。这种生存期适合轻量级、 无状态的服务。在处理请求的应用中，在请求结束时会释放暂时服务。</p>
<p>通过 <code>AddTransient&lt;&gt;()</code> 进行注册。</p>
<h2 id="scoped（作用域）"> Scoped（作用域）</h2>
<p><strong>作用域</strong> 对于 Web 应用，每个客户端请求（连接）就创建一次服务。在处理请求的应用中，在请求结束时会释放有作用域的服务。</p>
<p>通过 <code>Add?Scoped&lt;&gt;()</code> 进行注册。</p>
<p>默认情况下，<code>AddDbContext</code> 就是作用域的生命周期。</p>
<h2 id="singleton（单例）"> Singleton（单例）</h2>
<p><strong>单例</strong> 最好理解，首次请求时创建，或者在添加注册时直接创建，虽然这样很少使用。</p>
<p>单例服务应该由 DI 容器进行管理其生命周期，不要在代码中提供释放。</p>
<p>通过 <code>AddSingleton&lt;&gt;()</code> 进行注册。单例服务必须是线程安全的，通常在无状态服务中使用它。</p>
<h2 id="注意事项"> 注意事项</h2>
<p>需要注意的是，因为生命周期不一致，所以不要：</p>
<ul>
<li>从<strong>单例</strong>服务中解析<strong>作用域</strong>或<strong>暂时</strong>服务</li>
</ul>
<p>因为这样可能会导致服务处于不正确的状态。你可以：</p>
<ul>
<li>从<strong>作用域</strong>或<strong>暂时</strong>服务中解析<strong>单例</strong>服务</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>应用性能监控系统</title>
      <link>https://docs.jeremyjone.com/roadmap/dotnetcore/log/APM/</link>
      <guid>https://docs.jeremyjone.com/roadmap/dotnetcore/log/APM/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">应用性能监控系统</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="应用性能监控系统"> 应用性能监控系统</h1>
<p>如今分布式架构越来越多，对于整套系统的监控越来越复杂，不单单是一个日志能够解决的，需要日志、追踪、分析等不同工具配合使用，才能满足需求。</p>
<p>在众多 APM 系统中，<code>SkyWalking</code> 算是一款比较好用的 APM 系统。它包括 <code>服务端</code>、<code>界面</code>、以及 <code>探针</code>，其中 <code>探针</code> 是针对不同语言有不同的包，针对 ASP.NET 的探针包是 <code>SkyAPM-dotnet</code>，具体可以查看 <a href="https://github.com/SkyAPM" target="_blank" rel="noopener noreferrer">GitHub</a>。</p>
<h2 id="skywalking"> SkyWalking</h2>
<p><code>SkyWalking</code> 提供了在许多不同场景中观察和监控分布式系统的解决方案。配合不同语言环境下的 <code>探针</code>，接收 <code>探针</code> 的遥测数据，让用户了解整个分布式系统。</p>
<blockquote>
<p>SkyWalking 包括了一整套完整的文档，有兴趣的朋友可以自行查看。<a href="https://skywalking.apache.org/docs/" target="_blank" rel="noopener noreferrer">官方文档地址(英文)</a></p>
</blockquote>
<h3 id="配置-skywalking"> 配置 SkyWalking</h3>
<p>打开链接：</p>
<blockquote>
<p><a href="http://skywalking.apache.org/downloads/" target="_blank" rel="noopener noreferrer">http://skywalking.apache.org/downloads/</a> (推荐)</p>
</blockquote>
<p>或</p>
<blockquote>
<p><a href="https://archive.apache.org/dist/skywalking/" target="_blank" rel="noopener noreferrer">https://archive.apache.org/dist/skywalking/</a></p>
</blockquote>
<p>直接下载最新版的 <code>tar.gz</code> 压缩包即可。</p>
<div><p>提示</p>
<p>针对 SkyAPM 1.0+ 的版本，需要 SkyWalking 8.0+ 或更高版本。</p>
</div>
<p>整套 <code>SkyWalking</code> 是 Java 编写的，解压缩后直接运行 <code>/bin</code> 目录下的 <code>startup.bat</code>（Windows） 或 <code>startup.sh</code>（linux/MacOS） 即可。</p>
<p>如果有打开两个窗口并且 <code>Webapp</code> 窗口没有自动关闭，就说明已经成功，打开浏览器并输入 <code>http://localhost:8080/</code>，如果能看到仪表盘的页面则说明成功。</p>
<img :src="$withBase('/assets/roadmap/dotnet/log/skywalking-dashboard.png')" alt="">
<h3 id="修改端口"> 修改端口</h3>
<p><code>SkyWalking</code> 默认开启 8080 端口，同时会还会占用 11800、12800 两个端口作为接收端口。如果端口被占用，它就无法启动，所以要确保这几个端口可用，同时也可以修改端口。</p>
<ul>
<li>8080：UI 的访问端口</li>
<li>11800：后端侦听 gRPC 服务地址端口</li>
<li>12800：后端侦听 Http REST 服务地址端口</li>
</ul>
<h4 id="修改-ui-端口"> 修改 UI 端口</h4>
<p>打开 <code>SkyWalking</code> 根目录下的 <code>/webapp</code> 目录下的 <code>webapp.yml</code> 文件，将 <code>port</code> 修改为空闲端口即可</p>
<h4 id="修改后端侦听端口"> 修改后端侦听端口</h4>
<p>打开 <code>SkyWalking</code> 根目录下的 <code>/config</code> 目录下的 <code>application.yml</code> 文件，搜索对应端口号并修改即可。</p>
<h3 id="修改存储"> 修改存储</h3>
<p>默认情况下，<code>SkyWalking</code> 是使用 H2 存储，简单实用足够，但是它也可以重新配置，我们可以通过设置修改它。</p>
<p>以 <code>elasticsearch7</code> 为例，打开 <code>SkyWalking</code> 根目录下的 <code>/config</code> 目录下的 <code>application.yml</code> 文件，找到 <code>storage</code> 节点，修改 <code>selector</code> 即可：</p>
<div><pre><code><span>storage</span><span>:</span>
  <span>selector</span><span>:</span> $<span>{</span>SW_STORAGE<span>:</span>elasticsearch7<span>}</span> <span># 修改名称，对应下面子节点名称即可</span>
  <span>elasticsearch</span><span>:</span>
    <span>nameSpace</span><span>:</span> $<span>{</span>SW_NAMESPACE<span>:</span><span>""</span><span>}</span>
    <span>clusterNodes</span><span>:</span> $<span>{</span>SW_STORAGE_ES_CLUSTER_NODES<span>:</span>localhost<span>:</span><span>9200</span><span>}</span>
    <span># ...</span>
  <span>elasticsearch7</span><span>:</span>
    <span>nameSpace</span><span>:</span> $<span>{</span>SW_NAMESPACE<span>:</span><span>""</span><span>}</span>
    <span>clusterNodes</span><span>:</span> $<span>{</span>SW_STORAGE_ES_CLUSTER_NODES<span>:</span>localhost<span>:</span><span>9200</span><span>}</span>
    <span># ...</span>
  <span>h2</span><span>:</span>
    <span>driver</span><span>:</span> $<span>{</span>SW_STORAGE_H2_DRIVER<span>:</span>org.h2.jdbcx.JdbcDataSource<span>}</span>
    <span>url</span><span>:</span> $<span>{</span>SW_STORAGE_H2_URL<span>:</span>jdbc<span>:</span>h2<span>:</span>mem<span>:</span>skywalking<span>-</span>oap<span>-</span>db;DB_CLOSE_DELAY=<span>-</span><span>1</span><span>}</span>
    <span># ...</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><div><p>友情提示</p>
<p>elasticsearch 不在本文讨论范围，具体方法可以移步 <a href="http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html" target="_blank" rel="noopener noreferrer">阮一峰的网络日志</a>。阮大神的日志，质量有保证。</p>
</div>
<div><p>提示</p>
<p>如果使用 <code>ElasticSearch7+</code> 版本，需要下载 <code>apache-skywalking-bin-es7.tar.gz</code> 包，一定是带 <strong><code>es7</code></strong> 的包。</p>
<p>对于 7 以下版本，需要下载不包含 <strong><code>es7</code></strong> 的包。这点需要注意。</p>
</div>
<p>修改之后，就可以正常使用了。</p>
<h2 id="配置探针"> 配置探针</h2>
<p><code>SkyAPM</code> 在 <code>Apache SkyWalking</code> 团队的帮助下对不同语言提供原生支持，它支持多种语言，其中针对 <code>.NET</code> 平台是非常好用的。</p>
<h3 id="安装探针工具"> 安装探针工具</h3>
<p>创建一个 WebAPI 项目，并在 <code>NuGET</code> 包管理器中查找并下载：</p>
<blockquote>
<p>SkyAPM.Agent.AspNetCore （当前 1.3.0）</p>
</blockquote>
<div><p>示例代码</p>
<p>具体代码可以看 <a href="https://github.com/jeremyjone/dotnet-study-road/tree/master/Log/Log.APM/Log.APM/Log.APM" target="_blank" rel="noopener noreferrer">示例代码</a></p>
</div>
<h3 id="添加环境变量"> 添加环境变量</h3>
<p>安装之后，需要添加环境变量。在项目的启动配置文件 <code>launchSettings.json</code> 中添加：</p>
<div><pre><code><span>"ASPNETCORE_HOSTINGSTARTUPASSEMBLIES"</span><span>:</span> <span>"SkyAPM.Agent.AspNetCore"</span>
</code></pre>
<div><span>1</span><br></div></div><p>具体配置位置如下图：</p>
<img :src="$withBase('/assets/roadmap/dotnet/log/skyapm-env-var.png')" alt="环境变量配置">
<p>还可以自定义服务名称，方便在 UI 中查看（可以不设置，在 json 文件中单独配置即可）：</p>
<div><pre><code><span>"SKYWALKING__SERVICENAME"</span><span>:</span> &lt;your-app-name> <span>// 修改为自定义的项目名称</span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="添加配置文件"> 添加配置文件</h3>
<p>可以通过 CLI 工具快速创建配置文件。</p>
<p>全局安装 CLI：</p>
<div><pre><code>dotnet tool install <span>-</span>g SkyAPM<span>.</span>DotNet<span>.</span><span>CLI</span>
</code></pre>
<div><span>1</span><br></div></div><p>然后在项目目录下添加文件（其他地方创建拷贝到项目根目录亦可）：</p>
<div><pre><code>dotnet skyapm config &lt;your<span>-</span>app<span>-</span>name> localhost:11800
</code></pre>
<div><span>1</span><br></div></div><div><p>注意</p>
<p>项目名称需要替换，IP 以及 Port 需要按照 <code>SkyWalking</code> 的配置，默认端口为 11800</p>
</div>
<p>生成的文件内容如下。（如果你不想安装 CLI 工具，可以直接拷贝下面的 json 文件）：</p>
<div><pre><code><span>{</span>
  <span>"SkyWalking"</span><span>:</span> <span>{</span>
    <span>"ServiceName"</span><span>:</span> <span>"Log.APM"</span><span>,</span> <span>// 服务名称，可以自定义</span>
    <span>"Namespace"</span><span>:</span> <span>""</span><span>,</span>
    <span>"HeaderVersions"</span><span>:</span> <span>[</span>
      <span>"sw8"</span> <span>// 对照 SkyWalking 版本</span>
    <span>]</span><span>,</span>
    <span>"Sampling"</span><span>:</span> <span>{</span>
      <span>"SamplePer3Secs"</span><span>:</span> <span>-1</span><span>,</span>
      <span>"Percentage"</span><span>:</span> <span>-1.0</span>
    <span>}</span><span>,</span>
    <span>"Logging"</span><span>:</span> <span>{</span>
      <span>"Level"</span><span>:</span> <span>"Information"</span><span>,</span>
      <span>"FilePath"</span><span>:</span> <span>"logs\\skyapm-{Date}.log"</span>
    <span>}</span><span>,</span>
    <span>"Transport"</span><span>:</span> <span>{</span>
      <span>"Interval"</span><span>:</span> <span>3000</span><span>,</span>
      <span>"ProtocolVersion"</span><span>:</span> <span>"v8"</span><span>,</span> <span>// 对照 SkyWalking 的版本</span>
      <span>"QueueSize"</span><span>:</span> <span>30000</span><span>,</span>
      <span>"BatchSize"</span><span>:</span> <span>3000</span><span>,</span>
      <span>"gRPC"</span><span>:</span> <span>{</span>
        <span>"Servers"</span><span>:</span> <span>"localhost:11800"</span><span>,</span> <span>// SkyWalking 监听地址</span>
        <span>"Timeout"</span><span>:</span> <span>10000</span><span>,</span>
        <span>"ConnectTimeout"</span><span>:</span> <span>10000</span><span>,</span>
        <span>"ReportTimeout"</span><span>:</span> <span>600000</span><span>,</span>
        <span>"Authentication"</span><span>:</span> <span>""</span>
      <span>}</span>
    <span>}</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div><p>主要注意备注的内容即可，其他如果没有特殊要求可以默认。</p>
<p>这样就完成了配置。然后启动项目，如果有 swagger，直接在 swagger 中测试 API 即可。在 SkyWalking 的 UI 中就能看到测试效果。</p>
<div><p>说明</p>
<p>只要在项目中安装了 <code>SkyAPM.Agent.AspNetCore</code> 并且设置了上述环境变量，配置好 json 文件，即可</p>
</div>
<h2 id="测试一下效果"> 测试一下效果</h2>
<p>为了测试一下效果，我们多建立几个关联项目，用最简单的 <code>HttpClient</code> 链接，每个项目都通过上面的方式配置探针即可。</p>
<div><p>示例代码</p>
<p>具体代码可以看 <a href="https://github.com/jeremyjone/dotnet-study-road/tree/master/Log/Log.APM/Log.APM" target="_blank" rel="noopener noreferrer">示例代码</a></p>
</div>
<p>启动后在 swagger 中测试一下，就可以在 <code>SkyWalking</code> 中看到对应的信息了：</p>
<img :src="$withBase('/assets/roadmap/dotnet/log/skywalking-tracing-road.png')" alt="追踪拓扑">
]]></content:encoded>
    </item>
    <item>
      <title>Serilog 的使用</title>
      <link>https://docs.jeremyjone.com/roadmap/dotnetcore/log/Serilog/</link>
      <guid>https://docs.jeremyjone.com/roadmap/dotnetcore/log/Serilog/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">Serilog 的使用</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="serilog-的使用"> Serilog 的使用</h1>
<p>Serilog 是第三方日志工具，拥有强大的插件功能和易用性。</p>
<h2 id="安装"> 安装</h2>
<p>在 NuGet 中搜索并安装 <code>Serilog</code> 和 <code>Serilog.AspNetCore</code>，并可以按需安装其 Sinks 下的各种插件。</p>
<h2 id="使用"> 使用</h2>
<p>一个最简单的使用方式：</p>
<div><pre><code><span>using</span> <span>Serilog</span><span>;</span>

publis <span>static</span> <span><span>void</span></span> <span>Main</span><span>(</span><span><span>string</span><span>[</span><span>]</span></span> args<span>)</span>
<span>{</span>
    <span>using</span><span>(</span><span><span>var</span></span> log <span>=</span> <span>new</span> <span>LoggerConfiguration</span><span>(</span><span>)</span><span>.</span><span>WriteToConsole</span><span>(</span><span>)</span><span>.</span><span>CreateLogger</span><span>(</span><span>)</span><span>)</span> <span>{</span>
        log<span>.</span><span>Information</span><span>(</span><span>"This is a serilog info."</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>使用 Serilog 的 Log 对象进行配置：</p>
<div><pre><code>Log<span>.</span>Logger <span>=</span> <span>new</span> <span>LoggerConfiguration</span><span>(</span><span>)</span>
    <span>// 对其自身限制</span>
    <span>.</span>MinimumLevel<span>.</span><span>Debug</span><span>(</span><span>)</span>
    <span>// 重写其它日志规则，捕获 Microsoft 高于 Debug 级别的日志并输出到 Serilog</span>
    <span>.</span>MinimumLevel<span>.</span><span>Override</span><span>(</span><span>"Microsoft"</span><span>,</span> LogEventLevel<span>.</span>Debug<span>)</span>
    <span>// 写入控制台</span>
    <span>.</span>WriteTo<span>.</span><span>Console</span><span>(</span><span>)</span>
    <span>// 写入文件，这里配置为生成文件按天</span>
    <span>.</span>WriteTo<span>.</span><span>File</span><span>(</span>Path<span>.</span><span>Combine</span><span>(</span><span>"Logs"</span><span>,</span> <span>@"serilog.log"</span><span>)</span><span>,</span> <span>rollingInterval</span><span>:</span> RollingInterval<span>.</span>Day<span>)</span>
    <span>// 写入 DB，这里使用 SQLServer，也可以通过插件使用其他数据库</span>
    <span>.</span>WriteTo<span>.</span><span>MSSqlServer</span><span>(</span><span>"xxx connectionString"</span><span>,</span> <span>autoCreateSqlTable</span><span>:</span> <span>true</span><span>,</span> <span>tableName</span><span>:</span> <span>"Logs"</span><span>)</span>
    <span>.</span><span>CreateLogger</span><span>(</span><span>)</span><span>;</span>

<span>// 输出</span>
Log<span>.</span><span>Information</span><span>(</span><span>"Serilog information!!!"</span><span>)</span><span>;</span>

<span>// 最后一定要释放空间</span>
Log<span>.</span><span>CloseAndFlush</span><span>(</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><p>一定要注意最后的释放空间，对于 .NET 项目，可以在 Program.cs 的主函数中使用 try 语句实现最后的释放：</p>
<div><pre><code><span>try</span>
<span>{</span>
    <span>CreateHostBuilder</span><span>(</span>args<span>)</span><span>.</span><span>Build</span><span>(</span><span>)</span><span>.</span><span>Run</span><span>(</span><span>)</span><span>;</span>
<span>}</span>
<span>finally</span>
<span>{</span>
    Log<span>.</span><span>CloseAndFlush</span><span>(</span><span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>在 .NET 中，如果需要接管自身的日志系统，只需要在管道中使用 <code>UseSerilog</code> 即可：</p>
<div><pre><code>Host<span>.</span><span>CreateDefaultBuilder</span><span>(</span>args<span>)</span>
    <span>.</span><span>ConfigureWebHostDefaults</span><span>(</span>webBuilder <span>=></span>
    <span>{</span>
        webBuilder
            <span>// 将 Serilog 注入中间件，将 Serilog 与 ILogger 绑定，其配置才会生效</span>
            <span>.</span><span>UseSerilog</span><span>(</span><span>)</span>
            <span>.</span><span><span>UseStartup</span><span><span>&lt;</span>Startup<span>></span></span></span><span>(</span><span>)</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>此时，在其他地方直接使用 .NET 提供好的 <code>_logger</code> 实例即可，十分方便。</p>
<div><pre><code><span>[</span><span><span>ApiController</span></span><span>]</span>
<span>[</span><span><span>Route</span><span><span>(</span><span>"[controller]"</span><span>)</span></span></span><span>]</span>
<span>public</span> <span>class</span> <span>WeatherForecastController</span> <span>:</span> <span><span>ControllerBase</span></span>
<span>{</span>
    <span>private</span> <span>readonly</span> <span>ILogger<span>&lt;</span>WeatherForecastController<span>></span></span> _logger<span>;</span>

    <span>public</span> <span>WeatherForecastController</span><span>(</span><span>ILogger<span>&lt;</span>WeatherForecastController<span>></span></span> logger<span>)</span>
    <span>{</span>
        _logger <span>=</span> logger<span>;</span>
    <span>}</span>

    <span>[</span><span><span>HttpGet</span></span><span>]</span>
    <span>public</span> <span>IEnumerable<span>&lt;</span>WeatherForecast<span>></span></span> <span>Get</span><span>(</span><span>)</span>
    <span>{</span>
        _logger<span>.</span><span>LogError</span><span>(</span><span>"This is a Error from controller"</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>概述</title>
      <link>https://docs.jeremyjone.com/roadmap/dotnetcore/mapper/</link>
      <guid>https://docs.jeremyjone.com/roadmap/dotnetcore/mapper/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">概述</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="概述"> 概述</h1>
<p>对象映射是将一个对象通过一定规则转换成另一个对象的方法。它非常有用，通过对象映射可以将底层原始数据对象隐藏，转成面向用户的对象，从而实现数据对象的分层管理。</p>
<p>举个例子，一个用户对象，它有如下属性：</p>
<div><pre><code><span>public</span> <span>class</span> <span>User</span>
<span>{</span>
    <span>public</span> <span><span>int</span></span> Id <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span><span>string</span></span> Username <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span><span>string</span></span> Nickname <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span><span>string</span></span> Password <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span><span>string</span></span> Email <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>现在我们需要查询用户基本信息，当我们没有对象映射的时候，每次都需要将整个对象内容返回，但是其中包含了敏感信息，所以我们需要新建一个对象，并重新赋值，比如：</p>
<div><pre><code><span>public</span> <span>class</span> <span>UserDto</span>
<span>{</span>
    <span>public</span> <span><span>int</span></span> Id <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span><span>string</span></span> Username <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span><span>string</span></span> Nickname <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>

<span><span>var</span></span> userDto <span>=</span> <span>new</span> <span>UserDto</span>
<span>{</span>
    Id <span>=</span> user<span>.</span>Id<span>,</span>
    Username <span>=</span> user<span>.</span>Username<span>,</span>
    Nickname <span>=</span> user<span>.</span>Nickname
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><div><p>DTO 是什么</p>
<p>DTO：Data Transfer Object，数据传输对象。用于在不同层之间进行数据交互的对象。</p>
</div>
<p>这样的方式就是最对象映射。比如现在我们需要一个查询用户邮箱的对象，还要重新新建一个对象，然后使用时依次赋值：</p>
<div><pre><code><span>public</span> <span>class</span> <span>UserEmailDto</span>
<span>{</span>
    <span>public</span> <span><span>string</span></span> Username <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span><span>string</span></span> Email <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>

<span><span>var</span></span> userEmailDto <span>=</span> <span>new</span> <span>UserEmailDto</span>
<span>{</span>
    Username <span>=</span> user<span>.</span>Username<span>,</span>
    Email <span>=</span> user<span>.</span>Email
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>这样就映射了一个新的查询用户邮箱的对象。</p>
<p>这样做，一次两次还可以，但一个项目有很多对象，每个对象可能会有不同使用情况，于是就有了更多的 <code>DTO</code>，每一个都这样做的话就很麻烦，但是很必要，因为它提供了一种对象分离的思路。</p>
<p>为了避免这样大量重复的工作，所以就有了对象映射器这种工具。它的好处在于避免了大量重复工作，让我们只需要关注当前对象即可，做到了一次配置，终身受益。</p>
]]></content:encoded>
    </item>
    <item>
      <title>RabbitMQ 的使用</title>
      <link>https://docs.jeremyjone.com/roadmap/dotnetcore/microservice/mq/RabbitMQ/</link>
      <guid>https://docs.jeremyjone.com/roadmap/dotnetcore/microservice/mq/RabbitMQ/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">RabbitMQ 的使用</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="rabbitmq-的使用"> RabbitMQ 的使用</h1>
<p><code>RabbitMQ</code> 是使用 <code>Erlang</code> 编写的开源消息队列，支持多种协议，非常适合企业及开发。</p>
<h2 id="安装"> 安装</h2>
<p><code>RabbitMQ</code> 使用 <code>Erlang</code> 编写，所以在安装之前需要首先安装 <code>Erlang</code> 环境。</p>
<p><code>Erlang</code>： <a href="https://www.erlang.org/downloads" target="_blank" rel="noopener noreferrer">下载地址</a>
<code>RabbitMQ</code>：<a href="https://github.com/rabbitmq/rabbitmq-server/releases" target="_blank" rel="noopener noreferrer">下载地址</a></p>
<p>全部下载最新稳定版即可。</p>
<p>下载并安装之后，需要配置管理界面。通过命令直接启用即可：</p>
<div><pre><code>rabbitmq-plugins ebable rabbitmq_management
</code></pre>
<div><span>1</span><br></div></div><p>如果没有配置环境变量，可以进入安装目录下的 <code>/sbin</code> 文件夹中执行，如图：</p>
<img :src="$withBase('/assets/roadmap/dotnet/mq/rabbitmq_management.png')" alt="配置 RabbitMQ 界面">
<div><p>建议</p>
<p>建议将安装路径下的 <code>/sbin</code> 路径添加到环境变量中，以便后续使用命令。</p>
</div>
<div><p>提示</p>
<p><code>RabbitMQ</code> 默认监听端口为 <code>5672</code>。而管理后台的端口则是 <code>15672</code>，所以启用管理之后，可以通过浏览器访问：<code>http://localhost:15672/</code></p>
</div>
<h2 id="配置"> 配置</h2>
<h3 id="添加用户"> 添加用户</h3>
<p>通过命令可以快速管理用户：</p>
<div><pre><code><span># 查看用户列表</span>
rabbitmqctl list_users

<span># 添加用户</span>
<span># rabbitmqctl add_user &lt;username> &lt;password></span>
rabbitmqctl add_user admin qaz123

<span># 设置权限</span>
<span># rabbitmqctl set_permissions [-p &lt;vhost>] &lt;username> &lt;configuration> &lt;write> &lt;read></span>
rabbitmqctl set_permissions -p <span>"/"</span> admin <span>".*"</span> <span>".*"</span> <span>".*"</span>

<span># 设置用户标签</span>
rabbitmqctl set_user_tags admin administrator

<span># 通常删除默认账户</span>
rabbitmqctl delete_user guest

<span># 管理账户</span>
<span># 1、修改密码</span>
rabbitmqctl change_password <span>&lt;</span>username<span>></span> <span>&lt;</span>newpassword<span>></span>

<span># 2、清除密码（无法使用密码登录）</span>
rabbitmqctl clear_password <span>&lt;</span>username<span>></span>

<span># 3、清除用户权限（拒绝指定用户访问指定主机）</span>
rabbitmqctl clear_permissions <span>[</span>-p <span>&lt;</span>vhost<span>></span><span>]</span> <span>&lt;</span>username<span>></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><div><p>提示</p>
<p>更多命令行内容，可以参考<a href="https://www.rabbitmq.com/man/rabbitmqctl.8.html#" target="_blank" rel="noopener noreferrer">官方文档</a>。</p>
</div>
<p>经过上面的命令，可以在管理界面看到发生了变化。当然，如果你已经通过 <code>guest</code> 登录且已经在命令行中将其删除，界面会提示你登录失败并尝试让你重新登录。</p>
<img :src="$withBase('/assets/roadmap/dotnet/mq/rabbitmq_users.png')" alt="用户列表">
<h2 id="使用"> 使用</h2>
<p>针对不同的使用方式，<a href="https://www.rabbitmq.com/getstarted.html" target="_blank" rel="noopener noreferrer">官方文档</a> 给出了不错的示例。下面介绍基本的使用方式。</p>
<div><p>示例代码</p>
<p>具体代码可以看 <a href="https://github.com/jeremyjone/dotnet-study-road/tree/master/MicroService/MQ/RabbitMQ" target="_blank" rel="noopener noreferrer">示例代码</a></p>
</div>
<h3 id="创建一个生产者"> 创建一个生产者</h3>
<p>创建一个控制台项目，并安装 <code>RabbitMQ.Client</code> 包。在主函数中直接创建即可：</p>
<div><pre><code><span>// 创建连接</span>
<span>using</span> <span><span>var</span></span> connection <span>=</span> RabbitMQFactory<span>.</span><span>Create</span><span>(</span><span>)</span><span>;</span>
<span>// 创建通道</span>
<span>using</span> <span><span>var</span></span> channel <span>=</span> connection<span>.</span><span>CreateModel</span><span>(</span><span>)</span><span>;</span>

<span>// 1、声明交换机</span>
channel<span>.</span><span>ExchangeDeclare</span><span>(</span><span>""</span><span>,</span> ExchangeType<span>.</span>Direct<span>,</span> <span>true</span><span>,</span> <span>false</span><span>,</span> <span>null</span><span>)</span><span>;</span>
<span>// 2、声明队列</span>
channel<span>.</span><span>QueueDeclare</span><span>(</span><span>"queue"</span><span>,</span> <span>false</span><span>,</span> <span>false</span><span>,</span> <span>false</span><span>,</span> <span>null</span><span>)</span><span>;</span>
<span>// 3、绑定</span>
channel<span>.</span><span>QueueBind</span><span>(</span><span>"queue"</span><span>,</span> <span>""</span><span>,</span> <span>"queue"</span><span>)</span><span>;</span>

<span>// 循环发送50个消息到 RabbitMQ</span>
<span>const</span> <span><span>string</span></span> message <span>=</span> <span>"Producer RabbitMQ Message"</span><span>;</span>
<span>for</span> <span>(</span><span><span>var</span></span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>50</span><span>;</span> i<span>++</span><span>)</span>
<span>{</span>
    <span><span>var</span></span> body <span>=</span> Encoding<span>.</span>UTF8<span>.</span><span>GetBytes</span><span>(</span><span><span>$"</span><span><span>{</span><span>message</span><span>}</span></span><span>-</span><span><span>{</span><span>i</span><span>}</span></span><span>"</span></span><span>)</span><span>;</span>
    <span>// 发送消息到队列</span>
    channel<span>.</span><span>BasicPublish</span><span>(</span><span>""</span><span>,</span> <span>"queue"</span><span>,</span> <span>null</span><span>,</span> body<span>)</span><span>;</span>
    Console<span>.</span><span>WriteLine</span><span>(</span><span><span>$"发布消息 </span><span><span>{</span><span>message</span><span>}</span></span><span>-</span><span><span>{</span><span>i</span><span>}</span></span><span> 到队列。"</span></span><span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p>如果你已经开启了 <code>RabbitMQ</code>，此时运行该生产者之后，消息会保存到消息队列中：</p>
<img :src="$withBase('/assets/roadmap/dotnet/mq/rabbitmq_queue_basic.png')" alt="消息保存">
<h3 id="创建一个消费者"> 创建一个消费者</h3>
<p>新创建一个控制台项目，同样安装 <code>RabbitMQ.Client</code> 包。在主函数中直接创建即可：</p>
<div><pre><code><span>// 创建连接</span>
<span>using</span> <span><span>var</span></span> connection <span>=</span> RabbitMQFactory<span>.</span><span>Create</span><span>(</span><span>)</span><span>;</span>
<span>// 创建通道</span>
<span>using</span> <span><span>var</span></span> channel <span>=</span> connection<span>.</span><span>CreateModel</span><span>(</span><span>)</span><span>;</span>

<span>// 声明队列</span>
channel<span>.</span><span>QueueDeclare</span><span>(</span><span>"queue"</span><span>,</span> <span>false</span><span>,</span> <span>false</span><span>,</span> <span>false</span><span>,</span> <span>null</span><span>)</span><span>;</span>

<span>// 创建基于事件的消费者</span>
<span><span>var</span></span> consumer <span>=</span> <span>new</span> <span>EventingBasicConsumer</span><span>(</span>channel<span>)</span><span>;</span>
consumer<span>.</span>Received <span>+=</span> <span>(</span>model<span>,</span> ea<span>)</span> <span>=></span>
<span>{</span>
    <span><span>var</span></span> message <span>=</span> Encoding<span>.</span>UTF8<span>.</span><span>GetString</span><span>(</span>ea<span>.</span>Body<span>.</span><span>ToArray</span><span>(</span><span>)</span><span>)</span><span>;</span>
    Console<span>.</span><span>WriteLine</span><span>(</span><span><span>$"收到消息：</span><span><span>{</span><span>message</span><span>}</span></span><span>"</span></span><span>)</span><span>;</span>
<span>}</span><span>;</span>
channel<span>.</span><span>BasicConsume</span><span>(</span><span>"queue"</span><span>,</span> <span>true</span><span>,</span> consumer<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>运行之后，可以消费所有队列中的数据：</p>
<img :src="$withBase('/assets/roadmap/dotnet/mq/rabbitmq_queue_consumer.png')" alt="消费队列">
<h3 id="消息持久化"> 消息持久化</h3>
<p>上面的内容，一旦 <code>RabbitMQ</code> 失效了，数据就会丢失。如何做到数据持久化呢，需要如下配置：</p>
<div><div><br><br><br><br><br><div>&nbsp;</div><div>&nbsp;</div><br><br><br><br><br><br><br><div>&nbsp;</div><br><br><br></div><pre><code><span>using</span> <span><span>var</span></span> connection <span>=</span> RabbitMQFactory<span>.</span><span>Create</span><span>(</span><span>)</span><span>;</span>
<span>using</span> <span><span>var</span></span> channel <span>=</span> connection<span>.</span><span>CreateModel</span><span>(</span><span>)</span><span>;</span>
channel<span>.</span><span>QueueDeclare</span><span>(</span><span>"queue"</span><span>,</span> <span>false</span><span>,</span> <span>false</span><span>,</span> <span>false</span><span>,</span> <span>null</span><span>)</span><span>;</span>

<span>// 消息持久化</span>
<span><span>var</span></span> properties <span>=</span> channel<span>.</span><span>CreateBasicProperties</span><span>(</span><span>)</span><span>;</span>
properties<span>.</span>Persistent <span>=</span> <span>true</span><span>;</span>

<span>// 循环发送50个消息到 RabbitMQ</span>
<span>const</span> <span><span>string</span></span> message <span>=</span> <span>"Producer RabbitMQ Message"</span><span>;</span>
<span>for</span> <span>(</span><span><span>var</span></span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>50</span><span>;</span> i<span>++</span><span>)</span>
<span>{</span>
    <span><span>var</span></span> body <span>=</span> Encoding<span>.</span>UTF8<span>.</span><span>GetBytes</span><span>(</span><span><span>$"</span><span><span>{</span><span>message</span><span>}</span></span><span>-</span><span><span>{</span><span>i</span><span>}</span></span><span>"</span></span><span>)</span><span>;</span>
    <span>// 发送消息到队列。将上面创建的属性添加进来</span>
    channel<span>.</span><span>BasicPublish</span><span>(</span><span>""</span><span>,</span> <span>"queue"</span><span>,</span> properties<span>,</span> body<span>)</span><span>;</span>
    Console<span>.</span><span>WriteLine</span><span>(</span><span><span>$"发布消息 </span><span><span>{</span><span>message</span><span>}</span></span><span>-</span><span><span>{</span><span>i</span><span>}</span></span><span> 到队列。"</span></span><span>)</span><span>;</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h3 id="继续"> 继续</h3>
<p>上面是一个最基本的使用方式。在 <a href="https://www.rabbitmq.com/getstarted.html" target="_blank" rel="noopener noreferrer">官方指导教程</a> 中，包含了包括上面方式的共 7 中模式，其中前 5 中是比较常用的，尤其是第 3、4、5，分别是：</p>
<ul>
<li>
<p>fanout 发布/订阅模式</p>
<blockquote>
<p>即：生产者发送一个消息无差别地到所有消息队列，所有消费者都可以通过消息队列获取该消息。</p>
</blockquote>
</li>
<li>
<p>direct 精准推送模式</p>
<blockquote>
<p>即：生产者指定队列的 <code>KEY</code> 值，精确推送到指定的队列中，所有可以读取该队列的消费者都可以获取该消息。</p>
</blockquote>
</li>
<li>
<p>topic 主题模式</p>
<blockquote>
<p>即：生产者可以根据一定规则指定队列的 <code>KEY</code> 值，模糊匹配队列并推送消息到队列中，所有可以读取该队列的消费者都可以获取该消息。</p>
</blockquote>
</li>
</ul>
<p>将基本代码贴出来，具体代码可以参照我的 <a href="https://github.com/jeremyjone/dotnet-study-road/tree/master/MicroService/MQ/RabbitMQ" target="_blank" rel="noopener noreferrer">文档配套代码库</a></p>
<h4 id="生产者"> 生产者</h4>
<div><pre><code><span>// 发布订阅模式</span>
<span>public</span> <span>static</span> <span><span>void</span></span> <span>Fanout</span><span>(</span><span>)</span>
<span>{</span>
    <span>const</span> <span><span>string</span></span> exchangeName <span>=</span> <span>"fanout_exchange"</span><span>;</span>
    <span>const</span> <span><span>string</span></span> queueName1 <span>=</span> <span>"fanout_queue1"</span><span>;</span>
    <span>const</span> <span><span>string</span></span> queueName2 <span>=</span> <span>"fanout_queue2"</span><span>;</span>
    <span>const</span> <span><span>string</span></span> queueName3 <span>=</span> <span>"fanout_queue3"</span><span>;</span>
    <span>using</span> <span><span>var</span></span> connection <span>=</span> RabbitMQFactory<span>.</span><span>Create</span><span>(</span><span>)</span><span>;</span>
    <span>using</span> <span><span>var</span></span> channel <span>=</span> connection<span>.</span><span>CreateModel</span><span>(</span><span>)</span><span>;</span>

    <span>// 声明交换机</span>
    channel<span>.</span><span>ExchangeDeclare</span><span>(</span>exchangeName<span>,</span> ExchangeType<span>.</span>Fanout<span>)</span><span>;</span>

    <span>// 声明3个队列</span>
    channel<span>.</span><span>QueueDeclare</span><span>(</span>queueName1<span>,</span> <span>false</span><span>,</span> <span>false</span><span>,</span> <span>false</span><span>,</span> <span>null</span><span>)</span><span>;</span>
    channel<span>.</span><span>QueueDeclare</span><span>(</span>queueName2<span>,</span> <span>false</span><span>,</span> <span>false</span><span>,</span> <span>false</span><span>,</span> <span>null</span><span>)</span><span>;</span>
    channel<span>.</span><span>QueueDeclare</span><span>(</span>queueName3<span>,</span> <span>false</span><span>,</span> <span>false</span><span>,</span> <span>false</span><span>,</span> <span>null</span><span>)</span><span>;</span>

    <span>// 将队列绑定到交换机。不写 routingKey，意味着消息将发送到所有队列</span>
    channel<span>.</span><span>QueueBind</span><span>(</span>queueName1<span>,</span> exchangeName<span>,</span> <span>""</span><span>)</span><span>;</span>
    channel<span>.</span><span>QueueBind</span><span>(</span>queueName2<span>,</span> exchangeName<span>,</span> <span>""</span><span>)</span><span>;</span>
    channel<span>.</span><span>QueueBind</span><span>(</span>queueName3<span>,</span> exchangeName<span>,</span> <span>""</span><span>)</span><span>;</span>

    <span>// 循环发送100个消息到 RabbitMQ</span>
    <span>const</span> <span><span>string</span></span> message <span>=</span> <span>"Producer RabbitMQ Message"</span><span>;</span>
    <span>for</span> <span>(</span><span><span>var</span></span> i <span>=</span> <span>1</span><span>;</span> i <span>&lt;=</span> <span>20</span><span>;</span> i<span>++</span><span>)</span>
    <span>{</span>
        <span><span>var</span></span> body <span>=</span> Encoding<span>.</span>UTF8<span>.</span><span>GetBytes</span><span>(</span><span><span>$"</span><span><span>{</span><span>message</span><span>}</span></span><span>-</span><span><span>{</span><span>i</span><span>}</span></span><span>"</span></span><span>)</span><span>;</span>
        <span>// 发送消息到交换机</span>
        channel<span>.</span><span>BasicPublish</span><span>(</span>exchangeName<span>,</span> <span>""</span><span>,</span> <span>null</span><span>,</span> body<span>)</span><span>;</span>
        Console<span>.</span><span>WriteLine</span><span>(</span><span><span>$"发布消息 </span><span><span>{</span><span>message</span><span>}</span></span><span>-</span><span><span>{</span><span>i</span><span>}</span></span><span> 到队列。"</span></span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>

<span>// 精准推送模式</span>
<span>public</span> <span>static</span> <span><span>void</span></span> <span>Direct</span><span>(</span><span>)</span>
<span>{</span>
    <span>const</span> <span><span>string</span></span> exchangeName <span>=</span> <span>"direct_exchange"</span><span>;</span>
    <span>const</span> <span><span>string</span></span> queueName1 <span>=</span> <span>"direct_queue1"</span><span>;</span>
    <span>const</span> <span><span>string</span></span> queueName2 <span>=</span> <span>"direct_queue2"</span><span>;</span>
    <span>const</span> <span><span>string</span></span> queueName3 <span>=</span> <span>"direct_queue3"</span><span>;</span>
    <span>using</span> <span><span>var</span></span> connection <span>=</span> RabbitMQFactory<span>.</span><span>Create</span><span>(</span><span>)</span><span>;</span>
    <span>using</span> <span><span>var</span></span> channel <span>=</span> connection<span>.</span><span>CreateModel</span><span>(</span><span>)</span><span>;</span>

    <span>// 声明交换机</span>
    channel<span>.</span><span>ExchangeDeclare</span><span>(</span>exchangeName<span>,</span> ExchangeType<span>.</span>Direct<span>)</span><span>;</span>

    <span>// 声明3个队列</span>
    channel<span>.</span><span>QueueDeclare</span><span>(</span>queueName1<span>,</span> <span>false</span><span>,</span> <span>false</span><span>,</span> <span>false</span><span>,</span> <span>null</span><span>)</span><span>;</span>
    channel<span>.</span><span>QueueDeclare</span><span>(</span>queueName2<span>,</span> <span>false</span><span>,</span> <span>false</span><span>,</span> <span>false</span><span>,</span> <span>null</span><span>)</span><span>;</span>
    channel<span>.</span><span>QueueDeclare</span><span>(</span>queueName3<span>,</span> <span>false</span><span>,</span> <span>false</span><span>,</span> <span>false</span><span>,</span> <span>null</span><span>)</span><span>;</span>

    <span>// 将队列绑定到交换机。为了达到直发效果，需要填写 routingKey，会按照该 Key 值匹配发送</span>
    channel<span>.</span><span>QueueBind</span><span>(</span>queueName1<span>,</span> exchangeName<span>,</span> <span>"c"</span><span>)</span><span>;</span>
    channel<span>.</span><span>QueueBind</span><span>(</span>queueName2<span>,</span> exchangeName<span>,</span> <span>"cpp"</span><span>)</span><span>;</span>
    channel<span>.</span><span>QueueBind</span><span>(</span>queueName3<span>,</span> exchangeName<span>,</span> <span>"csharp"</span><span>)</span><span>;</span>

    <span>// 循环发送100个消息到 RabbitMQ</span>
    <span>const</span> <span><span>string</span></span> message <span>=</span> <span>"Producer RabbitMQ Message"</span><span>;</span>
    <span>for</span> <span>(</span><span><span>var</span></span> i <span>=</span> <span>1</span><span>;</span> i <span>&lt;=</span> <span>20</span><span>;</span> i<span>++</span><span>)</span>
    <span>{</span>
        <span><span>var</span></span> body <span>=</span> Encoding<span>.</span>UTF8<span>.</span><span>GetBytes</span><span>(</span><span><span>$"</span><span><span>{</span><span>message</span><span>}</span></span><span>-</span><span><span>{</span><span>i</span><span>}</span></span><span>"</span></span><span>)</span><span>;</span>

        <span><span>var</span></span> routingKeys <span>=</span> <span>new</span><span>[</span><span>]</span> <span>{</span><span>"c"</span><span>,</span> <span>"cpp"</span><span>,</span> <span>"csharp"</span><span>}</span><span>;</span>
        <span>// 发送消息到交换机</span>
        channel<span>.</span><span>BasicPublish</span><span>(</span>exchangeName<span>,</span> routingKeys<span>[</span>i <span>%</span> <span>3</span><span>]</span><span>,</span> <span>null</span><span>,</span> body<span>)</span><span>;</span>
        Console<span>.</span><span>WriteLine</span><span>(</span><span><span>$"发布消息 </span><span><span>{</span><span>message</span><span>}</span></span><span>-</span><span><span>{</span><span>i</span><span>}</span></span><span> 到队列。"</span></span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>

<span>// 主题模式</span>
<span>public</span> <span>static</span> <span><span>void</span></span> <span>Topic</span><span>(</span><span>)</span>
<span>{</span>
    <span>const</span> <span><span>string</span></span> exchangeName <span>=</span> <span>"topic_exchange"</span><span>;</span>
    <span>const</span> <span><span>string</span></span> queueName1 <span>=</span> <span>"topic_queue1"</span><span>;</span>
    <span>const</span> <span><span>string</span></span> queueName2 <span>=</span> <span>"topic_queue2"</span><span>;</span>
    <span>const</span> <span><span>string</span></span> queueName3 <span>=</span> <span>"topic_queue3"</span><span>;</span>
    <span>using</span> <span><span>var</span></span> connection <span>=</span> RabbitMQFactory<span>.</span><span>Create</span><span>(</span><span>)</span><span>;</span>
    <span>using</span> <span><span>var</span></span> channel <span>=</span> connection<span>.</span><span>CreateModel</span><span>(</span><span>)</span><span>;</span>

    <span>// 声明交换机</span>
    channel<span>.</span><span>ExchangeDeclare</span><span>(</span>exchangeName<span>,</span> ExchangeType<span>.</span>Topic<span>)</span><span>;</span>

    <span>// 声明3个队列</span>
    channel<span>.</span><span>QueueDeclare</span><span>(</span>queueName1<span>,</span> <span>false</span><span>,</span> <span>false</span><span>,</span> <span>false</span><span>,</span> <span>null</span><span>)</span><span>;</span>
    channel<span>.</span><span>QueueDeclare</span><span>(</span>queueName2<span>,</span> <span>false</span><span>,</span> <span>false</span><span>,</span> <span>false</span><span>,</span> <span>null</span><span>)</span><span>;</span>
    channel<span>.</span><span>QueueDeclare</span><span>(</span>queueName3<span>,</span> <span>false</span><span>,</span> <span>false</span><span>,</span> <span>false</span><span>,</span> <span>null</span><span>)</span><span>;</span>

    <span>// 将队列绑定到交换机。Topic 模式下，绑定时可以填写模糊符号 "*" / "#"</span>
    channel<span>.</span><span>QueueBind</span><span>(</span>queueName1<span>,</span> exchangeName<span>,</span> <span>"data.*"</span><span>)</span><span>;</span>
    channel<span>.</span><span>QueueBind</span><span>(</span>queueName2<span>,</span> exchangeName<span>,</span> <span>"data.#"</span><span>)</span><span>;</span>
    channel<span>.</span><span>QueueBind</span><span>(</span>queueName3<span>,</span> exchangeName<span>,</span> <span>"data.update"</span><span>)</span><span>;</span>

    <span>// 循环发送100个消息到 RabbitMQ</span>
    <span>const</span> <span><span>string</span></span> message <span>=</span> <span>"Producer RabbitMQ Message"</span><span>;</span>


    <span>foreach</span> <span>(</span><span><span>var</span></span> key <span>in</span> <span>new</span> <span>[</span><span>]</span> <span>{</span><span>"data.update"</span><span>,</span> <span>"data.insert"</span><span>,</span> <span>"data.insert.one"</span><span>}</span><span>)</span>
    <span>{</span>
        <span>for</span> <span>(</span><span><span>var</span></span> i <span>=</span> <span>1</span><span>;</span> i <span>&lt;=</span> <span>10</span><span>;</span> i<span>++</span><span>)</span>
        <span>{</span>
            <span><span>var</span></span> body <span>=</span> Encoding<span>.</span>UTF8<span>.</span><span>GetBytes</span><span>(</span><span><span>$"</span><span><span>{</span><span>message</span><span>}</span></span><span>-</span><span><span>{</span><span>i</span><span>}</span></span><span>"</span></span><span>)</span><span>;</span>

            <span>// 发送消息到交换机</span>
            channel<span>.</span><span>BasicPublish</span><span>(</span>exchangeName<span>,</span> key<span>,</span> <span>null</span><span>,</span> body<span>)</span><span>;</span>
            Console<span>.</span><span>WriteLine</span><span>(</span><span><span>$"发布消息 </span><span><span>{</span><span>message</span><span>}</span></span><span>-</span><span><span>{</span><span>i</span><span>}</span></span><span> 到队列，Key 为 </span><span><span>{</span><span>key</span><span>}</span></span><span>。"</span></span><span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br></div></div><h4 id="消费者"> 消费者</h4>
<div><pre><code><span>// 发布订阅模式</span>
<span>public</span> <span>static</span> <span><span>void</span></span> <span>Fanout</span><span>(</span><span>)</span>
<span>{</span>
    <span>// 创建连接</span>
    <span>using</span> <span><span>var</span></span> connection <span>=</span> RabbitMQFactory<span>.</span><span>Create</span><span>(</span><span>)</span><span>;</span>
    <span>// 创建通道</span>
    <span>using</span> <span><span>var</span></span> channel <span>=</span> connection<span>.</span><span>CreateModel</span><span>(</span><span>)</span><span>;</span>

    <span>const</span> <span><span>string</span></span> exchangeName <span>=</span> <span>"fanout_exchange"</span><span>;</span>
    <span>const</span> <span><span>string</span></span> queueName2 <span>=</span> <span>"fanout_queue2"</span><span>;</span>

    <span>// 声明交换机</span>
    channel<span>.</span><span>ExchangeDeclare</span><span>(</span>exchangeName<span>,</span> ExchangeType<span>.</span>Fanout<span>)</span><span>;</span>

    <span>// 声明队列</span>
    channel<span>.</span><span>QueueDeclare</span><span>(</span>queueName2<span>,</span> <span>false</span><span>,</span> <span>false</span><span>,</span> <span>false</span><span>,</span> <span>null</span><span>)</span><span>;</span>

    <span>// 将队列绑定到交换机</span>
    channel<span>.</span><span>QueueBind</span><span>(</span>queueName2<span>,</span> exchangeName<span>,</span> <span>""</span><span>)</span><span>;</span>

    <span>// 创建基于事件的消费者</span>
    <span><span>var</span></span> consumer <span>=</span> <span>new</span> <span>EventingBasicConsumer</span><span>(</span>channel<span>)</span><span>;</span>

    <span>// 设置 prefetchCount</span>
    channel<span>.</span><span>BasicQos</span><span>(</span><span>0</span><span>,</span> <span>1</span><span>,</span> <span>false</span><span>)</span><span>;</span>
    consumer<span>.</span>Received <span>+=</span> <span>(</span>model<span>,</span> ea<span>)</span> <span>=></span>
    <span>{</span>
        <span><span>var</span></span> message <span>=</span> Encoding<span>.</span>UTF8<span>.</span><span>GetString</span><span>(</span>ea<span>.</span>Body<span>.</span><span>ToArray</span><span>(</span><span>)</span><span>)</span><span>;</span>
        Console<span>.</span><span>WriteLine</span><span>(</span><span><span>$"收到消息：</span><span><span>{</span><span>message</span><span>}</span></span><span>"</span></span><span>)</span><span>;</span>
    <span>}</span><span>;</span>

    <span>// 消费第二个队列中的消息</span>
    channel<span>.</span><span>BasicConsume</span><span>(</span>queueName2<span>,</span> <span>true</span><span>,</span> consumer<span>)</span><span>;</span>
<span>}</span>

<span>// 精准推送模式</span>
<span>public</span> <span>static</span> <span><span>void</span></span> <span>Direct</span><span>(</span><span>)</span>
<span>{</span>
    <span>// 创建连接</span>
    <span>using</span> <span><span>var</span></span> connection <span>=</span> RabbitMQFactory<span>.</span><span>Create</span><span>(</span><span>)</span><span>;</span>
    <span>// 创建通道</span>
    <span>using</span> <span><span>var</span></span> channel <span>=</span> connection<span>.</span><span>CreateModel</span><span>(</span><span>)</span><span>;</span>

    <span>const</span> <span><span>string</span></span> exchangeName <span>=</span> <span>"direct_exchange"</span><span>;</span>
    <span>const</span> <span><span>string</span></span> queueName1 <span>=</span> <span>"direct_queue1"</span><span>;</span>

    <span>// 声明交换机</span>
    channel<span>.</span><span>ExchangeDeclare</span><span>(</span>exchangeName<span>,</span> ExchangeType<span>.</span>Direct<span>)</span><span>;</span>

    <span>// 声明队列</span>
    channel<span>.</span><span>QueueDeclare</span><span>(</span>queueName1<span>,</span> <span>false</span><span>,</span> <span>false</span><span>,</span> <span>false</span><span>,</span> <span>null</span><span>)</span><span>;</span>

    <span>// 将队列绑定到交换机</span>
    channel<span>.</span><span>QueueBind</span><span>(</span>queueName1<span>,</span> exchangeName<span>,</span> <span>"c"</span><span>)</span><span>;</span>

    <span>// 创建基于事件的消费者</span>
    <span><span>var</span></span> consumer <span>=</span> <span>new</span> <span>EventingBasicConsumer</span><span>(</span>channel<span>)</span><span>;</span>
    consumer<span>.</span>Received <span>+=</span> <span>(</span>model<span>,</span> ea<span>)</span> <span>=></span>
    <span>{</span>
        <span><span>var</span></span> message <span>=</span> Encoding<span>.</span>UTF8<span>.</span><span>GetString</span><span>(</span>ea<span>.</span>Body<span>.</span><span>ToArray</span><span>(</span><span>)</span><span>)</span><span>;</span>
        Console<span>.</span><span>WriteLine</span><span>(</span><span><span>$"收到消息：</span><span><span>{</span><span>message</span><span>}</span></span><span>，key：</span><span><span>{</span><span>ea<span>.</span>RoutingKey</span><span>}</span></span><span>"</span></span><span>)</span><span>;</span>
    <span>}</span><span>;</span>

    <span>// 消费第一个队列中的消息</span>
    channel<span>.</span><span>BasicConsume</span><span>(</span>queueName1<span>,</span> <span>true</span><span>,</span> consumer<span>)</span><span>;</span>
<span>}</span>

<span>// 主题模式</span>
<span>public</span> <span>static</span> <span><span>void</span></span> <span>Topic</span><span>(</span><span>)</span>
<span>{</span>
    <span>// 创建连接</span>
    <span>using</span> <span><span>var</span></span> connection <span>=</span> RabbitMQFactory<span>.</span><span>Create</span><span>(</span><span>)</span><span>;</span>
    <span>// 创建通道</span>
    <span>using</span> <span><span>var</span></span> channel <span>=</span> connection<span>.</span><span>CreateModel</span><span>(</span><span>)</span><span>;</span>

    <span>const</span> <span><span>string</span></span> exchangeName <span>=</span> <span>"topic_exchange"</span><span>;</span>
    <span>const</span> <span><span>string</span></span> queueName1 <span>=</span> <span>"topic_queue1"</span><span>;</span>

    <span>// 声明交换机</span>
    channel<span>.</span><span>ExchangeDeclare</span><span>(</span>exchangeName<span>,</span> ExchangeType<span>.</span>Topic<span>)</span><span>;</span>

    <span>// 声明队列</span>
    channel<span>.</span><span>QueueDeclare</span><span>(</span>queueName1<span>,</span> <span>false</span><span>,</span> <span>false</span><span>,</span> <span>false</span><span>,</span> <span>null</span><span>)</span><span>;</span>

    <span>// 将队列绑定到交换机</span>
    channel<span>.</span><span>QueueBind</span><span>(</span>queueName1<span>,</span> exchangeName<span>,</span> <span>"data.delete"</span><span>)</span><span>;</span>

    <span>// 创建基于事件的消费者</span>
    <span><span>var</span></span> consumer <span>=</span> <span>new</span> <span>EventingBasicConsumer</span><span>(</span>channel<span>)</span><span>;</span>
    consumer<span>.</span>Received <span>+=</span> <span>(</span>model<span>,</span> ea<span>)</span> <span>=></span>
    <span>{</span>
        <span><span>var</span></span> message <span>=</span> Encoding<span>.</span>UTF8<span>.</span><span>GetString</span><span>(</span>ea<span>.</span>Body<span>.</span><span>ToArray</span><span>(</span><span>)</span><span>)</span><span>;</span>
        Console<span>.</span><span>WriteLine</span><span>(</span><span><span>$"收到消息：</span><span><span>{</span><span>message</span><span>}</span></span><span>，key：</span><span><span>{</span><span>ea<span>.</span>RoutingKey</span><span>}</span></span><span>"</span></span><span>)</span><span>;</span>
    <span>}</span><span>;</span>

    <span>// 消费第一个队列中的消息</span>
    channel<span>.</span><span>BasicConsume</span><span>(</span>queueName1<span>,</span> <span>true</span><span>,</span> consumer<span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>AutoMapper</title>
      <link>https://docs.jeremyjone.com/roadmap/dotnetcore/mapper/automapper/</link>
      <guid>https://docs.jeremyjone.com/roadmap/dotnetcore/mapper/automapper/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">AutoMapper</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="automapper"> AutoMapper</h1>
<p>正如前文说的那样，对象映射就是将一个对象中的属性按照一定规则映射到另一个对象中。这个操作是枯燥重复的，所以就有了 <code>AutoMapper</code> 这样的对象映射器。</p>
<h2 id="映射规则"> 映射规则</h2>
<ul>
<li>目标对象属性必须匹配源对象的属性，除非你对一个新属性进行了自定义</li>
<li>在使用对象映射前，必须先配置映射关系</li>
<li>映射关系应该是唯一的</li>
<li>映射关系的配置顺序是无序的，因为它在初始化阶段就已经完成了所有的映射</li>
</ul>
<p>对于目标类型的任何属性，如果源类型中不存在该属性，则执行以下查找顺序：</p>
<ul>
<li>查找源类型上的方法</li>
<li>查找源类型上带有 <code>Get</code> 前缀的方法（）</li>
<li>将目标成员名称拆分为单个单词（按照 PascalCase 规则）后尝试按复杂类型深度查找（）</li>
<li>全不匹配，抛出错误</li>
</ul>
<h2 id="安装"> 安装</h2>
<p>在 <code>NuGet包管理器</code> 中搜索 <code>AutoMapper</code>，直接安装。</p>
<p>或者通过命令：</p>
<div><pre><code>PM<span>></span> Install-Package AutoMapper
</code></pre>
<div><span>1</span><br></div></div><h2 id="基本使用"> 基本使用</h2>
<p>根据概述中的例子，做一个最基本的使用。</p>
<h3 id="基本的配置方式"> 基本的配置方式</h3>
<div><p>示例代码</p>
<p>完整代码可以看 <a href="https://github.com/jeremyjone/dotnet-study-road/tree/master/ObjectMapper/ObjectMapper.Basic" target="_blank" rel="noopener noreferrer">示例代码</a></p>
</div>
<p>首先创建用户模型 <code>User.cs</code>，然后创建用户信息模型 <code>UserDto.cs</code>。</p>
<div><pre><code><span>// User.cs</span>
<span>public</span> <span>class</span> <span>User</span>
<span>{</span>
    <span>public</span> <span><span>int</span></span> Id <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span><span>string</span></span> Username <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span><span>string</span></span> Nickname <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span><span>string</span></span> Password <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span><span>string</span></span> Email <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>

<span>// UserDto.cs</span>
<span>public</span> <span>class</span> <span>UserDto</span>
<span>{</span>
    <span>public</span> <span><span>int</span></span> Id <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span><span>string</span></span> Username <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span><span>string</span></span> Nickname <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>在主函数中创建映射规则：</p>
<div><pre><code><span><span>var</span></span> config <span>=</span> <span>new</span> <span>MapperConfiguration</span><span>(</span>cfg <span>=></span> cfg<span>.</span><span><span>CreateMap</span><span><span>&lt;</span>User<span>,</span> UserDto<span>></span></span></span><span>(</span><span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><p>这样，就配置好了通过 <code>User</code> 对象得到一个 <code>UserDto</code> 对象的规则。</p>
<p>验证一下：</p>
<div><pre><code>config<span>.</span><span>AssertConfigurationIsValid</span><span>(</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><p>可以通过测试。</p>
<h3 id="配置多个规则"> 配置多个规则</h3>
<p>在配置中，可以配置多个规则，比如：</p>
<div><pre><code><span><span>var</span></span> config1 <span>=</span> <span>new</span> <span>MapperConfiguration</span><span>(</span>cfg <span>=></span>
<span>{</span>
    cfg<span>.</span><span><span>CreateMap</span><span><span>&lt;</span>User<span>,</span> UserDto<span>></span></span></span><span>(</span><span>)</span><span>;</span>
    cfg<span>.</span><span><span>CreateMap</span><span><span>&lt;</span>User<span>,</span> UserEmailDto<span>></span></span></span><span>(</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>然后就可以使用这两个映射规则了。</p>
<h3 id="无效的映射"> 无效的映射</h3>
<p>为了体验映射规则，创建一个具有新属性的对象 <code>ErrorUserDto.cs</code>：</p>
<div><pre><code><span>public</span> <span>class</span> <span>ErrorUserDto</span>
<span>{</span>
    <span>public</span> <span><span>int</span></span> Id <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span><span>string</span></span> Username <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span><span>string</span></span> Nickname <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>

    <span>/// &lt;summary></span>
    <span>/// 源数据中没有该字段</span>
    <span>/// &lt;/summary></span>
    <span>public</span> <span><span>string</span></span> ErrorAttr <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>在主函数中创建一个新规则并验证：</p>
<div><pre><code><span><span>var</span></span> config2 <span>=</span> <span>new</span> <span>MapperConfiguration</span><span>(</span>cfg <span>=></span> cfg<span>.</span><span><span>CreateMap</span><span><span>&lt;</span>User<span>,</span> ErrorUserDto<span>></span></span></span><span>(</span><span>)</span><span>)</span><span>;</span>
config2<span>.</span><span>AssertConfigurationIsValid</span><span>(</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>此时运行程序会在验证行报错，说明配置无法正常映射，此时就需要自定义配置。</p>
<h3 id="基本的使用方式"> 基本的使用方式</h3>
<p>新建一个 <code>User</code> 对象实例，然后通过映射创建一个 <code>UserDto</code> 对象实例。</p>
<div><pre><code><span><span>var</span></span> user <span>=</span> <span>new</span> <span>User</span>
<span>{</span>
    Id <span>=</span> <span>1</span><span>,</span>
    Username <span>=</span> <span>"jeremyjone"</span><span>,</span>
    Nickname <span>=</span> <span>"Jeremy Jone"</span><span>,</span>
    Email <span>=</span> <span>"jeremyjone@qq.com"</span><span>,</span>
    Password <span>=</span> <span>"123456"</span>
<span>}</span><span>;</span>

<span><span>var</span></span> mapper <span>=</span> <span>new</span> <span>Mapper</span><span>(</span>config1<span>)</span><span>;</span>
<span><span>var</span></span> userDto <span>=</span> mapper<span>.</span><span><span>Map</span><span><span>&lt;</span>UserDto<span>></span></span></span><span>(</span>user<span>)</span><span>;</span>

Console<span>.</span><span>WriteLine</span><span>(</span><span><span>$"</span><span><span>{</span><span>userDto<span>.</span>Username</span><span>}</span></span><span>, </span><span><span>{</span><span>userDto<span>.</span>Nickname</span><span>}</span></span><span>"</span></span><span>)</span><span>;</span> <span>// jeremyjone, Jeremy Jone</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>可以得到对应的内容。</p>
<h2 id="配置"> 配置</h2>
<p>所有配置都是在 <code>MapperConfiguration</code> 实例中的构造函数中初始化并配置的。</p>
<p>通过 <code>CreateMap&lt;Src, Dest&gt;</code> 可以得到一个最基本的映射配置，它的：</p>
<ul>
<li><strong>左侧类型</strong> 是源类型</li>
<li><strong>右侧类型</strong> 是目标类型</li>
</ul>
<p>基本上后续所有配置都在这里面针对属性字段进行操作。</p>
<h3 id="使用配置文件"> 使用配置文件</h3>
<p>当配置较多时，将配置按照类别拆分为多个文件是一种高效的方法。</p>
<p>在文件中创建一个映射配置类，其需要继承自 <code>AutoMapper</code> 提供的基础配置类 <code>Profile</code>，然后将配置内容放在构造函数中。</p>
<p>现在我们将上面的配置移动到配置文件中。新建一个 <code>UserProfile.cs</code> 文件：</p>
<div><pre><code><span>// UserProfile.cs</span>
<span>public</span> <span>class</span> <span>UserProfile</span><span>:</span><span><span>Profile</span></span>
<span>{</span>
    <span>public</span> <span>UserProfile</span><span>(</span><span>)</span>
    <span>{</span>
        <span><span>CreateMap</span><span><span>&lt;</span>User<span>,</span> UserDto<span>></span></span></span><span>(</span><span>)</span><span>;</span>
        <span><span>CreateMap</span><span><span>&lt;</span>User<span>,</span> UserEmailDto<span>></span></span></span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>现在就不需要在 <code>MapperConfiguration</code> 中使用配置项，而是使用配置文件即可：</p>
<div><pre><code><span><span>var</span></span> config3 <span>=</span> <span>new</span> <span>MapperConfiguration</span><span>(</span>cfg <span>=></span> cfg<span>.</span><span><span>AddProfile</span><span><span>&lt;</span>UserProfile<span>></span></span></span><span>(</span><span>)</span><span>)</span><span>;</span>
<span>// or</span>
<span><span>var</span></span> config3 <span>=</span> <span>new</span> <span>MapperConfiguration</span><span>(</span>cfg <span>=></span> cfg<span>.</span><span>AddProfile</span><span>(</span><span>new</span> <span>UserProfile</span><span>(</span><span>)</span><span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>还是使用上面的示例方式进行测试：</p>
<div><pre><code><span>// config.CreateMapper 与 new Mapper(config) 等效</span>
<span><span>var</span></span> mapper3 <span>=</span> config3<span>.</span><span>CreateMapper</span><span>(</span><span>)</span><span>;</span>
<span><span>var</span></span> userDto3 <span>=</span> mapper3<span>.</span><span><span>Map</span><span><span>&lt;</span>UserDto<span>></span></span></span><span>(</span>user<span>)</span><span>;</span>

Console<span>.</span><span>WriteLine</span><span>(</span><span><span>$"</span><span><span>{</span><span>userDto3<span>.</span>Username</span><span>}</span></span><span>, </span><span><span>{</span><span>userDto3<span>.</span>Nickname</span><span>}</span></span><span>"</span></span><span>)</span><span>;</span> <span>// jeremyjone, Jeremy Jone</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>可以得到同样的结果，说明配置已经成功。</p>
<h4 id="程序集自动扫描配置文件"> 程序集自动扫描配置文件</h4>
<p>很多时候我们不需要手动添加配置文件，让程序集自动扫描配置是更加简便的方式：</p>
<div><pre><code><span><span>var</span></span> config4 <span>=</span> <span>new</span> <span>MapperConfiguration</span><span>(</span>cfg <span>=></span> cfg<span>.</span><span>AddMaps</span><span>(</span><span>typeof</span><span>(</span><span>Program</span><span>)</span><span>)</span><span>)</span><span>;</span>
<span>// or 动态获取</span>
<span><span>var</span></span> config4 <span>=</span> <span>new</span> <span>MapperConfiguration</span><span>(</span>cfg <span>=></span> cfg<span>.</span><span>AddMaps</span><span>(</span><span>"ObjectMapper.Basic"</span><span>)</span><span>)</span><span>;</span>
<span>// or 数组形式</span>
<span><span>var</span></span> config4 <span>=</span> <span>new</span> <span>MapperConfiguration</span><span>(</span>cfg <span>=></span> cfg<span>.</span><span>AddMaps</span><span>(</span><span>new</span><span>[</span><span>]</span> <span>{</span><span>typeof</span><span>(</span><span>Program</span><span>)</span><span>}</span><span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>这样做的好处是，不需要再一个一个手动添加，程序会自动扫描所有配置文件，自动加载，进一步简化了配置操作。</p>
<h3 id="匹配属性可见性"> 匹配属性可见性</h3>
<p>默认情况下，<code>AutoMapper</code> 会尝试映射每个公共字段，可以通过配置修改：</p>
<div><pre><code><span><span>var</span></span> configuration <span>=</span> <span>new</span> <span>MapperConfiguration</span><span>(</span>cfg <span>=></span>
<span>{</span>
    <span>// 不应设任何字段</span>
    cfg<span>.</span>ShouldMapField <span>=</span> f <span>=></span> <span>false</span><span>;</span>

    <span>// 映射公有或私有字段</span>
    cfg<span>.</span>ShouldMapProperty <span>=</span> p <span>=></span>
        p<span>.</span>GetMethod <span>!=</span> <span>null</span> <span>&amp;&amp;</span> <span>(</span>p<span>.</span>GetMethod<span>.</span>IsPublic <span>||</span> p<span>.</span>GetMethod<span>.</span>IsPrivate<span>)</span><span>;</span>

    <span>// 映射公有或内部字段</span>
    cfg<span>.</span>ShouldMapProperty <span>=</span> p <span>=></span> p<span>.</span>GetMethod<span>.</span>IsPublic <span>||</span> p<span>.</span>GetMethod<span>.</span>IsAssembly<span>;</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h3 id="匹配属性名称"> 匹配属性名称</h3>
<p>因为 <code>AutoMapper</code> 的匹配规则中必须匹配属性名称。但很多时候源名称与目标名称不匹配，此时除了根据属性字段单独配置外，还可以通过指定名称规则来解决该问题。</p>
<h4 id="属性命名规则"> 属性命名规则</h4>
<p>配置允许自定义源名称与目标名称。它有四个属性：</p>
<ul>
<li>无（null，默认）</li>
<li>精准匹配</li>
<li>小写+下划线</li>
<li>帕斯卡首字母大写</li>
</ul>
<div><pre><code><span><span>var</span></span> configuration <span>=</span> <span>new</span> <span>MapperConfiguration</span><span>(</span>cfg <span>=></span> <span>{</span>
  <span>// cfg.SourceMemberNamingConvention = new ExactMatchNamingConvention();</span>
  cfg<span>.</span>SourceMemberNamingConvention <span>=</span> <span>new</span> <span>LowerUnderscoreNamingConvention</span><span>(</span><span>)</span><span>;</span>
  cfg<span>.</span>DestinationMemberNamingConvention <span>=</span> <span>new</span> <span>PascalCaseNamingConvention</span><span>(</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><div><p>默认与精确的区别</p>
<p>对于普通映射匹配，它们大致是一样的。当源属性具有一定深度且目标属性需要展平时，存在区别。详细内容参照 </p>
</div>
<p>该配置之后，相互映射的属性将会是：<code>property_name -&gt; PropertyName</code>。</p>
<h4 id="替换属性字符"> 替换属性字符</h4>
<p>在匹配过程中，还可以替换源属性中的字符以匹配目标属性：</p>
<div><pre><code><span>public</span> <span>class</span> <span>Source</span>
<span>{</span>
    <span>public</span> <span><span>int</span></span> Value <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span>int</span> Ävíator <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span><span>int</span></span> SubAirlinaFlight <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>
<span>public</span> <span>class</span> <span>Destination</span>
<span>{</span>
    <span>public</span> <span><span>int</span></span> Value <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span><span>int</span></span> Aviator <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span><span>int</span></span> SubAirlineFlight <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>

<span>// 创建匹配规则</span>
<span><span>var</span></span> configuration <span>=</span> <span>new</span> <span>MapperConfiguration</span><span>(</span>c <span>=></span>
<span>{</span>
    c<span>.</span><span>ReplaceMemberName</span><span>(</span><span>"Ä"</span><span>,</span> <span>"A"</span><span>)</span><span>;</span>
    c<span>.</span><span>ReplaceMemberName</span><span>(</span><span>"í"</span><span>,</span> <span>"i"</span><span>)</span><span>;</span>
    c<span>.</span><span>ReplaceMemberName</span><span>(</span><span>"Airlina"</span><span>,</span> <span>"Airline"</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><h4 id="识别属性名的前后缀"> 识别属性名的前后缀</h4>
<p>有时候因为源名称和目标名称之间会有前后缀的差别，此时可以通过配置前后缀来解决：</p>
<div><pre><code><span>public</span> <span>class</span> <span>Source</span> <span>{</span>
    <span>public</span> <span><span>int</span></span> srcValue <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span><span>int</span></span> srcValue2 <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>
<span>public</span> <span>class</span> <span>Destination</span> <span>{</span>
    <span>public</span> <span><span>int</span></span> Value <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span><span>int</span></span> Value2 <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>

<span><span>var</span></span> configuration <span>=</span> <span>new</span> <span>MapperConfiguration</span><span>(</span>cfg <span>=></span> <span>{</span>
    cfg<span>.</span><span>RecognizePrefixes</span><span>(</span><span>"src"</span><span>)</span><span>;</span>
    cfg<span>.</span><span><span>CreateMap</span><span><span>&lt;</span>Source<span>,</span> Destination<span>></span></span></span><span>(</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>
configuration<span>.</span><span>AssertConfigurationIsValid</span><span>(</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>默认情况下，<code>AutoMapper</code> 会自动识别前缀为 <code>Get</code> 的属性字段，当目标属性名不包含在源属性名中，它会自动寻找前缀为 <code>Get</code> 的属性字段并进行匹配。如果要清除它，可以使用：</p>
<div><pre><code><span><span>var</span></span> configuration <span>=</span> <span>new</span> <span>MapperConfiguration</span><span>(</span>cfg <span>=></span> <span>{</span>
    cfg<span>.</span><span>ClearPrefixes</span><span>(</span><span>)</span><span>;</span>
<span>}</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="投影"> 投影</h2>
<p>对于上面通过属性名称无法匹配的字段，可以通过投影解决，这也是非常常用的手法。</p>
<div><p>示例代码</p>
<p>投影部分的完整代码可以点击 <a href="https://github.com/jeremyjone/dotnet-study-road/tree/master/ObjectMapper/ObjectMapper.Projection" target="_blank" rel="noopener noreferrer">示例代码</a> 查看。</p>
</div>
<p>投影不仅可以将对象模型展平，还可以将源属性转换为目标属性。在没有额外配置的情况下，<code>AutoMapper</code> 只会将名称相同的内容进行匹配。有了投影，可以将源属性的任何内容根据规则匹配到目标属性上。比如：</p>
<div><pre><code><span>// 源对象</span>
<span>public</span> <span>class</span> <span>Source</span>
<span>{</span>
    <span>public</span> <span>DateTime</span> Date <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span><span>string</span></span> Title <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>

<span>// 目标对象</span>
<span>public</span> <span>class</span> <span>Destination</span>
<span>{</span>
    <span>public</span> <span>DateTime</span> EventDate <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span><span>int</span></span> EventHour <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span><span>int</span></span> EventMinute <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span><span>string</span></span> Title <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>可以看到它们完全不匹配，根据之前的规则，也不会生效。此时，需要配置投影：</p>
<div><pre><code><span><span>var</span></span> configuration <span>=</span> <span>new</span> <span>MapperConfiguration</span><span>(</span>cfg <span>=></span>
    cfg<span>.</span><span><span>CreateMap</span><span><span>&lt;</span>Source<span>,</span> Destination<span>></span></span></span><span>(</span><span>)</span>
      <span>.</span><span>ForMember</span><span>(</span>dest <span>=></span> dest<span>.</span>EventDate<span>,</span> opt <span>=></span> opt<span>.</span><span>MapFrom</span><span>(</span>src <span>=></span> src<span>.</span>Date<span>.</span>Date<span>)</span><span>)</span>
      <span>.</span><span>ForMember</span><span>(</span>dest <span>=></span> dest<span>.</span>EventHour<span>,</span> opt <span>=></span> opt<span>.</span><span>MapFrom</span><span>(</span>src <span>=></span> src<span>.</span>Date<span>.</span>Hour<span>)</span><span>)</span>
      <span>.</span><span>ForMember</span><span>(</span>dest <span>=></span> dest<span>.</span>EventMinute<span>,</span> opt <span>=></span> opt<span>.</span><span>MapFrom</span><span>(</span>src <span>=></span> src<span>.</span>Date<span>.</span>Minute<span>)</span><span>)</span>
    <span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>在配置中，通过 <code>ForMember</code> 扩展方法实现对单一目标属性的扩展，它接收两个表达式，第一个要映射出目标字段，第二个是一个配置项表达式。</p>
<h3 id="嵌套映射"> 嵌套映射</h3>
<p>嵌套映射是指源类型具有复杂类型，同时需要将复杂类型映射到目标类型中。此时，我们可以将复杂类型进行映射，就可以解决问题。</p>
<p>比如我们现在有源类型：</p>
<div><pre><code><span>public</span> <span>class</span> <span>OuterSource</span>
<span>{</span>
    <span>public</span> <span><span>int</span></span> Value <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span>InnerSource</span> Inner <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>

<span>public</span> <span>class</span> <span>InnerSource</span>
<span>{</span>
    <span>public</span> <span><span>int</span></span> OtherValue <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>需要映射到的目标类型：</p>
<div><pre><code><span>public</span> <span>class</span> <span>OuterDest</span>
<span>{</span>
    <span>public</span> <span><span>int</span></span> Value <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span>InnerDest</span> Inner <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>

<span>public</span> <span>class</span> <span>InnerDest</span>
<span>{</span>
    <span>public</span> <span><span>int</span></span> OtherValue <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>此时，内部的复杂类型不相同，只需要将复杂类型也进行映射配置：</p>
<div><pre><code><span><span>var</span></span> config <span>=</span> <span>new</span> <span>MapperConfiguration</span><span>(</span>cfg <span>=></span> <span>{</span>
    cfg<span>.</span><span><span>CreateMap</span><span><span>&lt;</span>OuterSource<span>,</span> OuterDest<span>></span></span></span><span>(</span><span>)</span><span>;</span>
    cfg<span>.</span><span><span>CreateMap</span><span><span>&lt;</span>InnerSource<span>,</span> InnerDest<span>></span></span></span><span>(</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>这样就可以进行映射了，并且并不需要指定内部复杂类型的映射关系：</p>
<div><pre><code><span><span>var</span></span> dest <span>=</span> mapper<span>.</span><span><span>Map</span><span><span>&lt;</span>OuterSource<span>,</span> OuterDest<span>></span></span></span><span>(</span>source<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="展平"> 展平</h3>
<p>展平内容相比于嵌套映射的区别是不再将内部复杂类型对应映射，而是通过一定规则进行处理，从而得到需要的目标类型。</p>
<p>比如：</p>
<div><pre><code><span>public</span> <span>class</span> <span>Order</span>
<span>{</span>
    <span>private</span> <span>readonly</span> <span>IList<span>&lt;</span>OrderLineItem<span>></span></span> _orderLineItems <span>=</span> <span>new</span> <span>List<span>&lt;</span>OrderLineItem<span>></span></span><span>(</span><span>)</span><span>;</span>

    <span>public</span> <span>Customer</span> Customer <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>

    <span>public</span> <span>OrderLineItem<span>[</span><span>]</span></span> <span>GetOrderLineItems</span><span>(</span><span>)</span>
    <span>{</span>
        <span>return</span> _orderLineItems<span>.</span><span>ToArray</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>

    <span>public</span> <span><span>void</span></span> <span>AddOrderLineItem</span><span>(</span><span>Product</span> product<span>,</span> <span><span>int</span></span> quantity<span>)</span>
    <span>{</span>
        _orderLineItems<span>.</span><span>Add</span><span>(</span><span>new</span> <span>OrderLineItem</span><span>(</span>product<span>,</span> quantity<span>)</span><span>)</span><span>;</span>
    <span>}</span>

    <span>public</span> <span><span>decimal</span></span> <span>GetTotal</span><span>(</span><span>)</span>
    <span>{</span>
        <span>return</span> _orderLineItems<span>.</span><span>Sum</span><span>(</span>li <span>=></span> li<span>.</span><span>GetTotal</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>

<span>public</span> <span>class</span> <span>Product</span>
<span>{</span>
    <span>public</span> <span><span>decimal</span></span> Price <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span><span>string</span></span> Name <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>

<span>public</span> <span>class</span> <span>OrderLineItem</span>
<span>{</span>
    <span>public</span> <span>OrderLineItem</span><span>(</span><span>Product</span> product<span>,</span> <span><span>int</span></span> quantity<span>)</span>
    <span>{</span>
        Product <span>=</span> product<span>;</span>
        Quantity <span>=</span> quantity<span>;</span>
    <span>}</span>

    <span>public</span> <span>Product</span> Product <span>{</span> <span>get</span><span>;</span> <span>private</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span><span>int</span></span> Quantity <span>{</span> <span>get</span><span>;</span> <span>private</span> <span>set</span><span>;</span><span>}</span>

    <span>public</span> <span><span>decimal</span></span> <span>GetTotal</span><span>(</span><span>)</span>
    <span>{</span>
        <span>return</span> Quantity<span>*</span>Product<span>.</span>Price<span>;</span>
    <span>}</span>
<span>}</span>

<span>public</span> <span>class</span> <span>Customer</span>
<span>{</span>
    <span>public</span> <span><span>string</span></span> Name <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br></div></div><p>我们希望将复杂的 <code>Order</code> 转换为我们需要的更为简单的 <code>OrderDto</code>：</p>
<div><pre><code><span>public</span> <span>class</span> <span>OrderDto</span>
<span>{</span>
    <span>public</span> <span><span>string</span></span> CustomerName <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span><span>decimal</span></span> Total <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>此时，<code>AutoMapper</code> 会根据匹配规则以及匹配顺序进行查找：</p>
<div><pre><code><span><span>var</span></span> customer <span>=</span> <span>new</span> <span>Customer</span>
<span>{</span>
    Name <span>=</span> <span>"jeremyjone"</span>
<span>}</span><span>;</span>
<span><span>var</span></span> order <span>=</span> <span>new</span> <span>Order</span>
<span>{</span>
    Customer <span>=</span> customer
<span>}</span><span>;</span>
<span><span>var</span></span> product <span>=</span> <span>new</span> <span>Product</span>
<span>{</span>
    Name <span>=</span> <span>"product"</span><span>,</span>
    Price <span>=</span> <span>4.99m</span>
<span>}</span><span>;</span>
order<span>.</span><span>AddOrderLineItem</span><span>(</span>product<span>,</span> <span>15</span><span>)</span><span>;</span>

<span><span>var</span></span> configuration <span>=</span> <span>new</span> <span>MapperConfiguration</span><span>(</span>cfg <span>=></span> cfg<span>.</span><span><span>CreateMap</span><span><span>&lt;</span>Order<span>,</span> OrderDto<span>></span></span></span><span>(</span><span>)</span><span>)</span><span>;</span>
<span><span>var</span></span> mapper2 <span>=</span> configuration<span>.</span><span>CreateMapper</span><span>(</span><span>)</span><span>;</span>
<span><span>var</span></span> orderDto <span>=</span> mapper2<span>.</span><span><span>Map</span><span><span>&lt;</span>Order<span>,</span> OrderDto<span>></span></span></span><span>(</span>order<span>)</span><span>;</span>

Console<span>.</span><span>WriteLine</span><span>(</span><span><span>$"</span><span><span>{</span><span>orderDto<span>.</span>CustomerName</span><span>}</span></span><span>, </span><span><span>{</span><span>orderDto<span>.</span>Total</span><span>}</span></span><span>"</span></span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><p>在这个例子中，很好的诠释了映射的查找规则。</p>
<ul>
<li><code>OrderDto.Total</code> 属性与 <code>Order.GetTotal</code> 方法匹配</li>
<li><code>OrderDto.CustomerName</code> 属性与 <code>Order.Customer.Name</code> 属性匹配</li>
</ul>
<p>通过良好的命名方式，可以减少映射规则的二次开发。</p>
<p>当然，如果你不希望这样进行匹配，仅仅是精确匹配，可以禁用此行为：</p>
<div><pre><code>cfg<span>.</span>DestinationMemberNamingConvention <span>=</span> <span>new</span> <span>ExactMatchNamingConvention</span><span>(</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><h4 id="使用-includemembers"> 使用 IncludeMembers</h4>
<p>在展平的过程中，可以通过 <code>IncludeMembers</code> 获得更多细节控制。</p>
<p>通过一个示例体会：</p>
<div><pre><code><span>public</span> <span>class</span> <span>MemberSource</span>
<span>{</span>
    <span>public</span> <span><span>string</span></span> Name <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span>MemberInnerSource</span> MemberInnerSource <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span>MemberOtherInnerSource</span> MemberOtherInnerSource <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>

<span>public</span> <span>class</span> <span>MemberInnerSource</span>
<span>{</span>
    <span>public</span> <span><span>string</span></span> Name <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span><span>string</span></span> Description <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>

<span>public</span> <span>class</span> <span>MemberOtherInnerSource</span>
<span>{</span>
    <span>public</span> <span><span>string</span></span> Name <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span><span>string</span></span> Description <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span><span>string</span></span> Title <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>

<span>public</span> <span>class</span> <span>MemberDestination</span>
<span>{</span>
    <span>public</span> <span><span>string</span></span> Name <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span><span>string</span></span> Description <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span><span>string</span></span> Title <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>

<span>// 配置</span>
<span><span>var</span></span> config3 <span>=</span> <span>new</span> <span>MapperConfiguration</span><span>(</span>cfg <span>=></span>
<span>{</span>
    <span>// IncludeMembers 里面参数是有顺序的，映射规则按照先后顺序。先匹配到的优先</span>
    cfg<span>.</span><span><span>CreateMap</span><span><span>&lt;</span>MemberSource<span>,</span> MemberDestination<span>></span></span></span><span>(</span><span>)</span>
        <span>.</span><span>IncludeMembers</span><span>(</span>s <span>=></span> s<span>.</span>MemberInnerSource<span>,</span> s <span>=></span> s<span>.</span>MemberOtherInnerSource<span>)</span><span>;</span>
    cfg<span>.</span><span><span>CreateMap</span><span><span>&lt;</span>MemberInnerSource<span>,</span> MemberDestination<span>></span></span></span><span>(</span>MemberList<span>.</span>None<span>)</span><span>;</span>
    cfg<span>.</span><span><span>CreateMap</span><span><span>&lt;</span>MemberOtherInnerSource<span>,</span> MemberDestination<span>></span></span></span><span>(</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>

<span>// 使用</span>
<span><span>var</span></span> source3 <span>=</span> <span>new</span> <span>MemberSource</span>
<span>{</span>
    Name <span>=</span> <span>"name"</span><span>,</span>
    MemberInnerSource <span>=</span> <span>new</span> <span>MemberInnerSource</span> <span>{</span> Name <span>=</span> <span>"inner name"</span><span>,</span> Description <span>=</span> <span>"description"</span> <span>}</span><span>,</span>
    MemberOtherInnerSource <span>=</span> <span>new</span> <span>MemberOtherInnerSource</span> <span>{</span> Title <span>=</span> <span>"title"</span><span>,</span> Name <span>=</span> <span>"other inner name"</span><span>,</span> Description <span>=</span> <span>"other inner desc"</span><span>}</span>
<span>}</span><span>;</span>
<span><span>var</span></span> mapper3 <span>=</span> config3<span>.</span><span>CreateMapper</span><span>(</span><span>)</span><span>;</span>
<span><span>var</span></span> dest3 <span>=</span> mapper3<span>.</span><span><span>Map</span><span><span>&lt;</span>MemberDestination<span>></span></span></span><span>(</span>source3<span>)</span><span>;</span>

Console<span>.</span><span>WriteLine</span><span>(</span><span><span>$"</span><span><span>{</span><span>dest3<span>.</span>Title</span><span>}</span></span><span>, </span><span><span>{</span><span>dest3<span>.</span>Name</span><span>}</span></span><span>, </span><span><span>{</span><span>dest3<span>.</span>Description</span><span>}</span></span><span>"</span></span><span>)</span><span>;</span> <span>// title, name, description</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br></div></div><p>上面例子中，通过重用映射规则中的子源类型映射到目标类型，按照规则顺序，优先读取到 <code>MemberSource</code> 中的 <code>Name</code> 属性，然后是 <code>MemberSource.MemberInnerSource</code> 中的 <code>Description</code> 属性，最后读取到 <code>MemberOtherInnerSource</code> 的 <code>Title</code> 属性，所以结果就显而易见了。</p>
<h3 id="反向映射"> 反向映射</h3>
<p>通过 <code>ReverseMap</code> 方法可以快速将一个映射进行反向映射，包括展平。但是对于深度展平，需要子项映射同时进行反向映射。</p>
<p>对于上面的展平示例，可以使用：</p>
<div><div><br><br><br><br><br><div>&nbsp;</div><br><div>&nbsp;</div><br><div>&nbsp;</div><br><br></div><pre><code><span><span>var</span></span> config3 <span>=</span> <span>new</span> <span>MapperConfiguration</span><span>(</span>cfg <span>=></span>
<span>{</span>
    <span>// IncludeMembers 里面参数是有顺序的，映射规则按照先后顺序。先匹配到的优先</span>
    cfg<span>.</span><span><span>CreateMap</span><span><span>&lt;</span>MemberSource<span>,</span> MemberDestination<span>></span></span></span><span>(</span><span>)</span>
        <span>.</span><span>IncludeMembers</span><span>(</span>s <span>=></span> s<span>.</span>MemberInnerSource<span>,</span> s <span>=></span> s<span>.</span>MemberOtherInnerSource<span>)</span>
        <span>.</span><span>ReverseMap</span><span>(</span><span>)</span><span>;</span>
    cfg<span>.</span><span><span>CreateMap</span><span><span>&lt;</span>MemberInnerSource<span>,</span> MemberDestination<span>></span></span></span><span>(</span>MemberList<span>.</span>None<span>)</span>
    <span>.</span><span>ReverseMap</span><span>(</span><span>)</span><span>;</span>
    cfg<span>.</span><span><span>CreateMap</span><span><span>&lt;</span>MemberOtherInnerSource<span>,</span> MemberDestination<span>></span></span></span><span>(</span><span>)</span>
    <span>.</span><span>ReverseMap</span><span>(</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>在配置后面追加 <code>ReverseMap()</code> 方法即可添加反向映射。</p>
<div><pre><code>dest3<span>.</span>Name <span>=</span> <span>"jjjjjj"</span><span>;</span>
mapper3<span>.</span><span>Map</span><span>(</span>dest3<span>,</span> source3<span>)</span><span>;</span>
Console<span>.</span><span>WriteLine</span><span>(</span><span><span>$"</span><span><span>{</span><span>source3<span>.</span>Name</span><span>}</span></span><span>"</span></span><span>)</span><span>;</span> <span>// jjjjjj</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>结果已经修改了源数据的名称。</p>
<h3 id="泛型映射"> 泛型映射</h3>
<p>有时源类型和目标类型都是泛型的，此时需要配置一个通用类型映射：</p>
<div><pre><code><span>public</span> <span>class</span> <span>GenericSource<span>&lt;</span>T<span>></span></span>
<span>{</span>
    <span>public</span> <span>T</span> Value <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>

<span>public</span> <span>class</span> <span>GenericDestination<span>&lt;</span>T<span>></span></span>
<span>{</span>
    <span>public</span> <span>T</span> Value <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>

<span>// 创建映射</span>
<span><span>var</span></span> config4 <span>=</span> <span>new</span> <span>MapperConfiguration</span><span>(</span>cfg <span>=></span> cfg<span>.</span><span>CreateMap</span><span>(</span><span>typeof</span><span>(</span><span>GenericSource<span>&lt;</span><span>></span></span><span>)</span><span>,</span> <span>typeof</span><span>(</span><span>GenericDestination<span>&lt;</span><span>></span></span><span>)</span><span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>无需封闭泛型类型，<code>AutoMapper</code> 会在运行时将所有配置从打开的通用映射应用于关闭的映射。</p>
<div><pre><code><span>// 使用</span>
<span><span>var</span></span> s1 <span>=</span> <span>new</span> <span>GenericSource<span>&lt;</span><span>int</span><span>></span></span> <span>{</span> Value <span>=</span> <span>10</span> <span>}</span><span>;</span>
<span><span>var</span></span> s2 <span>=</span> <span>new</span> <span>GenericSource<span>&lt;</span><span>string</span><span>></span></span> <span>{</span>Value <span>=</span> <span>"jeremyjone"</span><span>}</span><span>;</span>
<span><span>var</span></span> mapper4 <span>=</span> config4<span>.</span><span>CreateMapper</span><span>(</span><span>)</span><span>;</span>
<span><span>var</span></span> dest4_1 <span>=</span> mapper4<span>.</span><span><span>Map</span><span><span>&lt;</span>GenericSource<span>&lt;</span><span>int</span><span>></span><span>,</span> GenericDestination<span>&lt;</span><span>int</span><span>></span><span>></span></span></span><span>(</span>s1<span>)</span><span>;</span>
<span><span>var</span></span> dest4_2 <span>=</span> mapper4<span>.</span><span><span>Map</span><span><span>&lt;</span>GenericSource<span>&lt;</span><span>string</span><span>></span><span>,</span> GenericDestination<span>&lt;</span><span>string</span><span>></span><span>></span></span></span><span>(</span>s2<span>)</span><span>;</span>
Console<span>.</span><span>WriteLine</span><span>(</span><span><span>$"</span><span><span>{</span><span>dest4_1<span>.</span>Value</span><span>}</span></span><span>, </span><span><span>{</span><span>dest4_2<span>.</span>Value</span><span>}</span></span><span>"</span></span><span>)</span><span>;</span> <span>// 10, jeremyjone</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id="条件映射"> 条件映射</h3>
<p>有时我们希望某些属性需要满足条件之后才可以映射。可以通过 <code>Condition</code> 实现，比如我们希望当下面源值中 <code>Value</code> 大于 0 才映射：</p>
<div><pre><code><span><span>var</span></span> config5 <span>=</span> <span>new</span> <span>MapperConfiguration</span><span>(</span>cfg <span>=></span>
<span>{</span>
    cfg<span>.</span><span><span>CreateMap</span><span><span>&lt;</span>Source<span>,</span> Destination<span>></span></span></span><span>(</span><span>)</span>
        <span>.</span><span>ForMember</span><span>(</span>destination <span>=></span> destination<span>.</span>Value<span>,</span> opt <span>=></span> opt<span>.</span><span>Condition</span><span>(</span>src <span>=></span> src<span>.</span>Value <span>>=</span> <span>0</span><span>)</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>当然，该方法仍然是在解析过程中进行的。如果希望运行的更快，可以使用 <code>PreCondition</code> 方法。它会在解析源值之前被调用：</p>
<div><pre><code>cfg<span>.</span><span><span>CreateMap</span><span><span>&lt;</span>Source<span>,</span> Destination<span>></span></span></span><span>(</span><span>)</span>
    <span>.</span><span>ForMember</span><span>(</span>destination <span>=></span> destination<span>.</span>Value<span>,</span> opt <span>=></span>
    <span>{</span>
        opt<span>.</span><span>PreCondition</span><span>(</span>src <span>=></span> src<span>.</span>Value <span>>=</span> <span>0</span><span>)</span><span>;</span>
        <span>// 使用 PreCondition 不要忘记添加真正的映射过程</span>
        opt<span>.</span><span>MapFrom</span><span>(</span>src <span>=></span> src<span>.</span>Value<span>)</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="转换和解析"> 转换和解析</h2>
<p>通常，我们在投影的过程中，除了普通的对应映射，还常常碰到类型转换、条件映射等情况。下面就来介绍这些内容。</p>
<div><p>示例代码</p>
<p>转换部分的完整代码可以点击 <a href="https://github.com/jeremyjone/dotnet-study-road/tree/master/ObjectMapper/ObjectMapper.Convert" target="_blank" rel="noopener noreferrer">示例代码</a> 查看。</p>
</div>
<h3 id="全局的类型转换"> 全局的类型转换</h3>
<p>遇到类型转换，<code>AutoMapper</code> 并不会自动转换，因为它不知道我们需要如何进行转换。此时我们需要给出转换条件，也就是提供一个自定义类型转换器。</p>
<h4 id="简单的类型转换"> 简单的类型转换</h4>
<p>对于简单的情况，我们只需要给出一个<strong>带有源并返回目标的函数</strong>即可，即：</p>
<div><pre><code>cfg<span>.</span><span><span>CreateMap</span><span><span>&lt;</span><span>string</span><span>,</span> <span>int</span><span>></span></span></span><span>(</span><span>)</span><span>.</span><span>ConvertUsing</span><span>(</span>s <span>=></span> Convert<span>.</span><span>ToInt32</span><span>(</span>s<span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><p>这种方式编写和使用都非常简单方便，适合不那么复杂的情况，就像上面写的那样，仅仅是将一个字符串变为数字，或者简单的操作源值。</p>
<h4 id="自定义类型转换器"> 自定义类型转换器</h4>
<p>对于更复杂的情况，上面的写法就显得比较笨拙。此时我们可以创建一个自定义的转换器，它实现了 <code>ITypeConverter</code> 接口：</p>
<div><pre><code><span>// 接口定义（AutoMapper 接口，不需要自己定义）</span>
<span>public</span> <span>interface</span> <span>ITypeConverter<span>&lt;</span><span>in</span> TSource<span>,</span> TDestination<span>></span></span>
<span>{</span>
    <span>TDestination</span> <span>Convert</span><span>(</span><span>TSource</span> source<span>,</span> <span>TDestination</span> destination<span>,</span> <span>ResolutionContext</span> context<span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>我们实现该接口内容：</p>
<div><pre><code><span>public</span> <span>class</span> <span>TypeTypeConverter</span> <span>:</span> <span><span>ITypeConverter<span>&lt;</span><span>string</span><span>,</span> Type<span>></span></span></span>
<span>{</span>
    <span>public</span> <span>Type</span> <span>Convert</span><span>(</span><span><span>string</span></span> source<span>,</span> <span>Type</span> destination<span>,</span> <span>ResolutionContext</span> context<span>)</span>
    <span>{</span>
        <span>return</span> Assembly<span>.</span><span>GetExecutingAssembly</span><span>(</span><span>)</span><span>.</span><span>GetType</span><span>(</span>source<span>)</span><span>;</span>
    <span>}</span>
<span>}</span>

<span>public</span> <span>class</span> <span>DateTimeTypeConverter</span> <span>:</span> <span><span>ITypeConverter<span>&lt;</span><span>string</span><span>,</span> DateTime<span>></span></span></span>
<span>{</span>
    <span>public</span> <span>DateTime</span> <span>Convert</span><span>(</span><span><span>string</span></span> source<span>,</span> <span>DateTime</span> destination<span>,</span> <span>ResolutionContext</span> context<span>)</span>
    <span>{</span>
        <span>return</span> System<span>.</span>Convert<span>.</span><span>ToDateTime</span><span>(</span>source<span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>配置时只需要传入自定义转换器即可：</p>
<div><pre><code><span>// 传入自定义转换器的两种方式</span>
cfg<span>.</span><span><span>CreateMap</span><span><span>&lt;</span><span>string</span><span>,</span> DateTime<span>></span></span></span><span>(</span><span>)</span><span>.</span><span>ConvertUsing</span><span>(</span><span>new</span> <span>DateTimeTypeConverter</span><span>(</span><span>)</span><span>)</span><span>;</span>
cfg<span>.</span><span><span>CreateMap</span><span><span>&lt;</span><span>string</span><span>,</span> Type<span>></span></span></span><span>(</span><span>)</span><span>.</span><span><span>ConvertUsing</span><span><span>&lt;</span>TypeTypeConverter<span>></span></span></span><span>(</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id="值的类型转换"> 值的类型转换</h3>
<p>上述类型转换都是作用于全局的，有时我们仅仅希望一个值属性进行转换，这时就需要值的类型转换器。</p>
<p>值的类型转换器的作用域是单个映射，接收源对象和目标对象以解析要映射到目标成员的值。</p>
<p>值的类型转换器实现自 <code>IValueConverter</code> 接口：</p>
<div><pre><code><span>// 接口定义（AutoMapper 接口，不需要自己定义）</span>
<span>public</span> <span>interface</span> <span>IValueConverter<span>&lt;</span><span>in</span> TSourceMember<span>,</span> <span>out</span> TDestinationMember<span>></span></span>
<span>{</span>
    <span>TDestinationMember</span> <span>Convert</span><span>(</span><span>TSourceMember</span> sourceMember<span>,</span> <span>ResolutionContext</span> context<span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>我们实现它：</p>
<div><pre><code><span>public</span> <span>class</span> <span>CustomValueConverter</span> <span>:</span> <span><span>IValueConverter<span>&lt;</span><span>int</span><span>,</span> <span>string</span><span>></span></span></span>
<span>{</span>
    <span>public</span> <span><span>string</span></span> <span>Convert</span><span>(</span><span><span>int</span></span> sourceMember<span>,</span> <span>ResolutionContext</span> context<span>)</span>
    <span>{</span>
        <span>return</span> sourceMember<span>.</span><span>ToString</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>既然是单个映射，那么值的类型转换器自然需要在成员级别使用：</p>
<div><pre><code>cfg<span>.</span><span><span>CreateMap</span><span><span>&lt;</span>Source<span>,</span> Destination<span>></span></span></span><span>(</span><span>)</span>
    <span>.</span><span>ForMember</span><span>(</span>dest <span>=></span> dest<span>.</span>Value<span>,</span> opt <span>=></span> opt<span>.</span><span>ConvertUsing</span><span>(</span><span>new</span> <span>CustomValueConverter</span><span>(</span><span>)</span><span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h4 id="重定向映射源值"> 重定向映射源值</h4>
<p>在值的转换过程中，有时不是匹配的名称，此时可以通过重新定义源值属性：</p>
<div><div><br><br><br><br><br><div>&nbsp;</div><br><br></div><pre><code>cfg<span>.</span><span><span>CreateMap</span><span><span>&lt;</span>Source<span>,</span> Destination<span>></span></span></span><span>(</span><span>)</span>
    <span>.</span><span>ForMember</span><span>(</span>
        dest <span>=></span> dest<span>.</span>Value<span>,</span>
        opt <span>=></span>
            opt<span>.</span><span>ConvertUsing</span><span>(</span><span>new</span> <span>CustomValueConverter</span><span>(</span><span>)</span><span>,</span>
            src <span>=></span> src<span>.</span>MyValue
        <span>)</span><span>)</span><span>;</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id="值的解析"> 值的解析</h3>
<p>上面是针对类型，那么如果仅仅是通过 <code>ForMember()</code> 中的 <code>MapFrom()</code> 按照值解析呢？此时需要实现 <code>IValueResolver</code> 接口：</p>
<div><pre><code><span>// 接口定义（AutoMapper 接口，不需要自己定义）</span>
<span>public</span> <span>interface</span> <span>IValueResolver<span>&lt;</span><span>in</span> TSource<span>,</span> <span>in</span> TDestination<span>,</span> TDestMember<span>></span></span>
<span>{</span>
    <span>TDestMember</span> <span>Resolve</span><span>(</span><span>TSource</span> source<span>,</span> <span>TDestination</span> destination<span>,</span> <span>TDestMember</span> destMember<span>,</span> <span>ResolutionContext</span> context<span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>我们现在有：</p>
<div><pre><code><span>public</span> <span>class</span> <span>ValueConvertSource</span>
<span>{</span>
    <span>public</span> <span><span>int</span></span> Value1 <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span><span>int</span></span> Value2 <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>

<span>public</span> <span>class</span> <span>ValueConvertDestination</span>
<span>{</span>
    <span>public</span> <span><span>int</span></span> Total <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>我们需要把源对象中两个值相加的和赋给目标对象的 <code>Total</code> 属性，则可以实现该接口：</p>
<div><pre><code><span>public</span> <span>class</span> <span>ValueConvertResolver</span> <span>:</span> <span><span>IValueResolver<span>&lt;</span>ValueConvertSource<span>,</span> ValueConvertDestination<span>,</span> <span>int</span><span>></span></span></span>
<span>{</span>
    <span>public</span> <span><span>int</span></span> <span>Resolve</span><span>(</span><span>ValueConvertSource</span> source<span>,</span> <span>ValueConvertDestination</span> destination<span>,</span> <span><span>int</span></span> member<span>,</span> <span>ResolutionContext</span> context<span>)</span>
    <span>{</span>
        <span>return</span> source<span>.</span>Value1 <span>+</span> source<span>.</span>Value2<span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>然后将该实现类放入配置中：</p>
<div><pre><code><span><span>var</span></span> config2 <span>=</span> <span>new</span> <span>MapperConfiguration</span><span>(</span>cfg <span>=></span>
<span>{</span>
    cfg<span>.</span><span><span>CreateMap</span><span><span>&lt;</span>ValueConvertSource<span>,</span> ValueConvertDestination<span>></span></span></span><span>(</span><span>)</span><span>.</span><span>ForMember</span><span>(</span>dest <span>=></span> dest<span>.</span>Total<span>,</span>
        opt <span>=></span> opt<span>.</span><span><span>MapFrom</span><span><span>&lt;</span>ValueConvertResolver<span>></span></span></span><span>(</span><span>)</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>不希望 <code>AutoMapper</code> 通过反射创建实例的话，可以手动创建一个实例：</p>
<div><pre><code>opt<span>.</span><span>MapFrom</span><span>(</span><span>new</span> <span>ValueConvertResolver</span><span>(</span><span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><h4 id="从上下文获取键值对象"> 从上下文获取键值对象</h4>
<p>还有一种比较特殊的用法，至少我没用过。它是通过在映射时传入键值的方式来给目标对象赋值。</p>
<div><pre><code>mapper<span>.</span><span><span>Map</span><span><span>&lt;</span>Source<span>,</span> Destination<span>></span></span></span><span>(</span>src<span>,</span> opt <span>=></span> opt<span>.</span>Items<span>[</span><span>"Value"</span><span>]</span> <span>=</span> <span>10</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><p>这样的方式需要在配置中填写上下文：</p>
<div><pre><code>cfg<span>.</span><span><span>CreateMap</span><span><span>&lt;</span>Source<span>,</span> Destination<span>></span></span></span><span>(</span><span>)</span><span>.</span><span>ForMember</span><span>(</span>dest<span>=></span>dest<span>.</span>OtherValue<span>,</span> opt <span>=></span> opt<span>.</span><span>MapFrom</span><span>(</span><span>(</span>src<span>,</span> dest<span>,</span> destMember<span>,</span> content<span>)</span> <span>=></span> content<span>.</span>Items<span>[</span><span>"Value"</span><span>]</span><span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><h4 id="改变值的内容"> 改变值的内容</h4>
<p>有时，我们仅仅是需要修改值的内容，比如源数据是 &quot;Hello&quot;，我们需要加一个 &quot;World&quot;，那么可以通过修改值的方法 <code>ValueTransformers</code> 来达到效果：</p>
<div><pre><code><span>// 全局</span>
cfg<span>.</span>ValueTransformers<span>.</span><span><span>Add</span><span><span>&lt;</span><span>string</span><span>></span></span></span><span>(</span>src <span>=></span> src <span>+</span> <span>" World"</span><span>)</span><span>;</span>

<span>// 局部</span>
opt <span>=></span> opt<span>.</span><span>AddTransform</span><span>(</span>src <span>=></span> src <span>+</span> <span>" World"</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>这样就达到修改值的效果。</p>
<p>具体区别效果，可以参考 <a href="https://github.com/jeremyjone/dotnet-study-road/tree/master/ObjectMapper/ObjectMapper.Convert/Program.cs" target="_blank" rel="noopener noreferrer">我的代码示例仓库</a> <code>修改值的内容</code> 的部分。</p>
<h2 id="映射前后"> 映射前后</h2>
<p>有时候需要在映射的前后做一些操作，虽然这种情况很少，但确实存在。</p>
<p>通过 <code>BeforeMap</code> 和 <code>AfterMap</code> 方法可以操作映射的前后操作：</p>
<div><pre><code><span><span>var</span></span> configuration <span>=</span> <span>new</span> <span>MapperConfiguration</span><span>(</span>cfg <span>=></span> <span>{</span>
    cfg<span>.</span><span><span>CreateMap</span><span><span>&lt;</span>Source<span>,</span> Dest<span>></span></span></span><span>(</span><span>)</span>
      <span>.</span><span>BeforeMap</span><span>(</span><span>(</span>src<span>,</span> dest<span>)</span> <span>=></span> src<span>.</span>Value <span>=</span> src<span>.</span>Value <span>+</span> <span>10</span><span>)</span>
      <span>.</span><span>AfterMap</span><span>(</span><span>(</span>src<span>,</span> dest<span>)</span> <span>=></span> dest<span>.</span>Name <span>=</span> <span>"John"</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>甚至可以在映射期间创建，这中配置非常有用：</p>
<div><pre><code><span><span>int</span></span> i <span>=</span> <span>10</span><span>;</span>
mapper<span>.</span><span><span>Map</span><span><span>&lt;</span>Source<span>,</span> Dest<span>></span></span></span><span>(</span>src<span>,</span> opt <span>=></span> <span>{</span>
    opt<span>.</span><span>BeforeMap</span><span>(</span><span>(</span>src<span>,</span> dest<span>)</span> <span>=></span> src<span>.</span>Value <span>=</span> src<span>.</span>Value <span>+</span> i<span>)</span><span>;</span>
    opt<span>.</span><span>AfterMap</span><span>(</span><span>(</span>src<span>,</span> dest<span>)</span> <span>=></span> dest<span>.</span>Name <span>=</span> HttpContext<span>.</span>Current<span>.</span>Identity<span>.</span>Name<span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>当然，还可以通过实现接口的方式来创建一些更复杂的操作：</p>
<div><pre><code><span>public</span> <span>class</span> <span>NameMeJohnAction</span> <span>:</span> <span><span>IMappingAction<span>&lt;</span>SomePersonObject<span>,</span> SomeOtherPersonObject<span>></span></span></span>
<span>{</span>
    <span>public</span> <span><span>void</span></span> <span>Process</span><span>(</span><span>SomePersonObject</span> source<span>,</span> <span>SomeOtherPersonObject</span> destination<span>,</span> <span>ResolutionContext</span> context<span>)</span>
    <span>{</span>
        destination<span>.</span>Name <span>=</span> <span>"John"</span><span>;</span>
    <span>}</span>
<span>}</span>

<span><span>var</span></span> configuration <span>=</span> <span>new</span> <span>MapperConfiguration</span><span>(</span>cfg <span>=></span> <span>{</span>
  cfg<span>.</span><span><span>CreateMap</span><span><span>&lt;</span>SomePersonObject<span>,</span> SomeOtherPersonObject<span>></span></span></span><span>(</span><span>)</span>
    <span>.</span><span><span>AfterMap</span><span><span>&lt;</span>NameMeJohnAction<span>></span></span></span><span>(</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h2 id="在-asp-net-core-中使用-automapper"> 在 ASP.NET Core 中使用 AutoMapper</h2>
<div><p>示例代码</p>
<p>完整示例代码可以点击 <a href="https://github.com/jeremyjone/dotnet-study-road/tree/master/ObjectMapper/ObjectMapper.AM" target="_blank" rel="noopener noreferrer">示例代码</a> 查看。</p>
</div>
<h3 id="安装插件"> 安装插件</h3>
<p>与安装普通 <code>AutoMapper</code> 不同，我们需要安装包含依赖注入的插件：</p>
<div><pre><code>PM<span>></span> Install-Package AutoMapper.Extensions.Microsoft.DependencyInjection
</code></pre>
<div><span>1</span><br></div></div><h3 id="添加服务"> 添加服务</h3>
<p>安装之后，在 <code>Startup.cs</code> 中添加服务：</p>
<div><pre><code>services<span>.</span><span>AddAutoMapper</span><span>(</span>AppDomain<span>.</span>CurrentDomain<span>.</span><span>GetAssemblies</span><span>(</span><span>)</span><span>)</span><span>;</span>
<span>// or</span>
services<span>.</span><span>AddAutoMapper</span><span>(</span><span>typeof</span><span>(</span><span>Startup</span><span>)</span><span>.</span>Assembly<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>这会让 <code>AutoMapper</code> 自动收集继承自 <code>Profile</code> 的配置类。</p>
<h3 id="配置映射关系"> 配置映射关系</h3>
<p>创建一个 <code>UserProfile</code> 类，并继承 <code>Profile</code>，然后在构造器中添加配置：</p>
<div><pre><code><span>public</span> <span>class</span> <span>UserProfile</span><span>:</span> <span><span>Profile</span></span>
<span>{</span>
    <span>public</span> <span>UserProfile</span><span>(</span><span>)</span>
    <span>{</span>
        <span><span>CreateMap</span><span><span>&lt;</span>User<span>,</span> UserDto<span>></span></span></span><span>(</span><span>)</span>
        <span>// ... 详细配置</span>
        <span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h3 id="使用映射器"> 使用映射器</h3>
<p>依次配置好 Profile 之后，就可以开始使用映射器了。</p>
<p><code>AutoMapper</code> 通过一个名为 <code>IMapper</code> 的抽象接口实现注入：</p>
<div><pre><code><span>private</span> <span>readonly</span> <span>IMapper</span> _mapper<span>;</span>

<span>public</span> <span>HomeController</span><span>(</span><span>IMapper</span> mapper<span>)</span>
<span>{</span>
    _mapper <span>=</span> mapper<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>然后在 <code>Index</code> 方法中创建一个 <code>User</code>，并映射为 <code>UserDto</code>，然后返回：</p>
<div><pre><code><span>public</span> <span>IActionResult</span> <span>Index</span><span>(</span><span>)</span>
<span>{</span>
    <span><span>var</span></span> user <span>=</span> <span>new</span> <span>User</span>
    <span>{</span>
        Id <span>=</span> <span>1</span><span>,</span>
        LoginName <span>=</span> <span>"jeremyjone"</span><span>,</span>
        Nickname <span>=</span> <span>"JeremyJone"</span><span>,</span>
        FirstName <span>=</span> <span>"Jeremy"</span><span>,</span>
        MiddleName <span>=</span> <span>""</span><span>,</span>
        LastName <span>=</span> <span>"Jone"</span><span>,</span>
        BirthDate <span>=</span> DateTime<span>.</span><span>Parse</span><span>(</span><span>"2000-01-01"</span><span>)</span><span>,</span>
        Email <span>=</span> <span>"jeremyjone@qq.com"</span><span>,</span>
        LoginTime <span>=</span> DateTime<span>.</span><span>Parse</span><span>(</span><span>"2021-4-10"</span><span>)</span><span>,</span>
        Password <span>=</span> <span>"123456"</span>
    <span>}</span><span>;</span>

    <span><span>var</span></span> userDto <span>=</span> _mapper<span>.</span><span><span>Map</span><span><span>&lt;</span>UserDto<span>></span></span></span><span>(</span>user<span>)</span><span>;</span>

    <span>return</span> <span>Ok</span><span>(</span>userDto<span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><p>运行程序，用浏览器访问，得到如下结果：</p>
<img :src="$withBase('/assets/roadmap/dotnet/mapper/usemapper.png')" alt="usemapper">
<p>一切都是那么顺滑。嗯，这就是 <code>AutoMapper</code> 的全部。</p>
<h2 id="其他"> 其他</h2>
<p>掌握上面的内容已经足够。需要更多，可以参考 <a href="https://docs.automapper.org/en/latest/Getting-started.html" target="_blank" rel="noopener noreferrer">官方文档</a> 、<a href="https://github.com/AutoMapper/AutoMapper" target="_blank" rel="noopener noreferrer">Github</a> 或阅读源码。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Swagger 文档的使用</title>
      <link>https://docs.jeremyjone.com/roadmap/dotnetcore/swagger/</link>
      <guid>https://docs.jeremyjone.com/roadmap/dotnetcore/swagger/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">Swagger 文档的使用</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="swagger-文档的使用"> Swagger 文档的使用</h1>
<p>相信能看到这里，你一定对 swagger 多少有了解。它是极具推崇的文档生成工具，在多种语言下都可以有良好的体验。有兴趣的朋友可以去看看 <a href="https://swagger.io/docs/" target="_blank" rel="noopener noreferrer">官方文档</a>。</p>
<h2 id="安装"> 安装</h2>
<p>在 <code>ASP.NET Core</code> 中，直接安装 <code>Swashbuckle.AspNetCore</code> 即可。它包含了 <code>SwaggerGen</code> 以及 <code>SwaggerUI</code>。</p>
<p>通过命令：<code>PM:Install-Package Swashbuckle.AspNetCore</code> 或者在 <code>包管理器</code> 中安装。</p>
<h2 id="基础实现"> 基础实现</h2>
<p>创建一个 Web Api 项目，然后在 <code>Startup.cs</code> 中稍微配置一下：</p>
<div><p>示例代码</p>
<p>具体代码可以看 <a href="https://github.com/jeremyjone/dotnet-study-road/tree/master/Swagger/WebApplication1" target="_blank" rel="noopener noreferrer">示例代码</a></p>
</div>
<div><div><br><br><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><br><br><br><br><br><br><div>&nbsp;</div><div>&nbsp;</div><br><br><br></div><pre><code><span>public</span> <span><span>void</span></span> <span>ConfigureServices</span><span>(</span><span>IServiceCollection</span> services<span>)</span>
<span>{</span>
    services<span>.</span><span>AddSwaggerGen</span><span>(</span>c <span>=></span>
    <span>{</span>
        c<span>.</span><span>SwaggerDoc</span><span>(</span><span>"v1"</span><span>,</span> <span>new</span> <span>OpenApiInfo</span> <span>{</span> Title <span>=</span> <span>"WebApplication1"</span><span>,</span> Version <span>=</span> <span>"v1"</span> <span>}</span><span>)</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>
<span>}</span>

<span>public</span> <span><span>void</span></span> <span>Configure</span><span>(</span><span>IApplicationBuilder</span> app<span>,</span> <span>IWebHostEnvironment</span> env<span>)</span>
<span>{</span>
    <span>if</span> <span>(</span>env<span>.</span><span>IsDevelopment</span><span>(</span><span>)</span><span>)</span>
    <span>{</span>
        app<span>.</span><span>UseSwagger</span><span>(</span><span>)</span><span>;</span>
        app<span>.</span><span>UseSwaggerUI</span><span>(</span>c <span>=></span> c<span>.</span><span>SwaggerEndpoint</span><span>(</span><span>"/swagger/v1/swagger.json"</span><span>,</span> <span>"WebApplication1 v1"</span><span>)</span><span>)</span><span>;</span> <span>// 指定 json 端点，可省略</span>
    <span>}</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>接着，在 Controller 中的控制器类上面添加一个 <code>[Route(&quot;[controller]&quot;)]</code> 属性，并且在方法上添加 <code>[HttpGet]</code> 属性：</p>
<div><div><div>&nbsp;</div><br><br><div>&nbsp;</div><br><br><br><br><br><br></div><pre><code><span>[</span><span><span>Route</span><span><span>(</span><span>"[controller]"</span><span>)</span></span></span><span>]</span>
<span>public</span> <span>class</span> <span>WeatherForecastController</span> <span>:</span> <span><span>ControllerBase</span></span>
<span>{</span>
    <span>[</span><span><span>HttpGet</span></span><span>]</span>
    <span>public</span> <span>IEnumerable<span>&lt;</span>WeatherForecast<span>></span></span> <span>Get</span><span>(</span><span>)</span>
    <span>{</span>
        <span>// ...</span>
    <span>}</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>然后打开浏览器，在根路径后面加上 <code>swagger</code> 即可看到文档显示成功。</p>
<img :src="$withBase('/assets/roadmap/dotnet/swagger/base_show.png')" alt="">
<div><p>提示</p>
<p>在 <code>.NET 5</code> 中，创建一个 Web Api 项目之后，以上内容已经全部添加，还是很友好的。</p>
</div>
<h2 id="配置路由"> 配置路由</h2>
<p>看到了成功的效果，现在来反推一下过程。</p>
<p>之所以文档会显示该接口，是因为我们配置了控制器的路由。如果我们删掉控制器中的配置，则在文档中就不会生成任何接口信息。</p>
<p>所有的控制器和方法都需要提供对应的路由和谓词属性。同时，路由不能重复，相同的方法可以有不同的谓词属性。</p>
<p>为了更好的测试，我们复制 <code>Get</code> 并起一个新的名字 <code>MyFunc</code>，同时给出 <code>[HttpGet]</code> 属性，它的路由默认为空。</p>
<div><pre><code><span>[</span><span><span>HttpGet</span></span><span>]</span>
<span>public</span> <span>IEnumerable<span>&lt;</span>WeatherForecast<span>></span></span> <span>MyFunc</span><span>(</span><span>)</span>
<span>{</span>
    <span>// ...</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>执行程序，会看到报错：</p>
<img :src="$withBase('/assets/roadmap/dotnet/swagger/error1.png')" alt="">
<p>同时在输入栏中可以看到异常信息：</p>
<div><pre><code>Swashbuckle.AspNetCore.SwaggerGen.SwaggerGeneratorException: Conflicting method/path combination "GET WeatherForecast" for actions - WebApplication1.Controllers.WeatherForecastController.Get (WebApplication1),WebApplication1.Controllers.WeatherForecastController.MyFunc (WebApplication1). Actions require a unique method/path combination for Swagger/OpenAPI 3.0. Use ConflictingActionsResolver as a workaround
</code></pre>
<div><span>1</span><br></div></div><p>很明显，方法冲突了。这就说明它在生成的时候将两个方法同时生成了路由为 <code>&lt;URL&gt;/WeatherForecast/</code>。该种情况的解决方法有两种，一种是单独写方法路由：</p>
<div><div><div>&nbsp;</div><br><br><br><br><br><br><div>&nbsp;</div><div>&nbsp;</div><br><br><br><br><br></div><pre><code><span>[</span><span><span>HttpGet</span><span><span>(</span><span>"index"</span><span>)</span></span></span><span>]</span>
<span>public</span> <span>IEnumerable<span>&lt;</span>WeatherForecast<span>></span></span> <span>Get</span><span>(</span><span>)</span>
<span>{</span>
    <span>// ...</span>
<span>}</span>

<span>// or</span>
<span>[</span>HttpGet<span>]</span>
<span>[</span><span><span>Route</span><span><span>(</span><span>"index"</span><span>)</span></span></span><span>]</span>
<span>public</span> <span>IEnumerable<span>&lt;</span>WeatherForecast<span>></span></span> <span>Get</span><span>(</span><span>)</span>
<span>{</span>
    <span>// ...</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>另外一种则是直接在控制器中写好方法路由：</p>
<div><div><div>&nbsp;</div><br><br><br><br><br><br><br><br><br></div><pre><code><span>[</span><span><span>Route</span><span><span>(</span><span>"[controller]/[action]"</span><span>)</span></span></span><span>]</span>
<span>public</span> <span>class</span> <span>WeatherForecastController</span> <span>:</span> <span><span>ControllerBase</span></span>
<span>{</span>
    <span>[</span><span><span>HttpGet</span></span><span>]</span>
    <span>public</span> <span>IEnumerable<span>&lt;</span>WeatherForecast<span>></span></span> <span>Get</span><span>(</span><span>)</span>
    <span>{</span>
        <span>// ...</span>
    <span>}</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>后者在编写时会很方便，但是后期维护效果并不好，所以推荐相对灵活的单独编写方式。</p>
<div><p>推荐阅读</p>
<p>关于更多的路由内容，可以参考 <a href="https://docs.microsoft.com/zh-cn/aspnet/core/mvc/controllers/routing" target="_blank" rel="noopener noreferrer">官方文档</a> 深入理解。</p>
</div>
<h2 id="变更端点"> 变更端点</h2>
<p>默认情况下，swagger 文档的路由是 <code>/swagger/{documentName}/swagger.json</code>，如果需要替换，可以通过路由模板设置，需要注意，自定义的路由需要包含 <code>{documentName}</code> 参数：</p>
<div><div><br><br><br><br><br><br><div>&nbsp;</div><br><br><br><div>&nbsp;</div><br><br><br></div><pre><code><span>public</span> <span><span>void</span></span> <span>Configure</span><span>(</span><span>IApplicationBuilder</span> app<span>,</span> <span>IWebHostEnvironment</span> env<span>)</span>
<span>{</span>
    <span>if</span> <span>(</span>env<span>.</span><span>IsDevelopment</span><span>(</span><span>)</span><span>)</span>
    <span>{</span>
        app<span>.</span><span>UseSwagger</span><span>(</span>c <span>=></span>
        <span>{</span>
            c<span>.</span>RouteTemplate <span>=</span> <span>"api-docs/{documentName}/swagger.json"</span><span>;</span>
        <span>}</span><span>)</span><span>;</span>

        <span>// 修改了文档路由，需要同时更新 UI 的端点</span>
        app<span>.</span><span>UseSwaggerUI</span><span>(</span>c <span>=></span> c<span>.</span><span>SwaggerEndpoint</span><span>(</span><span>"/api-docs/v1/swagger.json"</span><span>,</span> <span>"WebApplication1 v1"</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h3 id="修改路由前缀"> 修改路由前缀</h3>
<p>默认的路有前缀是 <code>swagger</code>，如果需要修改，可以通过修改 <code>RoutePrefix</code> 的方式：</p>
<div><div><br><br><div>&nbsp;</div><br><br><br></div><pre><code>app<span>.</span><span>UseSwaggerUI</span><span>(</span>c <span>=></span>
<span>{</span>
    c<span>.</span>RoutePrefix <span>=</span> <span>"swagger"</span><span>;</span>
    c<span>.</span><span>SwaggerEndpoint</span><span>(</span><span>"v1/swagger.json"</span><span>,</span> <span>"My API V1"</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id="生成多文档"> 生成多文档</h2>
<p>有时候需要将文档分类为多个文档，比如多个版本，这时只需要将上面的配置多配置几个即可。</p>
<p>第一步，在 <code>Startup.cs</code> 中配置好名称，比如 <code>v2</code>，该名称需要与路径和配置对应。</p>
<div><div><br><br><br><br><br><div>&nbsp;</div><div>&nbsp;</div><br><br><br><br><br><br><br><div>&nbsp;</div><div>&nbsp;</div><br><br><br></div><pre><code><span>// Startup.cs</span>
<span>public</span> <span><span>void</span></span> <span>ConfigureServices</span><span>(</span><span>IServiceCollection</span> services<span>)</span>
<span>{</span>
    services<span>.</span><span>AddSwaggerGen</span><span>(</span>c <span>=></span>
    <span>{</span>
        c<span>.</span><span>SwaggerDoc</span><span>(</span><span>"v1"</span><span>,</span> <span>new</span> <span>OpenApiInfo</span> <span>{</span> Title <span>=</span> <span>"WebApplication1"</span><span>,</span> Version <span>=</span> <span>"v1"</span> <span>}</span><span>)</span><span>;</span>
        c<span>.</span><span>SwaggerDoc</span><span>(</span><span>"v2"</span><span>,</span> <span>new</span> <span>OpenApiInfo</span> <span>{</span> Title <span>=</span> <span>"WebApplication1"</span><span>,</span> Version <span>=</span> <span>"v2"</span> <span>}</span><span>)</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>
<span>}</span>

<span>public</span> <span><span>void</span></span> <span>Configure</span><span>(</span><span>IApplicationBuilder</span> app<span>,</span> <span>IWebHostEnvironment</span> env<span>)</span>
<span>{</span>
    app<span>.</span><span>UseSwaggerUI</span><span>(</span>c <span>=></span>
    <span>{</span>
        c<span>.</span><span>SwaggerEndpoint</span><span>(</span><span>"/swagger/v1/swagger.json"</span><span>,</span> <span>"WebApplication1 v1"</span><span>)</span><span>;</span>
        c<span>.</span><span>SwaggerEndpoint</span><span>(</span><span>"/swagger/v2/swagger.json"</span><span>,</span> <span>"WebApplication1 v2"</span><span>)</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><p>第二步，去控制器的方法中添加如下内容：</p>
<div><div><br><div>&nbsp;</div><br><br><br><br><br></div><pre><code><span>[</span><span><span>HttpPost</span></span><span>]</span>
<span>[</span><span><span>ApiExplorerSettings</span><span><span>(</span>GroupName <span>=</span> <span>"v2"</span><span>)</span></span></span><span>]</span>
<span>public</span> <span><span>string</span></span> <span>Post</span><span>(</span><span>[</span><span><span>FromBody</span></span><span>]</span><span>Product</span> product<span>)</span>
<span>{</span>
    <span>// ...</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>此时就已经配置好了多文档：</p>
<img :src="$withBase('/assets/roadmap/dotnet/swagger/v2_show.png')" alt="">
<p>当然，多文档的名称是可以自定义的。所以，利用该方式可以将不同接口进行分类，形成分组式的多文档，这会带来更好的文档查阅体验。</p>
<h2 id="配置文档内容"> 配置文档内容</h2>
<h3 id="文档全局信息"> 文档全局信息</h3>
<p>可以通过配置自定义很多文档信息，比如：</p>
<div><pre><code><span>// Startup.cs</span>
services<span>.</span><span>AddSwaggerGen</span><span>(</span>c <span>=></span>
<span>{</span>
    c<span>.</span><span>SwaggerDoc</span><span>(</span><span>"v1"</span><span>,</span> <span>new</span> <span>OpenApiInfo</span>
    <span>{</span>
        Title <span>=</span> <span>"WebApplication1"</span><span>,</span>
        Version <span>=</span> <span>"v1"</span><span>,</span>
        Description <span>=</span> <span>"v1 document"</span><span>,</span>
        Contact <span>=</span> <span>new</span> <span>OpenApiContact</span>
        <span>{</span>
            Name <span>=</span> <span>"Jeremy Jone"</span><span>,</span>
            Email <span>=</span> <span>"jeremyjone@qq.com"</span>
        <span>}</span><span>,</span>
        License <span>=</span> <span>new</span> <span>OpenApiLicense</span>
        <span>{</span>
            Name <span>=</span> <span>"Apache 2.0"</span><span>,</span>
            Url <span>=</span> <span>new</span> <span>Uri</span><span>(</span><span>"http://www.apache.org/licenses/LICENSE-2.0.html"</span><span>)</span>
        <span>}</span>
    <span>}</span><span>)</span><span>;</span>
<span>}</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><h3 id="接口内容"> 接口内容</h3>
<p>对于接口，还可以通过属性的方式配置详细信息，比如响应类型：</p>
<div><pre><code><span>[</span><span><span>HttpGet</span></span><span>]</span>
<span>//[ProducesResponseType(typeof(IEnumerable&lt;WeatherForecast>), 201)]</span>
<span>[</span><span>ProducesResponseType</span><span>(</span><span>201</span><span>)</span><span>]</span>
<span>[</span><span><span>ProducesResponseType</span><span><span>(</span><span>typeof</span><span>(</span><span>IDictionary<span>&lt;</span><span>string</span><span>,</span> <span>string</span><span>></span></span><span>)</span><span>,</span> <span>400</span><span>)</span></span></span><span>]</span>
<span>[</span><span><span>ProducesResponseType</span><span><span>(</span><span>500</span><span>)</span></span></span><span>]</span>
<span>public</span> <span>IEnumerable<span>&lt;</span>WeatherForecast<span>></span></span> <span>MyFunc</span><span>(</span><span>)</span>
<span>{</span>
    <span>// ...</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>如果返回类型只写了 IActionResult，则可以通过添加 <code>typeof</code> 为成功响应添加类型。（如上例行2）</p>
<h3 id="使用-xml-文档"> 使用 xml 文档</h3>
<p>还可以通过 <code>xml</code> 给文档添加详细信息。具体方法是在每个控制器、方法、类和属性添加 <code>xml</code> 注释：</p>
<div><pre><code><span>/// &lt;summary></span>
<span>/// 返回天气列表</span>
<span>/// &lt;/summary></span>
<span>/// &lt;remarks>Remarks!&lt;/remarks></span>
<span>/// &lt;response code="201">成功啦&lt;/response></span>
<span>/// &lt;response code="400">好像缺点什么&lt;/response></span>
<span>/// &lt;response code="500">服务器崩啦&lt;/response></span>
<span>[</span>HttpGet<span>]</span>
<span>//[ProducesResponseType(typeof(IEnumerable&lt;WeatherForecast>), 201)]</span>
<span>[</span><span>ProducesResponseType</span><span>(</span><span>201</span><span>)</span><span>]</span>
<span>[</span><span><span>ProducesResponseType</span><span><span>(</span><span>typeof</span><span>(</span><span>IDictionary<span>&lt;</span><span>string</span><span>,</span> <span>string</span><span>></span></span><span>)</span><span>,</span> <span>400</span><span>)</span></span></span><span>]</span>
<span>[</span><span><span>ProducesResponseType</span><span><span>(</span><span>500</span><span>)</span></span></span><span>]</span>
<span>public</span> <span>IEnumerable<span>&lt;</span>WeatherForecast<span>></span></span> <span>MyFunc</span><span>(</span><span>)</span>
<span>{</span>
    <span>// ...</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>然后在项目属性中配置生成 <code>xml</code> 文档，</p>
<img :src="$withBase('/assets/roadmap/dotnet/swagger/generate_xml1.png')" alt="">
<p>添加之后在配置中包含生成的 <code>xml</code> 文档，即可使用：</p>
<div><pre><code>services<span>.</span><span>AddSwaggerGen</span><span>(</span>c <span>=></span>
<span>{</span>
    <span><span>var</span></span> filePath <span>=</span> Path<span>.</span><span>Combine</span><span>(</span>System<span>.</span>AppContext<span>.</span>BaseDirectory<span>,</span> <span>"WebApplication1.xml"</span><span>)</span><span>;</span>
    c<span>.</span><span>IncludeXmlComments</span><span>(</span>filePath<span>)</span><span>;</span>
<span>}</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><div><p>提示</p>
<p>如果包含多个 <code>xml</code> 文档，可以多次调用 <code>IncludeXmlComments</code> 方法添加，最终生成完整的文档。</p>
</div>
<img :src="$withBase('/assets/roadmap/dotnet/swagger/xml_desc_show.png')" alt="">
<p>但是这样会有一个问题，就是需要在每个类和方法前面都要添加注释，否则会有警告：</p>
<img :src="$withBase('/assets/roadmap/dotnet/swagger/xml_desc_err.png')" alt="">
<p>这样会很不爽，简单的配置一下，还是打开刚才配置生成 <code>xml</code> 文档的属性界面，添加 <code>1591</code> 到 <code>取消显示警告</code> 栏中即可：</p>
<img :src="$withBase('/assets/roadmap/dotnet/swagger/xml_desc_err_sln.png')" alt="">
<h2 id="配置认证"> 配置认证</h2>
<p>通常我们的接口都是需要认证和授权的，如果没有认证，是无法使用文档中的 <code>Try it out</code> 功能的。</p>
<p>最简单的就是写一个获取 token 接口，然后手动填写到认证对话框中，就可以开始使用了。</p>
<p>但是这种方式并不好，我们可以利用认证服务器进行稍微复杂一点的认证。好在 <code>Swagger</code> 为我们提供了便利的认证功能，通过简单设置即可进行认证：</p>
<p>官方文档给的 implicit 示例：</p>
<div><pre><code><span>// Startup.cs</span>
services<span>.</span><span>AddSwaggerGen</span><span>(</span>c <span>=></span>
<span>{</span>
    <span>// Define the OAuth2.0 scheme that's in use (i.e. Implicit Flow)</span>
    c<span>.</span><span>AddSecurityDefinition</span><span>(</span><span>"oauth2"</span><span>,</span> <span>new</span> <span>OpenApiSecurityScheme</span>
    <span>{</span>
        Type <span>=</span> SecuritySchemeType<span>.</span>OAuth2<span>,</span>
        Flows <span>=</span> <span>new</span> <span>OpenApiOAuthFlows</span>
        <span>{</span>
            Implicit <span>=</span> <span>new</span> <span>OpenApiOAuthFlow</span>
            <span>{</span>
                AuthorizationUrl <span>=</span> <span>new</span> <span>Uri</span><span>(</span><span>"/auth-server/connect/authorize"</span><span>,</span> UriKind<span>.</span>Relative<span>)</span><span>,</span>
                Scopes <span>=</span> <span>new</span> <span>Dictionary<span>&lt;</span><span>string</span><span>,</span> <span>string</span><span>></span></span>
                <span>{</span>
                    <span>{</span> <span>"readAccess"</span><span>,</span> <span>"Access read operations"</span> <span>}</span><span>,</span>
                    <span>{</span> <span>"writeAccess"</span><span>,</span> <span>"Access write operations"</span> <span>}</span>
                <span>}</span>
            <span>}</span>
        <span>}</span>
    <span>}</span><span>)</span><span>;</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p>自己写的 code 示例：</p>
<div><pre><code>services<span>.</span><span>AddSwaggerGen</span><span>(</span>c <span>=></span>
<span>{</span>
    c<span>.</span><span>AddSecurityDefinition</span><span>(</span><span>"oauth2"</span><span>,</span> <span>new</span> <span>OpenApiSecurityScheme</span>
    <span>{</span>
        Type <span>=</span> SecuritySchemeType<span>.</span>OAuth2<span>,</span>
        Flows <span>=</span> <span>new</span> <span>OpenApiOAuthFlows</span>
        <span>{</span>
            AuthorizationCode <span>=</span> <span>new</span> <span>OpenApiOAuthFlow</span>
            <span>{</span>
                AuthorizationUrl <span>=</span> <span>new</span> <span>Uri</span><span>(</span><span>"auth-server/connect/authorize"</span><span>)</span><span>,</span>
                TokenUrl <span>=</span> <span>new</span> <span>Uri</span><span>(</span><span>"auth-server/connect/token"</span><span>)</span><span>,</span>
                Scopes <span>=</span> <span>new</span> <span>Dictionary<span>&lt;</span><span>string</span><span>,</span> <span>string</span><span>></span></span> <span>{</span>
                    <span>{</span> <span>"OidcApiName"</span><span>,</span> <span>"ApiName"</span> <span>}</span>
                <span>}</span>
            <span>}</span>
        <span>}</span>
    <span>}</span><span>)</span><span>;</span>
<span>}</span><span>;</span>

app<span>.</span><span>UseSwaggerUI</span><span>(</span>c <span>=></span>
<span>{</span>
    c<span>.</span><span>SwaggerEndpoint</span><span>(</span><span>"/swagger/v1/swagger.json"</span><span>,</span> <span>"ApiName"</span><span>)</span><span>;</span>

    c<span>.</span><span>OAuthClientId</span><span>(</span><span>"OidcSwaggerUIClientId"</span><span>)</span><span>;</span>
    c<span>.</span><span>OAuthAppName</span><span>(</span><span>"ApiName"</span><span>)</span><span>;</span>
    c<span>.</span><span>OAuthUsePkce</span><span>(</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><div><p>请注意</p>
<p>所有配置需要配合认证服务器的客户端配置项。</p>
</div>
<div><p>提示</p>
<p>不了解认证的客户端，请参考 <a href="/document/roadmap/dotnetcore/auth/is4/intro-config.html#client">认证与授权</a> 。</p>
</div>
<p>然后我们就可以进行简单的认证并开始使用了。</p>
<h2 id="更多"> 更多</h2>
<p>Swagger 还有更多的内容，平时基本用不到或者很少用到，比如高级过滤器、重定义 css 样式等。如果以上内容不能满足你的需求或者你想了解更多，可以参考 <a href="https://github.com/domaindrivendev/Swashbuckle.AspNetCore" target="_blank" rel="noopener noreferrer">官方文档</a> 进一步学习。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Flutter 学习之路</title>
      <link>https://docs.jeremyjone.com/roadmap/flutter/</link>
      <guid>https://docs.jeremyjone.com/roadmap/flutter/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">Flutter 学习之路</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="flutter-学习之路"> Flutter 学习之路</h1>
<p>Flutter 的学习之路，页面包含英文学习文章链接。</p>
<p><a href="https://github.com/olexale/flutter_roadmap" target="_blank" rel="noopener noreferrer">英文</a></p>
<p><img src="https://github.com/olexale/flutter_roadmap/raw/master/images/FlutterRoadmap.png" alt="flutter roadmap" /></p>
]]></content:encoded>
      <enclosure url="https://github.com/olexale/flutter_roadmap/raw/master/images/FlutterRoadmap.png" type="image/png"/>
    </item>
    <item>
      <title>前端学习之路</title>
      <link>https://docs.jeremyjone.com/roadmap/frontend/</link>
      <guid>https://docs.jeremyjone.com/roadmap/frontend/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">前端学习之路</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="前端学习之路"> 前端学习之路</h1>
<p>前端学习，需要逐步进阶。从网络三剑客开始，<a href="./html">HTML</a>，<a href="./css">CSS</a>，<a href="./js">JavaScript</a>，然后逐步学习网络知识以，了解了网络原理后可以学习提升性能。</p>
<p>然后可以开始学习框架内容。</p>
]]></content:encoded>
    </item>
    <item>
      <title>前端进阶</title>
      <link>https://docs.jeremyjone.com/roadmap/frontend/advanced/</link>
      <guid>https://docs.jeremyjone.com/roadmap/frontend/advanced/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">前端进阶</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="前端进阶"> 前端进阶</h1>
<h2 id="cors-详解"> CORS 详解</h2>
<p><code>CORS</code> 全称是 <code>Cross-origin Resource Sharing</code>，即 <code>跨域资源共享</code>。它解决了浏览器中只能同源请求数据的限制。</p>
<p>那么我们首先要知道什么是 <code>跨域</code> 和 <code>同源</code>？</p>
<h3 id="什么是跨域"> 什么是跨域</h3>
<p>浏览器都是同源策略，即可以访问同一资源域。对于需要访问不同的资源域，就属于跨域范畴，这在浏览器中是被严格禁止的。</p>
<p>不同域包括：</p>
<ul>
<li>协议不同</li>
<li>域名不同</li>
<li>端口不同</li>
<li>子域名不同</li>
</ul>
<img :src="$withBase('/assets/roadmap/frontend/advanced/cors01.png')" alt="cors01">
<p>只要有一点不同，那么就属于跨域请求，浏览器就会禁止该操作。</p>
<h3 id="cors-的两种请求模式"> CORS 的两种请求模式</h3>
<p>随着 Ajax 请求的使用越来越频繁，网页跨域请求急需解决，于是 W3C 在 2014 年发布了一个正式推荐的通信标准来解决该问题，它就是 <code>CORS</code>。</p>
<p>该方案需要服务端配置相关功能，然后由浏览器自动为每一个跨域请求都自动携带上 <code>Origin</code> 等 http 请求头信息，后台服务检索判定允许或者拒绝即可，这样就可以请求跨域的资源了。</p>
<p>CORS请求分为两种：</p>
<ul>
<li>
<p>简单请求</p>
<blockquote>
<p>简单请求就是使用设定的请求方式来请求数据</p>
<p>简单请求的条件：</p>
<ul>
<li>使用 <code>HEAD</code>、<code>GET</code>、<code>POST</code> 方法</li>
<li><code>HTTP</code> 头信息不超过以下：
<ul>
<li>Accept</li>
<li>Accept-Language</li>
<li>Content-Language</li>
<li>Last-Event-ID</li>
<li>Content-Type，该属性仅限三个值：(application/x-www-form-urlencoded、multipart/form-data、text/plain)</li>
</ul>
</li>
</ul>
</blockquote>
</li>
<li>
<p>非简单请求</p>
<blockquote>
<p>非简单请求则是在使用设定的请求方式请求数据之前，先发送一个 <code>OPTIONS</code> 请求，确定服务端是否允许发送非简单请求，如果可以，才真正发送请求。这个过程叫做 <code>预检</code>。</p>
</blockquote>
</li>
</ul>
<p>了解了 CORS 的请求方式，也就知道，在<strong>浏览器</strong>中，仅仅支持默认的同源访问策略。如果需要访问跨域资源，浏览器会根据请求类型自动处理，整个过程没有人工干预。至于可不可以访问，需要后台服务来判断批准。</p>
<h3 id="前端处理跨域问题"> 前端处理跨域问题</h3>
<p>1、使用 JSONP 请求资源</p>
<p>该方式只支持 GET 请求，它利用浏览器允许跨域请求一些 link、img、script 标签上的内容，实现在一个 script 标签中请求一个链接并返回相应内容进行处理。</p>
<blockquote>
<p>该方式单一、不安全，尽量不要使用。</p>
</blockquote>
<p>2、单独请求</p>
<p>前端遇到跨域问题，常规情况下是解决不了的，这个问题一般来说都是后端来控制的，包括但不限于：</p>
<ul>
<li>反向代理配置，如 nginx、apache 等配置相关字段</li>
<li>后端服务代码中直接添加 <code>AddPolicy.WithOrigins(xxx)</code> 之类的方法来允许某些特定域可以访问当前服务资源</li>
</ul>
<p>这些都是最根本的方案，但有些时候，比如开发期间，我们需要本地调试，这个时候，可以单独请求，这也是我们现在开发中常用的方法。</p>
<p>现在，我们创建一个前端项目之后，通常回本地启动服务，比如 vue，启动后，会在本地开启一个 <code>http://localhost:8080</code> 的服务，浏览器中的每一个请求其实都请求到这里，再通过该服务请求到真正的后台服务。</p>
]]></content:encoded>
    </item>
    <item>
      <title>CSS 预处理器</title>
      <link>https://docs.jeremyjone.com/roadmap/frontend/advanced/css-processor/</link>
      <guid>https://docs.jeremyjone.com/roadmap/frontend/advanced/css-processor/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">CSS 预处理器</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="css-预处理器"> CSS 预处理器</h1>
]]></content:encoded>
    </item>
    <item>
      <title>性能部分</title>
      <link>https://docs.jeremyjone.com/roadmap/frontend/advanced/performance/</link>
      <guid>https://docs.jeremyjone.com/roadmap/frontend/advanced/performance/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">性能部分</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="性能部分"> 性能部分</h1>
<h2 id="网站的性能优化"> 网站的性能优化</h2>
<p>网站的性能主要是指一个网站从请求到完全打开的过程是否顺畅以及用时是否能够达到用户的承受度。简单来说，就是用户打开网站，如果时间过长，或者打开时很不顺畅，那么这种体验是非常糟糕的，也就是性能不好。</p>
<p>通常现在使用 <code>RAIL</code> 评估标准，即：</p>
<ul>
<li>Response：响应，处理事件应在 50ms 以内完成</li>
<li>Animation：动画，每 10ms 产生一帧，至少每秒 60 帧</li>
<li>Idle：空闲，尽可能增加空闲时间</li>
<li>Load：加载，在 5s 内完成所有内容加载并可以交互</li>
</ul>
<img :src="$withBase('/assets/roadmap/frontend/rail.png')" alt="">
<p>关于网站的性能优化，可以从以下多个方面入手：</p>
<ul>
<li>请求内容</li>
</ul>
<p>减少 HTTP 请求次数和文件大小，对于资源文件可以使用缓存。</p>
<div><pre><code>- 资源需要合并压缩 `content-encoding: gzip`
- 图片尽量懒加载
- 音视频流尽可能走流文件
- css 放在头部，js 放在 body 的底部。
</code></pre>
</div><ul>
<li>cookie</li>
</ul>
<p>减少 <code>cookie</code> 的大小</p>
<ul>
<li>避免回流</li>
</ul>
<p><a href="./principle.html#避免-dom-的回流">避免 DOM 的回流</a> 可以有效提高前端性能。</p>
<h2 id="javascript-加载时的阻塞问题"> JavaScript 加载时的阻塞问题</h2>
]]></content:encoded>
    </item>
    <item>
      <title>原理部分</title>
      <link>https://docs.jeremyjone.com/roadmap/frontend/advanced/principle/</link>
      <guid>https://docs.jeremyjone.com/roadmap/frontend/advanced/principle/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">原理部分</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="原理部分"> 原理部分</h1>
<h2 id="浏览器的渲染机制和原理"> 浏览器的渲染机制和原理</h2>
<p>当我们在浏览器地址栏中键入一个地址，然后按下回车，此时一个请求便开始了。</p>
<p>这个过程分成两个阶段：</p>
<ul>
<li>请求阶段：负责从服务器获取内容</li>
<li>渲染阶段：负责将获取到的内容呈现在浏览器中</li>
</ul>
<h3 id="请求阶段"> 请求阶段</h3>
<p>1、当客户端开输入一个网址后，会向服务器发送一个 <a href="/roadmap/base/network/www/http.html#请求-request">Request 请求</a>，首先需要 <code>DNS</code> 解析，然后进行 <code>TCP</code> 连接。</p>
<p>2、服务器收到请求后，会发送一个 <a href="/roadmap/base/network/www/http.html#响应-response">Response 响应</a>给客户端，并将文件内容返回给客户端。</p>
<div><p>说明</p>
<p><a href="/roadmap/base/network/www/http.html">实际请求</a>要比上述过程更加繁琐，但并不影响对于渲染的理解。</p>
</div>
<h3 id="渲染阶段"> 渲染阶段</h3>
<p>1、客户端拿到页面内容后，浏览器会在内存中开辟一块<strong>栈内存</strong>，用来给代码的执行提供环境，同时分配一个主线程一行一行解析和执行代码。</p>
<blockquote>
<p>因为 <code>JavaScript</code> 是单线程，所以每执行完一条语句，都需要执行出栈操作，然后将下一条语句执行进栈操作</p>
</blockquote>
<p>2、当浏览器遇到 <code>link</code>、<code>script</code>、<code>img</code>、<code>video</code> 等资源请求，都会开辟一个全新的线程去加载资源文件，这个全新的线程叫 <strong>任务队列（Task Queue）</strong>。</p>
<p>3、当主文件（不包含资源文件）第一次自上而下加载完成后，会生成 <code>DOM-Tree</code>。</p>
<p>4、加载完 <code>DOM-Tree</code> 后，浏览器会去<strong>任务队列</strong>循环查看那些任务已经完成，然后将已完成的任务一个一个插入到 <code>DOM-Tree</code> 中，知道所有任务全部完成。这叫 <strong>事件循环（Event Loop）</strong>。</p>
<blockquote>
<p>任务队列又分成 <strong>微任务</strong> 和 <strong>宏任务</strong>，<strong>微任务</strong> 的优先级高于 <strong>宏任务</strong></p>
</blockquote>
<p>5、当 CSS 处理完成后，会生成 <code>CSSOM</code>，浏览器会将 <code>DOM-Tree</code> 与 <code>CSSOM</code> 合并成一个 <strong>渲染树（Render Tree）</strong>。</p>
<p>6、回流。浏览器根据生成的 <code>Render Tree</code>，计算它们在设备视口内的确切位置和大小，这个计算阶段叫做 <strong>回流（Reflow）</strong>。</p>
<p>7、重绘。根据 <code>Render Tree</code> 以及 <strong>回流</strong> 得到的几何信息，得到节点的绝对像素，这个阶段叫做 <strong>重绘（Repaint）</strong>。</p>
<blockquote>
<p>在首次加载阶段，一定会发生 <strong>回流</strong> 和 <strong>重绘</strong>，并且一定先 <strong>回流</strong> 再 <strong>重绘</strong></p>
</blockquote>
<p>8、最后，浏览器会调用 GPU 进行图形渲染，将 <code>Render Tree</code> 的内容渲染并展示给用户。</p>
<img :src="$withBase('/assets/roadmap/frontend/render-process.png')" alt="">
<h2 id="页面加载时的阻塞"> 页面加载时的阻塞</h2>
<p>页面加载时，浏览器会逐行解析 <code>html</code> 内容，这是由 GUI 渲染线程所控制的。在此过程中，GUI 渲染线程会逐行解析，同时生成 <code>DOM</code> 树。</p>
<ul>
<li>当所有内容都解析完成，会触发 <code>DOMContentLoaded</code> 事件，此事件的触发无需等待样式表、图片、脚本等资源的加载。</li>
<li>当一个页面包含所有资源被加载完成并解析成功后，执行 <code>load</code> 事件。这也是为什么我们之前写 js 总是需要 <code>window.onload = function() {}</code>。</li>
</ul>
<h3 id="加载时遇到-js-代码"> 加载时遇到 js 代码</h3>
<p>如果在加载页面时，遇到了 <code>&lt;script&gt;</code> 标签，GUI 渲染线程会暂停渲染，并将控制权移交给 JS 引擎。此时浏览器将执行 JS 代码，如果是内联代码，则直接执行。如果是外部文件，则等待下载后再执行（）。所有代码执行完毕之后将控制权再移交给 GUI 渲染线程，浏览器继续渲染 DOM。</p>
<p>为了减少 <code>&lt;script&gt;</code> 标签对页面渲染的影响，可以通过：</p>
<ul>
<li>将所有 <code>&lt;script&gt;</code> 标签写在页面底部</li>
<li>使用 async 关键字来加载外部文件。此时浏览器不会阻塞，当下载完成它会自动执行文件内容</li>
<li>使用 defer 关键字来加载外部文件。此时浏览器会在 <code>DOMContentLoaded</code> 事件触发之前执行该文件内容</li>
</ul>
<h3 id="加载时遇到-css-代码"> 加载时遇到 css 代码</h3>
<p>加载页面时，遇到 <code>&lt;link&gt;</code> 标签与 <code>&lt;style&gt;</code> 标签同样会影响页面的渲染。但是它不会阻塞 DOM 树的构建，只影响页面的渲染。</p>
<p>比如：我们有:</p>
<div><pre><code><span><span><span>&lt;</span>h1</span> <span>class</span><span><span>=</span><span>"</span>title<span>"</span></span><span>></span></span>Hello World<span><span><span>&lt;/</span>h1</span><span>></span></span>
<span><span><span>&lt;</span>style</span><span>></span></span><span><span>
  <span>.title</span> <span>{</span>
    <span>padding</span><span>:</span> 1rem<span>;</span>
  <span>}</span>

  <span>.text</span> <span>{</span>
    <span>color</span><span>:</span> red<span>;</span>
  <span>}</span>
</span></span><span><span><span>&lt;/</span>style</span><span>></span></span>
<span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>text<span>"</span></span><span>></span></span>Hello World<span><span><span>&lt;/</span>div</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>页面会首先渲染 <code>&lt;h1&gt;</code> 元素到页面上，然后读取到 <code>&lt;style&gt;</code> 标签从而开始构建 CSSOM 树，构建完成后重新渲染 <code>&lt;h1&gt;</code> 元素，并继续渲染 <code>&lt;div&gt;</code> 元素。</p>
<p>这样会导致：</p>
<ul>
<li><code>&lt;div&gt;</code> 标签在 CSSOM 构建完毕之前不会渲染，也就是阻塞在了标签这里。</li>
<li>标签之前的内容被渲染了两次，因为样式的变化，可能出现 <strong>屏闪</strong> 现象。</li>
</ul>
<p>所以正确的方式我们应该将 <code>&lt;link&gt;</code> 与 <code>&lt;style&gt;</code> 放在页面最开始的位置，通常放在 <code>head</code> 中。</p>
<h2 id="回流-reflow-与重绘-repaint"> 回流 Reflow 与重绘 Repaint</h2>
<ul>
<li>
<p>回流：当元素的宽高、大小或者位置等影响布局的属性发生了变化，会触发重弄更新布局，导致渲染树重新计算布局和渲染，这个过程叫做回流。</p>
<p>如下等情况会发生回流：</p>
<ul>
<li>页面初始化（即首次渲染）</li>
<li>添加或删除 DOM 元素</li>
<li>元素位置发生变化（left、right、top、bottom 等）</li>
<li>元素尺寸发生变化（size、width、height、margin、padding 等）</li>
<li>内容发生变化（图片大小、文本大小、内容增减等）</li>
<li>浏览器窗口发生变化</li>
</ul>
</li>
<li>
<p>重绘：当元素样式发生改变，但是宽高、大小、位置等影响布局的属性不发生变化时，浏览器会进行重绘。</p>
<p>如：outline、visibility、color 等不影响布局的属性发生变化</p>
</li>
</ul>
<div><p>注意</p>
<p>页面首次加载一定会回流
回流一定触发重绘，而重绘不一定回流</p>
</div>
<h3 id="避免-dom-的回流"> 避免 DOM 的回流</h3>
<p>避免 DOM 的回流，可以有效提高前端性能。可以通过如下几点来避免：</p>
<ul>
<li>
<p>放弃传统操作 DOM 的方式（原生 js、jQuery 等），而是采用基于 vue、react 等框架，用数据影响视图的模式（MVVM）</p>
</li>
<li>
<p>读写分离，利用现代浏览器的渲染队列机制</p>
<p>现代浏览器一般都会自动维护一个<strong>渲染队列</strong>，把所有会引起回流、重绘的操作放入队列，当操作一定数量或到达一定时间后，浏览器会自动刷新队列，批处理所有内容。</p>
<p>但是有一些属性，会导致浏览器立即刷新渲染队列：</p>
<ul>
<li><code>offsetTop/Left/Width/Height</code></li>
<li><code>clientTop/Left/Width/Height</code></li>
<li><code>scrollTop/Left/Width/Height</code></li>
<li><code>width</code>、<code>height</code></li>
<li><code>getComputedStyle</code>、<code>currentStyle</code></li>
</ul>
<p>这些属性为了获取到最精确的数值，会立即刷新所有需要回流的内容。</p>
</li>
<li>
<p>样式集中改变</p>
<p>不要一个一个属性的去改变，最好是一起写完样式，统一改变，这样可以减少回流次数。</p>
<div><pre><code>✔ div<span>.</span>style<span>.</span>cssText <span>=</span> <span>"width:20px;height:20px"</span><span>;</span>

<span>// 而不是</span>
❌ div<span>.</span>style<span>.</span>width <span>=</span> <span>"20px"</span><span>;</span>
❌ div<span>.</span>style<span>.</span>height <span>=</span> <span>"20px"</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>当然，现代浏览器已经在很大程度上帮我们做好了这样的规划，当读取到样式改变的内容时，不会第一时间去回流，而是尝试继续读取后面的内容，尽可能将所有改变样式都做完后再一次性的进行回流和重绘。但我们仍然需要养成良好的习惯。</p>
</li>
<li>
<p>集中添加元素</p>
<p>添加元素时，不要一个一个直接往 DOM 中添加，而是将所有内容添加到 <code>fragment</code> 中，最后添加一次就好。</p>
<p>使用 <code>document.createDocumentFragment()</code> 创建临时容器，再把新元素添加到该容器中，最后将该容器添加到 DOM 中，引发一次回流：</p>
<img :src="$withBase('/assets/roadmap/frontend/create-document-fragment.png')" alt="">
<p>当然还可以使用文档字符串，拼接之后一次性添加到 HTML 中：</p>
<img :src="$withBase('/assets/roadmap/frontend/document-str.png')" alt="">
</li>
<li>
<p>让动画效果脱离文档流</p>
<p>将具有动画效果的元素尽可能脱离文档流。通过 <code>position:absolute / fixed</code> 的方式，让元素在一个全新层级，这样就不会影响大部分的页面元素，减少回流的计算。</p>
</li>
<li>
<p>使用 CSS3 的硬件加速</p>
<p>CSS3 提供了 GPU 加速功能。使用 <code>transform</code>、<code>opacity</code>、<code>filters</code> 等属性时会触发硬件加速，避免回流和重绘。</p>
<div><pre><code>div<span>.</span>style<span>.</span>transform <span>=</span> <span>"translateX(200px)"</span><span>;</span>
<span>// 效果等同于</span>
div<span>.</span>style<span>.</span>left <span>=</span> <span>"200px"</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>同时也要注意，过多使用可能会导致大量占用内存，性能消耗严重，字体模糊等问题。这些是需要兼顾考虑的。</p>
</li>
<li>
<p>牺牲平滑度换取速度</p>
<p>有时我们可以通过牺牲掉平滑度来换取更快的速度。因为每次元素移动 <code>1px</code> 都会引发回流，所以我们可以加大移动间距，比如尝试 <code>2px</code> 甚至 <code>3px</code>。</p>
</li>
<li>
<p>避免 table 布局和使用 CSS 的 JavaScript 表达式</p>
<p>页面中 table 布局层级太多，会导致多次计算才能确定元素的属性，从而导致大量回流。</p>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>TypeScript</title>
      <link>https://docs.jeremyjone.com/roadmap/frontend/advanced/ts/</link>
      <guid>https://docs.jeremyjone.com/roadmap/frontend/advanced/ts/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">TypeScript</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="typescript"> TypeScript</h1>
]]></content:encoded>
    </item>
    <item>
      <title>CSS 基础</title>
      <link>https://docs.jeremyjone.com/roadmap/frontend/css/</link>
      <guid>https://docs.jeremyjone.com/roadmap/frontend/css/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">CSS 基础</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="css-基础"> CSS 基础</h1>
<h2 id="什么是-css"> 什么是 CSS</h2>
<p>CSS，<code>Cascading Style Sheets</code>，即 <code>层叠样式表</code>。它是一种样式表语言，用来描述 <code>HTML</code> 或 <code>XML</code> 文档的呈现。<code>CSS</code> 描述了在屏幕、纸质、音频等其他媒体上的元素应该如何被渲染的问题。</p>
<p>CSS 是网络的核心语言之一。它可以通过 <code>*.css</code> 文件保存，同时控制多个网页的布局。</p>
<h2 id="css-的工作原理"> CSS 的工作原理</h2>
<ul>
<li>浏览器载入 HTML 文件后，会转化为成一个 <a href="./../html/#dom">DOM</a></li>
<li>之后浏览器会处理资源文件，包括图片、视频、CSS 文件等</li>
<li>获取到 CSS 文件，浏览器开始解析，并根据选择器类型的不同，将它们分别放入不同的容器中。浏览器会按照不同的规则将样式应用在 DOM 节点中，并为其添加节点依赖的样式（CSSOM）</li>
<li>全部应用完成之后，会按照结果进行布局渲染，并展示在页面上</li>
</ul>
<img :src="$withBase('/assets/roadmap/frontend/css-principle.svg')" alt="">
<h3 id="应用你的-css"> 应用你的 CSS</h3>
<p>应用 CSS，可以有三种选择：</p>
<ul>
<li>外部样式表</li>
</ul>
<p>外部样式表就是将所有 CSS 样式保存在单独的 <code>*.css</code> 文件中，通过 <code>&lt;link&gt;</code> 标签引入并使用：</p>
<div><div><br><br><br><br><br><div>&nbsp;</div><br><br><br><br><br><br><br></div><pre><code><span><span>&lt;!</span><span>DOCTYPE</span> <span>html</span><span>></span></span>
<span><span><span>&lt;</span>html</span><span>></span></span>
  <span><span><span>&lt;</span>head</span><span>></span></span>
    <span><span><span>&lt;</span>meta</span> <span>charset</span><span><span>=</span><span>"</span>utf-8<span>"</span></span> <span>/></span></span>
    <span><span><span>&lt;</span>title</span><span>></span></span>My CSS experiment<span><span><span>&lt;/</span>title</span><span>></span></span>
    <span><span><span>&lt;</span>link</span> <span>rel</span><span><span>=</span><span>"</span>stylesheet<span>"</span></span> <span>href</span><span><span>=</span><span>"</span>styles.css<span>"</span></span> <span>/></span></span>
  <span><span><span>&lt;/</span>head</span><span>></span></span>
  <span><span><span>&lt;</span>body</span><span>></span></span>
    <span><span><span>&lt;</span>h1</span><span>></span></span>Hello World!<span><span><span>&lt;/</span>h1</span><span>></span></span>
    <span><span><span>&lt;</span>p</span><span>></span></span>This is my first CSS example<span><span><span>&lt;/</span>p</span><span>></span></span>
  <span><span><span>&lt;/</span>body</span><span>></span></span>
<span><span><span>&lt;/</span>html</span><span>></span></span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>该引用可以是本地、也可以是远程路径。</p>
<ul>
<li>内部样式表</li>
</ul>
<p>内部样式表是指不必使用外部样式表，而是将完整的 CSS 样式放在 HTML 文件中：</p>
<div><div><br><br><br><br><br><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><br><br><br><br><br><br><br></div><pre><code><span><span>&lt;!</span><span>DOCTYPE</span> <span>html</span><span>></span></span>
<span><span><span>&lt;</span>html</span><span>></span></span>
  <span><span><span>&lt;</span>head</span><span>></span></span>
    <span><span><span>&lt;</span>meta</span> <span>charset</span><span><span>=</span><span>"</span>utf-8<span>"</span></span> <span>/></span></span>
    <span><span><span>&lt;</span>title</span><span>></span></span>My CSS experiment<span><span><span>&lt;/</span>title</span><span>></span></span>
    <span><span><span>&lt;</span>style</span><span>></span></span><span><span>
      <span>h1</span> <span>{</span>
        <span>color</span><span>:</span> blue<span>;</span>
        <span>background-color</span><span>:</span> yellow<span>;</span>
        <span>border</span><span>:</span> 1px solid black<span>;</span>
      <span>}</span>

      <span>p</span> <span>{</span>
        <span>color</span><span>:</span> red<span>;</span>
      <span>}</span>
    </span></span><span><span><span>&lt;/</span>style</span><span>></span></span>
  <span><span><span>&lt;/</span>head</span><span>></span></span>
  <span><span><span>&lt;</span>body</span><span>></span></span>
    <span><span><span>&lt;</span>h1</span><span>></span></span>Hello World!<span><span><span>&lt;/</span>h1</span><span>></span></span>
    <span><span><span>&lt;</span>p</span><span>></span></span>This is my first CSS example<span><span><span>&lt;/</span>p</span><span>></span></span>
  <span><span><span>&lt;/</span>body</span><span>></span></span>
<span><span><span>&lt;/</span>html</span><span>></span></span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><p>该方法比外部样式表更加低效，因为所有样式仅仅针对当前 HTML 文档有效，这意味着可能存在大量重复的样式，并且在修改时需要按照文件分别修改。</p>
<ul>
<li>内联样式表</li>
</ul>
<p>内联样式表存在于 HTML 元素中，它是 <code>style</code> 属性的值，其特点是只影响当前元素：</p>
<div><div><br><br><br><br><br><br><br><div>&nbsp;</div><br><br><div>&nbsp;</div><br><br><br></div><pre><code><span><span>&lt;!</span><span>DOCTYPE</span> <span>html</span><span>></span></span>
<span><span><span>&lt;</span>html</span><span>></span></span>
  <span><span><span>&lt;</span>head</span><span>></span></span>
    <span><span><span>&lt;</span>meta</span> <span>charset</span><span><span>=</span><span>"</span>utf-8<span>"</span></span> <span>/></span></span>
    <span><span><span>&lt;</span>title</span><span>></span></span>My CSS experiment<span><span><span>&lt;/</span>title</span><span>></span></span>
  <span><span><span>&lt;/</span>head</span><span>></span></span>
  <span><span><span>&lt;</span>body</span><span>></span></span>
    <span><span><span>&lt;</span>h1</span> <span><span>style</span><span><span>=</span><span>"</span><span><span>color</span><span>:</span> blue<span>;</span><span>background-color</span><span>:</span> yellow<span>;</span><span>border</span><span>:</span> 1px solid black<span>;</span></span><span>"</span></span></span><span>></span></span>
      Hello World!
    <span><span><span>&lt;/</span>h1</span><span>></span></span>
    <span><span><span>&lt;</span>p</span> <span><span>style</span><span><span>=</span><span>"</span><span><span>color</span><span>:</span>red<span>;</span></span><span>"</span></span></span><span>></span></span>This is my first CSS example<span><span><span>&lt;/</span>p</span><span>></span></span>
  <span><span><span>&lt;/</span>body</span><span>></span></span>
<span><span><span>&lt;/</span>html</span><span>></span></span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><div><p>注意</p>
<p>除非必须针对当前元素，否则不要使用内联样式表。</p>
</div>
<h3 id="覆盖-css-样式"> 覆盖 CSS 样式</h3>
<p>因为 CSS 样式是允许继承，同时允许层叠，如果 CSS 样式遇到重复，则会按照以下规则进行覆盖：</p>
<ul>
<li>由于继承而发生的样式冲突，最近祖先优先</li>
<li>当前元素的样式与继承样式冲突，使用当前元素的样式</li>
<li>相同元素的外联样式表，选择器的权重高者优先</li>
<li>内联样式的优先级高于其他样式表</li>
<li>含 <code>! important</code> 的样式不会被覆盖</li>
</ul>
<p>更多具体内容，可以参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity" target="_blank" rel="noopener noreferrer">MDN</a>。</p>
]]></content:encoded>
    </item>
    <item>
      <title>盒模型</title>
      <link>https://docs.jeremyjone.com/roadmap/frontend/css/box/</link>
      <guid>https://docs.jeremyjone.com/roadmap/frontend/css/box/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">盒模型</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="盒模型"> 盒模型</h1>
<p>盒模型是 <code>CSS</code> 中一个非常重要的概念。所有元素都被一个个盒子包裹，理解盒模型的原理，是我们使用 <code>CSS</code> 实现准确布局、处理元素排列的关键所在。</p>
<h2 id="块级与内联"> 块级与内联</h2>
<p>在 <code>CSS</code> 中，常用的有两种盒子，<code>块级盒子</code> 与 <code>内联盒子</code>。这两种盒子会在页面流和元素之间表现出不同的行为。</p>
<h3 id="块级盒子的行为"> 块级盒子的行为</h3>
<ul>
<li>盒子会在内联的方向上扩展并占据父容器在该方向上的所有可用空间，绝大多数情况下，盒子会和父容器一样宽</li>
<li>每个盒子都会换行</li>
<li>可以块级盒子使用 <code>width</code> 与 <code>height</code> 属性</li>
<li>内边距（<code>padding</code>）、外边距（<code>margin</code>）以及边框（<code>border</code>）会将其他元素从当前盒子周围推开</li>
</ul>
<h3 id="内联盒子的行为"> 内联盒子的行为</h3>
<ul>
<li>盒子不会换行</li>
<li><code>width</code> 与 <code>height</code> 属性不会生效</li>
<li>垂直方向的内边距、外边距以及边框都会被应用，但不会推开其他内联盒子</li>
<li>水平方向的内边距、外边距以及边框都会被应用，并且会把周围内联盒子推开</li>
</ul>
<h3 id="控制盒子的显示类型"> 控制盒子的显示类型</h3>
<p>通过 <code>display</code> 属性，可以改变盒子的显示类型：</p>
<div><pre><code><span>/* 设置为块级 */</span>
<span>display</span><span>:</span> block<span>;</span>

<span>/* 设置为内联 */</span>
<span>display</span><span>:</span> inline<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><div><p>提示</p>
<p>为了更好的展示块级与内联的区别，自己写了一个 <a :href="$withBase('/example/css/position.html')" target="_blank" rel="noopener noreferrer">演示页面</a>，有需要的小朋友可以去体验一下。</p>
</div>
<h2 id="什么是盒模型"> 什么是盒模型</h2>
<p>完整的 <code>CSS</code> 盒模型应用于块级盒子，内联盒子只使用和模型中定义的部分内容。</p>
<p>在这个模型中，定义了 <code>margin</code>、<code>padding</code>、<code>border</code> 和 <code>content</code>。</p>
<ul>
<li><code>margin</code>：盒模型最外层区域，设置该盒模型与其他元素之间的空白区域</li>
<li><code>border</code>：设置盒模型的边框属性</li>
<li><code>padding</code>：盒模型内容与边框的空白区域</li>
<li><code>content</code>：用来显示内容，像 <code>width</code>、<code>height</code> 这样的属性作用于这里</li>
</ul>
<img :src="$withBase('/assets/roadmap/frontend/box-model.png')" alt="box-model">
<h3 id="标准盒模型"> 标准盒模型</h3>
<p>一个盒模型的标准宽高，应该是：</p>
<blockquote>
<p>宽度：<code>border-width</code> + <code>padding-left</code> + <code>width</code> + <code>padding-right</code> + <code>border-width</code></p>
<p>高度：<code>border-width</code> + <code>padding-top</code> + <code>height</code> + <code>padding-bottom</code> + <code>border-width</code></p>
</blockquote>
<p><code>margin</code> 不计入实际大小。当然它也影响盒子在页面中所占空间，但影响的是外部空间，盒子的大小并不计算在内。</p>
<img :src="$withBase('/assets/roadmap/frontend/standard-box-model.png')" alt="standard-box-model.png">
<p>这是默认模式，如果希望显式指定，可以通过 <code>box-sizing: content-box;</code> 来设置。</p>
<h3 id="替代盒模型"> 替代盒模型</h3>
<p>有时候，希望我们的宽高设置后，就是盒子本身的大小，而不用单独计算边框和边距，这时可以使用 <strong>替代盒模型</strong>。它的宽高就是我们给出的 <code>width</code> 和 <code>height</code>，而盒模型里面内容的宽高会自动从这个总宽高中减去对应的边框和边距大小。</p>
<img :src="$withBase('/assets/roadmap/frontend/alternate-box-model.png')" alt="alternate-box-model.png">
<p>浏览器默认为标准盒模型，如果我们使用替代盒模型，可以通过 <code>box-sizing: border-box;</code> 来设置。</p>
<h2 id="外边距"> 外边距</h2>
<p>外边距总是在可见部分之外单独计算添加，它用于将当前盒子与其他元素拉开距离。</p>
<p>外边距有四个属性：</p>
<div><pre><code><span>margin-top</span><span>:</span> 10px<span>;</span>
<span>margin-right</span><span>:</span> 10px<span>;</span>
<span>margin-bottom</span><span>:</span> 10px<span>;</span>
<span>margin-left</span><span>:</span> 10px<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>同时支持简写，可以定义多种方式：</p>
<div><pre><code><span>/* 四周外边距都为 10px */</span>
<span>margin</span><span>:</span> 10px<span>;</span>

<span>/* 上下 10px，左右 20px */</span>
<span>margin</span><span>:</span> 10px 20px<span>;</span>

<span>/* 上 10px，左右 20px，右 5px */</span>
<span>margin</span><span>:</span> 10px 20px 5px<span>;</span>

<span>/* 上 10px，右 20px，下 5px，左 15px */</span>
<span>margin</span><span>:</span> 10px 20px 5px 15px<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>取值支持：</p>
<ul>
<li><code>px</code>：绝对数值单位</li>
<li><code>%</code>：百分比，占父元素宽高的比例</li>
<li><code>auto</code>：自动计算，只能设置左右，设置后块级元素会水平居中。（上下无效）</li>
</ul>
<p>同时取值支持 <strong>负值</strong>，可以减少边距，相当于移动元素位置。</p>
<h3 id="外边距折叠"> 外边距折叠</h3>
<p>如果两个具有外边距的元素相接，那么它们会合并为一个外边距，即最大的单个外边距大小。</p>
<p>比如一个块级元素具有 <code>margin-bottom: 50px</code>，另一个块级元素具有 <code>margin-top:10px</code>，那么它们上下相连并不会出现 <code>60px</code> 的边距，而是选取两者的最大值，即 <code>50px</code> 作为外边距。</p>
<div><p>提示</p>
<p>当设置了外边距之后，并没有得到我们希望的效果，很大概率是因为外边距折叠导致。</p>
</div>
<p>触发外边距折叠的情况：</p>
<ul>
<li>
<p>相连盒模型都是块级的</p>
<blockquote>
<p>只有块级元素才会出现外边距折叠。此外，设置了 <code>float</code> 或 <code>position:absolute</code> 的元素，也不会出现该情况。</p>
</blockquote>
</li>
<li>
<p>同一层相邻元素之间</p>
<blockquote>
<p>这是比较常见的情况。除非后一元素使用 <code>clear-fix</code> 清除浮动</p>
</blockquote>
</li>
<li>
<p>没有内容将父元素和后代元素分开</p>
<blockquote>
<p>父元素与后代之间没有任何内容，包括 <code>border</code>、<code>padding</code>、<code>content</code>、<code>min-height</code>、<code>max-height</code>，导致父元素的 <code>margin</code> 与 后代元素的 <code>margin</code> 直接相连，就会出现父元素和后代元素外边界重叠。</p>
</blockquote>
</li>
<li>
<p>空的块级元素</p>
<blockquote>
<p>当一个块元素的上边界与下边界相连，中间没有任何内容，包括 <code>border</code>、<code>padding</code>、<code>content</code>、<code>min-height</code>、<code>max-height</code>，或内容设定为 <code>inline</code> 或加上 <code>clear-fix</code> 的时候，会导致上下边界重叠。</p>
</blockquote>
</li>
</ul>
<h2 id="边框"> 边框</h2>
<p>边框是在边距和填充框之间绘制的。边框有大量属性，主要分为：</p>
<ul>
<li>边框宽度</li>
<li>边框样式</li>
<li>边框颜色</li>
</ul>
<p>支持统一设定，也支持单独设定：</p>
<div><pre><code><span>/* 统一设置 */</span>
<span>border</span><span>:</span> 1px solid black<span>;</span>

<span>/* 单独设置一边 */</span>
<span>border-top</span><span>:</span> 1px dotted<span>;</span>

<span>/* 单独设置宽度、样式、颜色，支持1-4个参数风格 */</span>
<span>border-width</span><span>:</span> 1px 2px 3px 4px<span>;</span>
<span>border-style</span><span>:</span> none groove inset double<span>;</span>
<span>border-color</span><span>:</span> red yellow green blue<span>;</span>

<span>/* 还支持上下左右单独设置每个属性 */</span>
<span>border-left-style</span><span>:</span> dashed<span>;</span>
<span>border-bottom-color</span><span>:</span> pink<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>完整内容，参考 <a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/The_box_model#%E8%BE%B9%E6%A1%86" target="_blank" rel="noopener noreferrer">MDN</a></p>
<h2 id="内边距"> 内边距</h2>
<p>内边距用于将内容与边框分开。与外边距不同，内边距不能出现负值，它必须大于等于 0 的值。</p>
<p>与外边距 <code>margin</code> 一样，内边距有四个属性：</p>
<div><pre><code><span>padding-top</span><span>:</span> 10px<span>;</span>
<span>padding-right</span><span>:</span> 10px<span>;</span>
<span>padding-bottom</span><span>:</span> 10px<span>;</span>
<span>padding-left</span><span>:</span> 10px<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>它同样支持 1-4 个参数方式：</p>
<div><pre><code><span>/* 四周内边距都为 10px */</span>
<span>padding</span><span>:</span> 10px<span>;</span>

<span>/* 上下 10px，左右 20px */</span>
<span>padding</span><span>:</span> 10px 20px<span>;</span>

<span>/* 上 10px，左右 20px，右 5px */</span>
<span>padding</span><span>:</span> 10px 20px 5px<span>;</span>

<span>/* 上 10px，右 20px，下 5px，左 15px */</span>
<span>padding</span><span>:</span> 10px 20px 5px 15px<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>布局</title>
      <link>https://docs.jeremyjone.com/roadmap/frontend/css/layout/</link>
      <guid>https://docs.jeremyjone.com/roadmap/frontend/css/layout/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">布局</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="布局"> 布局</h1>
<p><code>CSS</code> 页面布局技术允许我们拾取网页中的元素，并且控制它们相对正常布局流、周边元素、父容器或主视口的位置。</p>
<h2 id="正常布局流"> 正常布局流</h2>
<p>正常布局流是指在不对页面进行任何布局控制时，浏览器默认的布局方式。它其实就是 。</p>
<p>大多数情况下，正常布局流已经可以搭建一个良好的页面。选择合适的布局流是关键，而不是一味的脱离正常布局流进行复杂的搭建工作。</p>
<p>以下技术会覆盖默认的布局行为：</p>
<ul>
<li><code>display</code> 属性设置为 <code>flex</code> 或者 <code>grid</code> 等</li>
<li>浮动（<code>float</code>）</li>
<li><code>position</code> 属性的修改</li>
<li>表格布局（<code>display: table</code>）。但并不建议过多使用</li>
<li>多列布局</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>弹性布局（Flexbox）</title>
      <link>https://docs.jeremyjone.com/roadmap/frontend/css/layout/flex/</link>
      <guid>https://docs.jeremyjone.com/roadmap/frontend/css/layout/flex/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">弹性布局（Flexbox）</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="弹性布局（flexbox）"> 弹性布局（Flexbox）</h1>
<p>弹性盒子布局是专门用于创建横向/纵向的一维页面布局。虽然它是一维页面布局，但是通过嵌套，可以在两个维度构建更加丰富的布局内容。</p>
<p>要使用弹性盒子，只需要在父级元素中设置 <code>display:flex</code> 即可，所有子元素都将按照 <code>flex</code> 进行布局。</p>
<p>该方法会将该父级容器变为块级元素，其内部变为 <code>flex</code> 布局。同样的，我们还可以设置 <code>display:inline-flex</code> 将其设置为行内块元素。</p>
<h2 id="主轴与交叉轴"> 主轴与交叉轴</h2>
<h3 id="主轴"> 主轴</h3>
<p>要想理解弹性盒子，必须要理解主轴与副轴的概念。前面已经说到，弹性盒子是在一维页面进行布局，那么一维上就是一条线，也就是主轴。弹性盒子内的所有元素都会沿着主轴进行排列，它确定了内部元素如何在 <code>flex</code> 容器中布局。</p>
<p>默认情况下，主轴是水平方向从左向右延伸的。</p>
<p>通过 <code>flex-direction</code> 可以修改主轴方向：</p>
<div><pre><code><span>/* 默认值，水平方向 */</span>
<span>flex-direction</span><span>:</span> row<span>;</span>

<span>/* 垂直方向 */</span>
<span>flex-direction</span><span>:</span> column<span>;</span>

<span>/* 水平反向 */</span>
<span>flex-direction</span><span>:</span> row-reverse<span>;</span>

<span>/* 垂直反向 */</span>
<span>flex-direction</span><span>:</span> column-reverse<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><img :src="$withBase('/assets/roadmap/frontend/css/flex-direction-row.png')" alt="flex-direction-row.png">
<img :src="$withBase('/assets/roadmap/frontend/css/flex-direction-column.png')" alt="flex-direction-column.png">
<div><p>注意</p>
<p><code>row</code> 和 <code>row-reverse</code> 的方向受 <code>dir</code> 属性影响。如果是 <code>ltr</code>，则 <code>row</code> 表示从左至右，<code>row-reverse</code> 表示从右至左。如果 <code>dir</code> 属性为 <code>rtl</code>，则相反。</p>
</div>
<h3 id="交叉轴"> 交叉轴</h3>
<p>相应的，垂直于主轴方向的轴，就是交叉轴。虽然弹性布局是一维层面的，但是后面我们会遇到有用到副轴的情况。它与主轴方向的逻辑一样，也是可以反转的。默认同样是从左至右、或从上至下。</p>
<img :src="$withBase('/assets/roadmap/frontend/css/cross-direction-row.png')" alt="cross-direction-row.png">
<img :src="$withBase('/assets/roadmap/frontend/css/cross-direction-column.png')" alt="cross-direction-column.png">
<p>理解主轴和交叉轴的概念对于对齐 <code>flexbox</code> 里面的元素是很重要的；<code>flexbox</code> 的特性是沿着主轴或者交叉轴对齐之中的元素。</p>
<h2 id="对齐方式"> 对齐方式</h2>
<p>主轴和交叉轴具有方向性，这类似于我们学过的数学坐标系，假设 <code>x</code> 轴为主轴，那么 <code>y</code> 轴就是交叉轴。箭头方向就表示为对齐的方式。</p>
<img :src="$withBase('/assets/roadmap/frontend/css/flex-direction-align.png')" alt="flex-direction-align">
<p>这是根据现代书写习惯和阅读方式定义的。假设我们正在使用英文或者中文，那么很自然，我们习惯从左上到右下：</p>
<img :src="$withBase('/assets/roadmap/frontend/css/english-align.png')" alt="english-align">
<p>而如果我们正在阅读阿拉伯文，那么就会从右上到左下：</p>
<img :src="$withBase('/assets/roadmap/frontend/css/arab-align.png')" alt="arab-align">
<p>交叉轴在上述情况下始终都是自上而下的。</p>
<p>为了避免用词上的误会，所以在弹性布局中，对于主轴和交叉轴的起始和终止端，我们不用左右和上下，而是采用 <code>起始端</code> 和 <code>终止端</code>，这样可以更好的描述轴的方向性。</p>
<p>所以在上面的实际用法中，<code>row-reverse</code>、<code>column-reverse</code> 是将起始端和终止端互换位置。</p>
<h2 id="堆叠方式"> 堆叠方式</h2>
<p>一般来说，<code>flex</code> 可以将子元素都放在主轴上，哪怕空间不够，它会将子元素压缩，这也是为什么叫 <strong>弹性盒子</strong> 的原因之一。但很多时候这并不符合设计要求，随着视口尺寸不一，这样的显示效果会有很大差别。</p>
<h3 id="flex-wrap"> flex-wrap</h3>
<p>所以 <code>flex</code> 也支持溢出换行。它默认是不换行的，如果我们设置了换行，那么它不会压缩子元素，而是遇到溢出直接换行。</p>
<div><pre><code><span>/* 默认值 */</span>
<span>flex-wrap</span><span>:</span> nowrap<span>;</span>

<span>/* 设置换行 */</span>
<span>flex-wrap</span><span>:</span> wrap<span>;</span>

<span>/* 还可以设置反向换行 */</span>
<span>flex-wrap</span><span>:</span> wrap-reverse<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h3 id="flex-flow"> flex-flow</h3>
<p><code>flex-flow</code> 是 <code>flex-direction</code> 与 <code>flex-wrap</code> 的组合简写。</p>
<div><pre><code><span>/* 默认值 */</span>
<span>flex-flow</span><span>:</span> row nowrap<span>;</span>

<span>/* 横向主轴，换行 */</span>
<span>flex-flow</span><span>:</span> row wrap<span>;</span>

<span>/* 纵向反向主轴，反向换行 */</span>
<span>flex-flow</span><span>:</span> column-reverse wrap-reverse<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="元素属性"> 元素属性</h2>
<p>上面说的是 <code>flex</code> 容器的内容。下面将介绍 <code>flex</code> 容器中的元素的相关内容。</p>
<h3 id="flex-basis"> flex-basis</h3>
<p><code>flex-basis</code> 属性指定元素在主轴方向上的初始大小。</p>
<p>整体来说，<code>min-width</code>、<code>max-width</code>、<code>min-height</code>、<code>max-height</code>、 这些属性优先级高于 <code>flex-basis</code>，而 <code>flex-basis</code> 的优先级（除设置 <code>auto</code> 外）高于 <code>width</code>、<code>height</code>。</p>
<div><pre><code><span>/* 默认值，以内容大小显示 */</span>
<span>/* 只要父元素设置为 flex，如果没有给定宽高或者 flex-basis，那么就会自动分配大小充分展示元素的内容 */</span>
<span>flex-basis</span><span>:</span> content<span>;</span>

<span>/* 指定&lt;'width'> */</span>
<span>flex-basis</span><span>:</span> 10em<span>;</span>
<span>flex-basis</span><span>:</span> 3px<span>;</span>
<span>flex-basis</span><span>:</span> auto<span>;</span> <span>/* auto 表示参照 width、height 属性 */</span>

<span>/* 固有的尺寸关键词 */</span>
<span>flex-basis</span><span>:</span> fill<span>;</span>
<span>flex-basis</span><span>:</span> max-content<span>;</span>
<span>flex-basis</span><span>:</span> min-content<span>;</span>
<span>flex-basis</span><span>:</span> fit-content<span>;</span>

<span>/* 全局数值 */</span>
<span>flex-basis</span><span>:</span> inherit<span>;</span>
<span>flex-basis</span><span>:</span> initial<span>;</span>
<span>flex-basis</span><span>:</span> unset<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><h3 id="flex-grow"> flex-grow</h3>
<p><code>flex-grow</code> 若被赋一个正整数，那么元素会以 <code>flex-basis</code> 为基础，沿主轴方向增长尺寸，占据此方向上的可用空间。如果有多个元素增长，那么它们将各自占据一部分可用空间。</p>
<ul>
<li><code>flex</code> 容器大小减去所有元素的大小，就是可用空间</li>
<li>数值越大，增长越大，小于 1 的小数反而是会变小</li>
<li>如果所有元素的 <code>flex-grow</code> 系数相同，那么它们将平均分配可用空间</li>
</ul>
<div><pre><code><span>/* 默认值，不增长 */</span>
<span>flex-grow</span><span>:</span> 0<span>;</span>

<span>/* 任意的正数 &lt;number> 值，会按照比例增长。负数无效 */</span>
<span>flex-grow</span><span>:</span> 3<span>;</span>
<span>flex-grow</span><span>:</span> 0.6<span>;</span>

<span>/* 全局值 */</span>
<span>flex-grow</span><span>:</span> inherit<span>;</span>
<span>flex-grow</span><span>:</span> initial<span>;</span>
<span>flex-grow</span><span>:</span> revert<span>;</span>
<span>flex-grow</span><span>:</span> unset<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>计算方法：</p>
<p>新的元素宽度 = 自身 <code>flex-grow</code> 系数 × (容器可用空间 / 所有元素 <code>flex-grow</code> 之和)</p>
<h3 id="flex-shrink"> flex-shrink</h3>
<p><code>flex-shrink</code> 可以处理元素收缩，它与 <code>flex-grow</code> 正好相反。当然，这仅在元素默认宽度之和大于容器的时候才会收缩。</p>
<div><pre><code><span>/* 默认值，不收缩 */</span>
<span>flex-shrink</span><span>:</span> 1<span>;</span>

<span>/* 任意的整数 &lt;number> 值，会按照比例缩小。负数无效 */</span>
<span>flex-shrink</span><span>:</span> 2<span>;</span>
<span>flex-shrink</span><span>:</span> 0.6<span>;</span>

<span>/* 全局值 */</span>
<span>flex-shrink</span><span>:</span> inherit<span>;</span>
<span>flex-shrink</span><span>:</span> initial<span>;</span>
<span>flex-shrink</span><span>:</span> unset<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>计算方法：</p>
<p>新的元素宽度 = (1 - 自身 <code>flex-shrink</code> 系数 ÷ 所有元素 <code>flex-shrink</code> 之和) × 原本自身元素宽度</p>
<h3 id="flex-属性简写"> flex 属性简写</h3>
<p>上面的三个属性，可以通过 <code>flex</code> 进行简写。按照：</p>
<div><pre><code><span>flex</span><span>:</span> flex-grow flex-shrink flex-basis<span>;</span>
</code></pre>
<div><span>1</span><br></div></div><p>的格式顺序依次填入具体内容即可。</p>
<p>大多数情况下，它们还可以：</p>
<div><pre><code><span>/* 默认值，相当于 flex: 0 1 auto */</span>
<span>flex</span><span>:</span> initial<span>;</span>

<span>/* 等同于 flex:1 1 auto。元素在需要的时候既可以拉伸，也可以收缩 */</span>
<span>flex</span><span>:</span> auto<span>;</span>

<span>/* 等同于 flex:0 0 auto。元素既不能拉伸，也不能收缩，但会根据 flex-basis:auto 布局 */</span>
<span>flex</span><span>:</span> none<span>;</span>

<span>/* 等同于 flex:number 1 0。只给 flex-grow 的值，元素可以在 flex-basis 为 0 情况下进行拉伸。 */</span>
<span>flex</span><span>:</span> &lt;positive-number><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><div><p>练习</p>
<p>尝试修改 <code>flex</code> 属性，并修改容器宽度或者增减 <code>div</code>：</p>
<iframe height="300" style="width: 100%;" scrolling="no" title="flex attr" src="https://codepen.io/jeremyjone/embed/RwLNVoP?default-tab=css%2Cresult&editable=true&theme-id=dark" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/jeremyjone/pen/RwLNVoP">
  flex attr</a> by jeremyjone (<a href="https://codepen.io/jeremyjone">@jeremyjone</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>
</div>
<h3 id="控制-flex-子元素在主轴上的比例"> 控制 flex 子元素在主轴上的比例</h3>
<p>通过上面三个属性可以随心控制子元素的比例。为了更好的深入理解，推荐阅读一下 MDN 文章：</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/Controlling_Ratios_of_Flex_Items_Along_the_Main_Ax" target="_blank" rel="noopener noreferrer">控制 flex 子元素在主轴上的比例</a></p>
<h3 id="order"> order</h3>
<p><code>order</code> 属性规定了元素在布局中的顺序。默认都是 <code>0</code>，它们按照默认顺序排列，一旦元素给出了 <code>order</code> 属性，那么会按照从小到大的顺序进行排列。</p>
<div><pre><code><span>order</span><span>:</span> -10<span>;</span>
<span>order</span><span>:</span> 1<span>;</span>
<span>order</span><span>:</span> 10<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="元素对齐"> 元素对齐</h2>
<p>元素对齐可以通过 <code>flex</code> 容器统一设定，也可以通过 <code>flex</code> 元素单独设定。</p>
<h3 id="justify-content"> justify-content</h3>
<p><code>justify-content</code> 属性作用在 <code>flex</code> 容器上，用来对齐主轴方向上的元素。</p>
<div><pre><code><span>/* 默认值。对齐到起始端 */</span>
<span>justify-content</span><span>:</span> flex-start<span>;</span>

<span>/* 对齐到终止端 */</span>
<span>justify-content</span><span>:</span> flex-end<span>;</span>
<span>/* 居中排列 */</span>
<span>justify-content</span><span>:</span> center<span>;</span>
<span>/* 对齐到起始端，类似 flex-start */</span>
<span>justify-content</span><span>:</span> start<span>;</span>
<span>/* 对齐到终止端，类似 flex-end */</span>
<span>justify-content</span><span>:</span> end<span>;</span>
<span>/* 对齐到左侧。不随主轴方向变换而变化 */</span>
<span>justify-content</span><span>:</span> left<span>;</span>
<span>/* 对齐到右侧。不随主轴方向变换而变化 */</span>
<span>justify-content</span><span>:</span> right<span>;</span>

<span>/* 均匀排列每个元素，相邻两行间距相等。首个元素放置于起点，末尾元素放置于终点 */</span>
<span>justify-content</span><span>:</span> space-between<span>;</span>
<span>/* 均匀排列每个元素。每个元素周围分配相同的空间 */</span>
<span>justify-content</span><span>:</span> space-around<span>;</span>
<span>/* 均匀排列每个元素。每个元素之间的间隔相等 */</span>
<span>justify-content</span><span>:</span> space-evenly<span>;</span>
<span>/* 均匀排列每个元素。'auto'-sized 的元素会被拉伸以适应容器的大小 */</span>
<span>justify-content</span><span>:</span> stretch<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><div><p>练习</p>
<p>尝试修改 <code>justify-content</code> 属性：</p>
<iframe height="300" style="width: 100%;" scrolling="no" title="justify-content" src="https://codepen.io/jeremyjone/embed/poWvPgd?default-tab=css%2Cresult&editable=true&theme-id=dark" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/jeremyjone/pen/poWvPgd">
  justify-content</a> by jeremyjone (<a href="https://codepen.io/jeremyjone">@jeremyjone</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>
</div>
<h3 id="align-items"> align-items</h3>
<p><code>align-items</code> 属性作用在 <code>flex</code> 容器上，用来对齐交叉轴方向上的元素。</p>
<div><pre><code><span>/* 默认值。自动拉伸元素与容器对齐 */</span>
<span>align-items</span><span>:</span> stretch<span>;</span>

<span>align-items</span><span>:</span> normal<span>;</span>

<span>/* 元素在侧轴居中。如果元素在侧轴上的高度高于其容器，那么在两个方向上溢出距离相同。 */</span>
<span>align-items</span><span>:</span> center<span>;</span>
<span>/* 元素向交叉轴起点对齐 */</span>
<span>align-items</span><span>:</span> flex-start<span>;</span>
<span>/* 元素向交叉轴终点对齐 */</span>
<span>align-items</span><span>:</span> flex-end<span>;</span>
<span>/* 元素向交叉轴起点对齐。类似 flex-start */</span>
<span>align-items</span><span>:</span> start<span>;</span>
<span>/* 元素向交叉轴终点对齐。类似 flex-end */</span>
<span>align-items</span><span>:</span> end<span>;</span>
<span>/* 元素向交叉轴起点对齐。类似 flex-start */</span>
<span>align-items</span><span>:</span> self-start<span>;</span>
<span>/* 元素向交叉轴终点对齐。类似 flex-end */</span>
<span>align-items</span><span>:</span> self-end<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p>重点理解一下 <code>normal</code> 这个值。该值的效果取决于我们处在什么布局模式中：</p>
<ul>
<li>在绝对定位的布局中，对于被替代的绝对定位盒子，这个效果和 <code>start</code> 的效果的一样；对于其他所有绝对定位的盒子，这个效果和 <code>stretch</code> 的效果一样。</li>
<li>在绝对定位布局的静态位置上，效果和 <code>stretch</code> 一样。</li>
<li>对于那些弹性项目而言，效果和 <code>stretch</code> 一样。</li>
<li>对于那些网格项目而言，效果和 <code>stretch</code> 一样，除了有部分比例或者一个固定大小的盒子的效果像 <code>start</code>。</li>
<li>这个属性不适用于会计盒子和表格。</li>
</ul>
<p>另外，如果子元素设置了高度，<code>stretch</code> 是不会拉伸子元素的。</p>
<div><p>练习</p>
<p>尝试修改 <code>align-items</code> 属性：</p>
<iframe height="300" style="width: 100%;" scrolling="no" title="align-items" src="https://codepen.io/jeremyjone/embed/NWaPpBx?default-tab=css%2Cresult&editable=true&theme-id=dark" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/jeremyjone/pen/NWaPpBx">
  Untitled</a> by jeremyjone (<a href="https://codepen.io/jeremyjone">@jeremyjone</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>
</div>
<h3 id="align-content"> align-content</h3>
<p><code>align-content</code> 属性作用在 <code>flex</code> 容器上，用来对齐交叉轴方向上的<strong>多行</strong>元素。</p>
<p>需要理解一下<strong>多行</strong>，这里的多行是指针对 <code>flex-wrap:wrap;</code> 状态下的换行。</p>
<div><pre><code><span>/* 对齐到起始端，每行紧邻 */</span>
<span>align-content</span><span>:</span> flex-start<span>;</span>
<span>/* 对齐到终止端，每行紧邻 */</span>
<span>align-content</span><span>:</span> flex-end<span>;</span>
<span>/* 居中排列，每行紧邻 */</span>
<span>align-content</span><span>:</span> center<span>;</span>
<span>/* 对齐到起始端，类似 flex-start */</span>
<span>align-content</span><span>:</span> start<span>;</span>
<span>/* 对齐到终止端，类似 flex-end */</span>
<span>align-content</span><span>:</span> end<span>;</span>

<span>/* 均匀排列每个元素，相邻两行间距相等。首个元素放置于起点，末尾元素放置于终点 */</span>
<span>align-content</span><span>:</span> space-between<span>;</span>
<span>/* 均匀排列每个元素。每个元素周围分配相同的空间 */</span>
<span>align-content</span><span>:</span> space-around<span>;</span>
<span>/* 均匀排列每个元素。每个元素之间的间隔相等 */</span>
<span>align-content</span><span>:</span> space-evenly<span>;</span>
<span>/* 均匀排列每个元素。'auto'-sized 的元素会被拉伸以适应容器的大小 */</span>
<span>align-content</span><span>:</span> stretch<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><div><p>练习</p>
<p>尝试修改 <code>align-content</code> 属性：</p>
<iframe height="300" style="width: 100%;" scrolling="no" title="align-content" src="https://codepen.io/jeremyjone/embed/abLzWoa?default-tab=css%2Cresult&editable=true&theme-id=dark" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/jeremyjone/pen/abLzWoa">
  align-content</a> by jeremyjone (<a href="https://codepen.io/jeremyjone">@jeremyjone</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>
</div>
<h3 id="place-content"> place-content</h3>
<p><code>place-content</code> 是 <code>align-content</code>（第一个值）与 <code>justify-content</code>（第二个值）的简写，例如：</p>
<div><pre><code><span>place-content</span><span>:</span> center start<span>;</span>
<span>place-content</span><span>:</span> start center<span>;</span>
<span>place-content</span><span>:</span> space-around center<span>;</span>
<span>place-content</span><span>:</span> end space-between<span>;</span>
<span>place-content</span><span>:</span> space-evenly stretch<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id="align-self"> align-self</h3>
<p><code>align-items</code> 属性作用在 <code>flex</code> 内部元素上，用来单独设置元素在交叉轴方向上的对齐方式。</p>
<p>其值与 <code>align-items</code> 也一致。而 <code>align-items</code> 也相当于将每一个元素的 <code>align-self</code> 给统一赋值。</p>
<div><p>练习</p>
<p>尝试修改每一个子元素的 <code>align-self</code> 属性：</p>
<iframe height="300" style="width: 100%;" scrolling="no" title="align-self" src="https://codepen.io/jeremyjone/embed/qBPEmxe?default-tab=css%2Cresult&editable=true&theme-id=dark" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/jeremyjone/pen/qBPEmxe">
  align-self</a> by jeremyjone (<a href="https://codepen.io/jeremyjone">@jeremyjone</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>栅格布局（Grid）</title>
      <link>https://docs.jeremyjone.com/roadmap/frontend/css/layout/grid/</link>
      <guid>https://docs.jeremyjone.com/roadmap/frontend/css/layout/grid/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">栅格布局（Grid）</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="栅格布局（grid）"> 栅格布局（Grid）</h1>
<p>与弹性布局不同，栅格布局是一个<strong>二维布局系统</strong>。它可以用于布局页面中主要的区域以及小型组件。</p>
<p>栅格布局是一组水平和垂直的 <strong>栅格线</strong> 相交，划分了 <strong>行</strong> 和 <strong>列</strong> 的轨道。</p>
<img :src="$withBase('/assets/roadmap/frontend/css/grid.png')" alt="grid">
<p>栅格布局系统中的每一个栅格元素都可以通过行号、列号进行精准定位，同时还可以控制未给出明确位置的元素。</p>
<p>要是用栅格布局，只需要在父级容器元素中设置 <code>display:grid</code> 即可，所有子元素都将按照 <code>grid</code> 进行布局。同样的，我们还可以设置 <code>display: inline-grid</code> 来创建栅格布局，并将内部子元素设置为行内块。</p>
<h2 id="轨道"> 轨道</h2>
<p>通过 <code>grid-template-rows</code> 与 <code>grid-template-columns</code> 可以定义栅格布局中的行和列。</p>
<p>在一个方向上的所有栅格内容的集合，都可以称为一个<strong>轨道</strong>，也就是说，每一行或每一列都叫做一个轨道。</p>
<h3 id="轨道的尺寸"> 轨道的尺寸</h3>
<p>它可以使用多种单位：</p>
<ul>
<li>固定尺寸：比如 100px</li>
<li>百分比：比如 20%</li>
<li><code>auto</code>：自动填充</li>
<li><code>fr</code>：它表示剩余可用空间的 <strong>等分份额</strong>。<code>2fr</code> 表示占两份，而 <code>1fr</code> 则表示占用一份。</li>
<li><code>repeat(number, width)</code>：表示按照 <code>width</code> 重复 <code>number</code> 次。
<ul>
<li><code>repeat(3, 1fr)</code>：表示按照 <code>1fr</code> 重复三次</li>
<li><code>repeat(6, 100px)</code>：表示创建 6 个 <code>100px</code> 的轨道</li>
<li><code>repeat(5, 1fr 2fr)</code>：表示创建 10 个轨道，每次创建一个 <code>1fr</code> 的轨道，后跟一个 <code>2fr</code> 的轨道，创建 5 次，共 10 个轨道</li>
</ul>
</li>
</ul>
<p>写几个就会生成几个轨道。</p>
<div><p>练习</p>
<p>尝试修改 <code>grid-template-rows</code>、<code>grid-template-columns</code> 这两个属性：</p>
<iframe height="300" style="width: 100%;" scrolling="no" title="grid-rows-columns" src="https://codepen.io/jeremyjone/embed/YzrPQba?default-tab=css%2Cresult&editable=true&theme-id=dark" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/jeremyjone/pen/YzrPQba">
  grid-rows-columns</a> by jeremyjone (<a href="https://codepen.io/jeremyjone">@jeremyjone</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>
</div>
<h3 id="grid-template"> grid-template</h3>
<p>除了分别定义，上面两个属性也支持简写：</p>
<div><pre><code><span>/* `grid-template-rows 与 grid-template-columns 的简写 */</span>
<span>grid-template</span><span>:</span> <span>repeat</span><span>(</span>3<span>,</span> 100px<span>)</span> / <span>repeat</span><span>(</span>2<span>,</span> 200px<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>结果会生成三行两列的布局。</p>
<blockquote>
<p>注意，该属性其实还包含  属性，是三个属性的简写。</p>
</blockquote>
<h3 id="隐式轨道"> 隐式轨道</h3>
<p>通过上面方法定义轨道的宽高，这是显式轨道。但是当我们添加的元素超过了显式轨道的区域，系统会默认添加更多的轨道网格来填充内容，此时系统将按照内容的宽高来自动设置隐式轨道的大小。</p>
<p>假设我们现在有 8 个元素：</p>
<div><pre><code><span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>"</span>container<span>"</span></span><span>></span></span>
  <span><span><span>&lt;</span>div</span><span>></span></span>1<span><span><span>&lt;/</span>div</span><span>></span></span>
  <span><span><span>&lt;</span>div</span><span>></span></span>2<span><span><span>&lt;/</span>div</span><span>></span></span>
  <span><span><span>&lt;</span>div</span><span>></span></span>3<span><span><span>&lt;/</span>div</span><span>></span></span>
  <span><span><span>&lt;</span>div</span><span>></span></span>4<span><span><span>&lt;/</span>div</span><span>></span></span>
  <span><span><span>&lt;</span>div</span><span>></span></span>5<span><span><span>&lt;/</span>div</span><span>></span></span>
  <span><span><span>&lt;</span>div</span><span>></span></span>6<span><span><span>&lt;/</span>div</span><span>></span></span>
  <span><span><span>&lt;</span>div</span><span>></span></span>7<span><span><span>&lt;/</span>div</span><span>></span></span>
  <span><span><span>&lt;</span>div</span><span>></span></span>8<span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;/</span>div</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>但是我们现在只有三行两列，共 6 个元素内容的栅格布局：</p>
<div><pre><code><span>grid-template</span><span>:</span> <span>repeat</span><span>(</span>3<span>,</span> 100px<span>)</span> / <span>repeat</span><span>(</span>2<span>,</span> 200px<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><p>那么我们得到的将是：</p>
<img :src="$withBase('/assets/roadmap/frontend/css/grid-element-more-than-container.png')" alt="grid-element-more-than-container">
<p>很明显，最下面两个不符合我们的预期。它是系统自动创建的内容，并且按照内容大小来填充的宽高。这个最下面的行，就是 <strong>隐式轨道</strong>。</p>
<p>我们需要设定或者改变隐式轨道的属性，可以通过 <code>grid-auto-rows</code> 和 <code>grid-auto-columns</code> 来定义：</p>
<div><pre><code><span>grid-auto-rows</span><span>:</span> 100px<span>;</span>

<span>grid-auto-columns</span><span>:</span> 200px<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>这样可以确保隐式轨道的轨道高度 100px，轨道宽度 200px。</p>
<p>还可以传入一个轨道列表，这样就会让轨道的宽高按照列表重复设置：</p>
<div><pre><code><span>/* 第一行 40px， 第二行 80px， 第三行 40px， 第四行 80px，以此类推 */</span>
<span>grid-auto-rows</span><span>:</span> 40px 80px<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><img :src="$withBase('/assets/roadmap/frontend/css/grid-auto-rows-list.png')" alt="grid-auto-rows-list">
<div><p>练习</p>
<p>尝试打开 <code>grid-auto-rows</code> 的注释来查看变化：</p>
<iframe height="300" style="width: 100%;" scrolling="no" title="Untitled" src="https://codepen.io/jeremyjone/embed/ZEXGGLr?default-tab=css%2Cresult&editable=true&theme-id=dark" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/jeremyjone/pen/ZEXGGLr">
  Untitled</a> by jeremyjone (<a href="https://codepen.io/jeremyjone">@jeremyjone</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>
</div>
<h3 id="minmax"> minmax</h3>
<p>通过 <code>minmax()</code> 方法来设置取值区间，它可以应用于上述所有属性中：</p>
<div><pre><code><span>/* 最小 100px，最大则可以按照尺寸自动变换 */</span>
<span>grid-auto-rows</span><span>:</span> <span>minmax</span><span>(</span>100px<span>,</span> auto<span>)</span><span>;</span>

<span>/* 最小 100px，最大按照均分 */</span>
<span>grid-template-rows</span><span>:</span> <span>minmax</span><span>(</span>100px<span>,</span> 1fr<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id="栅格间距"> 栅格间距</h2>
<p>通过 <code>grid-column-gap</code> 和 <code>grid-row-gap</code> 可以设置轨道间的间距。</p>
<p>支持各种单位。</p>
<h3 id="grid-column-gap"> grid-column-gap</h3>
<p>设置列间距。<code>grid-column-gap</code>，一般简写成 <code>column-gap</code>：</p>
<div><pre><code><span>grid-column-gap</span><span>:</span> 10px<span>;</span>
<span>column-gap</span><span>:</span> 10px<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h3 id="grid-row-gap"> grid-row-gap</h3>
<p>设置行间距。<code>grid-row-gap</code> 一般简写成 <code>row-gap</code>：</p>
<div><pre><code><span>grid-row-gap</span><span>:</span> 1em<span>;</span>
<span>row-gap</span><span>:</span> 1em<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h3 id="grid-gap"> grid-gap</h3>
<p><code>grid-row-gap</code> 与 <code>grid-column-gap</code> 的简写，同样一般简写成 <code>gap</code>：</p>
<div><pre><code><span>/* 行、列间距统一设置 */</span>
<span>grid-gap</span><span>:</span> 1em<span>;</span>
<span>gap</span><span>:</span> 1em<span>;</span>

<span>/* 分别设置行、列 */</span>
<span>grid-gap</span><span>:</span> 10px 1em<span>;</span>
<span>gap</span><span>:</span> 10px 1em<span>;</span>

<span>/* 还可以使用 calc */</span>
<span>gap</span><span>:</span> <span>calc</span><span>(</span>10% + 20px<span>)</span><span>;</span>
<span>gap</span><span>:</span> <span>calc</span><span>(</span>20px + 10%<span>)</span> <span>calc</span><span>(</span>10% - 5px<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h2 id="栅格线"> 栅格线</h2>
<p>行和列都是内容区域，划分内容区域的线，就是栅格线。假如我们有一个两行三列的栅格布局，那么它的栅格线则为：<code>三条横向栅格线</code> 和 <code>四条纵向栅格线</code>。</p>
<p>栅格线具有编号，以起始点（这个与弹性布局起始线的原理一样，按照书写习惯，从左向右书写文字，则以左为起始点，反之则为右侧）为 <code>1</code>。</p>
<h3 id="指定位置"> 指定位置</h3>
<p>有了这样的栅格线编号，我们可以随意将内容放置到指定栅格中。</p>
<p>现在有一个 <code>3 × 3</code> 的栅格布局：</p>
<div><pre><code><span>grid-template</span><span>:</span> <span>repeat</span><span>(</span>3<span>,</span> 1fr<span>)</span> / <span>repeat</span><span>(</span>3<span>,</span> 1fr<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><p>但我们只有一个元素，那么它默认应该放在 <code>(1,1)</code> 这个坐标格中：</p>
<img :src="$withBase('/assets/roadmap/frontend/css/grid-default-position.png')" alt="grid-default-position">
<p>现在我们想让它居中，也就是放到 <code>(2,2)</code> 坐标格中，那么需要给这个元素添加：</p>
<div><pre><code><span>grid-row-start</span><span>:</span> 2<span>;</span>
<span>grid-column-start</span><span>:</span> 2<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><img :src="$withBase('/assets/roadmap/frontend/css/grid-assigned-position.png')" alt="grid-assigned-position">
<h3 id="栅格跨行、列"> 栅格跨行、列</h3>
<p>内容不仅可以指定位置，还可以跨行、列，通过 <code>grid-column-start</code>、<code>grid-column-end</code>、<code>grid-row-start</code>、<code>grid-row-end</code> 属性，分别表示起始列、终止列、起始行、终止行。</p>
<div><pre><code><span>div1</span> <span>{</span>
  <span>/* 横向跨域 1-4 栅格线 */</span>
  <span>grid-column-start</span><span>:</span> 1<span>;</span>
  <span>grid-column-end</span><span>:</span> 4<span>;</span>

  <span>/* 纵向跨越 1-3 栅格线 */</span>
  <span>grid-row-start</span><span>:</span> 1<span>;</span>
  <span>grid-row-end</span><span>:</span> 3<span>;</span>
<span>}</span>

<span>div2</span> <span>{</span>
  <span>/* 从第一列起始 */</span>
  <span>grid-column-start</span><span>:</span> 1<span>;</span>

  <span>/* 纵向跨越 3-5 栅格线 */</span>
  <span>grid-row-start</span><span>:</span> 3<span>;</span>
  <span>grid-row-end</span><span>:</span> 5<span>;</span>
<span>}</span>

<span>div3</span> <span>{</span>
  <span>/* 横向跨越 3-4 列 */</span>
  <span>grid-column-start</span><span>:</span> 2<span>;</span>
  <span>grid-column-end</span><span>:</span> 4<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><p>如上，元素通过改变栅格线的起止，完成了跨行、跨列的操作。</p>
<img :src="$withBase('/assets/roadmap/frontend/css/grid-over-span.png')" alt="grid-over-span">
<div><p>练习</p>
<p>尝试修改上述四个属性值：</p>
<iframe height="300" style="width: 100%;" scrolling="no" title="grid-line" src="https://codepen.io/jeremyjone/embed/KKXwvxN?default-tab=css%2Cresult&editable=true&theme-id=dark" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/jeremyjone/pen/KKXwvxN">
  grid-line</a> by jeremyjone (<a href="https://codepen.io/jeremyjone">@jeremyjone</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>
</div>
<h3 id="grid-column-与-grid-row"> grid-column 与 grid-row</h3>
<p><code>grid-column</code> 与 <code>grid-row</code> 是 上面四个属性的简写：</p>
<div><pre><code><span>/* 横向跨 1-2 栅格线 */</span>
<span>grid-column</span><span>:</span> 1 / 2<span>;</span>

<span>/* 纵向跨 1-4 栅格线 */</span>
<span>grid-row</span><span>:</span> 1 / 4<span>;</span>

<span>/* 仅在第二列 */</span>
<span>grid-column</span><span>:</span> 2<span>;</span>

<span>/* 仅在第一行 */</span>
<span>grid-row</span><span>:</span> 1<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h3 id="反向计数"> 反向计数</h3>
<p>默认序号都是 <code>1</code> 起始，那么从末尾端作为起始的话，可以使用 <code>-1</code> 来表示。这样一来，我们跨越整个栅格系统的话，就不必数整个栅格系统有多少栅格线，而是通过：</p>
<div><pre><code><span>grid-column</span><span>:</span> 1 / -1<span>;</span>
</code></pre>
<div><span>1</span><br></div></div><p>就可以完成。</p>
<p>而相应的，倒数第二根栅格线就是 <code>-2</code>，以此类推，直到最后一根栅格线。</p>
<h3 id="span-关键字"> span 关键字</h3>
<p>除了上面一根一根数栅格线的方式，一般情况下，我们可以通过 <code>span</code> 关键字来跨越指定数量的栅格：</p>
<div><pre><code><span>/* 从第一行开始，跨越两个栅格线 */</span>
<span>grid-row</span><span>:</span> 1 / span 2<span>;</span>

<span>/* 从第二列开始，跨越四个栅格线 */</span>
<span>grid-column</span><span>:</span> 2 / span 4<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>这样的方式更有利于我们进行更加复杂的布局定义。</p>
<h3 id="栅格线的命名"> 栅格线的命名</h3>
<p>定义栅格线的名称，最基本的方式时在定义栅格宽高的时候进行定义：</p>
<div><pre><code><span>grid-template-columns</span><span>:</span> [main-start] 1fr [content-start] 1fr [content-end] 1fr [main-end]<span>;</span>
<span>grid-template-rows</span><span>:</span> [main-start] 100px [content-start] 100px [content-end] 100px [main-end]<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>然后我们就可以使用它了，不再需要之前的栅格线序号，而是直接调用名称：</p>
<div><pre><code><span>grid-row-start</span><span>:</span> main-start<span>;</span>
<span>grid-column-end</span><span>:</span> content-end<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>名称可以随便起，当然也可以只针对关键线起名。只要符合<a href="https://drafts.csswg.org/css-values-4/#custom-idents" target="_blank" rel="noopener noreferrer">规范</a>，就是有效名称。</p>
<h4 id="为栅格线定义多个名称"> 为栅格线定义多个名称</h4>
<p>我们还可以为一条线定义多个名称：</p>
<div><pre><code><span>grid-template-columns</span><span>:</span> [main-start header-start] 1fr [header-end content-start] 1fr [content-end footer-start] 1fr [footer-end main-end]<span>;</span>
<span>grid-template-rows</span><span>:</span> [main-start header-start] 100px [header-end content-start] 100px [content-end footer-start] 100px [footer-end main-end]<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><blockquote>
<p>多个名称，我们可以随意使用任意一个，因为它们本身指向的就是同一条栅格线。</p>
</blockquote>
<p>如果我们按照上面的方式，在一个区域的两边都使用了同一个 <strong>词汇</strong> 并且具有 <code>-start</code> 和 <code>-end</code> 后缀，那么系统会隐式地为我们将该区域命名，名称则是该词汇。比如：<code>content-start</code> 与 <code>content-end</code>，那么该区域就被命名为 <code>content</code>。这样我们就可以快速使用  放置元素了。</p>
<h4 id="通过-repeat-添加名称"> 通过 repeat 添加名称</h4>
<p>上面一个一个设置显得过于繁琐，我们可以通过 <code>repeat(3, [name] 1fr)</code> 的方式来快速命名。</p>
<p>但是需要注意：</p>
<ul>
<li>
<p>生成的命名线，名称是一样的，需要通过 <code>[name] [n]</code> 的方式获取</p>
<div><pre><code><span>grid-column</span><span>:</span> col-start / col-start 5<span>;</span>
</code></pre>
<div><span>1</span><br></div></div></li>
<li>
<p>可以生成多个名称</p>
<div><pre><code>&lt;!--设置单独名称--><span>grid-template-columns</span><span>:</span> <span>repeat</span><span>(</span>4<span>,</span> [col1] 1fr [col2] 3fr<span>)</span><span>;</span>

&lt;!--前后都设置名称--><span>grid-template-columns</span><span>:</span> <span>repeat</span><span>(</span>
  4<span>,</span>
  [col-start] 1fr [col-end]
<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div></li>
</ul>
<h3 id="控制层叠顺序"> 控制层叠顺序</h3>
<p>栅格内容可以通过栅格线重叠，默认后面的内容可以覆盖到前面的内容。但我们可以通过 <code>z-index</code> 来控制层叠顺序。</p>
<div><p>练习</p>
<p>尝试取消已注释的 <code>z-index</code> 属性：</p>
<iframe height="300" style="width: 100%;" scrolling="no" title="Untitled" src="https://codepen.io/jeremyjone/embed/oNGXXrX?default-tab=css%2Cresult&editable=true&theme-id=dark" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/jeremyjone/pen/oNGXXrX">
  Untitled</a> by jeremyjone (<a href="https://codepen.io/jeremyjone">@jeremyjone</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>
</div>
<h2 id="栅格区域"> 栅格区域</h2>
<p>通常我们都是按照栅格线来定位，但是我们同样可以通过栅格本身进行定位。</p>
<h3 id="grid-area"> grid-area</h3>
<p>该属性作用域栅格内部元素，用于确定该元素应当放置在哪一个栅格中。</p>
<p>它有多种使用用法：</p>
<h4 id="根据栅格线来确定一个区域"> 根据栅格线来确定一个区域</h4>
<div><pre><code><span>/* 横向跨 1-2 栅格线，纵向跨 1-4 栅格线 */</span>
<span>grid-area</span><span>:</span> 1 / 1 / 4 / 2<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>这个数值看起来有点奇怪，它的顺序为：</p>
<ul>
<li><code>grid-row-start</code></li>
<li><code>grid-column-start</code></li>
<li><code>grid-row-end</code></li>
<li><code>grid-column-end</code></li>
</ul>
<h4 id="通过命名来确定一个区域"> 通过命名来确定一个区域</h4>
<p>前面已经知道通过栅格线来隐式命名一个区域（），接下来还将学习到如何直接。那么直接指定区域就可以将元素放在指定栅格中。</p>
<div><pre><code><span>grid-area</span><span>:</span> content<span>;</span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="命名区域"> 命名区域</h3>
<p>通过 <code>grid-template-areas</code> 可以命名整个栅格内容。通过栅格名称可以快速将指定内容放置在栅格中。</p>
<blockquote>
<p>栅格命名必须是 <strong>矩形</strong> 的，否则无效。</p>
</blockquote>
<div><pre><code><span>#container</span> <span>{</span>
  <span>display</span><span>:</span> grid<span>;</span>
  <span>border</span><span>:</span> 2px solid purple<span>;</span>
  <span>grid-template-columns</span><span>:</span> <span>repeat</span><span>(</span>3<span>,</span> 1fr<span>)</span><span>;</span>
  <span>grid-template-areas</span><span>:</span> <span>"a b b"</span> <span>"a c c"</span> <span>"a d e"</span><span>;</span>
<span>}</span>

<span>#container > div</span> <span>{</span>
  <span>border</span><span>:</span> 1px solid grey<span>;</span>
  <span>text-align</span><span>:</span> center<span>;</span>
  <span>background-clip</span><span>:</span> content-box<span>;</span>
  <span>padding</span><span>:</span> 4px<span>;</span>
  <span>font-size</span><span>:</span> 20px<span>;</span>
  <span>background-color</span><span>:</span> greenyellow<span>;</span>
<span>}</span>

<span>#container > div:nth-child(1)</span> <span>{</span>
  <span>grid-area</span><span>:</span> a<span>;</span>
<span>}</span>

<span>#container > div:nth-child(2)</span> <span>{</span>
  <span>grid-area</span><span>:</span> b<span>;</span>
<span>}</span>

<span>#container > div:nth-child(3)</span> <span>{</span>
  <span>grid-area</span><span>:</span> c<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><p>那么第一个元素将占满 <code>a</code> 区域，也就是第一列，第二个元素将占满 <code>b</code> 区域，第三个元素将占满 <code>c</code> 区域，而剩下的将依次排列：</p>
<img :src="$withBase('/assets/roadmap/frontend/css/grid-template-areas.png')" alt="grid-template-areas">
<p>与  类似，当我们为一个区域命名，那么它四周的栅格线同样也就有了名称，比如上面的例子：</p>
<img :src="$withBase('/assets/roadmap/frontend/css/grid-template-areas-line-name.png')" alt="grid-template-areas-line-name">
<p>它为每一个区域的每一个边都进行了命名，我们可以使用任意一个名称都可以。比如我们通过栅格线名称让 4 号元素和 5 号元素进行对调：</p>
<div><pre><code><span>#container > div:nth-child(4)</span> <span>{</span>
  <span>grid-area</span><span>:</span> d-start / e-start / d-end / e-end<span>;</span>
<span>}</span>

<span>#container > div:nth-child(5)</span> <span>{</span>
  <span>grid-area</span><span>:</span> e-start / d-start / e-end / d-end<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><img :src="$withBase('/assets/roadmap/frontend/css/grid-template-areas-exchange.png')" alt="grid-template-areas-exchange">
<h4 id="栅格不命名占位符"> 栅格不命名占位符</h4>
<p>有时候，我们只需要给关键的栅格区域命名，其他区域并不需要命名，那么我们可以通过 <code>.</code> 来忽略它：</p>
<div><pre><code><span>grid-template-areas</span><span>:</span>
  <span>"header   header   header"</span>
  <span>"sidebar  content  content"</span>
  <span>".        footer   footer"</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>这样就得到一个类似这样的区域：</p>
<img :src="$withBase('/assets/roadmap/frontend/css/grid-template-areas-no-name.png')" alt="grid-template-areas-no-name">
<h4 id="区域命名使用小技巧"> 区域命名使用小技巧</h4>
<p>因为元素是通过 <code>grid-area: [name]</code> 放到指定栅格中的，所以只要名称不变，元素就一直跟着栅格位置走。</p>
<p>这样一来，我们只需要通过调整布局，就可以调整元素显示的位置。</p>
<h2 id="定位流向"> 定位流向</h2>
<p>默认情况下，所有元素都会把自己摆放到网格中，每个栅格放一个元素。默认流向是按行排列，也就是横向排列，当第一行填满，会自动折行继续排列，直到占满所有网格，此时如果还有元素，会添加  继续排列，直到所有元素被填充。</p>
<h3 id="纵向流向"> 纵向流向</h3>
<p>我们也可以手动设置流向，使其成为纵向：</p>
<div><pre><code><span>grid-template-rows</span><span>:</span> <span>repeat</span><span>(</span>3<span>,</span> 1fr<span>)</span><span>;</span>
<span>grid-auto-flow</span><span>:</span> column<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>这样，所有元素会按列进行依次排列:</p>
<img :src="$withBase('/assets/roadmap/frontend/css/grid-auto-flow.png')" alt="grid-auto-flow">
<h4 id="修改书写方向时也会改变流向"> 修改书写方向时也会改变流向</h4>
<p>当我们调整书写方向时 <code>writing-mode: vertical-rl;</code>，也会导致流向发生 90° 转变。详见 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Grid_Layout/CSS_Grid_Logical_Values_and_Writing_Modes#css_%E4%B9%A6%E5%86%99%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener noreferrer">MDN</a>。</p>
<h3 id="缺口和填充"> 缺口和填充</h3>
<p>在使用 <code>span</code> 关键字来调整元素占位的时候，其他自动定位的元素会自动检索轨道的大小，如果当前轨道不适合放入元素，那么就会转入下一行，直到找到可以容纳它的空间。</p>
<p><code>span</code> 的意思是表示起始位置是自动规定的，结束线则需要跨越 <code>span</code> 后面跟的数字的数量的轨道。</p>
<p>类似下面的例子：</p>
<iframe height="300" style="width: 100%;" scrolling="no" title="Untitled" src="https://codepen.io/jeremyjone/embed/PoJqdNd?default-tab=css%2Cresult&editable=true&theme-id=dark" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/jeremyjone/pen/PoJqdNd">
  Untitled</a> by jeremyjone (<a href="https://codepen.io/jeremyjone">@jeremyjone</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>
<ul>
<li><code>div(1)</code> 使用 <code>span</code> 来确定大小，所以它的起始位置是自动的。因为横向流中前两行都没有足够空间放置它，所以转到 <code>(3,1)</code> 这个栅格位置放置。</li>
<li><code>div(3)</code> 起始位置也是自动的，它应该跟随 <code>div(1)</code> 后面放置，所以找到了 <code>(3,4)</code> 这个栅格位置。</li>
<li><code>div(2)</code> 与 <code>div(5)</code> 都是显式给出的位置，所以固定了位置，也就导致了前面 1 和 3 的位置出现怪异。</li>
<li>后面其他元素都依次排列</li>
</ul>
<p>以上就是出现缺口的原因。</p>
<p>那么如何解决它呢？</p>
<p>使用 <code>dense</code> 关键字：</p>
<div><pre><code><span>grid-auto-flow</span><span>:</span> dense<span>;</span>
</code></pre>
<div><span>1</span><br></div></div><p>尝试解除上面例子中 <code>#container</code> 里面的注释属性，会发现元素会自动填充前面的缺口。</p>
<p>如果需要设置列紧凑效果，则可以通过 <code>grid-auto-flow: column dense;</code> 来实现。</p>
<h2 id="盒模型对齐"> 盒模型对齐</h2>
<p>与 <code>flex</code> 弹性盒模型的对齐方式类似，栅格布局也具有两条轴线：</p>
<ul>
<li><code>行轴</code>：文字方向的轴</li>
<li><code>列轴</code>：垂直于文字方向的轴</li>
</ul>
<img :src="$withBase('/assets/roadmap/frontend/css/grid-box-align.png')" alt="grid-box-align">
<h3 id="栅格行轴对齐"> 栅格行轴对齐</h3>
<p>行轴对齐有两种方式：<code>justify-items</code> 与 <code>justify-self</code>。</p>
<p>从名字能看出：</p>
<ul>
<li><code>justify-items</code> 应用在栅格布局中，会将所有栅格元素统一对齐</li>
<li><code>justify-self</code> 应用在栅格元素上，用于单独设置某一元素的对齐方式</li>
</ul>
<p>它具有如下值：</p>
<ul>
<li><code>auto</code>：自动设置。在行轴中，代表 <code>normal</code>，也就是类似 <code>stretch</code> 的行为</li>
<li><code>normal</code>：类似 <code>stretch</code> 的行为</li>
<li><code>strctch</code>：水平撑满栅格</li>
<li><code>start</code>/<code>flex-start</code>：对齐到栅格起始端</li>
<li><code>end</code>/<code>flex-end</code>：对齐到栅格结束端</li>
<li><code>center</code>：对齐到栅格中央</li>
<li><code>baseline</code>：对齐到栅格的基准线上</li>
<li><code>first baseline</code>：对齐到栅格的第一个基准线上</li>
<li><code>last baseline</code>：对齐到栅格的最后一个基准线上</li>
</ul>
<div><p>练习</p>
<p>尝试修改元素属性：</p>
<iframe height="300" style="width: 100%;" scrolling="no" title="Untitled" src="https://codepen.io/jeremyjone/embed/poWJxoN?default-tab=css%2Cresult&editable=true&theme-id=dark" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/jeremyjone/pen/poWJxoN">
  Untitled</a> by jeremyjone (<a href="https://codepen.io/jeremyjone">@jeremyjone</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>
</div>
<h3 id="栅格列轴对齐"> 栅格列轴对齐</h3>
<p>列轴对齐有两种方式：<code>align-items</code> 与 <code>align-self</code>。</p>
<p>从名字能看出：</p>
<ul>
<li><code>align-items</code> 应用在栅格布局中，会将所有栅格元素统一对齐</li>
<li><code>align-self</code> 应用在栅格元素上，用于单独设置某一元素的对齐方式</li>
</ul>
<p>它的值与  的值一样。</p>
<div><p>练习</p>
<p>尝试修改元素属性：</p>
<iframe height="300" style="width: 100%;" scrolling="no" title="Untitled" src="https://codepen.io/jeremyjone/embed/QWqbZwE?default-tab=css%2Cresult&editable=true&theme-id=dark" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/jeremyjone/pen/QWqbZwE">
  Untitled</a> by jeremyjone (<a href="https://codepen.io/jeremyjone">@jeremyjone</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>
</div>
<h3 id="轨道对齐"> 轨道对齐</h3>
<p>上面都是针对栅格内部元素进行对齐。<strong>如果栅格布局本身比内部栅格大很多</strong>，就需要用到针对行和列轨道的对齐。</p>
<p>默认情况下，栅格是基于起始位置对齐的。</p>
<p>假设布局宽高都是 <code>500px</code>，而每个栅格只有 <code>100px × 100px</code>，且只有 9 个栅格内容，那么：</p>
<img :src="$withBase('/assets/roadmap/frontend/css/grid-align-base.png')" alt="grid-align-base">
<p>此时将横向轨道看做横轴，纵向轨道看成纵轴，可以按行/列进行整体对齐。</p>
<ul>
<li><code>justify-content</code>：将行按一定规则对齐</li>
<li><code>align-content</code>：将列按一定规则对齐</li>
</ul>
<p>它们都具有如下值：</p>
<ul>
<li><code>strctch</code>：自动拉伸元素以充满容器</li>
<li><code>normal</code>：类似 <code>stretch</code> 的行为</li>
<li><code>start</code>/ <code>flex-start</code>：对齐到起始位置</li>
<li><code>end</code>/ <code>flex-end</code>：对齐到结束位置</li>
<li><code>space-between</code>：均匀排列每个元素，相邻两行间距相等。首个元素放置于起点，末尾元素放置于终点</li>
<li><code>space-around</code>：均匀排列每个元素。每个元素周围分配相同的空间</li>
<li><code>space-evenly</code>：均匀排列每个元素。每个元素之间的间隔相等</li>
</ul>
<div><p>练习</p>
<p>尝试修改下面代码的对齐属性：</p>
<iframe height="300" style="width: 100%;" scrolling="no" title="Untitled" src="https://codepen.io/jeremyjone/embed/dyVoQmp?default-tab=css%2Cresult&editable=true&theme-id=dark" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/jeremyjone/pen/dyVoQmp">
  Untitled</a> by jeremyjone (<a href="https://codepen.io/jeremyjone">@jeremyjone</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>
</div>
<h3 id="对齐简写"> 对齐简写</h3>
<p>对齐也可以简写：</p>
<div><pre><code><span>place-content</span><span>:</span> &lt;align-content> [&lt;justify-content>]<span>;</span>
</code></pre>
<div><span>1</span><br></div></div><div><pre><code><span>place-items</span><span>:</span> &lt;align-items> [&lt;justify-items>]<span>;</span>
</code></pre>
<div><span>1</span><br></div></div><div><pre><code><span>place-self</span><span>:</span> &lt;align-self> [&lt;justify-self>]<span>;</span>
</code></pre>
<div><span>1</span><br></div></div><p>全部可以简写成一个值，表示两个值是一样的。</p>
<h2 id="grid-写法"> grid 写法</h2>
<p><code>grid</code> 属性是一个简写属性，它用来设置：</p>
<ul>
<li>显示栅格属性：<code>grid-template-rows</code>、<code>grid-template-columns</code>、<code>grid-template-areas</code></li>
<li>隐式栅格属性：<code>grid-auto-rows</code>、<code>grid-auto-columns</code>、<code>grid-auto-flow</code></li>
<li>间距属性：<code>grid-column-gap</code>、<code>grid-row-gap</code></li>
</ul>
<p>要注意的是，仅可以在一个 <code>grid</code> 属性中声明显示或隐式栅格。</p>
<p>其语法：</p>
<div><pre><code><span>grid</span><span>:</span> &lt;grid-template> | &lt;grid-template-rows> / [ auto-flow &amp;&amp; dense? ] &lt;grid-auto-columns>? | [ auto-flow &amp;&amp; dense? ] &lt;grid-auto-rows>? / &lt;grid-template-columns><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><p>语法看上去有点复杂，它分成三个写法，分别是：</p>
<ul>
<li>
<p>&lt;grid-template&gt;</p>
<p>定义了 ，可以直接等同于该属性的用法。</p>
</li>
<li>
<p>&lt;grid-template-rows&gt; / [ auto-flow &amp;&amp; dense? ] &lt;grid-auto-columns&gt;?</p>
<p>设置为纵向流向。先写 <code>grid-template-rows</code> 属性，后面写 <code>grid-auto-columns</code> 属性，在写属性之前，要先声明 <code>auto-flow</code>，同时可以包含 <code>dense</code> 关键字。它们之间使用 <code>/</code> 分割。</p>
<blockquote>
<p>通过 <code>grid-template-rows</code> 属性显式设置行轨道来设置流向（<code>grid-template-columns</code> 设置为 <code>none</code>），并通过 <code>grid-auto-columns</code> 明确该如何自动重复列轨道（<code>grid-auto-rows</code> 设置为 <code>auto</code>）。<code>grid-auto-flow</code> 也被设置为 <code>column</code>，并可以附加 <code>dense</code> 属性。</p>
</blockquote>
</li>
<li>
<p>[ auto-flow &amp;&amp; dense? ] &lt;grid-auto-rows&gt;? / &lt;grid-template-columns&gt;</p>
<p>设置为横向流向。先写 <code>grid-template-rows</code> 属性，在写属性之前，要先声明 <code>auto-flow</code>，同时可以包含 <code>dense</code> 关键字。后面写 <code>grid-auto-columns</code> 属性，它们之间使用 <code>/</code> 分割。</p>
<blockquote>
<p>通过 <code>grid-template-columns</code> 属性显式设置行轨道来设置流向（<code>grid-template-rows</code> 设置为 <code>none</code>），并通过 <code>grid-auto-rows</code> 明确该如何自动重复列轨道（<code>grid-auto-columns</code> 设置为 <code>auto</code>）。<code>grid-auto-flow</code> 也被设置为 <code>row</code>，并可以附加 <code>dense</code> 属性。</p>
</blockquote>
</li>
</ul>
<p>可以看出，因为设置的复杂性，关键在于设置 <code>grid-template-rows</code> 与 <code>grid-template-columns</code> 两个属性。要么单独设置，要么系统设置一个，需要在指定流向前面给出 <code>auto-flow</code> 关键字。</p>
<p>例如：</p>
<div><pre><code><span>/* &lt;grid-template> */</span>
<span>grid</span><span>:</span> <span>"a"</span> 100px <span>"b"</span> 1fr<span>;</span>
<span>grid</span><span>:</span> [linename1] <span>"a"</span> 100px [linename2]<span>;</span>
<span>grid</span><span>:</span> 100px / 200px<span>;</span>
<span>grid</span><span>:</span> <span>minmax</span><span>(</span>400px<span>,</span> min-content<span>)</span> / <span>repeat</span><span>(</span>auto-fill<span>,</span> 50px<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><div><pre><code><span>/* &lt;grid-template-rows> / [ auto-flow &amp;&amp; dense? ] &lt;grid-auto-columns>? */</span>
<span>grid</span><span>:</span> <span>repeat</span><span>(</span>2<span>,</span> 60px<span>)</span> / auto-flow 80px<span>;</span>

<span>/* 相当于 */</span>
<span>grid-template-columns</span><span>:</span> none<span>;</span>
<span>grid-template-rows</span><span>:</span> <span>repeat</span><span>(</span>2<span>,</span> 60px<span>)</span><span>;</span>
<span>grid-auto-columns</span><span>:</span> 80px<span>;</span>
<span>grid-auto-rows</span><span>:</span> auto<span>;</span>
<span>grid-auto-flow</span><span>:</span> column<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><div><pre><code><span>/* [ auto-flow &amp;&amp; dense? ] &lt;grid-auto-rows>? / &lt;grid-template-columns> */</span>
<span>grid</span><span>:</span> auto-flow dense 40% / [line1] <span>minmax</span><span>(</span>20em<span>,</span> max-content<span>)</span><span>;</span>

<span>/* 相当于 */</span>
<span>grid-template-rows</span><span>:</span> none<span>;</span>
<span>grid-template-columns</span><span>:</span> [line1] <span>minmax</span><span>(</span>20em<span>,</span> max-content<span>)</span><span>;</span>
<span>grid-auto-rows</span><span>:</span> 40%<span>;</span>
<span>grid-auto-columns</span><span>:</span> auto<span>;</span>
<span>grid-auto-flow</span><span>:</span> row<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>响应式与媒体查询</title>
      <link>https://docs.jeremyjone.com/roadmap/frontend/css/media/</link>
      <guid>https://docs.jeremyjone.com/roadmap/frontend/css/media/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">响应式与媒体查询</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="响应式与媒体查询"> 响应式与媒体查询</h1>
<p>媒体查询是 <code>CSS2</code> 引入的，它让不同媒体类型定义不同样式成为了可能。</p>
<h2 id="媒体查询的作用"> 媒体查询的作用</h2>
<p>媒体查询可以：</p>
<ul>
<li>查询设备类型</li>
<li>查询设备视口</li>
<li>查询属性</li>
<li>查询横屏/竖屏</li>
</ul>
<p>等等。</p>
<p>媒体查询使用 <code>@media</code> 语法使用：</p>
<div><pre><code><span>body</span> <span>{</span>
    <span>display</span><span>:</span> block<span>;</span>
<span>}</span>

<span><span>@media</span> screen <span>and</span> <span>(</span><span>max-width</span><span>:</span> 768px<span>)</span></span> <span>{</span>
    <span>body</span> <span>{</span>
        <span>display</span><span>:</span> flex<span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>上面语法的意义：当浏览器视口为 <code>768px</code> 或更小时，<code>body</code> 标签的 <code>display</code> 属性值改为 <code>flex</code>。</p>
<h2 id="关键字"> 关键字</h2>
<h3 id="and、-、not"> <code>and</code>、<code>,</code>、<code>not</code></h3>
<p>分别对应 与、或、非</p>
<ul>
<li>
<p>多个混合媒体特征，使用 <code>and</code> 来关联：</p>
<blockquote>
<div><pre><code><span><span>@media</span> screen <span>and</span> <span>(</span><span>min-width</span><span>:</span> 400px<span>)</span> <span>and</span> <span>(</span><span>orientation</span><span>:</span> landscape<span>)</span></span> <span>{</span>
  <span>body</span> <span>{</span>
    <span>color</span><span>:</span> blue<span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div></blockquote>
</li>
<li>
<p>多个条件，匹配任何一个都可以生效，使用 <code>,</code> 直接分隔开即可：</p>
<blockquote>
<div><pre><code><span><span>@media</span> screen <span>and</span> <span>(</span><span>min-width</span><span>:</span> 400px<span>)</span><span>,</span> screen <span>and</span> <span>(</span><span>orientation</span><span>:</span> landscape<span>)</span></span> <span>{</span>
  <span>body</span> <span>{</span>
    <span>color</span><span>:</span> blue<span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div></blockquote>
</li>
<li>
<p>让某个媒体失效，使用 <code>not</code> 来实现：</p>
<blockquote>
<div><pre><code><span><span>@media</span> <span>not</span> all <span>and</span> <span>(</span><span>orientation</span><span>:</span> landscape<span>)</span></span> <span>{</span>
  <span>body</span> <span>{</span>
    <span>color</span><span>:</span> blue<span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div></blockquote>
</li>
</ul>
<h3 id="only"> <code>only</code></h3>
<p><code>only</code> 可防止旧版浏览器应用指定样式，这对现代浏览器没有任何影响。</p>
<h3 id="使用范围"> 使用范围</h3>
<p>这些关键字不仅可以在 css 中使用，还可以在 link 标签中使用：</p>
<div><pre><code><span><span><span>&lt;</span>link</span> <span>rel</span><span><span>=</span><span>"</span>stylesheet<span>"</span></span> <span>media</span><span><span>=</span><span>"</span>screen and (min-width: 900px)<span>"</span></span> <span>href</span><span><span>=</span><span>"</span>widescreen.css<span>"</span></span><span>></span></span>
<span><span><span>&lt;</span>link</span> <span>rel</span><span><span>=</span><span>"</span>stylesheet<span>"</span></span> <span>media</span><span><span>=</span><span>"</span>screen and (max-width: 600px)<span>"</span></span> <span>href</span><span><span>=</span><span>"</span>smallscreen.css<span>"</span></span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>这样可以根据不同尺寸来导入不同样式文件。</p>
<h2 id="创建响应式"> 创建响应式</h2>
<p>编写不同的样式文件，再通过媒体查询，根据不同视口大小来分别引入，这样就可以编写出一套响应式界面。</p>
]]></content:encoded>
    </item>
    <item>
      <title>定位</title>
      <link>https://docs.jeremyjone.com/roadmap/frontend/css/position/</link>
      <guid>https://docs.jeremyjone.com/roadmap/frontend/css/position/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">定位</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="定位"> 定位</h1>
<p>定位，顾名思义就是用于确定 <strong>元素在页面中的位置</strong>。</p>
<p>在 <code>CSS</code> 中，可以分为以下几种定位方式：</p>
<ul>
<li>普通流定位（默认）</li>
<li>浮动定位</li>
<li>相对定位</li>
<li>绝对定位</li>
<li>固定定位</li>
</ul>
<h2 id="普通定位（文档流）"> 普通定位（文档流）</h2>
<p>默认情况下，块级元素的内容宽度是其父元素宽度的 100%，并且与其内容一样高。内联元素的宽高则与它们内容的宽高一样。内联元素不能设置宽高。</p>
<p>了解了单个元素的大小规则，再来看它们之间相互交互的关系。</p>
<p>默认情况下，元素之间的交互使用正常的布局流，也就是块级元素在视口中垂直布局，每个都将显示在上一个元素下面的新行中，并且它们的外边距将它们分隔开。而内联元素则会紧邻前一个元素位于同一行中，如果空间不够，则会移到新的一行展示。</p>
<p>类似这样的方式，我们一般称为 <strong>文档流</strong>。需要注意，它的英文是 <a href="http://www.w3.org/TR/CSS2/visuren.html#normal-flow" target="_blank" rel="noopener noreferrer">normal flow</a>。它很形象的描述了页面元素像 <code>流</code> 一样一个一个显示在页面中。</p>
<p>文档流的特点：</p>
<ul>
<li>每个元素在页面中都有自己的位置，并占据一定的页面空间</li>
<li>每个元素都是从父元素的左上角开始排列</li>
<li>每个元素基本上都是按照从左到右、从上到下的方式排列</li>
</ul>
<p>根据以上特点，再回过头去看块级元素与内联元素的排列方式，就明了很多。</p>
<h2 id="浮动定位（float）"> 浮动定位（float）</h2>
<p>浮动定位的主要用处是将一个元素脱离文档流，使其排除在文档流之外，不再占据页面空间，此时后续的元素会依次递补到当前位置进行占位。它具有以下特点：</p>
<ul>
<li>不占据页面空间</li>
<li>浮动的元素会停靠在父元素的左边或右边，或者其他已浮动元素的边缘</li>
<li>只能在当前行浮动</li>
</ul>
<p>浮动可以使一个块级元素不再独占一行，多个块级元素可以同时处于一行之中。</p>
<p>浮动通过 <code>float</code> 属性来实现，它的值：</p>
<ul>
<li><code>none</code>：没有浮动</li>
<li><code>left</code>：浮动到左边，或者左边已浮动元素的边缘</li>
<li><code>right</code>：浮动到右边，或者右边已浮动元素的边缘</li>
</ul>
<p>需要注意的是，浮动时：</p>
<ul>
<li>
<p>如果父元素显示不下所有已浮动的子元素，那么最后一个将会换行，可能发生位置错误</p>
<div><p>注意</p>
<img :src="$withBase('/assets/roadmap/frontend/css-float-lock.png')" alt="">
<p>红色框未浮动，绿色和蓝色框浮动，但父级元素宽度不够，蓝色框另起一行，由于高度差，蓝色框会浮动到红色框的右侧，从而导致位置错误。这在浮动中经常遇到，哪怕差 <code>1px</code> 也不行。</p>
</div>
</li>
<li>
<p>元素一旦浮动起来，都会变成块级元素，这意味着内联元素也可以修改尺寸</p>
</li>
<li>
<p>元素一旦浮动起来，在未指定宽度的情况下，其宽度都由内容来决定，这意味着块级元素不再占据 100% 的宽度。</p>
</li>
<li>
<p>文字、图片等内联元素采用环绕的方式排列，不会被浮动元素覆盖。按照左右显示、上下显示，显示不下的，则会溢出显示在元素下方。</p>
</li>
</ul>
<h3 id="清除浮动（clear）"> 清除浮动（clear）</h3>
<p>清除浮动可以帮助我们阻止浮动元素后面的元素上前占位。</p>
<div><pre><code><span>/* 不做清除，默认 */</span>
<span>clear</span><span>:</span> none<span>;</span>

<span>/* 清除前面元素的左浮动 */</span>
<span>clear</span><span>:</span> left<span>;</span>

<span>/* 清除前面元素的右浮动 */</span>
<span>clear</span><span>:</span> right<span>;</span>

<span>/* 清除前面元素的所有浮动 */</span>
<span>clear</span><span>:</span> both<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h2 id="相对定位（relative）"> 相对定位（relative）</h2>
<p>设置相对定位，可以实现元素偏移（位移），同时原有位置会被保留，不会被后续元素占位。</p>
<div><pre><code><span>position</span><span>:</span> relative<span>;</span>
</code></pre>
<div><span>1</span><br></div></div><h2 id="绝对定位（absolute）"> 绝对定位（absolute）</h2>
<p>设置绝对定位，元素会脱离文档流，不占据页面空间，后续的元素会上前占位。同时绝对定位会查询最近的已定位祖先（设置了 <code>position</code> 属性）进行定位，如果没有，则以 <code>body</code> 为参考定位，也就是 <code>0px 0px</code> 页面左上角。</p>
<div><pre><code><span>position</span><span>:</span> absolute<span>;</span>
</code></pre>
<div><span>1</span><br></div></div><p>很多时候，为了实现子元素的绝对定位，可以将父元素设置为 <code>position: relative;</code>。</p>
<h2 id="固定定位（fixed）"> 固定定位（fixed）</h2>
<p>设置固定定位，元素会变成块级元素，并且始终按照视口为参考系进行定位，即使页面滚动，它的位置仍然相对视口保持不变，非常适合工具栏、菜单栏、分享图标等。</p>
<div><pre><code><span>position</span><span>:</span> fixed<span>;</span>
</code></pre>
<div><span>1</span><br></div></div><h2 id="黏贴定位（sticky）"> 黏贴定位（sticky）</h2>
<p>这个定位就很有意思了，它类似于相对和固定的混合体。它允许被定位元素表现的像相对定位一样，能够随元素移动，知道它滚动到某个阈值，就变成了固定定位。该方案非常适合用于导航头部、分段标题等。</p>
<div><pre><code><span>position</span><span>:</span> sticky<span>;</span>
</code></pre>
<div><span>1</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>选择器</title>
      <link>https://docs.jeremyjone.com/roadmap/frontend/css/selector/</link>
      <guid>https://docs.jeremyjone.com/roadmap/frontend/css/selector/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">选择器</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="选择器"> 选择器</h1>
<p>CSS 有一套完整的选择器规则，可以帮助我们快速获取任意指定元素或元素集。</p>
<h2 id="元素选择器"> 元素选择器</h2>
<p>直接写元素名称即可，可以匹配页面中所有对应元素：</p>
<div><pre><code><span>h1</span> <span>{</span>
  <span>color</span><span>:</span> blue<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="类选择器"> 类选择器</h2>
<p>可以选择包含该 class 名称的元素：</p>
<div><pre><code><span>.box</span> <span>{</span>
  <span>color</span><span>:</span> blue<span>;</span>
<span>}</span>

<span>/* 获取 div 中包含 box 类名的元素 */</span>
<span>div.box</span> <span>{</span>
  <span>color</span><span>:</span> blue<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="id-选择器"> ID 选择器</h2>
<p>一个页面中的任何元素都可以设置 ID 属性，但是每个 ID 都应该是全局唯一的。也就是说，通过 ID 获取到的元素应该是唯一的：</p>
<div><pre><code><span>#unique</span> <span>{</span>
  <span>color</span><span>:</span> blue<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="群组选择器"> 群组选择器</h2>
<p>同样的样式，可以通过多个标签共享，它们之间通过 <code>,</code> 分开即可，在这个群组列表中，无效的名称会被自动忽略：</p>
<div><pre><code>h1<span>,</span>
.box<span>,</span>
..box<span>,</span> <span>/* 该名称无效，会被自动忽略 */</span>
<span>#unique</span> <span>{</span>
  <span>color</span><span>:</span> blue<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id="属性选择器"> 属性选择器</h2>
<p>根据一个元素上的某个标签属性来选择元素：</p>
<div><pre><code><span>/* 是否包含 title 属性 */</span>
<span>a[title]</span> <span>{</span>
  <span>color</span><span>:</span> blue<span>;</span>
<span>}</span>

<span>/* 给定 title 属性的特定值 */</span>
<span>a[title="jeremyjone"]</span> <span>{</span>
  <span>color</span><span>:</span> blue<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>那么只有符合条件的 <code>a</code> 标签才会生效：</p>
<div><pre><code><span>&lt;!-- 会生效 --></span>
<span><span><span>&lt;</span>a</span> <span>href</span><span><span>=</span><span>"</span>https://www.jeremyjone.com<span>"</span></span> <span>title</span><span><span>=</span><span>"</span>jeremyjone<span>"</span></span><span>></span></span>JeremyJone.COM<span><span><span>&lt;/</span>a</span><span>></span></span>

<span>&lt;!-- 并不会生效 --></span>
<span><span><span>&lt;</span>a</span> <span>href</span><span><span>=</span><span>"</span>https://www.baidu.com<span>"</span></span><span>></span></span>百度<span><span><span>&lt;/</span>a</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><img :src="$withBase('/assets/roadmap/frontend/css-attr-selector.png')" alt="">
<p>另外，筛选还可以通过类似正则的方式：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>^=</td>
<td>起始等</td>
</tr>
<tr>
<td>$=</td>
<td>结尾等</td>
</tr>
<tr>
<td>*=</td>
<td>任意等</td>
</tr>
<tr>
<td>~=</td>
<td>值等（独立的单词）</td>
</tr>
<tr>
<td>|=</td>
<td>起始等，或之后以 <code>-</code> 连接的值等</td>
</tr>
</tbody>
</table>
<h2 id="兄弟选择器"> 兄弟选择器</h2>
<ul>
<li>
<p><code>+</code> 选择相邻兄弟（当前元素的后一个）</p>
</li>
<li>
<p><code>~</code> 当前层级的所有兄弟元素</p>
</li>
</ul>
<div><pre><code><span>h1 + p</span> <span>{</span>
  <span>color</span><span>:</span> blue<span>;</span>
<span>}</span>

<span>h1 ~ p</span> <span>{</span>
  <span>color</span><span>:</span> blue<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>下例中，<code>h1 + p</code> 会选择第三行，而 <code>h1 ~ p</code> 则会选择第一行和第三行：</p>
<div><pre><code><span><span><span>&lt;</span>p</span><span>></span></span>This is a paragraph before h1<span><span><span>&lt;/</span>p</span><span>></span></span>
<span><span><span>&lt;</span>h1</span><span>></span></span>This is a top level heading<span><span><span>&lt;/</span>h1</span><span>></span></span>
<span><span><span>&lt;</span>p</span><span>></span></span>This is a paragraph after h1<span><span><span>&lt;/</span>p</span><span>></span></span>
<span><span><span>&lt;</span>div</span><span>></span></span>
  <span><span><span>&lt;</span>p</span><span>></span></span>This is a paragraph in div<span><span><span>&lt;/</span>p</span><span>></span></span>
<span><span><span>&lt;/</span>div</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id="子代选择器"> 子代选择器</h2>
<p><code>&gt;</code> 选择当前层级的下一层元素</p>
<div><pre><code><span>article > p</span> <span>{</span>
  <span>color</span><span>:</span> blue<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>下例中，只会选择第二行：</p>
<div><div><br><div>&nbsp;</div><br><br><br><br><br></div><pre><code><span><span><span>&lt;</span>article</span><span>></span></span>
  <span><span><span>&lt;</span>p</span><span>></span></span>This is a paragraph in article<span><span><span>&lt;/</span>p</span><span>></span></span>
  <span><span><span>&lt;</span>div</span><span>></span></span>
    <span><span><span>&lt;</span>p</span><span>></span></span>This is a paragraph in div<span><span><span>&lt;/</span>p</span><span>></span></span>
  <span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;/</span>article</span><span>></span></span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id="后代选择器"> 后代选择器</h2>
<p>选择所有后代，使用 <code>空格</code> 可以实现：</p>
<div><pre><code><span>article p</span> <span>{</span>
  <span>color</span><span>:</span> blue<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>下例中，会选择第二行和第四行：</p>
<div><div><br><div>&nbsp;</div><br><div>&nbsp;</div><br><br><br></div><pre><code><span><span><span>&lt;</span>article</span><span>></span></span>
  <span><span><span>&lt;</span>p</span><span>></span></span>This is a paragraph in article<span><span><span>&lt;/</span>p</span><span>></span></span>
  <span><span><span>&lt;</span>div</span><span>></span></span>
    <span><span><span>&lt;</span>p</span><span>></span></span>This is a paragraph in div<span><span><span>&lt;/</span>p</span><span>></span></span>
  <span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;/</span>article</span><span>></span></span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id="伪类-伪元素选择器"> 伪类/伪元素选择器</h2>
<p>伪类通常表示一个元素的特定状态，例如 <code>:hover</code> 伪类会在鼠标指针悬浮到元素上时使用：</p>
<div><pre><code><span>a:hover</span> <span>{</span>
  <span>color</span><span>:</span> blue<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><ul>
<li>链接伪类</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>:link</td>
<td>匹配超链接未被访问时的状态</td>
</tr>
<tr>
<td>:visited</td>
<td>匹配超链接未被访问时的状态</td>
</tr>
</tbody>
</table>
<ul>
<li>动态伪类</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>:hover</td>
<td>匹配鼠标悬停时的状态</td>
</tr>
<tr>
<td>:active</td>
<td>匹配元素被激活时的状态</td>
</tr>
<tr>
<td>:focus</td>
<td>匹配元素获取焦点时的状态</td>
</tr>
</tbody>
</table>
<ul>
<li>表单伪类</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>:checked</td>
<td>匹配所有选中的表单元素</td>
</tr>
<tr>
<td>:disabled</td>
<td>匹配所有禁用的表单元素</td>
</tr>
<tr>
<td>:enabled</td>
<td>匹配所有启用的表单元素</td>
</tr>
</tbody>
</table>
<ul>
<li>伪元素</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>:root</td>
<td>选择文档的根元素</td>
</tr>
<tr>
<td>:before</td>
<td>在当前元素之前插入内容（需要使用 <code>content</code> 属性来指定要插入的内容）</td>
</tr>
<tr>
<td>:after</td>
<td>在当前元素之后插入内容（需要使用 <code>content</code> 属性来指定要插入的内容）</td>
</tr>
<tr>
<td>:empty</td>
<td>匹配所有没有子元素的元素</td>
</tr>
<tr>
<td>:invalid</td>
<td>匹配所有无效元素</td>
</tr>
<tr>
<td>:not(selector)</td>
<td>匹配当前元素以外的所有元素</td>
</tr>
<tr>
<td>:first-of-type</td>
<td>匹配元素其父级是特定类型的第一个子元素。等同于 <code>:nth-of-type(1)</code></td>
</tr>
<tr>
<td>:last-of-type</td>
<td>匹配元素其父级是特定类型的最后一个子元素。等同于 <code>:nth-last-of-type(1)</code></td>
</tr>
<tr>
<td>:in-range</td>
<td>匹配元素指定范围内的值</td>
</tr>
<tr>
<td>:first-child</td>
<td>匹配当前元素的第一个子元素</td>
</tr>
<tr>
<td>:last-child</td>
<td>匹配当前元素的最后一个子元素</td>
</tr>
<tr>
<td>:nth-child(n)</td>
<td>匹配当前元素的指定序列子元素</td>
</tr>
<tr>
<td>:nth-last-child(n)</td>
<td>匹配当前元素的指定倒序序列子元素</td>
</tr>
<tr>
<td>:nth-of-type(n)</td>
<td>匹配元素其父级是特定类型的第 n 个子元素</td>
</tr>
<tr>
<td>:nth-last-of-type(n)</td>
<td>匹配元素其父级是特定类型的倒序第 n 个子元素</td>
</tr>
<tr>
<td>:only-of-type</td>
<td>匹配所有仅有一个子元素为特定元素的元素</td>
</tr>
<tr>
<td>:only-child</td>
<td>匹配属于父元素中唯一子元素的元素</td>
</tr>
<tr>
<td>:first-letter</td>
<td>匹配当前元素的第一个字母（仅适用于块级元素中）</td>
</tr>
<tr>
<td>:first-line</td>
<td>匹配当前元素的第一行（仅适用于块级元素中）</td>
</tr>
</tbody>
</table>
<h2 id="选择器的权重"> 选择器的权重</h2>
<p>选择器是有权重的，根据权重，可以计算出使用的优先级，权值越大，优先级越高：</p>
<table>
<thead>
<tr>
<th>选择器</th>
<th>权值</th>
</tr>
</thead>
<tbody>
<tr>
<td>元素选择器</td>
<td>1</td>
</tr>
<tr>
<td>类/伪类选择器</td>
<td>10</td>
</tr>
<tr>
<td>ID 选择器</td>
<td>100</td>
</tr>
<tr>
<td>内联方式</td>
<td>1000</td>
</tr>
</tbody>
</table>
<p>权值的计算：所有选择器权值相加。</p>
<h2 id="练习使用选择器"> 练习使用选择器</h2>
<p>找到一个好玩的练习使用选择器的<a href="https://flukeout.github.io/#" target="_blank" rel="noopener noreferrer">网站</a>，有兴趣可以试试。</p>
<p>这个还挺好玩的，我做了一下，32 道题，每道题只需要像这样填写 css 选择器即可：</p>
<img :src="$withBase('/assets/roadmap/frontend/css-practice.gif')" alt="">
<p>如果实在不熟练，右边会有提示，后面很多都用到伪元素选择器，平时用的不多的小伙伴可以练练手。</p>
<p>完成后会得到这样的提示：</p>
<img :src="$withBase('/assets/roadmap/frontend/css-game-finish.png')" alt="">
<hr />
<p>参考 <a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/Selectors" target="_blank" rel="noopener noreferrer">MDN</a>。</p>
]]></content:encoded>
    </item>
    <item>
      <title>构建工具</title>
      <link>https://docs.jeremyjone.com/roadmap/frontend/engineer/build/</link>
      <guid>https://docs.jeremyjone.com/roadmap/frontend/engineer/build/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">构建工具</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="构建工具"> 构建工具</h1>
<h2 id="webpack"> Webpack</h2>
<h2 id="rollup"> Rollup</h2>
<h2 id="vite"> Vite</h2>
]]></content:encoded>
    </item>
    <item>
      <title>格式化工具</title>
      <link>https://docs.jeremyjone.com/roadmap/frontend/engineer/format/</link>
      <guid>https://docs.jeremyjone.com/roadmap/frontend/engineer/format/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">格式化工具</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="格式化工具"> 格式化工具</h1>
<h2 id="eslint"> ESLint</h2>
<h2 id="prettier"> Prettier</h2>
]]></content:encoded>
    </item>
    <item>
      <title>包管理器</title>
      <link>https://docs.jeremyjone.com/roadmap/frontend/engineer/package/</link>
      <guid>https://docs.jeremyjone.com/roadmap/frontend/engineer/package/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">包管理器</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="包管理器"> 包管理器</h1>
<h2 id="npm"> npm</h2>
<h2 id="yarn"> yarn</h2>
]]></content:encoded>
    </item>
    <item>
      <title>HTML 基础</title>
      <link>https://docs.jeremyjone.com/roadmap/frontend/html/</link>
      <guid>https://docs.jeremyjone.com/roadmap/frontend/html/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">HTML 基础</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="html-基础"> HTML 基础</h1>
<h2 id="什么是-html"> 什么是 HTML</h2>
<p><code>HTML</code>：<code>Hyper Text Markup Language</code>，超文本标记语言。它不是编程语言，而是一种定义了网页内容的含义和结构的标记语言。</p>
<p><code>超文本</code> 是指链接单个网站内或多个网站间的网页的链接。链接是网络的一个基本方面，只要将内容上传到互联网，并将其与他人创建的页面相连接，你就是万维网的积极参与者。</p>
<p>在 <code>HTML</code> 中，所有内容都应该包裹在 <code>标签</code> 中，<code>标签</code> 注明了文本、图片和其他内容，以便浏览器显示，除了首行的解释类型：</p>
<img :src="$withBase('/assets/roadmap/frontend/html-struct.png')" alt="">
<h2 id="html5-的变化"> HTML5 的变化</h2>
<p><code>HTML5</code> 在 2014 年正式发布，并推荐使用。</p>
<p>它添加了许多新的语法特性。</p>
<ul>
<li>
<p>添加了一些新的标签内容：</p>
<ul>
<li>语义化标签：<code>section</code>、<code>header</code>、<code>nav</code> 等</li>
<li>内容标签：<code>&lt;video&gt;</code>、<code>&lt;audio&gt;</code>、<code>canvas</code> 等</li>
<li>集成了 <code>SVG</code> 内容</li>
</ul>
</li>
<li>
<p>修改了部分标签的定义。如 <code>&lt;a&gt;</code>、<code>&lt;menu&gt;</code> 等</p>
</li>
<li>
<p>删除了部分标签和属性。如 <code>&lt;font&gt;</code>、<code>&lt;center&gt;</code> 等</p>
</li>
</ul>
<p>同时，<code>APIs</code> 和 <code>DOM</code> 已经成为 <code>HTML5</code> 的基础部分。</p>
<ul>
<li>
<p>新的 API</p>
<ul>
<li>Canvas</li>
<li>定时媒体播放</li>
<li>离线</li>
<li>可编辑内容</li>
<li>拖放</li>
<li>历史</li>
<li>MIME 和协议进程时表头登记</li>
<li>微数据</li>
<li>网络信息</li>
<li>网络存储</li>
<li>地理位置</li>
<li>IndexedDB</li>
</ul>
</li>
</ul>
<p>等等。</p>
<h2 id="文档解释类型"> 文档解释类型</h2>
<p>不同版本的 <code>HTML</code> 其解释类型也不尽相同。最新的 <code>HTML5</code> 解释类型，写法非常简便：</p>
<div><pre><code><span><span>&lt;!</span><span>DOCTYPE</span> <span>html</span><span>></span></span>
</code></pre>
<div><span>1</span><br></div></div><p><code>&lt;!DOCTYPE html&gt;</code> 是 <code>WEB</code> 的文档类型。它不是 HTML 标签，只是告诉浏览器当前 HTML 使用什么版本的文档类型编写的，该如何解析。</p>
<p>之前还有 <code>HTML4</code>、<code>XHTML 1.0</code> 等。它们的写法就相对比较繁琐了。</p>
<ul>
<li>HTML 4</li>
</ul>
<div><pre><code><span><span>&lt;!</span><span>DOCTYPE</span> <span>html</span> <span>PUBLIC</span> <span>"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span>"http://www.w3.org/TR/html4/loose.dtd"</span><span>></span></span>
</code></pre>
<div><span>1</span><br></div></div><ul>
<li>XHTML 1.0</li>
</ul>
<div><pre><code><span><span>&lt;!</span><span>DOCTYPE</span> <span>html</span> <span>PUBLIC</span> <span>"-//W3C//DTD XHTML 1.0 Transitional//EN"</span> <span>"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span><span>></span></span>
</code></pre>
<div><span>1</span><br></div></div><p>如果没有提供声明标识，那么浏览器就会使用默认方式进行渲染，也就是 <code>BackCompat</code> 模式，这样就会造成在不同浏览器下的显示会有所不同。</p>
<p>而提供了声明标识，那么浏览器就会按照 <code>W3C</code> 的标准模式进行渲染，这样所有浏览器会得到同样的显示效果。</p>
<h2 id="标签"> 标签</h2>
<p><code>HTML</code> 中的所有内容都应该包裹在 <code>标签</code> 中。我们可以为标签设置内容、样式等。所有 <code>标签</code> 都需要放在 <code>&lt;</code> 与 <code>&gt;</code> 中，这样的一个标记叫做一个完整的标签。</p>
<p>例如，键入下面内容：</p>
<div><pre><code>我的猫非常脾气暴躁
</code></pre>
<div><span>1</span><br></div></div><p>可以将这行文字封装成一个段落（<code>&lt;p&gt;</code>）元素来使其在单独一行呈现：</p>
<div><pre><code><span><span><span>&lt;</span>p</span><span>></span></span>我的猫非常脾气暴躁<span><span><span>&lt;/</span>p</span><span>></span></span>
</code></pre>
<div><span>1</span><br></div></div><img :src="$withBase('/assets/roadmap/frontend/html-element.png')" alt="">
<h3 id="标签属性"> 标签属性</h3>
<p>还可以为标签添加属性。属性需要放在起始标签中，格式都为 <code>attr=&quot;xxx&quot;</code>，用空格分开：</p>
<img :src="$withBase('/assets/roadmap/frontend/html-element-attribute.png')" alt="">
<p>通常属性作用于当前标签与内容。不同标签自带不同的默认属性。</p>
<h3 id="嵌套标签"> 嵌套标签</h3>
<p>标签还可以嵌套：</p>
<div><pre><code><span><span><span>&lt;</span>p</span><span>></span></span>我的猫咪脾气<span><span><span>&lt;</span>strong</span><span>></span></span>暴躁<span><span><span>&lt;/</span>strong</span><span>></span></span>:)<span><span><span>&lt;/</span>p</span><span>></span></span>
</code></pre>
<div><span>1</span><br></div></div><p>不过嵌套需要确保正确，所有嵌套都应该遵循 <code>开始</code> 和 <code>结束</code> 标签相连。如下面的例子就会错误渲染：</p>
<div><p>错误示例</p>
<div><pre><code><span><span><span>&lt;</span>p</span><span>></span></span>我的猫咪脾气<span><span><span>&lt;</span>strong</span><span>></span></span>爆:)<span><span><span>&lt;/</span>p</span><span>></span></span><span><span><span>&lt;/</span>strong</span><span>></span></span>
</code></pre>
<div><span>1</span><br></div></div></div>
<p>所有元素内容，可以参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element" target="_blank" rel="noopener noreferrer">Mozilla docs</a>。</p>
<h3 id="自闭合标签"> 自闭合标签</h3>
<p>对于无内容的标签，可以通过在 <code>开始标签</code> 的最后添加 <code>/</code> 的方式来结束，即：</p>
<div><pre><code><span><span><span>&lt;</span>img</span> <span>/></span></span>

<span><span><span>&lt;</span>div</span> <span>/></span></span>
<span>&lt;!-- 等于 --></span>
<span><span><span>&lt;</span>div</span><span>></span></span><span><span><span>&lt;/</span>div</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>它开始是一些单标签、空标签的结束简便写法。现在很多 <code>eslint</code> 中有明确要求。</p>
<h2 id="注释"> 注释</h2>
<p><code>HTML</code> 拥有自己的注释风格。与 <code>标签</code> 的要求一样，注释也必须在 <code>&lt;&gt;</code> 中。它可以是单行，也可以是多行。它的写法如下：</p>
<div><pre><code><span>&lt;!-- 这是一段注释 --></span>

<span>&lt;!-- 这是一个
多行
注释 --></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ul>
<li>注释不能写在 <code>标签</code> 内部，</li>
</ul>
<div><p>错误示例</p>
<div><pre><code><span><span><span>&lt;</span>p</span> <span>&lt;!--</span> <span>不能在这里写注释</span> <span>--</span><span>></span></span>>xxx<span><span><span>&lt;/</span>p</span><span>></span></span>
</code></pre>
<div><span>1</span><br></div></div></div>
<ul>
<li>注释不能嵌套</li>
</ul>
<div><p>错误示例</p>
<div><div><br><br><div>&nbsp;</div><br><br></div><pre><code><span><span><span>&lt;</span>!--</span>
  <span>注释1</span>
  <span>&lt;!--</span> <span>注释2</span> <span>--</span><span>></span></span>
-->
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div></div>
<h2 id="语义化"> 语义化</h2>
<p>语义化就是用正确的标签来做正确的是。它让一个标签具有一定的意义，这种意义是可以让人和机器从字面上就能理解的。HTML 语义化可以让页面内容更加结构化，方便浏览器、搜索引擎进行分析，更有利于 SEO。</p>
<p>语义化类似于给编程语言起变量名，可以一目了然看出这段内容的用处和含义。</p>
<p>例如：</p>
<p>我们可以使用 <code>h1</code> 标签来定义一个以及标题：</p>
<div><pre><code><span><span><span>&lt;</span>h1</span><span>></span></span>This is a top level heading<span><span><span>&lt;/</span>h1</span><span>></span></span>
</code></pre>
<div><span>1</span><br></div></div><p>很简单的定义。但是我们同样可以通过其他标签来模拟实现该内容：</p>
<div><pre><code><span><span><span>&lt;</span>span</span> <span><span>style</span><span><span>=</span><span>"</span><span><span>font-size</span><span>:</span> 32px<span>;</span> <span>margin</span><span>:</span> 21px 0<span>;</span> <span>font-weight</span><span>:</span> bold<span>;</span></span><span>"</span></span></span><span>></span></span>
  This is a top level heading
<span><span><span>&lt;/</span>span</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>它们呈现的效果式样的：</p>
<img :src="$withBase('/assets/roadmap/frontend/html-semantics.png')" alt="">
<p>但是这样并不是我们推荐的。HTML 的编写应该着重于填充的数据，而不是表现样式，那是 CSS 的任务。</p>
<p>使用语义化具有如下好处：</p>
<ul>
<li>搜索引擎将其内容视为影响页面搜索排名的重要关键字（<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/SEO" target="_blank" rel="noopener noreferrer">SEO</a>）</li>
<li>屏幕阅读器可以把它作为一个路标，帮助视障用户更高效地浏览页面</li>
<li>找到有意义的代码块要比在无穷无尽的 <code>div</code> 中搜索语义类或命名空间类要容易的多</li>
<li>向开发人员建议要填充的数据类型</li>
<li>语义命名反映了恰当的自定义元素/组件命名</li>
</ul>
<p>随着 web 信息量的扩大，这样的优势/好处越来越突出，语义化可以让机器高效处理，为我们提供更准确的信息。</p>
<hr />
<p><strong>参考：</strong></p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Semantics#%E8%AF%AD%E4%B9%89%E5%8C%96%E5%85%83%E7%B4%A0" target="_blank" rel="noopener noreferrer">语义化元素</a></li>
<li><a href="https://www.zhihu.com/question/20455165" target="_blank" rel="noopener noreferrer">如何理解 web 语义化</a></li>
</ul>
<h2 id="dom"> DOM</h2>
<p>DOM: <code>Document Object Module</code>，即 <code>文档对象模型</code>。</p>
<p>一个 DOM 有一个树形结构，标记语言中的每一个元素、属性以及每一段文字都对应着结构树中的一个节点。节点由节点本身和其他 DOM 节点的关系定义，有些节点有父节点，有些节点有兄弟节点。</p>
<p>例如，我们有 html 以下代码：</p>
<div><pre><code><span><span><span>&lt;</span>p</span><span>></span></span>
  Let's use:
  <span><span><span>&lt;</span>span</span><span>></span></span>Cascading<span><span><span>&lt;/</span>span</span><span>></span></span>
  <span><span><span>&lt;</span>span</span><span>></span></span>Style<span><span><span>&lt;/</span>span</span><span>></span></span>
  <span><span><span>&lt;</span>span</span><span>></span></span>Sheets<span><span><span>&lt;/</span>span</span><span>></span></span>
<span><span><span>&lt;/</span>p</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>这段代码转换成 DOM 树之后，就变成了：</p>
<div><pre><code>P
├─ &quot;Let&#39;s use:&quot;
├─ SPAN
|  └─ &quot;Cascading&quot;
├─ SPAN
|  └─ &quot;Style&quot;
└─ SPAN
   └─ &quot;Sheets&quot;
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="习惯与最佳实践"> 习惯与最佳实践</h2>
<p>良好的习惯会带来无穷的好处，最佳实践会帮助我们养成良好的习惯。</p>
<h3 id="始终声明-doctype"> 始终声明 Doctype</h3>
<p><code>doctype</code> 声明应该是编写 <code>HTML</code> 文档的第一件事。</p>
<h3 id="使用语义化标签"> 使用语义化标签</h3>
<p>使用语义化标签可以带来更好的使用体验。</p>
<h3 id="使用描述性元标记"> 使用描述性元标记</h3>
<p>元标记使页面可以在面对搜索引擎、爬虫等的时候更有意义。</p>
<p>常用 meta 属性：</p>
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td><code>author</code> / <code>description</code> / <code>keywords</code> / <code>generator</code> / <code>revised</code> / <code>others</code></td>
<td>指定名称</td>
</tr>
<tr>
<td style="text-align:center">content</td>
<td>任意</td>
<td>信息内容</td>
</tr>
<tr>
<td style="text-align:center">http-equiv</td>
<td><code>content-type</code> / <code>expire</code> / <code>refresh</code> / <code>set-cookie</code></td>
<td>指定属性，该属性的值会添加到 <code>HTTP</code> 请求头</td>
</tr>
</tbody>
</table>
<p>例如：</p>
<div><pre><code><span><span>&lt;!</span><span>DOCTYPE</span> <span>html</span><span>></span></span>
<span><span><span>&lt;</span>html</span><span>></span></span>
  <span><span><span>&lt;</span>head</span><span>></span></span>
    <span><span><span>&lt;</span>title</span><span>></span></span>HTML Best Practices in Website Design<span><span><span>&lt;/</span>title</span><span>></span></span>
    <span><span><span>&lt;</span>meta</span> <span>name</span><span><span>=</span><span>"</span>keywords<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>HTML, Website Design, HTML Best Practices<span>"</span></span> <span>/></span></span>
    <span><span><span>&lt;</span>meta</span> <span>name</span><span><span>=</span><span>"</span>description<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>Learn about HTML best practices.<span>"</span></span> <span>/></span></span>
    <span><span><span>&lt;</span>meta</span> <span>name</span><span><span>=</span><span>"</span>author<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>John Doe<span>"</span></span> <span>/></span></span>
    <span><span><span>&lt;</span>meta</span> <span>http-equiv</span><span><span>=</span><span>"</span>Content-Type<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>text/html; charset = UTF-8<span>"</span></span> <span>/></span></span>
  <span><span><span>&lt;/</span>head</span><span>></span></span>
  <span><span><span>&lt;</span>body</span><span>></span></span>
    <span><span><span>&lt;</span>p</span><span>></span></span>Let's learn how to code HTML5!<span><span><span>&lt;/</span>p</span><span>></span></span>
  <span><span><span>&lt;/</span>body</span><span>></span></span>
<span><span><span>&lt;/</span>html</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h3 id="良好的布局"> 良好的布局</h3>
<p>一个页面应该具有一定的布局结构，而不仅仅是标题、文本、链接等。</p>
<p>通常来说，它可以是 <code>&lt;header&gt;</code>、<code>&lt;section&gt;</code>、<code>&lt;footer&gt;</code> 组成。大部分内容应该包含在 <code>&lt;section&gt;</code> 中，比如标题、图片等。</p>
<h3 id="使用外部样式表"> 使用外部样式表</h3>
<p>尽量避免使用内联样式，大量内联样式会导致文件过大，加载缓慢，代码难以维护等问题。</p>
<p>同样的，避免在 CSS 文件中使用 import 语句，这样会产生额外的服务器请求。</p>
<h3 id="验证您的代码"> 验证您的代码</h3>
<p>永远要验证代码。验证代码可以尽早识别错误，避免上线后带来的诸多不便和不友好的体验。</p>
<p>最重要的，这是一个<strong>良好的，也是必须的习惯</strong>。</p>
<hr />
<p>参考：</p>
<p><a href="https://www.wbolt.com/html-best-practices.html" target="_blank" rel="noopener noreferrer">构建可维护和可扩展网站的 HTML 最佳实践</a></p>
<h2 id="seo"> SEO</h2>
<ul>
<li>高效的使用 H 标签（h1-h6）</li>
<li>填写完整的 meta 标签内容</li>
<li>使用语义化标签</li>
<li>合理命名 css 变量</li>
<li>图片添加 alt 属性</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>JavaScript 基础</title>
      <link>https://docs.jeremyjone.com/roadmap/frontend/js/</link>
      <guid>https://docs.jeremyjone.com/roadmap/frontend/js/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">JavaScript 基础</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="javascript-基础"> JavaScript 基础</h1>
<h2 id="什么是-javascript"> 什么是 JavaScript</h2>
<p><code>JavaScript</code> 是一种具有函数优先的轻量级、解释型的脚本语言。它最初的设计是用来操作浏览器中的 <code>DOM</code> 元素的，但现在它也被应用到了很多非浏览器环境中，甚至开发后端应用。</p>
<h2 id="dom-操作"> DOM 操作</h2>
<p><a href="./../html/#dom">DOM</a> 是浏览器解析页面后自动生成的，但是它只是已经静态页面。我们可以通过 <code>JavaScript</code> 让它们做出一些有趣的改变。</p>
<h3 id="获取-dom"> 获取 DOM</h3>
<div><pre><code><span>var</span> element <span>=</span> document<span>.</span><span>querySelector</span><span>(</span>selector<span>)</span><span>;</span> <span>// 获取一个选择器对象。如果有多个，返回第一个</span>

<span>var</span> elementList <span>=</span> document<span>.</span><span>querySelectAll</span><span>(</span>selector<span>)</span><span>;</span> <span>// 获取所有选择器对象集合</span>

<span>// 还有上古方法</span>
Document<span>.</span><span>getElementById</span><span>(</span>id<span>)</span><span>;</span>
Document<span>.</span><span>getElementsByTagName</span><span>(</span>name<span>)</span><span>;</span>
<span>// ...</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>通过上述方法可以快速获取 <code>DOM</code> 元素，其中 <code>selector</code> 可以是任意有效 css 选择器，它可以很简单，也可以很复杂，只要是正确的，就可以找到对应元素。</p>
<p>能够获取到 <code>DOM</code>，就意味着我们可以获取到 <code>DOM</code> 的一切信息。我们可以获取对应的位置信息、大小信息、以及样式信息等。</p>
<div><pre><code><span>var</span> div <span>=</span> document<span>.</span><span>querySelector</span><span>(</span><span>"div"</span><span>)</span><span>;</span>
<span>var</span> top <span>=</span> div<span>.</span>offsetTop<span>;</span>
<span>var</span> left <span>=</span> div<span>.</span>offsetLeft<span>;</span>
<span>var</span> width <span>=</span> div<span>.</span>offsetWidth<span>;</span>
<span>var</span> height <span>=</span> div<span>.</span>offsetHeight<span>;</span>
<span>var</span> style <span>=</span> div<span>.</span>style<span>;</span> <span>// CSSStyleDeclaration Object</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>同样还可以修改对应的样式：</p>
<div><pre><code>div<span>.</span>style<span>.</span>color <span>=</span> <span>"red"</span><span>;</span> <span>// 文字变为红色</span>
div<span>.</span>className <span>=</span> <span>"my-class"</span><span>;</span> <span>// 给 div 添加样式类</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h3 id="创建-dom"> 创建 DOM</h3>
<div><pre><code>element<span>.</span><span>appendChild</span><span>(</span>newElement<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><p>通过 <code>appendChild</code> 属性可以将新元素插入到指定元素的子项中。</p>
<div><p>提示</p>
<p>通常，为了减少回流，都是先创建一个片段（<code>Fragment</code>），将所有内容都放到片段之中，最后再将片段一次性添加到 <code>DOM</code> 中。</p>
<div><pre><code><span>var</span> p1 <span>=</span> document<span>.</span><span>createElement</span><span>(</span><span>"p"</span><span>)</span><span>;</span>
p1<span>.</span>text <span>=</span> <span>"这是文本段落1"</span><span>;</span>

<span>var</span> p2 <span>=</span> document<span>.</span><span>createElement</span><span>(</span><span>"p"</span><span>)</span><span>;</span>
p2<span>.</span>text <span>=</span> <span>"这是文本段落2"</span><span>;</span>

<span>var</span> newElem <span>=</span> docuemnt<span>.</span><span>createDocumentFragment</span><span>(</span><span>)</span><span>;</span>
newElem<span>.</span><span>appendChild</span><span>(</span>p1<span>)</span><span>;</span>
newElem<span>.</span><span>appendChild</span><span>(</span>p2<span>)</span><span>;</span>

div<span>.</span><span>appendChild</span><span>(</span>newElem<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div></div>
<h3 id="删除-dom"> 删除 DOM</h3>
<div><pre><code>div<span>.</span><span>removeChild</span><span>(</span>node<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><p>这将把元素从整个 <code>DOM</code> 树中移除。</p>
<h2 id="事件"> 事件</h2>
<p>事件是 <code>JavaScript</code> 中一个非常重要，也是最最常用的功能。有了事件，意味着用户可以同页面进行交互，然后通过一系列响应得到反馈。</p>
<blockquote>
<p>事件本质是系统在特定条件下产生或触发的某种信号，并提供一系列动作的机制。</p>
</blockquote>
<p>在 <code>WEB</code> 中，事件在浏览器中被触发并且通常被绑定到窗口内部的特定部分 —— 一个元素、一系列元素、甚至是整个窗口等等。</p>
<h3 id="添加事件"> 添加事件</h3>
<p>事件是绑定在元素上的，所以我们需要有一个元素：</p>
<div><pre><code><span>var</span> btn <span>=</span> <span>querySelector</span><span>(</span><span>"button"</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><p>然后我们就可以添加事件：</p>
<div><pre><code>btn<span>.</span><span>onclick</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>//...</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>它绑定一个方法，用于事件触发时回调。</p>
<p>除了 <code>onclick</code> 之外，事件还有很多，比如：</p>
<ul>
<li><code>onmouseenter</code></li>
<li><code>onmouseout</code></li>
<li><code>onfocus</code></li>
<li><code>ondblcilck</code></li>
</ul>
<p>等等。常见事件可以参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/Events" target="_blank" rel="noopener noreferrer">MDN Events</a>。</p>
<h3 id="新的事件触发机制"> 新的事件触发机制</h3>
<p>在 <code>DOM Level 2</code> 以上，增添了新的事件触发机制，相比之前的直接绑定事件，新的方法提供了更加统一的接口、更加灵活的处理机制：</p>
<div><pre><code>target<span>.</span><span>addEventListener</span><span>(</span>type<span>,</span> listener<span>,</span> options<span>)</span><span>;</span>
target<span>.</span><span>addEventListener</span><span>(</span>type<span>,</span> listener<span>,</span> useCapture<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><ul>
<li><code>type</code>：<a href="https://developer.mozilla.org/zh-CN/docs/Web/Events" target="_blank" rel="noopener noreferrer">事件类型</a> 字符串</li>
<li><code>listener</code>：事件触发的回调函数</li>
<li><code>options</code>：指定回调函数的可选参数对象。
<ul>
<li><code>capture</code>：是否在  触发</li>
<li><code>once</code>：是否只调用一次。如果为 true，调用后时间被自动移除</li>
<li><code>passive</code>：是否禁用 <code>preventDefault()</code></li>
<li><code>signal</code>：当 <code>AbortSignal</code> 的 <code>abort()</code> 方法被调用时，监听器被移除</li>
</ul>
</li>
<li><code>useCapture</code>：是否在  触发，默认 <code>false</code></li>
</ul>
<p>在最开始，第三个参数仅仅是一个 Boolean 值，表示是否在捕获阶段调用事件处理程序。随着时间推移，需要的选项越来越多，就添加了 <code>options</code> 选项。</p>
<p><code>addEventListener</code> 相比之前的直接绑定函数，它具有如下优点：</p>
<ul>
<li>允许给一个事件注册多个监听器</li>
<li>提供了一种更精细的手段控制 <code>listener</code> 的触发阶段</li>
<li>对任何 <code>DOM</code> 元素都有效</li>
</ul>
<h4 id="新旧方法的区别"> 新旧方法的区别</h4>
<p>虽然都是添加事件，但是新方法与旧方法还是有一些区别的。</p>
<ul>
<li>旧的方法会替换该元素上已经存在的事件，没有兼容性问题</li>
<li>而新的方法则会追加方法，允许在一个元素上添加多个监听事件，但存在兼容性问题</li>
</ul>
<h3 id="移除事件"> 移除事件</h3>
<p>移除事件也非常方便，只需要通过 <code>removeEventListener</code> 即可。</p>
<h3 id="阻止与冒泡"> 阻止与冒泡</h3>
<h4 id="阻止默认行为"> 阻止默认行为</h4>
<p>有时候会需要禁止元素的默认行为，此时可以通过 <code>preventDefault()</code> 方法实现。</p>
<h4 id="冒泡及捕获"> 冒泡及捕获</h4>
<p>首先要知道，<strong>冒泡</strong>和<strong>捕获</strong>是两个不同阶段。当一个事件发生在一个具有父元素的元素上时，它分成：</p>
<ul>
<li>捕获阶段：
<ul>
<li>浏览器检查元素的最外层 <code>&lt;html&gt;</code> 元素，是否在捕获阶段中注册了对应的事件处理程序，如果有，则运行</li>
<li>依次寻找下一层元素，执行相同操作（捕获事件并运行），直到到达实际点击的元素</li>
</ul>
</li>
<li>冒泡阶段：
<ul>
<li>浏览器检查实际点击元素是否在冒泡阶段中注册了对应的事件处理程序，如果有，则运行</li>
<li>依次寻找上一层元素，执行相同操作，直到 <code>&lt;html&gt;</code> 元素</li>
</ul>
</li>
</ul>
<img :src="$withBase('/assets/roadmap/frontend/js/bubble.png')" alt="">
<p>默认情况下，所有事件都在冒泡阶段注册，所以上图的示例中，先执行 <code>&lt;button&gt;</code> 的 <code>onclick</code> 事件，然后执行 <code>&lt;div&gt;</code> 的 <code>onclick</code> 事件。</p>
<p>但是通常我们希望事件仅仅停留在 <code>&lt;button&gt;</code> 中，这就需要用到 <code>stopPropagation()</code> 方法来阻止事件冒泡。</p>
<div><p>历史问题</p>
<p>现在，我们不需要非常清楚捕获和冒泡的区别，因为现代浏览器已经默认将所有事件都在冒泡阶段注册。</p>
<p>但是在最开始，网景只使用捕获，而 IE 则只使用冒泡。</p>
</div>
<h4 id="委托"> 委托</h4>
<p>冒泡允许我们利用事件委托。它允许我们在父节点上设置事件，然后所有子节点都可以通过冒泡调用到父节点的对应事件。这样的方式适用于每一个子节点都需要执行相同内容，它省去了为每一个子节点单独设置事件监听器。<em>例如一个列表。</em></p>
]]></content:encoded>
    </item>
    <item>
      <title>异步编程</title>
      <link>https://docs.jeremyjone.com/roadmap/frontend/js/asynchronous/</link>
      <guid>https://docs.jeremyjone.com/roadmap/frontend/js/asynchronous/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">异步编程</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="异步编程"> 异步编程</h1>
<h2 id="异步的由来与实现"> 异步的由来与实现</h2>
<p>JS 在设计之初就是单线程的，所以本质上并不存在异步编程。在经过不断的进化和改良之后，现在所谓的异步编程也只是利用任务队列来改变事件的触发顺序，从而在效果上达到异步。</p>
<h3 id="一个生活中的例子"> 一个生活中的例子</h3>
<p>好比我们要吃饭，那就要先做饭，假设焖米饭需要 20 分钟，炒个菜需要 10 分钟。</p>
<p>如果我们一步一步来（全部我们自己动手）：</p>
<ul>
<li>1、焖米饭（20 分钟）</li>
<li>2、炒菜（10 分钟）</li>
<li>3、吃饭</li>
</ul>
<p>很显然，我们需要 30 分钟才可以吃到饭。</p>
<p>如何加快速度呢？我们可以使用电饭锅来焖米饭。那现在就是：</p>
<ul>
<li>1、焖米饭（电饭锅用时 20 分钟）</li>
<li>2、炒菜（自身用时 10 分钟）</li>
<li>3、吃饭</li>
</ul>
<p>我们一开始将焖米饭的事情丢给电饭锅去做，我们只需要关心炒菜这个事情了。等电饭锅做好了饭，它会告诉我们。这样一来，我们要吃上饭，只需要等待 20 分钟，缩短了 10 分钟。</p>
<h3 id="由生活到代码的转换"> 由生活到代码的转换</h3>
<p>上面这个例子体现了异步带来的好处。我们自身就是主线程，而电饭锅就是一个任务队列的任务，它会自己处理自己的事情，我们并不需要关心，只需要等待结果即可。就像我们请求后台任务，等待返回结果即可，此时我们的主线程不需要等待结果，还可以做其他事情，有了结果再调用一下就可以了。</p>
<p>上张图说明关系：</p>
<img :src="$withBase('/assets/roadmap/frontend/js/taskqueueexample.png')" alt="taskqueueexample.png">
<p>上例转换代码：</p>
<div><pre><code>console<span>.</span><span>log</span><span>(</span><span>"我要开始做饭了。"</span><span>)</span><span>;</span>

<span>// 焖米饭，饭好了就可以开饭了</span>
<span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>"米饭焖好了，可以开饭了。"</span><span>)</span><span>;</span>
<span>}</span><span>,</span> <span>2000</span><span>)</span><span>;</span> <span>// 以2秒替代20分钟</span>

<span>// 炒菜，主线程一直在炒菜</span>
console<span>.</span><span>log</span><span>(</span><span>"开始炒菜。"</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>上例的结果：</p>
<div><pre><code>我要开始做饭了。
开始炒菜。
米饭焖好了，可以开饭了。
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id="异步操作的执行顺序"> 异步操作的执行顺序</h3>
<p>上例确实是我们想要的结果，但是没有体现出来炒菜的时间。假设现在炒菜用 30 分钟呢？会不会在 20 分钟的时候就告诉我们可以开饭了呢？</p>
<p>这就要说到异步操作的执行顺序了。</p>
<p>在 JS 中，有如下执行顺序规则：</p>
<ul>
<li>主线程优先级最高</li>
<li>主线程执行完毕之后，轮询微任务队列并执行</li>
<li>最后轮询宏任务队列并执行</li>
</ul>
<p>这里引入了两个概念：<code>微任务</code> 和 <code>宏任务</code>，我们稍后介绍。</p>
<p>我们对上例中的代码稍加修改：</p>
<div><pre><code>console<span>.</span><span>log</span><span>(</span><span>"我要开始做饭了。"</span><span>)</span><span>;</span>

<span>// 焖米饭，饭好了就可以开饭了</span>
<span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>"米饭焖好了，可以开饭了。"</span><span>)</span><span>;</span>
<span>}</span><span>,</span> <span>2000</span><span>)</span><span>;</span> <span>// 以2秒替代20分钟</span>

<span>// 炒菜，让它在主线程中运行一段时间，使用循环模拟</span>
console<span>.</span><span>log</span><span>(</span><span>"开始炒菜。"</span><span>)</span><span>;</span>
<span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>10000000</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>" "</span><span>)</span><span>;</span>
<span>}</span>
console<span>.</span><span>log</span><span>(</span><span>"菜炒好了。"</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>运行的结果显示，它并不会影响“米饭焖好了”在最后调用。这也证明了执行顺序是正确的。</p>
<h4 id="宏任务"> 宏任务</h4>
<p>JS 中的宏任务有以下几种方式：</p>
<ul>
<li>setTimeout</li>
<li>setInterval</li>
<li>I/O</li>
<li>script</li>
</ul>
<p>当主线程遇到它们时，会创建一个宏任务，并按时间丢到宏任务队列中去。</p>
<h4 id="微任务"> 微任务</h4>
<p>JS 中的微任务有以下几种方式：</p>
<ul>
<li>Promise</li>
<li>process.nextTick</li>
</ul>
<p>同样的，主线程遇到它们也会创建一个微任务，并丢到微任务队列中。</p>
<h4 id="事件循环"> 事件循环</h4>
<p>在同一次事件循环（event loop）中，永远基于上面提到的执行顺序：主线程 &gt; 微任务 &gt; 宏任务。</p>
<img :src="$withBase('/assets/roadmap/frontend/js/eventloop.png')" alt="eventloop.png">
<h5 id="举个简单的例子"> 举个简单的例子</h5>
<p>看如下代码深入理解：</p>
<div><pre><code>console<span>.</span><span>log</span><span>(</span><span>"main start"</span><span>)</span><span>;</span>

<span>// 宏任务</span>
<span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>"setTimeout 1"</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>

<span>// 微任务</span>
<span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>"promise 1"</span><span>)</span><span>;</span> <span>// Promise 中的代码是同步代码</span>
  <span>resolve</span><span>(</span><span>"resolve"</span><span>)</span><span>;</span> <span>// 回调</span>
  console<span>.</span><span>log</span><span>(</span><span>"promise 2"</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>.</span><span>then</span><span>(</span> <span>// 接收回调，这里属于</span>
  <span>val</span> <span>=></span> console<span>.</span><span>log</span><span>(</span>val<span>)</span><span>,</span>微任务
  <span>err</span> <span>=></span> <span>{</span><span>}</span>
<span>)</span><span>;</span>

console<span>.</span><span>log</span><span>(</span><span>"main end"</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><p>代码经过运行，它的执行结果如下：</p>
<div><pre><code>main start
promise <span>1</span>
promise <span>2</span>
main end
resolve
setTimeout <span>1</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>这是比较基本的循环。如果在微任务或者宏任务中再添加微任务/宏任务的话，就会按照事件循环的执行顺序，依次调用执行。</p>
<h5 id="复杂一些的例子"> 复杂一些的例子</h5>
<p>网上看到一个比较复杂的题，图解很详细，我就直接贴过来了：</p>
<div><pre><code><span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>"setTimeout1"</span><span>)</span><span>,</span> <span>0</span><span>)</span><span>;</span> <span>//1宏任务</span>
<span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>//2宏任务</span>
  console<span>.</span><span>log</span><span>(</span><span>"setTimeout2"</span><span>)</span><span>;</span>
  Promise<span>.</span><span>resolve</span><span>(</span><span>)</span><span>.</span><span>then</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>"promise3"</span><span>)</span><span>;</span>
    Promise<span>.</span><span>resolve</span><span>(</span><span>)</span><span>.</span><span>then</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
      console<span>.</span><span>log</span><span>(</span><span>"promise4"</span><span>)</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>
    console<span>.</span><span>log</span><span>(</span><span>5</span><span>)</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>
  <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>"setTimeout4"</span><span>)</span><span>,</span> <span>0</span><span>)</span><span>;</span> <span>//4宏任务</span>
<span>}</span><span>,</span> <span>0</span><span>)</span><span>;</span>
<span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>"setTimeout3"</span><span>)</span><span>,</span> <span>0</span><span>)</span><span>;</span> <span>//3宏任务</span>
Promise<span>.</span><span>resolve</span><span>(</span><span>)</span><span>.</span><span>then</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>//1微任务</span>
  console<span>.</span><span>log</span><span>(</span><span>"promise1"</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><img :src="$withBase('/assets/roadmap/frontend/js/eventloop1.png')" alt="eventloop1.png">
<img :src="$withBase('/assets/roadmap/frontend/js/eventloop2.png')" alt="eventloop2.png">
<p>这个例子还是很有特点的，要搞明白了它，就对事件循环没什么难理解的了。</p>
<h2 id="promise"> Promise</h2>
<p>由于 JS 的单线程和任务队列，造成了很多函数嵌套，当这种嵌套激增，就会造成所谓的 <code>回调地狱</code>，这是我们深恶痛绝的。</p>
<h3 id="创建一个-promise"> 创建一个 Promise</h3>
<p>基于几方面原因，JS 催生了 <code>Promise</code>，它解决了很多问题。先看用法：</p>
<div><pre><code><span>new</span> <span>Promise</span><span>(</span>
  <span>(</span>
    resolve<span>,</span> <span>// 成功状态回调</span>
    reject <span>// 失败状态回调</span>
  <span>)</span> <span>=></span> <span>{</span>
    <span>// 执行体</span>
  <span>}</span>
<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>这是一个最基本的创建一个 Promise 的方式。</p>
<h3 id="promise-的状态"> Promise 的状态</h3>
<p>Promise 官方定义了三种状态：</p>
<ul>
<li>pending：准备阶段</li>
<li>fulfilled：完成，可以理解为成功</li>
<li>rejected：失败，理解为失败</li>
</ul>
<p>当一个 Promise 被创建之后，它的状态是 <code>pending</code>，此时会执行 <code>执行体</code> 的内容。</p>
<p>当遇到回调时：</p>
<ul>
<li><code>resolve</code> 会将 Promise 的状态改为成功（fulfilled）</li>
<li><code>reject</code> 会将 Promise 的状态改为失败（rejected）</li>
</ul>
<p><code>resolve()</code> 和 <code>reject()</code> 在同一执行体时，只有第一个会被执行。</p>
<div><pre><code><span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
  <span>// ... 执行逻辑</span>
  <span>resolve</span><span>(</span><span>"succeed"</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><blockquote>
<p>可能有些人会有疑问了，好像还见过 <code>resolved</code> 状态。这里解释一下，它不是标准状态。总的来说，一个 Promise 被创建之后，一定是 <code>pending</code>，之后无论执行了 <code>resolve()</code> 还是 <code>reject()</code>，状态都属于 <code>resolved</code>，它表示已处理，不会再改变的状态。所以，<code>fulfilled</code> 与 <code>rejected</code> 都属于 <code>resolved</code> 的一种状态。</p>
</blockquote>
<p>总结如下：</p>
<div><pre><code>pending -&gt; resolve() -&gt; fulfilled -&gt; resolved
pending -&gt; reject() -&gt; rejected -&gt; resolved
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>只有当改变 Promise 状态的时候，才会创建微任务，也就是只有当执行到 <code>resolve()</code> 或 <code>reject()</code> 时，才会有微任务生成。</p>
<h4 id="promise-状态的中转"> Promise 状态的中转</h4>
<p><code>resolve()</code> 和 <code>reject()</code> 方法如果返回一个值，它会按照上面的逻辑改变状态。但是返回的是一个 Promise 呢？此时它将返回该 Promise 的状态，而与自身无关。</p>
<div><pre><code><span>const</span> p1 <span>=</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
  <span>reject</span><span>(</span><span>"failed"</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>

<span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
  <span>resolve</span><span>(</span>p1<span>)</span><span>;</span> <span>// 虽然我们调用的是成功回调，但是它返回的是 p1 的失败状态</span>
<span>}</span><span>)</span><span>.</span><span>then</span><span>(</span>
  <span>val</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>"val: "</span> <span>+</span> val<span>)</span><span>,</span>
  <span>err</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>"err: "</span> <span>+</span> err<span>)</span>
<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>此时，其打印的应该是：</p>
<div><pre><code>err<span>:</span> failed<span>;</span>
</code></pre>
<div><span>1</span><br></div></div><h2 id="使用-then-处理-promise-的返回状态"> 使用 then 处理 Promise 的返回状态</h2>
<p>上面已经创建了一个 Promise，回调时需要通过 <code>then</code> 方法。</p>
<p>它接收两个参数，一个成功，一个失败。</p>
<div><pre><code>console<span>.</span><span>log</span><span>(</span><span>"start"</span><span>)</span><span>;</span>

<span>let</span> promise <span>=</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>"promise"</span><span>)</span><span>;</span>
  <span>resolve</span><span>(</span><span>"succeed"</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>.</span><span>then</span><span>(</span>
  <span>val</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>"val: "</span> <span>+</span> val<span>)</span><span>,</span>
  <span>err</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>"err: "</span> <span>+</span> err<span>)</span>
<span>)</span><span>;</span>

console<span>.</span><span>log</span><span>(</span><span>"end"</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>现在应该很明显可以看出来，它的执行结果应该是：</p>
<div><pre><code>start<span>;</span>
promise<span>;</span>
end<span>;</span>
val<span>:</span> succeed<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id="then-的链式操作"> then 的链式操作</h3>
<p>一个 Promise 可以有多个 <code>then</code>，这是链式的，这也就解决了我们之前的 <code>回调地狱</code> 的问题。</p>
<p>那么为什么 <code>then</code> 可以是链式操作呢？ 因为一个 <code>then</code> 本身也会返回一个 Promise，同时默认执行的是成功状态。</p>
<p>简单理解，<strong>就是一个 <code>then</code> 仅仅是对前面的 Promise 的状态的处理</strong>。遇到多个 <code>then</code> 时，仅仅是把当前 <code>then</code> 前面的内容看成一个 Promise 即可。</p>
<h4 id="then-状态的传递"> then 状态的传递</h4>
<p>如果前一个 <code>then</code> 没有处理对应的状态，那会该状态会自动坠入后面一个 <code>then</code>，这样的方式有点像 <code>try...catch</code>：</p>
<div><pre><code><span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
  <span>reject</span><span>(</span><span>"failed"</span><span>)</span><span>;</span>
<span>}</span><span>)</span>
  <span>.</span><span>then</span><span>(</span><span>val</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>"val: "</span> <span>+</span> val<span>)</span><span>)</span>
  <span>.</span><span>then</span><span>(</span><span>null</span><span>,</span> <span>err</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>"err: "</span> <span>+</span> err<span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>很显然，失败状态由第二个 <code>then</code> 来接收。</p>
<h4 id="then-值的传递"> then 值的传递</h4>
<p>如果我们需要在前一个 <code>then</code> 里面处理数据，然后传递给后面一个 <code>then</code>，我们可以通过 <code>return</code> 来进行传递：</p>
<div><pre><code><span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
  <span>resolve</span><span>(</span><span>)</span><span>;</span>
<span>}</span><span>)</span>
  <span>.</span><span>then</span><span>(</span>
    <span>val</span> <span>=></span> <span>{</span>
      <span>return</span> <span>"jeremyjone"</span><span>;</span>
    <span>}</span><span>,</span>
    <span>err</span> <span>=></span> <span>{</span><span>}</span>
  <span>)</span>
  <span>.</span><span>then</span><span>(</span><span>val</span> <span>=></span> console<span>.</span><span>log</span><span>(</span>val<span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>此时，我们得到的打印应该是前一个 <code>then</code> 返回的值。</p>
<p>这样的方式提供了链式操作中，分批分次处理数据的需求。</p>
<h4 id="改变-then-的默认状态"> 改变 then 的默认状态</h4>
<p>前面提到 <code>then</code> 默认返回成功状态，这是它返回一个值的时候。但是当它本身 <code>return</code> 了一个 Promise，则会根据当前返回的 Promise 的状态来向下坠入。</p>
<div><pre><code><span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
  <span>resolve</span><span>(</span><span>)</span><span>;</span>
<span>}</span><span>)</span>
  <span>.</span><span>then</span><span>(</span><span>val</span> <span>=></span> <span>{</span>
    <span>return</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
      <span>reject</span><span>(</span><span>"failed"</span><span>)</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>
  <span>}</span><span>)</span>
  <span>.</span><span>then</span><span>(</span>
    <span>val</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>"val: "</span> <span>+</span> val<span>)</span><span>,</span>
    <span>err</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>"err: "</span> <span>+</span> err<span>)</span>
  <span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>此时打印的将会是：</p>
<div><pre><code>err<span>:</span> failed<span>;</span>
</code></pre>
<div><span>1</span><br></div></div><p>这里有个细节，一定是要将 Promise 返回，如果不是返回的 Promise，那么下一个 <code>then</code> 将处理的就是前一个 <code>then</code> 抛出的 Promise。</p>
<h3 id="then-作为方法单独使用"> then 作为方法单独使用</h3>
<p>有时候，需要封装一个类、对象或者方法，来返回给下一个 <code>then</code>。此时可以通过 <code>then</code> 方法来对类、对象或者方法加以封装。</p>
<p><code>then</code> 方法的用法与 Promise 本身无异，它也接收两个参数，并可以执行参数回调。系统会检查返回的类、对象或者方法中是否包含一个名为 <code>then</code> 的方法，如果有，将会封装为一个 Promise 返回。</p>
<div><pre><code><span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
  <span>resolve</span><span>(</span><span>)</span><span>;</span>
<span>}</span><span>)</span>
  <span>.</span><span>then</span><span>(</span><span>val</span> <span>=></span> <span>{</span>
    <span>// 以对象为例</span>
    <span>return</span> <span>{</span>
      <span>then</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>{</span>
        <span>resolve</span><span>(</span><span>"success"</span><span>)</span><span>;</span>
      <span>}</span>
    <span>}</span><span>;</span>
  <span>}</span><span>)</span>
  <span>.</span><span>then</span><span>(</span>
    <span>val</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>"val: "</span> <span>+</span> val<span>)</span><span>,</span>
    <span>err</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>"err: "</span> <span>+</span> err<span>)</span>
  <span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>这样的写法大大简化了代码，看上去也更加简洁。</p>
<h3 id="catch-捕获异常"> catch 捕获异常</h3>
<p>前面 <code>then</code> 方法中都可以用第二个参数来捕获异常，如果有很多 <code>then</code>，同时并不想每一次单独捕获，那么可以在最后添加一个 <code>catch</code> 来一并捕获。</p>
<p><em>当然，<code>catch</code> 可以放在链式的任意位置，但是通常它放在最后面。</em></p>
<div><pre><code><span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
  <span>resolve</span><span>(</span><span>)</span><span>;</span>
<span>}</span><span>)</span>
  <span>.</span><span>then</span><span>(</span><span>val</span> <span>=></span> console<span>.</span><span>log</span><span>(</span>val<span>)</span><span>)</span>
  <span>.</span><span>then</span><span>(</span><span>val</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>"val: "</span> <span>+</span> val<span>)</span><span>)</span>
  <span>.</span><span>catch</span><span>(</span><span>err</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>"catch: "</span> <span>+</span> err<span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id="finally-执行"> finally 执行</h3>
<p>跟异常捕获一样，Promise 的链式也可以有一个 <code>finally</code> 方法，当所有链式执行完成之后，无论成功还是失败，这里的代码都会执行。</p>
<div><pre><code><span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
  <span>resolve</span><span>(</span><span>)</span><span>;</span>
<span>}</span><span>)</span>
  <span>.</span><span>then</span><span>(</span><span>val</span> <span>=></span> console<span>.</span><span>log</span><span>(</span>val<span>)</span><span>)</span>
  <span>.</span><span>then</span><span>(</span><span>val</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>"val: "</span> <span>+</span> val<span>)</span><span>)</span>
  <span>.</span><span>catch</span><span>(</span><span>err</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>"catch: "</span> <span>+</span> err<span>)</span><span>)</span>
  <span>.</span><span>finally</span><span>(</span><span>(</span><span>)</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>"finally"</span><span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="promise-的方法"> Promise 的方法</h2>
<p>除了上面使用 <code>new</code> 关键字声明的 Promise，它本身还提供了一些简写形式。</p>
<h3 id="promise-resolve"> Promise.resolve</h3>
<p>看名字就知道，这是直接返回成功状态的 Promise。</p>
<div><pre><code>Promise<span>.</span><span>resolve</span><span>(</span><span>"jeremyjone"</span><span>)</span><span>.</span><span>then</span><span>(</span><span>val</span> <span>=></span> console<span>.</span><span>log</span><span>(</span>val<span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><p>很好理解，它相当于实现了一个方法：</p>
<div><pre><code>Promise<span>.</span><span>resolve</span> <span>=</span> <span>function</span><span>(</span><span>val</span><span>)</span> <span>{</span>
  <span>return</span> <span>new</span> <span>Promise</span><span>(</span><span>resolve</span> <span>=></span> <span>{</span>
    <span>resolve</span><span>(</span>val<span>)</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id="promise-reject"> Promise.reject</h3>
<p>该方法可以抛出一个 Promise 的异常，用以改变 Promise 本身的状态。</p>
<div><pre><code><span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
  <span>resolve</span><span>(</span><span>"jeremyjone"</span><span>)</span><span>;</span>
<span>}</span><span>)</span>
  <span>.</span><span>then</span><span>(</span><span>val</span> <span>=></span> <span>{</span>
    <span>if</span> <span>(</span>val <span>!==</span> <span>"a"</span><span>)</span> <span>{</span>
      <span>return</span> Promise<span>.</span><span>reject</span><span>(</span><span>"参数不正确"</span><span>)</span><span>;</span>
    <span>}</span>
    <span>return</span> val<span>;</span>
  <span>}</span><span>)</span>
  <span>.</span><span>catch</span><span>(</span><span>err</span> <span>=></span> console<span>.</span><span>log</span><span>(</span>err<span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h3 id="promise-all"> Promise.all</h3>
<p>该方法会批量处理多个 Promise，接收一个 Promise 的数组。如果都成功，则返回成功状态；只要有一个错误，就返回错误状态。</p>
<p>所以，参数中的 Promise 最好每一个都处理好失败状态，这样 <code>all</code> 中就可以成功获取数据了。失败的数据经过处理后就返回 <code>undefined</code>。</p>
<p>返回的结果也是一个数组，其值对应传入的参数。</p>
<p>看下面的示例作为理解。</p>
<p>1、当都成功时：</p>
<div><pre><code><span>const</span> p1 <span>=</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
  <span>resolve</span><span>(</span><span>"p1"</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>

<span>const</span> p2 <span>=</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
  <span>resolve</span><span>(</span><span>"p2"</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>

Promise<span>.</span><span>all</span><span>(</span><span>[</span>p1<span>,</span> p2<span>]</span><span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> console<span>.</span><span>log</span><span>(</span>res<span>)</span><span>)</span><span>;</span> <span>// ["p1", "p2"]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>2、某一个失败时：</p>
<div><pre><code><span>const</span> p1 <span>=</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
  <span>reject</span><span>(</span><span>"p1"</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>

<span>const</span> p2 <span>=</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
  <span>resolve</span><span>(</span><span>"p2"</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>

Promise<span>.</span><span>all</span><span>(</span><span>[</span>p1<span>,</span> p2<span>]</span><span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> console<span>.</span><span>log</span><span>(</span>res<span>)</span><span>)</span><span>;</span> <span>// 返回失败（Uncaught (in promise) p1），此时可以使用 catch 获取失败</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>3、每一个 Promise 都处理好异常</p>
<div><pre><code><span>const</span> p1 <span>=</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
  <span>reject</span><span>(</span><span>"p1"</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>.</span><span>catch</span><span>(</span><span>err</span> <span>=></span> console<span>.</span><span>log</span><span>(</span>err<span>)</span><span>)</span><span>;</span>

<span>const</span> p2 <span>=</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
  <span>resolve</span><span>(</span><span>"p2"</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>

Promise<span>.</span><span>all</span><span>(</span><span>[</span>p1<span>,</span> p2<span>]</span><span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> console<span>.</span><span>log</span><span>(</span>res<span>)</span><span>)</span><span>;</span> <span>// [undefined, "p2"]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>这样就可以更好的使用批处理结果了。</p>
<h3 id="promise-allsettled"> Promise.allSettled</h3>
<p>该方法比上面的 <code>all</code> 更宽泛一些，无论成功还是失败，它都可以接收。用法是一样的，这里就不再赘述了。</p>
<h3 id="promise-race"> Promise.race</h3>
<p>该方法比较有意思，它同样需要一个 Promise 的数组，只不过返回的值比较特殊，哪一个 Promise 返回的快，它就用哪一个。</p>
<div><pre><code><span>const</span> p1 <span>=</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
  <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>reject</span><span>(</span><span>"p1"</span><span>)</span><span>;</span>
  <span>}</span><span>,</span> <span>1000</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>

<span>const</span> p2 <span>=</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
  <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>resolve</span><span>(</span><span>"p2"</span><span>)</span><span>;</span>
  <span>}</span><span>,</span> <span>2000</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>

Promise<span>.</span><span>race</span><span>(</span><span>[</span>p1<span>,</span> p2<span>]</span><span>)</span>
  <span>.</span><span>then</span><span>(</span><span>val</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>"val: "</span> <span>+</span> val<span>)</span><span>)</span>
  <span>.</span><span>catch</span><span>(</span><span>err</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>"err: "</span> <span>+</span> err<span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>上例会返回 p1 的结果，在 <code>catch</code> 语句中执行，打印：</p>
<div><pre><code>err<span>:</span> p1<span>;</span>
</code></pre>
<div><span>1</span><br></div></div><p><strong>小技巧：</strong> 可以配合 <code>Promise.reject</code> 对超时进行处理。</p>
<h2 id="async-await"> async / await</h2>
<p>这两个写法是 ES6 新加的特性，这让我们的代码更加简单明了。但是这并不是什么新技术，只是一个语法糖而已，它的本质还是 Promise。</p>
<h3 id="await"> await</h3>
<p>我个人理解，<code>await</code> 是这两个语法糖的重点。它具有以下特点：</p>
<ul>
<li>它后面需要跟一个 Promise，如果是一个值，则会自动包裹成一个 Promise</li>
<li>它需要在异步函数内部使用，也就是函数必须使用 <code>async</code> 修饰。</li>
</ul>
<p><code>await</code> 相当于前面提到过的 <code>then</code>，使用 <code>await</code> 等待其后 Promise 的结果，只有获取了结果，程序才会继续执行，否则会一直等待。</p>
<div><pre><code><span>async</span> <span>function</span> <span>get</span><span>(</span><span>)</span> <span>{</span>
  <span>let</span> name <span>=</span> <span>await</span> <span>new</span> <span>Promise</span><span>(</span><span>resolve</span> <span>=></span> <span>{</span>
    <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>resolve</span><span>(</span><span>"jeremyjone"</span><span>)</span><span>,</span> <span>1000</span><span>)</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>
  console<span>.</span><span>log</span><span>(</span>name<span>)</span><span>;</span>
<span>}</span>

<span>get</span><span>(</span><span>)</span><span>;</span> <span>// 等待1秒后，打印：jeremyjone</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h3 id="async"> async</h3>
<p>先来看一下 <code>async</code> 的写法：</p>
<div><pre><code><span>async</span> <span>function</span> <span>get</span><span>(</span><span>)</span> <span>{</span>
  <span>return</span> <span>"jeremyjone"</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>此时 <code>get</code> 方法摇身一变，成了一个异步函数，它本质上返回一个 Promise，我们在使用的时候仍然可以通过 <code>then</code> 来使用。这也就是为什么 <code>await</code> 需要在 <code>async</code> 修饰的函数中，它们相互又可以成为一个链式操作：</p>
<div><pre><code><span>// 接上例</span>
<span>get</span><span>(</span><span>)</span><span>.</span><span>then</span><span>(</span><span>v</span> <span>=></span> console<span>.</span><span>log</span><span>(</span>v<span>)</span><span>)</span><span>;</span> <span>// jeremyjone</span>

<span>// 或者使用 await</span>
<span>let</span> r <span>=</span> <span>await</span> <span>get</span><span>(</span><span>)</span><span>;</span>
console<span>.</span><span>log</span><span>(</span>r<span>)</span><span>;</span> <span>// jeremyjone</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>此时的 <code>get</code> 方法就相当于：</p>
<div><pre><code><span>function</span> <span>get</span><span>(</span><span>)</span> <span>{</span>
  <span>return</span> <span>new</span> <span>Promise</span><span>(</span><span>resolve</span> <span>=></span> <span>{</span>
    <span>resolve</span><span>(</span><span>"jeremyjone"</span><span>)</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>这就是两个异步语法糖的用法。</p>
<h2 id="捕获异常"> 捕获异常</h2>
<h3 id="捕获-async-的异常"> 捕获 async 的异常</h3>
<p>因为 async 方法返回的是一个 Promise，所以和普通 Promise 的异常捕获一样，在调用时通过 <code>.catch()</code> 即可捕获。</p>
<div><pre><code><span>async</span> <span>function</span> <span>get</span><span>(</span><span>)</span> <span>{</span>
  <span>return</span> <span>"jeremyjone"</span><span>;</span>
<span>}</span>

<span>// 调用</span>
<span>get</span><span>(</span><span>)</span>
  <span>.</span><span>then</span><span>(</span><span>v</span> <span>=></span> console<span>.</span><span>log</span><span>(</span>v<span>)</span><span>)</span>
  <span>.</span><span>catch</span><span>(</span><span>err</span> <span>=></span> console<span>.</span><span>log</span><span>(</span>err<span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>这是不存在任何问题的。</p>
<h3 id="捕获-await-的异常"> 捕获 await 的异常</h3>
<p>最简单的方式，我们可以通过 <code>try...catch</code> 直接捕获 <code>await</code> 语句的异常：</p>
<div><pre><code><span>async</span> <span>function</span> <span>get</span><span>(</span><span>)</span> <span>{</span>
  <span>try</span> <span>{</span>
    <span>let</span> name <span>=</span> <span>await</span> <span>new</span> <span>Promise</span><span>(</span><span>resolve</span> <span>=></span> <span>{</span>
      <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>resolve</span><span>(</span><span>"jeremyjone"</span><span>)</span><span>,</span> <span>1000</span><span>)</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>
    console<span>.</span><span>log</span><span>(</span>name<span>)</span><span>;</span>
  <span>}</span> <span>catch</span> <span>(</span>error<span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span>error<span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>但是这样不够优雅，结合我之前写过的内容，可以使用大神封装好的库。但是我又不想安装，所以直接自己封装成函数。</p>
<p>它的思路是这样的：写一个方法，包装所有的 Promise，让所有 Promise 同时返回成功的数据和异常的错误，然后由使用者抉择如何使用它们。如果成功，那么异常为 <code>null</code>；如果失败，那么数据则为 <code>undefined</code>。</p>
<p>不得不说，大神的思路简单清晰，而且代码非常简单，易于理解。</p>
<p>PS：有时候我们与大神差的真的只是思路。[偷笑]</p>
<div><pre><code><span>function</span> <span>to</span><span>(</span><span>promise<span>,</span> errExt</span><span>)</span> <span>{</span>
  <span>return</span> promise
    <span>.</span><span>then</span><span>(</span><span>data</span> <span>=></span> <span>[</span><span>null</span><span>,</span> data<span>]</span><span>)</span>
    <span>.</span><span>catch</span><span>(</span><span>err</span> <span>=></span> <span>{</span>
      <span>if</span> <span>(</span>errExt<span>)</span> <span>{</span>
        Object<span>.</span><span>assign</span><span>(</span>err<span>,</span> errExt<span>)</span><span>;</span>
      <span>}</span>
      <span>return</span> <span>[</span>err<span>,</span> <span>undefined</span><span>]</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>多么的清晰。将这个函数包装到所有需要使用的 Promise，现在 <code>await</code> 返回的将是一个具有两个参数的数组，第一个值是异常，第二个值是数据，随便使用。</p>
<div><pre><code><span>async</span> <span>function</span> <span>get</span><span>(</span><span>)</span> <span>{</span>
  <span>const</span> <span>[</span>err<span>,</span> name<span>]</span> <span>=</span> <span>await</span> <span>to</span><span>(</span>
    <span>new</span> <span>Promise</span><span>(</span><span>resolve</span> <span>=></span> <span>{</span>
      <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>resolve</span><span>(</span><span>"jeremyjone"</span><span>)</span><span>,</span> <span>1000</span><span>)</span><span>;</span>
    <span>}</span><span>)</span>
  <span>)</span><span>;</span>
  console<span>.</span><span>log</span><span>(</span>name<span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>是不是优雅了很多~~~</p>
<h2 id="手写-promise"> 手写 Promise</h2>
<p>了解 Promise，从手动重写一个简易版的开始。</p>
<h3 id="最简易的-promise"> 最简易的 Promise</h3>
<p>最基本的 Promise 的样子是这样的：</p>
<div><pre><code><span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span><span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><p>那么照猫画虎写一个：</p>
<div><pre><code><span>class</span> <span>MyPromise</span> <span>{</span>
  <span>constructor</span><span>(</span><span>executor</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>status <span>=</span> <span>"pending"</span><span>;</span>
    <span>this</span><span>.</span>value <span>=</span> <span>null</span><span>;</span>

    <span>try</span> <span>{</span>
      <span>executor</span><span>(</span><span>this</span><span>.</span><span>resolve</span><span>.</span><span>bind</span><span>(</span><span>this</span><span>)</span><span>,</span> <span>this</span><span>.</span><span>reject</span><span>.</span><span>bind</span><span>(</span><span>this</span><span>)</span><span>)</span><span>;</span>
    <span>}</span> <span>catch</span> <span>(</span>error<span>)</span> <span>{</span>
      <span>this</span><span>.</span><span>reject</span><span>(</span>error<span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>

  <span>resolve</span><span>(</span><span>val</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>this</span><span>.</span>status <span>===</span> <span>"pending"</span><span>)</span> <span>{</span>
      <span>this</span><span>.</span>status <span>=</span> <span>"fulfilled"</span><span>;</span>
      <span>this</span><span>.</span>value <span>=</span> val<span>;</span>
    <span>}</span>
  <span>}</span>

  <span>reject</span><span>(</span><span>err</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>this</span><span>.</span>status <span>===</span> <span>"pending"</span><span>)</span> <span>{</span>
      <span>this</span><span>.</span>status <span>=</span> <span>"rejected"</span><span>;</span>
      <span>this</span><span>.</span>value <span>=</span> err<span>;</span>
    <span>}</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><p>这样就得到了一个最基本的样子，来试一下：</p>
<div><pre><code><span>let</span> p1 <span>=</span> <span>new</span> <span>MyPromise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span><span>}</span><span>)</span><span>;</span> <span>// 此时为 pending 状态</span>

<span>let</span> p2 <span>=</span> <span>new</span> <span>MyPromise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
  <span>resolve</span><span>(</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span> <span>// 此时为 fulfilled 状态</span>

<span>let</span> p3 <span>=</span> <span>new</span> <span>MyPromise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
  <span>reject</span><span>(</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span> <span>// 此时为 rejected 状态</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>好像没什么毛病了。接下来实现 then 的链式操作。</p>
<h3 id="then-的实现"> then 的实现</h3>
<p>前文已经提到过，它应该也是一个方法，所以我们继续在 MyPromise 类中添加一个 then 方法：</p>
<div><pre><code><span>// 继续添加代码，已有代码不再重复</span>
<span>class</span> <span>MyPromise</span> <span>{</span>
  <span>constructor</span><span>(</span><span>executor</span><span>)</span> <span>{</span>
    <span>// 添加两个回调接收，用于 then 的异步回调</span>
    <span>this</span><span>.</span>cbFulfilled <span>=</span> <span>null</span><span>;</span>
    <span>this</span><span>.</span>cbRejected <span>=</span> <span>null</span><span>;</span>
  <span>}</span>

  <span>then</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>{</span>
    <span>// 先判断两个参数是否为函数，如果不是或者没有，给一个默认值</span>
    <span>if</span> <span>(</span><span>typeof</span> resolve <span>!==</span> <span>"function"</span><span>)</span> <span>{</span>
      <span>resolve</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span><span>}</span><span>;</span>
    <span>}</span>

    <span>if</span> <span>(</span><span>typeof</span> reject <span>!==</span> <span>"function"</span><span>)</span> <span>{</span>
      <span>reject</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span><span>}</span><span>;</span>
    <span>}</span>

    <span>// 初始状态，异步情况下会是这个状态</span>
    <span>if</span> <span>(</span><span>this</span><span>.</span>status <span>===</span> <span>"pending"</span><span>)</span> <span>{</span>
      <span>this</span><span>.</span>cbFulfilled <span>=</span> resolve<span>;</span>
      <span>this</span><span>.</span>cbRjected <span>=</span> reject<span>;</span>
    <span>}</span>

    <span>// 成功状态</span>
    <span>if</span> <span>(</span><span>this</span><span>.</span>status <span>===</span> <span>"fulfilled"</span><span>)</span> <span>{</span>
      <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
        <span>try</span> <span>{</span>
          <span>resolve</span><span>(</span><span>this</span><span>.</span>value<span>)</span><span>;</span>
        <span>}</span> <span>catch</span> <span>(</span>error<span>)</span> <span>{</span>
          <span>reject</span><span>(</span>error<span>)</span><span>;</span>
        <span>}</span>
      <span>}</span><span>)</span><span>;</span>
    <span>}</span>

    <span>// 失败</span>
    <span>if</span> <span>(</span><span>this</span><span>.</span>status <span>===</span> <span>"rejected"</span><span>)</span> <span>{</span>
      <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
        <span>try</span> <span>{</span>
          <span>reject</span><span>(</span><span>this</span><span>.</span>value<span>)</span><span>;</span>
        <span>}</span> <span>catch</span> <span>(</span>error<span>)</span> <span>{</span>
          <span>reject</span><span>(</span>error<span>)</span><span>;</span>
        <span>}</span>
      <span>}</span><span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>

  <span>// 修改之前的代码</span>
  <span>resolve</span><span>(</span><span>val</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>this</span><span>.</span>status <span>===</span> <span>"pending"</span><span>)</span> <span>{</span>
      <span>this</span><span>.</span>status <span>=</span> <span>"fulfilled"</span><span>;</span>
      <span>this</span><span>.</span>value <span>=</span> val<span>;</span>

      <span>// 添加回调</span>
      <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
        <span>this</span><span>.</span>cbFulfilled <span>&amp;&amp;</span> <span>this</span><span>.</span><span>cbFulfilled</span><span>(</span><span>"timeout "</span> <span>+</span> <span>this</span><span>.</span>value<span>)</span><span>;</span>
      <span>}</span><span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>

  <span>reject</span><span>(</span><span>err</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>this</span><span>.</span>status <span>===</span> <span>"pending"</span><span>)</span> <span>{</span>
      <span>this</span><span>.</span>status <span>=</span> <span>"rejected"</span><span>;</span>
      <span>this</span><span>.</span>value <span>=</span> err<span>;</span>

      <span>// 添加回调</span>
      <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
        <span>this</span><span>.</span>cbRejected <span>&amp;&amp;</span> <span>this</span><span>.</span><span>cbRejected</span><span>(</span><span>"timeout "</span> <span>+</span> <span>this</span><span>.</span>value<span>)</span><span>;</span>
      <span>}</span><span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br></div></div><p>这里我们通过使用 <code>setTimeout</code> 来对执行顺序加以控制，使回调成为一个异步调用。测试一下：</p>
<div><pre><code><span>let</span> p1 <span>=</span> <span>new</span> <span>MyPromise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>1</span><span>)</span><span>;</span>
  <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>resolve</span><span>(</span><span>"jeremyjone"</span><span>)</span><span>;</span>
    console<span>.</span><span>log</span><span>(</span><span>4</span><span>)</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>
  console<span>.</span><span>log</span><span>(</span><span>2</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>.</span><span>then</span><span>(</span><span>val</span> <span>=></span> console<span>.</span><span>log</span><span>(</span>val<span>)</span><span>)</span><span>;</span>

console<span>.</span><span>log</span><span>(</span><span>3</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>它的打印顺序：</p>
<div><pre><code>1
2
3
4
jeremyjone
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>现在看上去已经和原生的效果差不多了。下一步我们让它成为链式的。</p>
<h3 id="then-的链式实现"> then 的链式实现</h3>
<p>要实现链式操作，首先要明确：</p>
<ul>
<li>它本身返回一个 Promise</li>
<li>它接收的状态并不会影响它新返回 Promise 的状态</li>
</ul>
<p>既然是要一个 Promise，那么我们首先将 <code>then</code> 里面的方法包装在一个 Promise 中。然后稍微修改一下逻辑就可以实现链式操作了。</p>
<div><pre><code><span>class</span> <span>MyPromise</span> <span>{</span>
  <span>// ... 其他代码省略</span>

  <span>then</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>{</span>
    <span>// 先判断两个参数是否为函数，如果不是或者没有，给一个默认值</span>
    <span>if</span> <span>(</span><span>typeof</span> resolve <span>!==</span> <span>"function"</span><span>)</span> <span>{</span>
      <span>resolve</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span><span>}</span><span>;</span>
    <span>}</span>

    <span>if</span> <span>(</span><span>typeof</span> reject <span>!==</span> <span>"function"</span><span>)</span> <span>{</span>
      <span>reject</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span><span>}</span><span>;</span>
    <span>}</span>

    <span>// 将改变值的内容包装在一个新的 Promise 中</span>
    <span>return</span> <span>new</span> <span>MyPromise</span><span>(</span><span>(</span><span>newResolve<span>,</span> newReject</span><span>)</span> <span>=></span> <span>{</span>
      <span>if</span> <span>(</span><span>this</span><span>.</span>status <span>===</span> <span>"pending"</span><span>)</span> <span>{</span>
        <span>this</span><span>.</span><span>cbFulfilled</span> <span>=</span> <span>val</span> <span>=></span> <span>{</span>
          <span>try</span> <span>{</span>
            <span>// 将当前 then 中的返回值，赋值给下一次的 then，并使其改变状态</span>
            <span>let</span> res <span>=</span> <span>resolve</span><span>(</span>val<span>)</span><span>;</span>
            <span>newResolve</span><span>(</span>res<span>)</span><span>;</span>
          <span>}</span> <span>catch</span> <span>(</span>error<span>)</span> <span>{</span>
            <span>// 当前 then 的异常，交给下一个 then 去解决，直接调用 reject 回调函数即可</span>
            <span>newReject</span><span>(</span>error<span>)</span><span>;</span>
          <span>}</span>
        <span>}</span><span>;</span>
        <span>this</span><span>.</span><span>cbRejected</span> <span>=</span> <span>val</span> <span>=></span> <span>{</span>
          <span>try</span> <span>{</span>
            <span>let</span> res <span>=</span> <span>reject</span><span>(</span>val<span>)</span><span>;</span>
            <span>// 当前接收的状态，并不影响下一次 then 的状态，所以当前的拒绝状态也返回成功状态给下一次，只有当前的异常才会修改为拒绝</span>
            <span>newResolve</span><span>(</span>res<span>)</span><span>;</span>
          <span>}</span> <span>catch</span> <span>(</span>error<span>)</span> <span>{</span>
            <span>newReject</span><span>(</span>error<span>)</span><span>;</span>
          <span>}</span>
        <span>}</span><span>;</span>
      <span>}</span>

      <span>if</span> <span>(</span><span>this</span><span>.</span>status <span>===</span> <span>"fulfilled"</span><span>)</span> <span>{</span>
        <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
          <span>try</span> <span>{</span>
            <span>let</span> res <span>=</span> <span>resolve</span><span>(</span><span>this</span><span>.</span>value<span>)</span><span>;</span>
            <span>newResolve</span><span>(</span>res<span>)</span><span>;</span>
          <span>}</span> <span>catch</span> <span>(</span>error<span>)</span> <span>{</span>
            <span>newReject</span><span>(</span>error<span>)</span><span>;</span>
          <span>}</span>
        <span>}</span><span>)</span><span>;</span>
      <span>}</span>

      <span>if</span> <span>(</span><span>this</span><span>.</span>status <span>===</span> <span>"rejected"</span><span>)</span> <span>{</span>
        <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
          <span>try</span> <span>{</span>
            <span>let</span> res <span>=</span> <span>reject</span><span>(</span><span>this</span><span>.</span>value<span>)</span><span>;</span>
            <span>newResolve</span><span>(</span>res<span>)</span><span>;</span>
          <span>}</span> <span>catch</span> <span>(</span>error<span>)</span> <span>{</span>
            <span>newReject</span><span>(</span>error<span>)</span><span>;</span>
          <span>}</span>
        <span>}</span><span>)</span><span>;</span>
      <span>}</span>
    <span>}</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br></div></div><p>上面代码替换完之后，现在 <code>then</code> 每次返回的将是一个 Promise，它已经可以链式操作了。我在代码中的对应行也添加了一些注释，以方便理解。</p>
<ul>
<li>1、最重要的是要返回我们的 MyPromise 对象，而且是一个新的对象。</li>
<li>2、因为与在外部创建 MyPromise 对象不一样，它具有默认的修改状态的动作，所以我们需要对内部代码稍加修改：
<ul>
<li>
<ol>
<li>接收当前回调函数的返回值，它由外部定义 <code>then</code> 方法时返回，如果外部的 <code>then</code> 方法内部并没有 return 语句，那么则为 <code>undefined</code>。</li>
</ol>
</li>
<li>
<ol start="2">
<li>当前接收到的状态，并不会影响下一次的状态。所以，只要没有出现异常，统一调用 <code>resolve</code>。</li>
</ol>
</li>
</ul>
</li>
</ul>
<p>在外面，我们可以通过链式操作测试一下：</p>
<div><pre><code><span>new</span> <span>MyPromise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>1</span><span>)</span><span>;</span>
  <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>// resolve("jeremyjone");</span>
    <span>reject</span><span>(</span><span>"failed"</span><span>)</span><span>;</span>
    console<span>.</span><span>log</span><span>(</span><span>4</span><span>)</span><span>;</span>
  <span>}</span><span>,</span> <span>1000</span><span>)</span><span>;</span>
  console<span>.</span><span>log</span><span>(</span><span>2</span><span>)</span><span>;</span>
<span>}</span><span>)</span>
  <span>.</span><span>then</span><span>(</span>
    <span>val</span> <span>=></span> <span>{</span>
      <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
        console<span>.</span><span>log</span><span>(</span>val<span>)</span><span>;</span>
      <span>}</span><span>,</span> <span>1000</span><span>)</span><span>;</span>
      <span>return</span> <span>"p1"</span><span>;</span>
    <span>}</span><span>,</span>
    <span>err</span> <span>=></span> <span>{</span>
      console<span>.</span><span>log</span><span>(</span><span>"err1 "</span><span>,</span> err<span>)</span><span>;</span>
      <span>return</span> <span>"p1 err"</span><span>;</span>
    <span>}</span>
  <span>)</span>
  <span>.</span><span>then</span><span>(</span>
    <span>val</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>"2 "</span> <span>+</span> val<span>)</span><span>,</span>
    <span>err</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>"2 err "</span><span>,</span> err<span>)</span>
  <span>)</span><span>;</span>

console<span>.</span><span>log</span><span>(</span><span>3</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><p>执行结果：</p>
<div><pre><code>1
2
3
4
err1  timeout failed
2 timeout p1 err
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>可以看到，已经可以执行，而且第二个 <code>then</code> 中使用成功的回调方法接收了前一个 <code>then</code> 里面拒绝方法中的返回值。</p>
<h4 id="then-的状态穿透"> then 的状态穿透</h4>
<p>上面的代码中，不能实现状态穿透，也就是当前 <code>then</code> 不处理结果时，需要向下继续穿透，类似：</p>
<div><pre><code><span>new</span> <span>MyPromise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span><span>}</span><span>)</span>
  <span>.</span><span>then</span><span>(</span><span>)</span> <span>// 此处属于状态穿透</span>
  <span>.</span><span>then</span><span>(</span>
    <span>val</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>)</span><span>,</span>
    <span>err</span> <span>=></span> console<span>.</span><span>log</span><span>(</span>err<span>)</span>
  <span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>为了解决这个问题，我们继续稍加修改上面的 <code>then</code> 方法。</p>
<div><pre><code><span>class</span> <span>MyPromise</span> <span>{</span>
  <span>// ... 其他代码省略</span>

  <span>then</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>{</span>
    <span>// 如果是成功状态，直接返回值，没有值就是空着即可</span>
    <span>if</span> <span>(</span><span>typeof</span> resolve <span>!==</span> <span>"function"</span><span>)</span> <span>{</span>
      <span>resolve</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>this</span><span>.</span>value<span>;</span>
    <span>}</span>

    <span>// 拒绝的状态需要处理。因为我们之前的逻辑是当前 then 的状态不会影响下一次的。现在需要除了穿透的状态，所以要先判断一下是否为函数属性</span>
    <span>// 添加一个判断是否为函数的属性</span>
    <span>const</span> isRejectFunc <span>=</span> <span>typeof</span> reject <span>===</span> <span>"function"</span><span>;</span>
    <span>if</span> <span>(</span><span>typeof</span> reject <span>!==</span> <span>"function"</span><span>)</span> <span>{</span>
      <span>reject</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>this</span><span>.</span>value<span>;</span>
    <span>}</span>

    <span>// 将改变值的内容包装在一个新的 Promise 中</span>
    <span>return</span> <span>new</span> <span>MyPromise</span><span>(</span><span>(</span><span>newResolve<span>,</span> newReject</span><span>)</span> <span>=></span> <span>{</span>
      <span>if</span> <span>(</span><span>this</span><span>.</span>status <span>===</span> <span>"pending"</span><span>)</span> <span>{</span>
        <span>this</span><span>.</span><span>cbFulfilled</span> <span>=</span> <span>val</span> <span>=></span> <span>{</span>
          <span>try</span> <span>{</span>
            <span>let</span> res <span>=</span> <span>resolve</span><span>(</span>val<span>)</span><span>;</span>
            <span>newResolve</span><span>(</span>res<span>)</span><span>;</span>
          <span>}</span> <span>catch</span> <span>(</span>error<span>)</span> <span>{</span>
            <span>newReject</span><span>(</span>error<span>)</span><span>;</span>
          <span>}</span>
        <span>}</span><span>;</span>
        <span>this</span><span>.</span><span>cbRejected</span> <span>=</span> <span>val</span> <span>=></span> <span>{</span>
          <span>try</span> <span>{</span>
            <span>// 两个拒绝的地方需要修改，如果是一个函数，走之前的方式。如果不是函数，则使用默认的拒绝方法将值继续向下传递</span>
            <span>if</span> <span>(</span>isRejectFunc<span>)</span> <span>{</span>
              <span>let</span> res <span>=</span> <span>reject</span><span>(</span>val<span>)</span><span>;</span>
              <span>newResolve</span><span>(</span>res<span>)</span><span>;</span>
            <span>}</span> <span>else</span> <span>{</span>
              <span>newReject</span><span>(</span>val <span>||</span> <span>this</span><span>.</span>value<span>)</span><span>;</span>
            <span>}</span>
          <span>}</span> <span>catch</span> <span>(</span>error<span>)</span> <span>{</span>
            <span>newReject</span><span>(</span>error<span>)</span><span>;</span>
          <span>}</span>
        <span>}</span><span>;</span>
      <span>}</span>

      <span>if</span> <span>(</span><span>this</span><span>.</span>status <span>===</span> <span>"fulfilled"</span><span>)</span> <span>{</span>
        <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
          <span>try</span> <span>{</span>
            <span>let</span> res <span>=</span> <span>resolve</span><span>(</span><span>this</span><span>.</span>value<span>)</span><span>;</span>
            <span>newResolve</span><span>(</span>res<span>)</span><span>;</span>
          <span>}</span> <span>catch</span> <span>(</span>error<span>)</span> <span>{</span>
            <span>newReject</span><span>(</span>error<span>)</span><span>;</span>
          <span>}</span>
        <span>}</span><span>)</span><span>;</span>
      <span>}</span>

      <span>if</span> <span>(</span><span>this</span><span>.</span>status <span>===</span> <span>"rejected"</span><span>)</span> <span>{</span>
        <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
          <span>try</span> <span>{</span>
            <span>// 第二个拒绝的地方</span>
            <span>if</span> <span>(</span>isRejectFunc<span>)</span> <span>{</span>
              <span>let</span> res <span>=</span> <span>reject</span><span>(</span><span>this</span><span>.</span>value<span>)</span><span>;</span>
              <span>newResolve</span><span>(</span>res<span>)</span><span>;</span>
            <span>}</span> <span>else</span> <span>{</span>
              <span>newReject</span><span>(</span><span>this</span><span>.</span>value<span>)</span><span>;</span>
            <span>}</span>
          <span>}</span> <span>catch</span> <span>(</span>error<span>)</span> <span>{</span>
            <span>newReject</span><span>(</span>error<span>)</span><span>;</span>
          <span>}</span>
        <span>}</span><span>)</span><span>;</span>
      <span>}</span>
    <span>}</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br></div></div><p>现在就可以实现状态的穿透了。</p>
<h4 id="then-处理返回-promise-对象"> then 处理返回 Promise 对象</h4>
<p>解决了上面的穿透问题，现在处理返回 Promise 对象的问题。</p>
<p>这个问题其实很好解决，只需要在 <code>then</code> 方法内部判断一下类型，然后如果是 Promise 对象等待其值，不是直接返回结果即可。</p>
<p>直接看修改的代码：</p>
<div><pre><code><span>// ... 其他内容不写了</span>

<span>if</span> <span>(</span><span>this</span><span>.</span>status <span>===</span> <span>"fulfilled"</span><span>)</span> <span>{</span>
  <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>try</span> <span>{</span>
      <span>let</span> res <span>=</span> <span>resolve</span><span>(</span><span>this</span><span>.</span>value<span>)</span><span>;</span>
      <span>// newResolve(res);</span>

      <span>// 刚才我们直接调用回调函数，现在判断一下再调用</span>
      <span>if</span> <span>(</span>res <span>instanceof</span> <span>MyPromise</span><span>)</span> <span>{</span>
        res<span>.</span><span>then</span><span>(</span>newResolve<span>,</span> newReject<span>)</span><span>;</span>
      <span>}</span> <span>else</span> <span>{</span>
        <span>newResolve</span><span>(</span>res<span>)</span><span>;</span>
      <span>}</span>
    <span>}</span> <span>catch</span> <span>(</span>error<span>)</span> <span>{</span>
      <span>newReject</span><span>(</span>error<span>)</span><span>;</span>
    <span>}</span>
  <span>}</span><span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p>其内部有 4 处相同内容，全部修改即可。现在返回的是一个 MyPromise 也不会有什么问题。</p>
<div><pre><code><span>new</span> <span>MyPromise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
  <span>resolve</span><span>(</span><span>"jeremyjone"</span><span>)</span><span>;</span>
<span>}</span><span>)</span>
  <span>.</span><span>then</span><span>(</span>
    <span>val</span> <span>=></span> <span>{</span>
      console<span>.</span><span>log</span><span>(</span>val<span>)</span><span>;</span>
      <span>return</span> <span>new</span> <span>MyPromise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
        <span>resolve</span><span>(</span><span>"22222"</span><span>)</span><span>;</span>
      <span>}</span><span>)</span><span>;</span>
    <span>}</span><span>,</span>
    <span>err</span> <span>=></span> console<span>.</span><span>log</span><span>(</span>err<span>)</span>
  <span>)</span>
  <span>.</span><span>then</span><span>(</span>
    <span>val</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>"2then ok "</span> <span>+</span> val<span>)</span><span>,</span>
    <span>err</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>"2then err "</span> <span>+</span> err<span>)</span>
  <span>)</span><span>;</span>

console<span>.</span><span>log</span><span>(</span><span>"11111"</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><p>执行结果：</p>
<div><pre><code>11111
jeremyjone
2then ok timeout 22222
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id="一些静态方法"> 一些静态方法</h3>
<p>其实核心内容已经差不多了，现在写一些静态方法，让我们自定义的 MyPromise 看上去更像 Promise。</p>
<p>注意静态方法不要忘记 <code>static</code>。</p>
<h4 id="mypromise-resolve"> MyPromise.resolve</h4>
<p>前面已经讲过，它返回一个成功状态，所以很简单，只需要新建一个 Promise 并返回成功即可。</p>
<div><pre><code><span>class</span> <span>MyPromise</span> <span>{</span>
  <span>static</span> <span>resolve</span><span>(</span><span>value</span><span>)</span> <span>{</span>
    <span>return</span> <span>new</span> <span>MyPromise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
      <span>if</span> <span>(</span>value <span>instanceof</span> <span>MyPromise</span><span>)</span> <span>{</span>
        <span>// 如果传入的参数本身是一个 Promise，则按照其本身返回的状态返回。</span>
        value<span>.</span><span>then</span><span>(</span>resolve<span>,</span> reject<span>)</span><span>;</span>
      <span>}</span> <span>else</span> <span>{</span>
        <span>resolve</span><span>(</span>value<span>)</span><span>;</span>
      <span>}</span>
    <span>}</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h4 id="mypromise-reject"> MyPromise.reject</h4>
<p>与上面的同理，只需要修改为拒绝状态即可。</p>
<div><pre><code><span>class</span> <span>MyPromise</span> <span>{</span>
  <span>static</span> <span>reject</span><span>(</span><span>value</span><span>)</span> <span>{</span>
    <span>return</span> <span>new</span> <span>MyPromise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
      <span>if</span> <span>(</span>value <span>instanceof</span> <span>MyPromise</span><span>)</span> <span>{</span>
        value<span>.</span><span>then</span><span>(</span>resolve<span>,</span> reject<span>)</span><span>;</span>
      <span>}</span> <span>else</span> <span>{</span>
        <span>reject</span><span>(</span>value<span>)</span><span>;</span>
      <span>}</span>
    <span>}</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h4 id="mypromise-all"> MyPromise.all</h4>
<p>它稍微有一些复杂，但是并不会比核心的 <code>then</code> 还困难。只需要一个循环，将所有值放在一个数组中，同时遇到错误直接抛出。最后，将结果返回即可。</p>
<div><pre><code><span>class</span> <span>MyPromise</span> <span>{</span>
  <span>static</span> <span>all</span><span>(</span><span>promises</span><span>)</span> <span>{</span>
    <span>const</span> res <span>=</span> <span>[</span><span>]</span><span>;</span>
    <span>return</span> <span>new</span> <span>MyPromise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
      <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> promises<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
        <span>const</span> promise <span>=</span> promises<span>[</span>i<span>]</span><span>;</span>
        <span>if</span> <span>(</span>promise <span>instanceof</span> <span>MyPromise</span><span>)</span> <span>{</span>
          promise<span>.</span><span>then</span><span>(</span>
            <span>val</span> <span>=></span> <span>{</span>
              <span>// 使用 push 会有位置影响</span>
              res<span>[</span>i<span>]</span> <span>=</span> val<span>;</span>

              <span>// 因为使用赋值，所以可能存在空，需要判空</span>
              res<span>.</span><span>filter</span><span>(</span><span>x</span> <span>=></span> <span>!</span><span>!</span>x<span>)</span><span>.</span>length <span>===</span> promises<span>.</span>length <span>&amp;&amp;</span> <span>resolve</span><span>(</span>res<span>)</span><span>;</span>
            <span>}</span><span>,</span>
            <span>err</span> <span>=></span> <span>reject</span><span>(</span>err<span>)</span>
          <span>)</span><span>;</span>
        <span>}</span> <span>else</span> <span>{</span>
          res<span>[</span>i<span>]</span> <span>=</span> promise<span>;</span>
        <span>}</span>
      <span>}</span>
    <span>}</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><h4 id="mypromise-race"> Mypromise.race</h4>
<p>这个更简单。它返回最快返回的值。一次循环，只要拿到了值就返回即可。</p>
<p>它利用了 Promise 只修改一次状态的特性，这是我们前面写过的。</p>
<div><pre><code><span>class</span> <span>MyPromise</span> <span>{</span>
  <span>static</span> <span>race</span><span>(</span><span>promises</span><span>)</span> <span>{</span>
    <span>return</span> <span>new</span> <span>MyPromise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
      promises<span>.</span><span>map</span><span>(</span><span>promise</span> <span>=></span> <span>{</span>
        <span>if</span> <span>(</span>promise <span>instanceof</span> <span>MyPromise</span><span>)</span> <span>{</span>
          promise<span>.</span><span>then</span><span>(</span>
            <span>val</span> <span>=></span> <span>resolve</span><span>(</span>val<span>)</span><span>,</span>
            <span>err</span> <span>=></span> <span>reject</span><span>(</span>err<span>)</span>
          <span>)</span><span>;</span>
        <span>}</span> <span>else</span> <span>{</span>
          <span>resolve</span><span>(</span>promise<span>)</span><span>;</span>
        <span>}</span>
      <span>}</span><span>)</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><h3 id="mypromise-完整版"> MyPromise 完整版</h3>
<p>前面已经把大部分代码都按部分总结了，最后整理一下。</p>
<div><pre><code><span>class</span> <span>MyPromise</span> <span>{</span>
  <span>constructor</span><span>(</span><span>executor</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>status <span>=</span> <span>"pending"</span><span>;</span>
    <span>this</span><span>.</span>value <span>=</span> <span>null</span><span>;</span>
    <span>this</span><span>.</span>cbFulfilled <span>=</span> <span>null</span><span>;</span>
    <span>this</span><span>.</span>cbRejected <span>=</span> <span>null</span><span>;</span>

    <span>try</span> <span>{</span>
      <span>executor</span><span>(</span><span>this</span><span>.</span><span>_resolve</span><span>.</span><span>bind</span><span>(</span><span>this</span><span>)</span><span>,</span> <span>this</span><span>.</span><span>_reject</span><span>.</span><span>bind</span><span>(</span><span>this</span><span>)</span><span>)</span><span>;</span>
    <span>}</span> <span>catch</span> <span>(</span>error<span>)</span> <span>{</span>
      <span>this</span><span>.</span><span>_reject</span><span>(</span>error<span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>

  <span>_exec</span><span>(</span><span>promise<span>,</span> isRejectFunc<span>,</span> res<span>,</span> resolve<span>,</span> reject</span><span>)</span> <span>{</span>
    <span>// 在 promise 中返回自身，抛出错误</span>
    <span>if</span> <span>(</span>promise <span>===</span> res<span>)</span> <span>throw</span> <span>Error</span><span>(</span><span>"Chaining cycle detected for promise"</span><span>)</span><span>;</span>

    <span>try</span> <span>{</span>
      <span>if</span> <span>(</span>res <span>instanceof</span> <span>MyPromise</span><span>)</span> <span>{</span>
        res<span>.</span><span>then</span><span>(</span>resolve<span>,</span> reject<span>)</span><span>;</span>
      <span>}</span> <span>else</span> <span>{</span>
        isRejectFunc <span>?</span> <span>resolve</span><span>(</span>res<span>)</span> <span>:</span> <span>reject</span><span>(</span>res<span>)</span><span>;</span>
      <span>}</span>
    <span>}</span> <span>catch</span> <span>(</span>error<span>)</span> <span>{</span>
      <span>reject</span><span>(</span>error<span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>

  <span>_resolve</span><span>(</span><span>val</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>this</span><span>.</span>status <span>===</span> <span>"pending"</span><span>)</span> <span>{</span>
      <span>this</span><span>.</span>status <span>=</span> <span>"fulfilled"</span><span>;</span>
      <span>this</span><span>.</span>value <span>=</span> val<span>;</span>

      <span>// 添加回调</span>
      <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
        <span>this</span><span>.</span>cbFulfilled <span>&amp;&amp;</span> <span>this</span><span>.</span><span>cbFulfilled</span><span>(</span><span>this</span><span>.</span>value<span>)</span><span>;</span>
      <span>}</span><span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>

  <span>_reject</span><span>(</span><span>err</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>this</span><span>.</span>status <span>===</span> <span>"pending"</span><span>)</span> <span>{</span>
      <span>this</span><span>.</span>status <span>=</span> <span>"rejected"</span><span>;</span>
      <span>this</span><span>.</span>value <span>=</span> err<span>;</span>

      <span>// 添加回调</span>
      <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
        <span>this</span><span>.</span>cbRejected <span>&amp;&amp;</span> <span>this</span><span>.</span><span>cbRejected</span><span>(</span><span>this</span><span>.</span>value<span>)</span><span>;</span>
      <span>}</span><span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>

  <span>then</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>{</span>
    <span>// 先判断两个参数是否为函数，如果不是或者没有，给一个默认值</span>
    <span>if</span> <span>(</span><span>typeof</span> resolve <span>!==</span> <span>"function"</span><span>)</span> <span>{</span>
      <span>resolve</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>this</span><span>.</span>value<span>;</span>
    <span>}</span>

    <span>const</span> isRejectFunc <span>=</span> <span>typeof</span> reject <span>===</span> <span>"function"</span><span>;</span>
    <span>if</span> <span>(</span><span>typeof</span> reject <span>!==</span> <span>"function"</span><span>)</span> <span>{</span>
      <span>reject</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>this</span><span>.</span>value<span>;</span>
    <span>}</span>

    <span>// 将改变值的内容包装在一个新的 Promise 中</span>
    <span>let</span> p <span>=</span> <span>new</span> <span>MyPromise</span><span>(</span><span>(</span><span>newResolve<span>,</span> newReject</span><span>)</span> <span>=></span> <span>{</span>
      <span>// 初始状态，异步情况下会是这个状态</span>
      <span>if</span> <span>(</span><span>this</span><span>.</span>status <span>===</span> <span>"pending"</span><span>)</span> <span>{</span>
        <span>this</span><span>.</span><span>cbFulfilled</span> <span>=</span> <span>val</span> <span>=></span> <span>{</span>
          <span>let</span> res <span>=</span> <span>resolve</span><span>(</span>val<span>)</span><span>;</span>
          <span>this</span><span>.</span><span>_exec</span><span>(</span>p<span>,</span> <span>true</span><span>,</span> res<span>,</span> newResolve<span>,</span> newReject<span>)</span><span>;</span>
        <span>}</span><span>;</span>
        <span>this</span><span>.</span><span>cbRejected</span> <span>=</span> <span>val</span> <span>=></span> <span>{</span>
          <span>let</span> res <span>=</span> <span>reject</span><span>(</span>val<span>)</span><span>;</span>
          <span>this</span><span>.</span><span>_exec</span><span>(</span>p<span>,</span> isRejectFunc<span>,</span> res<span>,</span> newResolve<span>,</span> newReject<span>)</span><span>;</span>
        <span>}</span><span>;</span>
      <span>}</span>

      <span>// 成功状态</span>
      <span>if</span> <span>(</span><span>this</span><span>.</span>status <span>===</span> <span>"fulfilled"</span><span>)</span> <span>{</span>
        <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
          <span>let</span> res <span>=</span> <span>resolve</span><span>(</span><span>this</span><span>.</span>value<span>)</span><span>;</span>
          <span>this</span><span>.</span><span>_exec</span><span>(</span>p<span>,</span> <span>true</span><span>,</span> res<span>,</span> newResolve<span>,</span> newReject<span>)</span><span>;</span>
        <span>}</span><span>)</span><span>;</span>
      <span>}</span>

      <span>// 失败</span>
      <span>if</span> <span>(</span><span>this</span><span>.</span>status <span>===</span> <span>"rejected"</span><span>)</span> <span>{</span>
        <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
          <span>let</span> res <span>=</span> <span>reject</span><span>(</span><span>this</span><span>.</span>value<span>)</span><span>;</span>
          <span>this</span><span>.</span><span>_exec</span><span>(</span>p<span>,</span> isRejectFunc<span>,</span> res<span>,</span> newResolve<span>,</span> newReject<span>)</span><span>;</span>
        <span>}</span><span>)</span><span>;</span>
      <span>}</span>
    <span>}</span><span>)</span><span>;</span>

    <span>return</span> p<span>;</span>
  <span>}</span>

  <span>catch</span><span>(</span>reject<span>)</span> <span>{</span>
    <span>return</span> <span>this</span><span>.</span><span>then</span><span>(</span><span>null</span><span>,</span> reject<span>)</span><span>;</span>
  <span>}</span>

  <span>static</span> <span>resolve</span><span>(</span><span>value</span><span>)</span> <span>{</span>
    <span>return</span> <span>new</span> <span>MyPromise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
      <span>if</span> <span>(</span>value <span>instanceof</span> <span>MyPromise</span><span>)</span> <span>{</span>
        <span>// 如果传入的参数本身是一个 Promise，则按照其本身返回的状态返回。</span>
        value<span>.</span><span>then</span><span>(</span>resolve<span>,</span> reject<span>)</span><span>;</span>
      <span>}</span> <span>else</span> <span>{</span>
        <span>resolve</span><span>(</span>value<span>)</span><span>;</span>
      <span>}</span>
    <span>}</span><span>)</span><span>;</span>
  <span>}</span>

  <span>static</span> <span>reject</span><span>(</span><span>value</span><span>)</span> <span>{</span>
    <span>return</span> <span>new</span> <span>MyPromise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
      <span>if</span> <span>(</span>value <span>instanceof</span> <span>MyPromise</span><span>)</span> <span>{</span>
        value<span>.</span><span>then</span><span>(</span>resolve<span>,</span> reject<span>)</span><span>;</span>
      <span>}</span> <span>else</span> <span>{</span>
        <span>reject</span><span>(</span>value<span>)</span><span>;</span>
      <span>}</span>
    <span>}</span><span>)</span><span>;</span>
  <span>}</span>

  <span>static</span> <span>all</span><span>(</span><span>promises</span><span>)</span> <span>{</span>
    <span>const</span> res <span>=</span> <span>[</span><span>]</span><span>;</span>
    <span>return</span> <span>new</span> <span>MyPromise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
      <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> promises<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
        <span>const</span> promise <span>=</span> promises<span>[</span>i<span>]</span><span>;</span>
        <span>if</span> <span>(</span>promise <span>instanceof</span> <span>MyPromise</span><span>)</span> <span>{</span>
          promise<span>.</span><span>then</span><span>(</span>
            <span>val</span> <span>=></span> <span>{</span>
              <span>// 使用 push 会有位置影响</span>
              res<span>[</span>i<span>]</span> <span>=</span> val<span>;</span>

              <span>// 因为使用赋值，所以可能存在空，需要判空</span>
              res<span>.</span><span>filter</span><span>(</span><span>x</span> <span>=></span> <span>!</span><span>!</span>x<span>)</span><span>.</span>length <span>===</span> promises<span>.</span>length <span>&amp;&amp;</span> <span>resolve</span><span>(</span>res<span>)</span><span>;</span>
            <span>}</span><span>,</span>
            <span>err</span> <span>=></span> <span>reject</span><span>(</span>err<span>)</span>
          <span>)</span><span>;</span>
        <span>}</span> <span>else</span> <span>{</span>
          res<span>[</span>i<span>]</span> <span>=</span> promise<span>;</span>
        <span>}</span>
      <span>}</span>
    <span>}</span><span>)</span><span>;</span>
  <span>}</span>

  <span>static</span> <span>race</span><span>(</span><span>promises</span><span>)</span> <span>{</span>
    <span>return</span> <span>new</span> <span>MyPromise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
      promises<span>.</span><span>map</span><span>(</span><span>promise</span> <span>=></span> <span>{</span>
        <span>if</span> <span>(</span>promise <span>instanceof</span> <span>MyPromise</span><span>)</span> <span>{</span>
          promise<span>.</span><span>then</span><span>(</span>
            <span>val</span> <span>=></span> <span>resolve</span><span>(</span>val<span>)</span><span>,</span>
            <span>err</span> <span>=></span> <span>reject</span><span>(</span>err<span>)</span>
          <span>)</span><span>;</span>
        <span>}</span> <span>else</span> <span>{</span>
          <span>resolve</span><span>(</span>promise<span>)</span><span>;</span>
        <span>}</span>
      <span>}</span><span>)</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br><span>110</span><br><span>111</span><br><span>112</span><br><span>113</span><br><span>114</span><br><span>115</span><br><span>116</span><br><span>117</span><br><span>118</span><br><span>119</span><br><span>120</span><br><span>121</span><br><span>122</span><br><span>123</span><br><span>124</span><br><span>125</span><br><span>126</span><br><span>127</span><br><span>128</span><br><span>129</span><br><span>130</span><br><span>131</span><br><span>132</span><br><span>133</span><br><span>134</span><br><span>135</span><br><span>136</span><br><span>137</span><br><span>138</span><br><span>139</span><br><span>140</span><br><span>141</span><br><span>142</span><br><span>143</span><br><span>144</span><br><span>145</span><br><span>146</span><br><span>147</span><br><span>148</span><br><span>149</span><br><span>150</span><br><span>151</span><br><span>152</span><br><span>153</span><br><span>154</span><br><span>155</span><br><span>156</span><br><span>157</span><br><span>158</span><br><span>159</span><br><span>160</span><br><span>161</span><br></div></div><p>测试用例：</p>
<div><pre><code><span>new</span> <span>MyPromise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>1</span><span>)</span><span>;</span>
  <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>resolve</span><span>(</span><span>"jeremyjone"</span><span>)</span><span>;</span>
    <span>// reject("failed");</span>
    console<span>.</span><span>log</span><span>(</span><span>4</span><span>)</span><span>;</span>
  <span>}</span><span>,</span> <span>1000</span><span>)</span><span>;</span>
  console<span>.</span><span>log</span><span>(</span><span>2</span><span>)</span><span>;</span>
<span>}</span><span>)</span>
  <span>.</span><span>then</span><span>(</span><span>)</span>
  <span>.</span><span>catch</span><span>(</span><span>err</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>"catch:"</span><span>,</span> err<span>)</span><span>)</span>
  <span>.</span><span>then</span><span>(</span>
    <span>val</span> <span>=></span> <span>{</span>
      <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
        console<span>.</span><span>log</span><span>(</span>val<span>)</span><span>;</span>
      <span>}</span><span>,</span> <span>1000</span><span>)</span><span>;</span>
      <span>const</span> p2 <span>=</span> <span>new</span> <span>MyPromise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
        <span>resolve</span><span>(</span><span>"小鹰"</span><span>)</span><span>;</span>
      <span>}</span><span>)</span><span>;</span>
      console<span>.</span><span>log</span><span>(</span><span>"111"</span><span>,</span> val<span>)</span><span>;</span>
      <span>return</span> p2<span>;</span>
    <span>}</span><span>,</span>
    <span>err</span> <span>=></span> <span>{</span>
      console<span>.</span><span>log</span><span>(</span><span>"err1 "</span><span>,</span> err<span>)</span><span>;</span>
      <span>return</span> <span>"p1 err"</span><span>;</span>
    <span>}</span>
  <span>)</span>
  <span>.</span><span>then</span><span>(</span>
    <span>val</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>"2 "</span> <span>+</span> val<span>)</span><span>,</span>
    <span>err</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>"2 err "</span><span>,</span> err<span>)</span>
  <span>)</span><span>;</span>

console<span>.</span><span>log</span><span>(</span><span>3</span><span>)</span><span>;</span>

MyPromise<span>.</span><span>resolve</span><span>(</span><span>"resolve jeremyjone"</span><span>)</span><span>.</span><span>then</span><span>(</span><span>val</span> <span>=></span> console<span>.</span><span>log</span><span>(</span>val<span>)</span><span>)</span><span>;</span>
MyPromise<span>.</span><span>reject</span><span>(</span><span>"reject jeremyjone"</span><span>)</span><span>.</span><span>then</span><span>(</span><span>null</span><span>,</span> <span>err</span> <span>=></span> console<span>.</span><span>log</span><span>(</span>err<span>)</span><span>)</span><span>;</span>

MyPromise<span>.</span><span>resolve</span><span>(</span>
  <span>new</span> <span>MyPromise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
    <span>reject</span><span>(</span><span>"reject in resolve"</span><span>)</span><span>;</span>
  <span>}</span><span>)</span>
<span>)</span><span>.</span><span>then</span><span>(</span>
  <span>val</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>"rr1"</span><span>,</span> val<span>)</span><span>,</span>
  <span>err</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>"rr2"</span><span>,</span> err<span>)</span>
<span>)</span><span>;</span>

<span>let</span> p1 <span>=</span> <span>new</span> <span>MyPromise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
  <span>resolve</span><span>(</span><span>"p1"</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>

<span>let</span> p2 <span>=</span> <span>new</span> <span>MyPromise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
  <span>resolve</span><span>(</span><span>"p2"</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>

MyPromise<span>.</span><span>all</span><span>(</span><span>[</span>p1<span>,</span> p2<span>,</span> <span>3</span><span>,</span> <span>4</span><span>]</span><span>)</span><span>.</span><span>then</span><span>(</span>
  <span>val</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>"all ok"</span><span>,</span> val<span>)</span><span>,</span>
  <span>err</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>"all err"</span><span>,</span> err<span>)</span>
<span>)</span><span>;</span>

<span>let</span> p3 <span>=</span> <span>new</span> <span>MyPromise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
  <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>resolve</span><span>(</span><span>"p3"</span><span>)</span><span>;</span>
  <span>}</span><span>,</span> <span>1000</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>

<span>let</span> p4 <span>=</span> <span>new</span> <span>MyPromise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
  <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>reject</span><span>(</span><span>"p4"</span><span>)</span><span>;</span>
  <span>}</span><span>,</span> <span>1000</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>

MyPromise<span>.</span><span>race</span><span>(</span><span>[</span>p3<span>,</span> p4<span>]</span><span>)</span><span>.</span><span>then</span><span>(</span>
  <span>val</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>"race ok"</span><span>,</span> val<span>)</span><span>,</span>
  <span>err</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>"race err"</span><span>,</span> err<span>)</span>
<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br></div></div><h2 id="总结"> 总结</h2>
<p>通过本文，你应该掌握了：</p>
<ul>
<li>异步原理</li>
<li>事件循环</li>
<li>宏任务与微任务</li>
<li>Promise 原理</li>
<li>Promise 链式操作</li>
<li>Promise 常用方法</li>
<li>Promise 核心实现</li>
<li>async / await 实现方式</li>
</ul>
<p>当然，这个完整版不能和原生的比较，还有很多细节没有实现。这里只是总结一下其实现的核心，了解并掌握其实现的原理，通过这个实例，掌握异步核心，了解 JS 异步运行机制，才是我们应该学到的。</p>
]]></content:encoded>
    </item>
    <item>
      <title>网络请求</title>
      <link>https://docs.jeremyjone.com/roadmap/frontend/js/net/</link>
      <guid>https://docs.jeremyjone.com/roadmap/frontend/js/net/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">网络请求</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="网络请求"> 网络请求</h1>
<h2 id="ajax"> Ajax</h2>
<p><code>Ajax</code>，<code>Asynchronous JavaScript and XML</code>，它本身并不是新技术，而是一种利用现有技术创新的技术集合。它利用了 <code>XMLHttpRequest</code> 以及多种数据格式，能够让网页应用快速地增量更新呈现在用户界面上，而不是重载整个页面，这使得页面的交互更加友好。</p>
<h3 id="xmlhttprequest"> XMLHttpRequest</h3>
<p>随着网络应用的广泛，通过网络地址刷新整个页面的内容有时显得过于冗余，于是出现了 <code>XMLHttpRequest</code> 技术。它用于与服务器进行交互，在不刷新页面的情况下请求特定 <code>URL</code>。这允许网页在不影响用户操作的情况下，更新页面的局部内容。</p>
<p><code>XMLHttpRequest</code> 是一个内建的浏览器对象，允许使用 <code>JavaScript</code> 发送 <code>HTTP</code> 请求。虽然它有 <code>XML</code> 一词，但它不仅仅能发送 <code>XML</code>，而是可以发送任何数据内容。</p>
<p>其工作原理：</p>
<img :src="$withBase('/assets/roadmap/frontend/js/xhr.gif')" alt="工作原理">
<h3 id="发送请求"> 发送请求</h3>
<p>发送一个 <code>XMLHttpRequest</code> 请求，大致需要三步：</p>
<ul>
<li>
<p>1、创建 <code>XMLHttpRequest</code> 对象</p>
<div><pre><code><span>let</span> xhr <span>=</span> <span>new</span> <span>XMLHttpRequest</span><span>(</span><span>)</span><span>;</span> <span>// 没有任何参数</span>
</code></pre>
<div><span>1</span><br></div></div></li>
<li>
<p>2、初始化对象</p>
<div><pre><code>xhr<span>.</span><span>open</span><span>(</span>method<span>,</span> <span>URL</span><span>,</span> <span>[</span>async<span>,</span> user<span>,</span> password<span>]</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><ul>
<li><code>method</code>：要是用的 <code>HTTP</code> 方法</li>
<li><code>URL</code>：请求路径</li>
<li><code>async</code>：可选，默认 <code>true</code>，表示是否异步执行。如果为 <code>true</code>，则在 <code>send()</code> 方法受到答复前不会返回</li>
<li><code>user</code>：认证用户名，默认 <code>null</code></li>
<li><code>password</code>：认证密码，默认 <code>null</code></li>
</ul>
<p>这里的 <code>open</code> 并不会真正建立连接，而是仅仅配置请求对象。</p>
<div><p>注意</p>
<p>需要注意的是，<code>async</code> 参数在很多浏览器上已经废弃支持同步，因为它在主线程上，容易破坏用户体验。但在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Worker" target="_blank" rel="noopener noreferrer">Worker</a> 线程上允许同步请求。</p>
</div>
</li>
<li>
<p>3、发送请求</p>
<div><pre><code>xhr<span>.</span><span>send</span><span>(</span><span>[</span>body<span>]</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><ul>
<li><code>body</code>：发送请求时的可选请求体。在某些请求中（如 GET 请求），是不包含请求体的。</li>
</ul>
<p>该方法会建立连接，并将请求发送到服务器。</p>
</li>
</ul>
<h3 id="接收响应"> 接收响应</h3>
<p>发送之后，可以通过回调方法获取响应：</p>
<div><pre><code><span>// 请求完成，响应已经完全下载，可以显示响应信息</span>
xhr<span>.</span><span>onload</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span><span>`</span><span><span>${</span>xhr<span>.</span>status<span>}</span></span><span>, </span><span><span>${</span>xhr<span>.</span>response<span>}</span></span><span>`</span></span><span>)</span><span>;</span>
<span>}</span><span>;</span>

<span>// 请求错误，或无法发出请求</span>
xhr<span>.</span><span>onerror</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>"error"</span><span>)</span><span>;</span>
<span>}</span><span>;</span>

<span>// 定时触发，可以显示进度</span>
xhr<span>.</span><span>onprogress</span> <span>=</span> <span>function</span><span>(</span><span>event</span><span>)</span> <span>{</span>
  <span>// 如果服务器发送了 Content-Length 响应头，event.lengthComputable 会为 true，此时可以调用 event.total 属性</span>
  console<span>.</span><span>log</span><span>(</span><span><span>`</span><span><span>${</span>event<span>.</span>loaded<span>}</span></span><span> / </span><span><span>${</span>event<span>.</span>total<span>}</span></span><span>`</span></span><span>)</span><span>;</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>一旦接收到响应，<code>xhr</code> 中会接收到：</p>
<ul>
<li><code>status</code>：状态码</li>
<li><code>statusText</code>：状态消息，一般对应于状态码</li>
<li><code>response</code>：服务器返回的响应体</li>
</ul>
<h3 id="设置参数"> 设置参数</h3>
<p>此外，我们在发送请求之前，还可以设置一些常用参数。</p>
<h4 id="设置响应时间"> 设置响应时间</h4>
<div><pre><code>xhr<span>.</span>timeout <span>=</span> <span>10000</span><span>;</span> <span>// 10秒超时</span>
</code></pre>
<div><span>1</span><br></div></div><h4 id="设置响应格式"> 设置响应格式</h4>
<div><pre><code>xhr<span>.</span>responseType <span>=</span> <span>"json"</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><p>格式可以是如下内容：</p>
<ul>
<li><code>&quot;&quot;</code>：默认，响应格式为字符串</li>
<li><code>&quot;text&quot;</code>：响应格式为字符串</li>
<li><code>&quot;arraybuffer&quot;</code>：响应格式为 <code>ArrayBuffer</code>一组二进制数据</li>
<li><code>&quot;blob&quot;</code>：响应格式为 <code>Blob</code>，一组二进制数据</li>
<li><code>&quot;document&quot;</code>：响应格式为 <code>XML document</code></li>
<li><code>&quot;json&quot;</code>：响应格式为 <code>JSON</code></li>
</ul>
<h3 id="状态"> 状态</h3>
<p><code>XMLHttpRequest</code> 的状态会随着进度变化而变化。通过 <code>readyState</code> 可以了解实时状态。</p>
<p>具体状态分为：</p>
<ul>
<li>UNSENT = 0; // 初始状态</li>
<li>OPENED = 1; // open 被调用</li>
<li>HEADERS_RECEIVED = 2; // 接收到响应头</li>
<li>LOADING = 3; // 响应体正在加载</li>
<li>DONE = 4; // 请求完成</li>
</ul>
<div><pre><code><span>var</span> xhr <span>=</span> <span>new</span> <span>XMLHttpRequest</span><span>(</span><span>)</span><span>;</span>
console<span>.</span><span>log</span><span>(</span><span>"UNSENT"</span><span>,</span> xhr<span>.</span>readyState<span>)</span><span>;</span> <span>// readyState 为 0</span>

xhr<span>.</span><span>open</span><span>(</span><span>"GET"</span><span>,</span> <span>"/api"</span><span>,</span> <span>true</span><span>)</span><span>;</span>
console<span>.</span><span>log</span><span>(</span><span>"OPENED"</span><span>,</span> xhr<span>.</span>readyState<span>)</span><span>;</span> <span>// readyState 为 1</span>

xhr<span>.</span><span>onprogress</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>"LOADING"</span><span>,</span> xhr<span>.</span>readyState<span>)</span><span>;</span> <span>// readyState 为 3</span>
<span>}</span><span>;</span>

xhr<span>.</span><span>onload</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>"DONE"</span><span>,</span> xhr<span>.</span>readyState<span>)</span><span>;</span> <span>// readyState 为 4</span>
<span>}</span><span>;</span>

xhr<span>.</span><span>send</span><span>(</span><span>null</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><div><p>提示</p>
<p>在一些比较旧的代码中，会看到 <code>onreadystatechange</code> 方法：</p>
<div><pre><code>xhr<span>.</span><span>onreadystatechange</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span>xhr<span>.</span>readyState <span>===</span> <span>4</span><span>)</span> <span>{</span>
    <span>// 请求完成</span>
    <span>if</span> <span>(</span>xhr<span>.</span>status <span>===</span> <span>200</span><span>)</span> <span>{</span>
      <span>// 请求成功，可以拿到响应体</span>
      console<span>.</span><span>log</span><span>(</span>xhr<span>.</span>response<span>)</span><span>;</span>
    <span>}</span> <span>else</span> <span>{</span>
      <span>// 请求失败</span>
    <span>}</span>
  <span>}</span> <span>else</span> <span>{</span>
    <span>// 未完成，状态还在继续</span>
  <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>这种方式现在基本上已经被 <code>onload</code>、<code>onerror</code> 的形式所取代。</p>
</div>
<h3 id="终止请求"> 终止请求</h3>
<p>在请求过程中，我们可以随时终止请求，让状态变为 <code>0</code>。</p>
<div><pre><code>xhr<span>.</span><span>abort</span><span>(</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="设置请求头"> 设置请求头</h3>
<p>我们可以自定义请求头：</p>
<div><pre><code>xhr<span>.</span><span>setRequestHeader</span><span>(</span><span>"Content-Type"</span><span>,</span> <span>"application/json"</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><p>注意该方法不会覆盖请求头，只是添加值。如果一个请求头被多次赋值，那么会生成一个合并多值的请求头。</p>
<h3 id="formdata"> FormData</h3>
<p>如果建立一个 POST 请求，很多时候需要使用 <code>FormData</code> 对象，它用来创建一个表单数据对象。</p>
<div><pre><code><span>let</span> formData <span>=</span> <span>new</span> <span>FormData</span><span>(</span>data<span>)</span><span>;</span>
formData<span>.</span><span>append</span><span>(</span>name<span>,</span> value<span>)</span><span>;</span>

<span>// 让表单以 json 格式发送。还可以以 multipart/form-data 格式发送，但 json 更加灵活高效</span>
xhr<span>.</span><span>setRequestHeader</span><span>(</span><span>"Content-type"</span><span>,</span> <span>"application/json; charset=utf-8"</span><span>)</span><span>;</span>
xhr<span>.</span><span>send</span><span>(</span>formData<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id="跨域请求"> 跨域请求</h3>
<p>通过设置 <code>withCredentials</code> 属性来实现跨域请求。它指示了是否该使用类似 <code>cookie</code>、<code>authorization headers</code> 或者 <code>TLS</code> 客户端证书这一类资格证书来创建一个跨站点访问控制请求。</p>
<p>这个属性在同站点下无效。同时，该指示也会被用作响应中 <code>cookie</code> 被忽视的标识。</p>
<div><div><br><div>&nbsp;</div><br><br><br></div><pre><code><span>let</span> xhr <span>=</span> <span>new</span> <span>XMLHttpRequest</span><span>(</span><span>)</span><span>;</span>
xhr<span>.</span>withCredentials <span>=</span> <span>true</span><span>;</span>

xhr<span>.</span><span>open</span><span>(</span><span>"GET"</span><span>,</span> <span>"https://www.jeremyjone.com"</span><span>)</span><span>;</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="fetch"> Fetch</h2>
<p><code>fetch</code> 提供了一个获取资源的接口，相比 <code>XMLHttpRequest</code>，它们本质上做的都是同一件事，但是它更强大，也更灵活。</p>
<h3 id="基本语法"> 基本语法</h3>
<div><pre><code><span>let</span> promise <span>=</span> <span>fetch</span><span>(</span>input<span>[</span><span>,</span> init<span>]</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><ul>
<li><code>input</code>：要访问的资源，它可以是一个 URL，也可以是一个 Request 对象</li>
<li><code>init</code>：配置对象，包含 <code>method</code>、<code>headers</code> 等。默认没有就是一个普通 GET 请求。</li>
</ul>
<p>它返回一个 <code>Promise</code> 对象，这个对象会在请求响应后被 <code>resolve</code>，并传回 <code>Response</code> 对象。</p>
<p>当遇到网络错误时，它会被 <code>reject</code>，并传回 <code>TypeError</code>信息。</p>
<div><p>注意</p>
<p>与 <code>XMLHttpRequest</code> 不同，<code>fetch</code> 只要服务器有返回值就算成功，没有返回值才算失败。所以在判断返回值是否成功时，我们不仅要判断 <code>Promise</code> 对象是否被 <code>resolve</code>，而且还要判断 <code>Response.status</code> 或 <code>Response.ok</code> 的值。</p>
</div>
<h3 id="接收响应-2"> 接收响应</h3>
<p>响应体具有多种方法，用于返回不同格式的内容：</p>
<ul>
<li><code>response.text()</code>：直接返回文本格式</li>
<li><code>response.json()</code>：解析为 JSON 格式内容</li>
<li><code>response.formData()</code>：返回一个 FormData 对象</li>
<li><code>response.blob()</code>：返回 Blob 格式对象</li>
<li><code>response.arrayBuffer()</code>：返回 ArrayBuffer 对象</li>
</ul>
<p>这些方法同样返回一个 <code>Promise</code> 对象：</p>
<div><div><br><div>&nbsp;</div><div>&nbsp;</div><br></div><pre><code><span>fetch</span><span>(</span>url<span>,</span> options<span>)</span>
  <span>.</span><span>then</span><span>(</span><span>response</span> <span>=></span> response<span>.</span><span>json</span><span>(</span><span>)</span><span>)</span>
  <span>.</span><span>then</span><span>(</span><span>info</span> <span>=></span> console<span>.</span><span>log</span><span>(</span>info<span>)</span><span>)</span><span>;</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id="设置请求头-2"> 设置请求头</h3>
<p>我们同样可以设置请求头：</p>
<div><div><br><br><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><br><br><br></div><pre><code><span>let</span> promise <span>=</span> <span>fetch</span><span>(</span>url<span>,</span> <span>{</span>
  method<span>:</span> <span>"POST"</span><span>,</span>
  headers<span>:</span> <span>{</span>
    <span>"Content-Type"</span><span>:</span> <span>"application/json;charset=utf-8"</span>
  <span>}</span><span>,</span>
  body<span>:</span> <span>JSON</span><span>.</span><span>stringify</span><span>(</span>info<span>)</span>
<span>}</span><span>)</span><span>;</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id="跨域请求-2"> 跨域请求</h3>
<p>通过设置 <code>credentials</code> 可以设置跨域请求，<code>fetch</code> 会携带我们的 <code>cookie</code> 发送到指定网站服务器：</p>
<div><div><br><div>&nbsp;</div><br><br></div><pre><code><span>fetch</span><span>(</span>url<span>,</span> <span>{</span>
  credentials<span>:</span> <span>"include"</span>
<span>}</span><span>)</span><span>;</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>它可以设置三个值：</p>
<ul>
<li><code>same-origin</code>：同源可以，默认值</li>
<li><code>include</code>：是否同源都可以</li>
<li><code>omit</code>：都拒绝</li>
</ul>
<p>如果服务器同意了请求，那么会返回带有：</p>
<div><pre><code>Access-Control-Allow-Origin<span>:</span> * / URL <span>// * 或具体的 URL 地址。非简单请求必须是具体地址</span>
Access-Control-Allow-Credentials<span>:</span> <span>true</span> <span>// 非简单请求的响应头一定包含此项</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>的响应头内容。</p>
<h4 id="简单的请求"> 简单的请求</h4>
<ul>
<li>使用简单的方法，如 <code>GET</code>、<code>POST</code>、<code>HEAD</code>。</li>
<li>简单的请求头
<ul>
<li><code>Accept</code></li>
<li><code>Accept-Language</code></li>
<li><code>Content-Language</code></li>
<li><code>Content-Type</code>: 仅限 <code>application/x-www-form-urlencoded</code>，<code>multipart/form-data</code> 或 <code>text/plain</code></li>
</ul>
</li>
</ul>
<h4 id="非简单请求"> 非简单请求</h4>
<p>除了简单请求，剩下都是非简单请求。比如 <code>PATCH</code>、<code>DELETE</code> 方法，或者包含其他请求头内容（例如 <code>'API-Key'</code> 头，或者 <code>'Content-Type': 'application/json'</code>）的 <code>GET</code>、<code>POST</code> 请求等。</p>
<p>非简单请求在实际过程中会比简单请求更加复杂，主要体现在它会有一次 <code>预检请求</code>。浏览器通过 <code>预检请求</code> 来请求服务器的许可，如果服务器同意处理请求，那么才会真正进行响应。</p>
<img :src="$withBase('/assets/roadmap/frontend/js/fetch-unsample-request.png')" alt="fetch-unsample-request">
<h3 id="封装"> 封装</h3>
<p>对 <code>fetch</code> 可以进行二次封装，从而方便正常使用。</p>
<p><a href="https://www.jeremyjone.com/612/" target="_blank" rel="noopener noreferrer">封装实例</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>原型和原型链详解</title>
      <link>https://docs.jeremyjone.com/roadmap/frontend/js/prototype/</link>
      <guid>https://docs.jeremyjone.com/roadmap/frontend/js/prototype/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">原型和原型链详解</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="原型和原型链详解"> 原型和原型链详解</h1>
<p>网上有很多相关的文章、视频等资料，但很多都是片面的，不完全的。我也为了自身加深理解，所以对其进行一下简单的总结。</p>
<h2 id="两个属性"> 两个属性</h2>
<p>可以说 JavaScript 的很多特性都是基于原型和原型链展开的，这就要提到两个属性：</p>
<ul>
<li><code>__proto__</code></li>
<li><code>prototype</code></li>
</ul>
<p>下面先理解这两个属性。</p>
<h3 id="proto-属性"> <code>__proto__</code> 属性</h3>
<p>首先，它不是一个 JavaScript 的规范属性，只是浏览器方便获取对象的原型而创建的一个属性，但是它仍然需要理解。</p>
<p><em>它并不被推荐直接使用，而是使用其他方法代替，这个后面说。</em></p>
<blockquote>
<p><strong>该属性服务于对象实例，指向创建实例的构造函数的原型对象</strong></p>
</blockquote>
<p>我们从下面几个方面理解：</p>
<h4 id="_1、它保存着继承关系"> 1、它保存着继承关系</h4>
<p>大多数情况下，每一个对象都包含 <code>__proto__</code> 属性，我们可以通过它来查看一个对象的从属关系。</p>
<p>一个简单的例子：</p>
<div><pre><code><span>let</span> arr <span>=</span> <span>[</span><span>]</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><img :src="$withBase('/assets/roadmap/frontend/prototype/arrexample.png')" alt="">
<p>其中，<code>arr</code> 是我们创建的一个对象，它是一个数组。我们都知道数组有内置方法，但是我们创建的 <code>arr</code> 并没有给出，于是它调用了父级的 <code>Array</code> 构造器成功创建了数组对象。而其父级内容，还有父级，它是一个 Object 对象。</p>
<p>至此，一个简单的 <code>arr</code> 对象实例创建完成，它具有三层继承关系。</p>
<h4 id="_2、对象中也可以不包含该属性"> 2、对象中也可以不包含该属性</h4>
<p>上面讲到了绝大对数情况。但有时候，一个对象也可以不包含该属性，比如：</p>
<div><pre><code><span>// 1</span>
<span>var</span> obj <span>=</span> <span>{</span> name<span>:</span> <span>"jeremyjone"</span> <span>}</span><span>;</span> <span>// 包含 __proto__</span>

<span>// 2</span>
<span>var</span> obj2 <span>=</span> Object<span>.</span><span>create</span><span>(</span><span>null</span><span>,</span> <span>{</span> name<span>:</span> <span>{</span> value<span>:</span> <span>"jeremyjone"</span> <span>}</span> <span>}</span><span>)</span><span>;</span> <span>// 纯属性对象，只有 name 字段</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>类似上述方法 2，创建的对象是没有原型的，它仅仅是一个具有 <code>name</code> 字段的属性对象。</p>
<img :src="$withBase('/assets/roadmap/frontend/prototype/noproto.png')" alt="">
<h4 id="_3、它是一个对象"> 3、它是一个对象</h4>
<p>在创建一个对象时，<code>__proto__</code> 会引用父级原型的 <code>prototype</code> 属性。对于对象继承时，直接使用它的属性；而对于函数继承时，可以通过调用它的 <code>apply</code> 方法来执行函数。</p>
<img :src="$withBase('/assets/roadmap/frontend/prototype/protoclone.png')" alt="">
<div><pre><code><span>function</span> <span>User</span><span>(</span><span>)</span> <span>{</span><span>}</span>
</code></pre>
<div><span>1</span><br></div></div><img :src="$withBase('/assets/roadmap/frontend/prototype/protoapply.png')" alt="">
<p>在创建对象的过程中，<code>__proto__</code> 属性本身会做判断，如果给该属性赋一个非对象的值，它将是无效的，因为该属性在顶层可以看到，它是一个属性访问器。</p>
<p>所以，它本身可以算作一个对象。更严格的说，它是一个对象属性访问器（getter / setter）。</p>
<img :src="$withBase('/assets/roadmap/frontend/prototype/protovalueisobject.png')" alt="">
<h3 id="prototype-属性"> <code>prototype</code> 属性</h3>
<p>它是 ECMAScript 的一个标准属性，也是继承机制里面非常重要的一个属性。</p>
<blockquote>
<p><strong>该属性服务于原型（构造器），包含了可以被继承的所有属性/方法</strong></p>
</blockquote>
<p>我们从下面几方面理解：</p>
<h4 id="_1、它是函数的一个属性"> 1、它是函数的一个属性</h4>
<p>每一个 JS 函数都包含一个 <code>prototype</code> 属性。我们都知道 JS 的类是基于 Function 的，所以该属性也成为了继承机制的重要方式。</p>
<div><pre><code><span>function</span> <span>User</span><span>(</span><span>)</span> <span>{</span><span>}</span>

console<span>.</span><span>log</span><span>(</span><span>User</span><span>.</span>prototype<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><img :src="$withBase('/assets/roadmap/frontend/prototype/funsprototype.png')" alt="">
<p>可以看到 User 对象中的原型 <code>prototype</code> 中包含一个构造方法。</p>
<p>这个构造方法 <code>constructor</code> 尤为重要，尤其是在手动编写继承代码时，一定要注意它。</p>
<h4 id="_2、它是一个可以被继承的对象"> 2、它是一个可以被继承的对象</h4>
<p>当初 Brendan Eich 为了解决继承问题，设置了两个属性：</p>
<ul>
<li><code>constructor</code>：将不需要共享的属性和方法，放在构造函数中。</li>
<li><code>prototype</code>：将需要共享的属性和方法，放在 prototype 对象中。</li>
</ul>
<p>也就是说，我们现在使用 <code>new</code> 关键字创建的对象，其实 <code>new</code> 后面跟的是对象的构造函数，而不是类。</p>
<p>而创建的对象，直接引用了 <code>prototype</code> 中的属性，也就相当于“继承”了父类属性和方法。</p>
<p>所以，当使用 <code>new</code> 关键字时，使用的都是该属性。这也是我们在往原型中添加属性时，为啥使用该属性的原因。</p>
<h3 id="它们之间的关系"> 它们之间的关系</h3>
<p>上面提到，实例的对象，直接引用 <code>prototype</code>，同时 <code>__proto__</code> 保存着该对象的构造函数的 <code>prototype</code>。</p>
<p>那么，实例对象则会有如下等式：</p>
<div><pre><code>obj<span>.</span>__proto__ <span>===</span> obj<span>.</span>constructor<span>.</span>prototype<span>;</span> <span>// true</span>
</code></pre>
<div><span>1</span><br></div></div><p>那么扩展开来，对于系统构造函数，它有如下等式：</p>
<div><pre><code><span>let</span> arr <span>=</span> <span>[</span><span>]</span><span>;</span>
arr<span>.</span>__proto__ <span>===</span> <span>Array</span><span>.</span>prototype<span>;</span>

<span>let</span> str <span>=</span> <span>""</span><span>;</span>
str<span>.</span>__proto__ <span>===</span> <span>String</span><span>.</span>prototype<span>;</span>

<span>// ...Object、RegExp等都同理</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>针对自定义的对象，则有：</p>
<div><pre><code><span>function</span> <span>User</span><span>(</span><span>)</span> <span>{</span><span>}</span>
<span>let</span> user <span>=</span> <span>new</span> <span>User</span><span>(</span><span>)</span><span>;</span>

user<span>.</span>__proto__ <span>===</span> user<span>.</span>constructor<span>.</span>prototype<span>;</span> <span>// true</span>
user<span>.</span>__proto__ <span>===</span> <span>User</span><span>.</span>prototype<span>;</span> <span>// true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>这也验证了上面着重要理解的两句话：</p>
<ul>
<li><code>__proto__</code> 属性作用于对象，它服务于对象实例</li>
<li><code>prototype</code> 属性作用于原型（构造器）</li>
</ul>
<h4 id="constructor-的作用"> constructor 的作用</h4>
<p>它是一个构造方法，在 JS 的每一个函数中都会默认有这样一个构造方法。每当 new 出来一个对象，这个函数就会被当成一个原型，每一个实例对象的 <code>__proto__</code> 属性也都会指向该函数的原型。</p>
<p>我们也可以通过实例对象的 <code>__proto__</code> 属性找到构造函数，从而继续 new 出来其他相关对象。</p>
<div><pre><code><span>function</span> <span>User</span><span>(</span><span>)</span> <span>{</span><span>}</span>

<span>let</span> user1 <span>=</span> <span>new</span> <span>User</span><span>(</span><span>)</span><span>;</span>

<span>let</span> constructor <span>=</span> user<span>.</span><span>__proto__</span><span>.</span>constructor<span>;</span>
<span>let</span> user2 <span>=</span> <span>new</span> <span>constructor</span><span>(</span><span>)</span><span>;</span>

console<span>.</span><span>log</span><span>(</span>User <span>===</span> constructor<span>)</span><span>;</span> <span>// true</span>
console<span>.</span><span>log</span><span>(</span>user1<span>.</span>__proto__ <span>===</span> user2<span>.</span>__proto__<span>)</span><span>;</span> <span>// true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>上例中，其实也就说明了原型的构造函数就是原型本身。</p>
<div><pre><code><span>// 接上例</span>
console<span>.</span><span>log</span><span>(</span><span>User</span><span>.</span>prototype<span>.</span>constructor <span>===</span> User<span>)</span><span>;</span> <span>// true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>这在平时我们需要通过对象实例创建新对象时，将会很有用。</p>
<h2 id="原型和原型链"> 原型和原型链</h2>
<p>理解继承，首先要搞懂什么是原型和原型链。</p>
<h3 id="理解原型和原型链"> 理解原型和原型链</h3>
<p>上面已经介绍了关于原型的两个属性：</p>
<ul>
<li><code>__proto__</code></li>
<li><code>prototype</code></li>
</ul>
<p>那么这里就可以推导出：</p>
<p>1、什么是原型</p>
<blockquote>
<p>原型即一个对象的构造器(<code>prototype</code>)，可以通过该原型构造器创造无数实例，每一个实例都具有指向该原型的属性(<code>__proto__</code>)。</p>
</blockquote>
<p>2、什么是原型链</p>
<blockquote>
<p>在对象中通过原型，一层一层向上查找父级引用，直到没有父级(null)。整个这条引用链，即为原型链。原型链定义了对象可以继承的的属性/方法和相互之间的关系。</p>
</blockquote>
<h3 id="理解原型继承"> 理解原型继承</h3>
<p>有了这两个概念，尝试理解一下原型继承。</p>
<h4 id="回到最开始的例子"> 回到最开始的例子</h4>
<p>让我们重新来看一开始那个数组的例子：</p>
<div><pre><code><span>let</span> arr <span>=</span> <span>[</span><span>]</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><p>我们尝试使用数组的方法：</p>
<div><pre><code>arr<span>.</span><span>concat</span><span>(</span><span>[</span><span>"jeremyjone"</span><span>]</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><p>它会成功，但是我们并没有给 <code>arr</code> 添加 <code>concat</code> 的方法。它调用的是其父级 --也就是 Array 构造器-- 中的方法。</p>
<img :src="$withBase('/assets/roadmap/frontend/prototype/arrconcatexample.png')" alt="">
<p>这其实就是继承。我们创建的 <code>arr</code> 数组实例，调用了其原型链父级的方法。</p>
<h4 id="一个原型继承的例子"> 一个原型继承的例子</h4>
<p>如果是函数呢？再来看一个例子：</p>
<div><pre><code><span>function</span> <span>User</span><span>(</span><span>)</span> <span>{</span><span>}</span>
</code></pre>
<div><span>1</span><br></div></div><p>这时候我们都知道这个 User 没有方法任何自己的方法。</p>
<img :src="$withBase('/assets/roadmap/frontend/prototype/emptyuser.png')" alt="">
<p>万物都是从 Object 继承的。此时，User 也是从 Object 继承的。</p>
<p>那么现在给 Object 添加一个方法：</p>
<div><pre><code><span>Object</span><span>.</span>prototype<span>.</span><span>print</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>"Hi jeremyjone, this is Object print."</span><span>)</span><span>;</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h5 id="原型本身也可以继承"> 原型本身也可以继承</h5>
<p>我们首先尝试让 User 调用这个 print 方法，要明确 User 是一个原型，但是当我们直接使用 User 的时候，它本身也是一个对象：</p>
<img :src="$withBase('/assets/roadmap/frontend/prototype/usercallprint.png')" alt="">
<p>没有错，它可以被调用。这说明在原型链上，是可以找到该方法，这说明了 User 确实是从 Object 继承的。</p>
<img :src="$withBase('/assets/roadmap/frontend/prototype/userextendobject.png')" alt="">
<p>从图中可以看到在继承的原型中有 <code>print</code> 方法，即有如下等式关系：</p>
<div><pre><code>User<span>.</span>__proto__<span>.</span>__proto__ <span>===</span> <span>Object</span><span>.</span>prototype<span>;</span> <span>// true</span>
</code></pre>
<div><span>1</span><br></div></div><h5 id="原型创建的实例来继承"> 原型创建的实例来继承</h5>
<p>同样还是刚才的例子，现在我们实例化一个 user，那么 User 现在作为一个原型，被 user 实例对象继承：</p>
<div><pre><code><span>// 接上例</span>
<span>let</span> user <span>=</span> <span>new</span> <span>User</span><span>(</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>这样得到一个 user 实例。它也可以使用其原型属性和方法。</p>
<img :src="$withBase('/assets/roadmap/frontend/prototype/userobjectproto.png')" alt="">
<p>该 user 实例中，只有一个 <code>__proto__</code> 属性，它指向了其原型，也就是 <code>User.prototype</code>，而其原型的父级正是 Object，即：</p>
<div><pre><code>user<span>.</span>__proto__ <span>===</span> <span>User</span><span>.</span>prototype<span>;</span> <span>// true</span>
user<span>.</span>__proto__<span>.</span>__proto__ <span>===</span> <span>Object</span><span>.</span>prototype<span>;</span> <span>// true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>这个例子也印证了我们上面提到的 <code>__proto__</code> 属性是作用于对象的。所以，实例和原型的 <code>__proto__</code> 的值是不一样的：</p>
<div><pre><code>user<span>.</span>__proto__ <span>===</span> User<span>.</span>__proto__<span>;</span> <span>// false</span>
</code></pre>
<div><span>1</span><br></div></div><p>同时也可以得出，最顶级的 Object 一定是一致的（Object 里面确实比较混乱，可以不用考虑），即：</p>
<div><pre><code>user<span>.</span>__proto__<span>.</span>__proto__ <span>===</span> User<span>.</span>__proto__<span>.</span>__proto__<span>;</span> <span>// true。它们都指向 Object.prototype</span>
</code></pre>
<div><span>1</span><br></div></div><p>针对该例子，可以作如下理解：</p>
<img :src="$withBase('/assets/roadmap/frontend/prototype/userexampleimage.png')" alt="">
<h3 id="原型链中的优先级"> 原型链中的优先级</h3>
<p>现在我们知道，对象的属性/方法都是一层一层向上查找，那么如果遇到相同的内容，它的优先级是如何的呢？</p>
<p>举一个例子：</p>
<div><pre><code><span>function</span> <span>User</span><span>(</span><span>name</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>name <span>=</span> name<span>;</span>
<span>}</span>

<span>let</span> user <span>=</span> <span>new</span> <span>User</span><span>(</span><span>"jeremyjone"</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>现在创建了一个对象，并生成一个对象实例，它现在的样子应该是：</p>
<img :src="$withBase('/assets/roadmap/frontend/prototype/createuser.png')" alt="">
<p>现在往 Object 的原型中添加几个属性：</p>
<div><pre><code><span>Object</span><span>.</span>prototype<span>.</span>a <span>=</span> <span>"a"</span><span>;</span>
<span>Object</span><span>.</span>prototype<span>.</span>b <span>=</span> <span>"b"</span><span>;</span>
<span>Object</span><span>.</span>prototype<span>.</span>c <span>=</span> <span>"c"</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>添加之后，这条原型链应该是这样的：</p>
<img :src="$withBase('/assets/roadmap/frontend/prototype/createuseraddabc.png')" alt="">
<p>根据上面提过的，现在：</p>
<div><pre><code>console<span>.</span><span>log</span><span>(</span>user<span>.</span>a<span>)</span><span>;</span> <span>// "a"</span>
console<span>.</span><span>log</span><span>(</span>user<span>.</span>b<span>)</span><span>;</span> <span>// "b"</span>
console<span>.</span><span>log</span><span>(</span>user<span>.</span>c<span>)</span><span>;</span> <span>// "c"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>应该是可用的。</p>
<p>现在分别修改值：</p>
<div><pre><code>user<span>.</span>a <span>=</span> <span>"aa"</span><span>;</span> <span>// 修改 user 对象的 a 属性</span>
User<span>.</span>b <span>=</span> <span>"bb"</span><span>;</span> <span>// 修改 User 模型的 b 属性</span>
<span>User</span><span>.</span>prototype<span>.</span>c <span>=</span> <span>"cc"</span><span>;</span> <span>// 修改 User 原型的 c 属性</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>其结果如下：</p>
<div><pre><code>console<span>.</span><span>log</span><span>(</span>user<span>.</span>a<span>)</span><span>;</span> <span>// "aa"</span>
console<span>.</span><span>log</span><span>(</span>user<span>.</span>b<span>)</span><span>;</span> <span>// "b"</span>
console<span>.</span><span>log</span><span>(</span>user<span>.</span>c<span>)</span><span>;</span> <span>// "cc"</span>

console<span>.</span><span>log</span><span>(</span>User<span>.</span>a<span>)</span><span>;</span> <span>// "a"</span>
console<span>.</span><span>log</span><span>(</span>User<span>.</span>b<span>)</span><span>;</span> <span>// "bb"</span>
console<span>.</span><span>log</span><span>(</span>User<span>.</span>c<span>)</span><span>;</span> <span>// "c"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>分析一下三条执行语句：</p>
<p>1、当执行 <code>user.a = &quot;aa&quot;</code> 语句时，<code>user</code> 对象中没有 <code>a</code> 属性，所以添加了一个值为 <code>&quot;aa&quot;</code> 的 <code>a</code> 属性。这样，当读取 <code>a</code> 属性时，就不会从原型中查找。</p>
<p>2、而 <code>User.b = &quot;bb&quot;</code> 语句是给 <code>User</code> 模型添加一个属性，该属性没有添加在原型中，而是添加在了 <code>constructor</code> 中，根据上面我们讲过的内容，<code>constructor</code> 保存私有属性/方法，而 <code>prototype</code> 保存共享的属性/方法，所以 <code>User.b</code> 属于私有，并不被 <code>user</code> 所继承。</p>
<p>3、最后 <code>User.prototype.c = &quot;cc&quot;</code> 语句，是在 <code>User</code> 的原型中添加一个值为 <code>cc</code> 的 <code>c</code> 属性，所以它可以被继承到 <code>user</code>，也就有了打印的结果。</p>
<p>现在对象 user 的原型如下：</p>
<img :src="$withBase('/assets/roadmap/frontend/prototype/modifyvaluea.png')" alt="">
<p>而 User 的原型如下：</p>
<img :src="$withBase('/assets/roadmap/frontend/prototype/modifyvalueb.png')" alt="">
<p>图中可以看到和分析的一致。</p>
<p>这与主流语言的继承相似，即当前对象属性/方法的优先级最高。隐约看到了多态的影子~</p>
<h3 id="操作对象的原型关系"> 操作对象的原型关系</h3>
<p>前面说不建议直接操作 <code>__proto__</code> 属性，那么我们需要通过更规范的方式进行操作，用到两个方法：</p>
<ul>
<li><code>Object.setPrototypeOf</code></li>
<li><code>Object.getPrototypeOf</code></li>
</ul>
<p>除了名字长一些，其实还是很规范的。</p>
<h4 id="object-setprototypeof"> Object.setPrototypeOf</h4>
<p>该方法修改对象的原型关系，可以变更当前对象的从属关系。</p>
<div><pre><code><span>let</span> a <span>=</span> <span>{</span> a<span>:</span> <span>"-a"</span> <span>}</span><span>;</span>
<span>let</span> b <span>=</span> <span>{</span> b<span>:</span> <span>"-b"</span> <span>}</span><span>;</span>

Object<span>.</span><span>setPrototypeOf</span><span>(</span>a<span>,</span> b<span>)</span><span>;</span> <span>// 将 a 从属于 b</span>
<span>// 这等同于 a.__proto__ = b;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>得到如下关系：</p>
<img :src="$withBase('/assets/roadmap/frontend/prototype/ainb.png')" alt="">
<p>这样就改变了两个对象之间的从属关系，那么现在 <code>a</code> 已经继承了 <code>b</code> 的属性：</p>
<div><pre><code>console<span>.</span><span>log</span><span>(</span>a<span>.</span>b<span>)</span><span>;</span> <span>// -b</span>
</code></pre>
<div><span>1</span><br></div></div><h4 id="object-getprototypeof"> Object.getPrototypeOf</h4>
<p>使用该方法可以查看一个对象的原型。</p>
<div><pre><code><span>// 续上例</span>
Object<span>.</span><span>getPrototypeOf</span><span>(</span>a<span>)</span> <span>===</span> a<span>.</span>__proto__<span>;</span> <span>// true</span>

console<span>.</span><span>log</span><span>(</span>Object<span>.</span><span>getPrototypeOf</span><span>(</span>a<span>)</span><span>)</span><span>;</span> <span>// {name: "bb", b: "-b"}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><img :src="$withBase('/assets/roadmap/frontend/prototype/ainbproto.png')" alt="">
<h3 id="原型链的检测"> 原型链的检测</h3>
<h4 id="instanceof-运算符"> instanceof 运算符</h4>
<p>使用 <code>instanceof</code> 运算符，可以向上查找原型链中的从属关系。</p>
<div><pre><code><span>function</span> <span>A</span><span>(</span><span>)</span> <span>{</span><span>}</span>
<span>function</span> <span>B</span><span>(</span><span>)</span> <span>{</span><span>}</span>

<span>let</span> a <span>=</span> <span>new</span> <span>A</span><span>(</span><span>)</span><span>;</span>
<span>let</span> b <span>=</span> <span>new</span> <span>B</span><span>(</span><span>)</span><span>;</span>

console<span>.</span><span>log</span><span>(</span>a <span>instanceof</span> <span>A</span><span>)</span><span>;</span> <span>// true</span>
console<span>.</span><span>log</span><span>(</span>a <span>instanceof</span> <span>B</span><span>)</span><span>;</span> <span>// false</span>
console<span>.</span><span>log</span><span>(</span>a <span>instanceof</span> <span>Object</span><span>)</span><span>;</span> <span>// true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>稍微改变一下：</p>
<div><pre><code><span>// 接上例</span>
<span>A</span><span>.</span>prototype<span>.</span>__proto__ <span>=</span> <span>B</span><span>.</span>prototype<span>;</span> <span>// 修改 A 的原型关系，现在 B 是 A 的父级</span>

console<span>.</span><span>log</span><span>(</span>a <span>instanceof</span> <span>A</span><span>)</span><span>;</span> <span>// true</span>
console<span>.</span><span>log</span><span>(</span>a <span>instanceof</span> <span>B</span><span>)</span><span>;</span> <span>// true</span>
console<span>.</span><span>log</span><span>(</span>a <span>instanceof</span> <span>Object</span><span>)</span><span>;</span> <span>// true</span>
console<span>.</span><span>log</span><span>(</span>b <span>instanceof</span> <span>B</span><span>)</span><span>;</span> <span>// true</span>
console<span>.</span><span>log</span><span>(</span>b <span>instanceof</span> <span>A</span><span>)</span><span>;</span> <span>// false</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>可以看到，当 A 的原型链发生改变的时候，下面的判断也会发生改变，a 已经从属于 B 了。</p>
<p>甚至我们添加方法，也可以使用了：</p>
<div><pre><code>a<span>.</span><span>show</span><span>(</span><span>)</span><span>;</span> <span>// 报错，因为没有方法</span>

<span>B</span><span>.</span>prototype<span>.</span><span>show</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>"B show"</span><span>)</span><span>;</span>
<span>}</span><span>;</span>

<span>// 此时，对象 a 可以调用 show 方法了。它在原型链中</span>
a<span>.</span><span>show</span><span>(</span><span>)</span><span>;</span> <span>// B show</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h4 id="object-isprototypeof-方法"> Object.isPrototypeOf 方法</h4>
<p>作为与上面 <code>instanceof</code> 运算符的区别，使用 <code>Object.isPrototypeOf</code> 方式，可以明确检测一个<strong>对象</strong>是否在另一个对象的原型链上。</p>
<div><pre><code><span>let</span> a <span>=</span> <span>{</span><span>}</span><span>;</span>
<span>let</span> b <span>=</span> <span>{</span><span>}</span><span>;</span>
<span>let</span> c <span>=</span> <span>{</span><span>}</span><span>;</span>

Object<span>.</span><span>setPrototypeOf</span><span>(</span>a<span>,</span> b<span>)</span><span>;</span>

console<span>.</span><span>log</span><span>(</span>a<span>.</span><span>isPrototypeOf</span><span>(</span>b<span>)</span><span>)</span><span>;</span> <span>// false</span>
console<span>.</span><span>log</span><span>(</span>b<span>.</span><span>isPrototypeOf</span><span>(</span>a<span>)</span><span>)</span><span>;</span> <span>// true</span>
console<span>.</span><span>log</span><span>(</span>c<span>.</span><span>isPrototypeOf</span><span>(</span>a<span>)</span><span>)</span><span>;</span> <span>// false</span>
console<span>.</span><span>log</span><span>(</span><span>Object</span><span>.</span>prototype<span>.</span><span>isPrototypeOf</span><span>(</span>a<span>)</span><span>)</span><span>;</span> <span>// true</span>
console<span>.</span><span>log</span><span>(</span>Object<span>.</span><span>isPrototypeOf</span><span>(</span>a<span>)</span><span>)</span><span>;</span> <span>// false</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h4 id="检测是否存在属性-方法"> 检测是否存在属性/方法</h4>
<h5 id="in-运算符检测原型链"> in 运算符检测原型链</h5>
<p>使用 <code>in</code> 运算符检测原型链中是否存在属性/方法，该方法会在原型链中逐级检测。</p>
<div><pre><code><span>let</span> a <span>=</span> <span>{</span> name<span>:</span> <span>"jeremyjone"</span> <span>}</span><span>;</span>
<span>Object</span><span>.</span>prototype<span>.</span>url <span>=</span> <span>"jeremyjone.com"</span><span>;</span>

console<span>.</span><span>log</span><span>(</span><span>"name"</span> <span>in</span> a<span>)</span><span>;</span> <span>// true</span>
console<span>.</span><span>log</span><span>(</span><span>"a"</span> <span>in</span> a<span>)</span><span>;</span> <span>// false</span>
console<span>.</span><span>log</span><span>(</span><span>"url"</span> <span>in</span> a<span>)</span><span>;</span> <span>// true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h5 id="object-hasownproperty-方法检测"> Object.hasOwnProperty 方法检测</h5>
<p>使用 <code>Object.hasOwnProperty</code> 方法只检测当前对象的属性。</p>
<div><pre><code><span>let</span> a <span>=</span> <span>{</span> name<span>:</span> <span>"jeremyjone"</span> <span>}</span><span>;</span>
<span>Object</span><span>.</span>prototype<span>.</span>url <span>=</span> <span>"jeremyjone.com"</span><span>;</span>

<span>for</span> <span>(</span><span>const</span> key <span>in</span> a<span>)</span> <span>{</span>
  <span>if</span> <span>(</span>a<span>.</span><span>hasOwnProperty</span><span>(</span>key<span>)</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span>a<span>[</span>key<span>]</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
<span>// 只有一条 "jeremyjone"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h2 id="js-中的继承"> JS 中的继承</h2>
<p>首先明确，JS 中的继承是原型继承。有了上面的前置知识，我们可以深入理解 JS 中的原型继承了。</p>
<h3 id="继承不是改变原型的事"> 继承不是改变原型的事</h3>
<p>我们现在创建一个 User：</p>
<div><pre><code><span>function</span> <span>User</span><span>(</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>name <span>=</span> <span>"User"</span><span>;</span>
<span>}</span>

<span>let</span> user <span>=</span> <span>new</span> <span>User</span><span>(</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>它可以表示为：</p>
<img :src="$withBase('/assets/roadmap/frontend/prototype/extend01.png')" alt="">
<blockquote>
<p>1、当声明一个 User 模型时，系统会自动给出这个模型和其对应的原型 <code>prototype</code>，并将原型的父级指向全局的 Object 原型。</p>
<p>2、实例化 user 的时候，系统会生成一个对象实例，同时将其父级指向 User 的原型。</p>
<p>3、此时，user 实例处于一个三层的原型链中：<code>user -&gt; User.prototype -&gt; Object.prototype</code></p>
</blockquote>
<div><pre><code>user<span>.</span>__proto__<span>.</span>__proto__ <span>===</span> <span>Object</span><span>.</span>prototype<span>;</span> <span>// true</span>
</code></pre>
<div><span>1</span><br></div></div><p>我们现在希望添加几个基于 User 的模型：</p>
<div><pre><code><span>function</span> <span>Admin</span><span>(</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>name <span>=</span> <span>"Admin"</span><span>;</span>
<span>}</span>

<span>function</span> <span>Member</span><span>(</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>name <span>=</span> <span>"Member"</span><span>;</span>
<span>}</span>

<span>function</span> <span>Guest</span><span>(</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>name <span>=</span> <span>"Guest"</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>它们现在的父级都是 Object，如何将这些模型的父级指向 User 呢？</p>
<p>可能很容易想到，使用：</p>
<div><pre><code><span>Admin</span><span>.</span>prototype <span>=</span> <span>User</span><span>.</span>prototype<span>;</span>
<span>Member</span><span>.</span>prototype <span>=</span> <span>User</span><span>.</span>prototype<span>;</span>
<span>Guest</span><span>.</span>prototype <span>=</span> <span>User</span><span>.</span>prototype<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>的方式，然后我们看一下继承的效果：</p>
<div><pre><code><span>// 我们给 User 的原型添加一个方法</span>
<span>User</span><span>.</span>prototype<span>.</span><span>show</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>"show function"</span><span>)</span><span>;</span>
<span>}</span><span>;</span>

<span>// 看看实现继承没有</span>
<span>let</span> admin <span>=</span> <span>new</span> <span>Admin</span><span>(</span><span>)</span><span>;</span>
admin<span>.</span><span>show</span><span>(</span><span>)</span><span>;</span> <span>// show function</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>成功调用了 show 方法。</p>
<p>它看似很好，但是这样的操作其实也会导致问题：</p>
<div><pre><code><span>// 比如我们现在需要在不同角色里面分别设置一个 role 的方法</span>
<span>Admin</span><span>.</span>prototype<span>.</span><span>role</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>"admin role"</span><span>)</span><span>;</span>
<span>}</span><span>;</span>

<span>Member</span><span>.</span>prototype<span>.</span><span>role</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>"member role"</span><span>)</span><span>;</span>
<span>}</span><span>;</span>

<span>Guest</span><span>.</span>prototype<span>.</span><span>role</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>"guest role"</span><span>)</span><span>;</span>
<span>}</span><span>;</span>

<span>// 再来执行一下</span>
admin<span>.</span><span>role</span><span>(</span><span>)</span><span>;</span> <span>// guest role</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>很显然，这并不是我们期望的结果。原因在于这三个模型的原型都是 User，它们同时设置了 role 方法，那么结果就是谁在最后，这个方法就是谁。</p>
<p>它可以表示为：</p>
<img :src="$withBase('/assets/roadmap/frontend/prototype/extend02.png')" alt="">
<p>从图中可以看到，模型已经抛弃了它自身的原型，直接指向了父级，也就是 User 的原型。所以，当模型需要单独修改原型属性/方法时，就会同时叠加到 User 的原型中，那么所有公用 User 原型的对象，都将受到影响，这就是<strong>原型的改变</strong>，它不是继承。</p>
<h3 id="继承是原型的继承"> 继承是原型的继承</h3>
<h4 id="修改父级引用"> 修改父级引用</h4>
<p>那么如何正确操作，不修改原型呢？其实前面在说 <code>instanceof</code> 时已经用到了：</p>
<div><pre><code><span>// 接上例，将原型赋值改为如下</span>
<span>Admin</span><span>.</span>prototype<span>.</span>__proto__ <span>=</span> <span>User</span><span>.</span>prototype<span>;</span>
<span>Member</span><span>.</span>prototype<span>.</span>__proto__ <span>=</span> <span>User</span><span>.</span>prototype<span>;</span>
<span>Guest</span><span>.</span>prototype<span>.</span>__proto__ <span>=</span> <span>User</span><span>.</span>prototype<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>将它们原型的父级指向 User 的原型，它们可以表示为：</p>
<img :src="$withBase('/assets/roadmap/frontend/prototype/extend03.png')" alt="">
<p>我们同样执行以下上面例子的代码：</p>
<div><pre><code><span>// 接上例</span>
admin<span>.</span><span>role</span><span>(</span><span>)</span><span>;</span> <span>// admin role</span>

<span>let</span> member <span>=</span> <span>new</span> <span>Member</span><span>(</span><span>)</span><span>;</span>
member<span>.</span><span>role</span><span>(</span><span>)</span><span>;</span> <span>// member role</span>

<span>let</span> guest <span>=</span> <span>new</span> <span>Guest</span><span>(</span><span>)</span><span>;</span>
guest<span>.</span><span>role</span><span>(</span><span>)</span><span>;</span> <span>// guest role</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>这样，它们各自的方式都属于它们自己，而不会修改 User 的原型。</p>
<h4 id="创建新的原型"> 创建新的原型</h4>
<p>还有一种改变方式，通过 <code>Object.create()</code> 方法来创建一个新的原型对象，该方法可以使用第一个参数对象作为新对象的原型。</p>
<p>所以，我们还是以 Admin 为例，可以如下操作：</p>
<div><pre><code><span>function</span> <span>User</span><span>(</span><span>)</span> <span>{</span><span>}</span>
<span>function</span> <span>Admin</span><span>(</span><span>)</span> <span>{</span><span>}</span>

<span>Admin</span><span>.</span>prototype <span>=</span> Object<span>.</span><span>create</span><span>(</span><span>User</span><span>.</span>prototype<span>)</span><span>;</span>
<span>Admin</span><span>.</span>prototype<span>.</span><span>role</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span><span>}</span><span>;</span> <span>// 需要在 Object.create 方法之后执行</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>这样也可以做到 Admin 继承自 User。</p>
<h5 id="新建原型的语句顺序"> 新建原型的语句顺序</h5>
<p>像上例中的最后一句，因为新建原型等于给 Admin.prototype 重新赋值，所以其自有属性/方法都应该在此语句之后。如果把新建原型语句放在最后，那么所有其他方法都将找不到。</p>
<h5 id="新建原型对已创建对象的影响"> 新建原型对已创建对象的影响</h5>
<p>还是根据上例，假设我们现在作如下实现：</p>
<div><pre><code><span>function</span> <span>User</span><span>(</span><span>)</span> <span>{</span><span>}</span>
<span>function</span> <span>Admin</span><span>(</span><span>)</span> <span>{</span><span>}</span>

<span>let</span> admin <span>=</span> <span>new</span> <span>Admin</span><span>(</span><span>)</span><span>;</span> <span>// 在修改之前创建实例</span>

<span>Admin</span><span>.</span>prototype <span>=</span> Object<span>.</span><span>create</span><span>(</span><span>User</span><span>.</span>prototype<span>)</span><span>;</span>
<span>Admin</span><span>.</span>prototype<span>.</span><span>role</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span><span>}</span><span>;</span>

admin<span>.</span><span>role</span><span>(</span><span>)</span><span>;</span> <span>// 报错，找不到 role</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>我们在新建原型语句之前创建一个实例对象，那么无论之后如何修改原型，admin 对象都不会跟着改变。</p>
<p>它可以表示为：</p>
<img :src="$withBase('/assets/roadmap/frontend/prototype/extend04.png')" alt="">
<h5 id="新建原型中的构造函数"> 新建原型中的构造函数</h5>
<p>在新建的原型中，会发现没有构造函数，但是它仍然可以正常工作，因为它继承了父级的构造方法。</p>
<p>在创建新原型之后，不要忘记添加当前的构造函数，这一点是一定的，这会避免很多意想不到的问题。</p>
<div><pre><code><span>Admin</span><span>.</span>prototype <span>=</span> Object<span>.</span><span>create</span><span>(</span><span>User</span><span>.</span>prototype<span>)</span><span>;</span>
<span>Admin</span><span>.</span>prototype<span>.</span>constructor <span>=</span> Admin<span>;</span> <span>// 添加构造函数</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>添加上了构造函数就可以了么？并没有，你还需要为构造函数设置为不可遍历，那么就要用到 <code>Object.defineProperty</code> 方法：</p>
<div><pre><code><span>Admin</span><span>.</span>prototype <span>=</span> Object<span>.</span><span>create</span><span>(</span><span>User</span><span>.</span>prototype<span>)</span><span>;</span>
<span>Admin</span><span>.</span>prototype<span>.</span>constructor <span>=</span> Object<span>.</span><span>defineProperty</span><span>(</span>
  <span>Admin</span><span>.</span>prototype<span>,</span>
  <span>"constructor"</span><span>,</span>
  <span>{</span>
    value<span>:</span> Admin<span>,</span>
    enumerable<span>:</span> <span>false</span> <span>// 设置不可遍历</span>
  <span>}</span>
<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h3 id="基类的调用"> 基类的调用</h3>
<p>既然是继承，那么肯定会有父类的方法调用。JS 中的调用方式如下：</p>
<div><pre><code><span>// 定义基类</span>
<span>function</span> <span>User</span><span>(</span><span>name<span>,</span> age</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>name <span>=</span> name<span>;</span>
  <span>this</span><span>.</span>age <span>=</span> age<span>;</span>
<span>}</span>

<span>// 定义一个基类方法</span>
<span>User</span><span>.</span>prototype<span>.</span><span>show</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>name<span>,</span> <span>this</span><span>.</span>age<span>)</span><span>;</span>
<span>}</span><span>;</span>

<span>// 定义子类</span>
<span>function</span> <span>Admin</span><span>(</span><span>name<span>,</span> age</span><span>)</span> <span>{</span>
  <span>// 不能使用这样的方式，在 JS 中会有 this 的指向问题</span>
  <span>// User(name, age);</span>

  <span>// 通过 call 方法传入指向</span>
  <span>User</span><span>.</span><span>call</span><span>(</span><span>this</span><span>,</span> name<span>,</span> age<span>)</span><span>;</span>
<span>}</span>
<span>Admin</span><span>.</span>prototype<span>.</span>__proto__ <span>=</span> <span>User</span><span>.</span>prototype<span>;</span>

<span>let</span> admin <span>=</span> <span>new</span> <span>Admin</span><span>(</span><span>"jermeyjone"</span><span>,</span> <span>20</span><span>)</span><span>;</span>
admin<span>.</span><span>show</span><span>(</span><span>)</span><span>;</span> <span>// jeremyjone 20</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><p>因为 this 指向问题，需要用到 call 方法。当然，参数较多时，还可以使用 apply 方法。</p>
<div><pre><code><span>function</span> <span>Admin</span><span>(</span><span><span>...</span>args</span><span>)</span> <span>{</span>
  <span>User</span><span>.</span><span>apply</span><span>(</span><span>this</span><span>,</span> args<span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="es6-的语法糖-类-class"> ES6 的语法糖 - 类(class)</h2>
<p>ES6 有了更加清晰明确的面向对象的关键字，但其实它们只不过是经过修饰的语法糖。</p>
<h3 id="类的基础概念和语法"> 类的基础概念和语法</h3>
<p>我们之前在原型链中创建一个对象，需要使用函数的形式，然后在其原型中添加方法/属性，最后通过 <code>new</code> 关键字来创建实例。</p>
<div><pre><code><span>function</span> <span>User</span><span>(</span><span>name</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>name <span>=</span> name<span>;</span>
<span>}</span>
<span>User</span><span>.</span>prototype<span>.</span><span>show</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>"Hi, "</span> <span>+</span> <span>this</span><span>.</span>name<span>)</span><span>;</span>
<span>}</span><span>;</span>

<span>let</span> user <span>=</span> <span>new</span> <span>User</span><span>(</span><span>"jeremyjone"</span><span>)</span><span>;</span>
user<span>.</span><span>show</span><span>(</span><span>)</span><span>;</span> <span>// Hi, jeremyjone</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>那么在 ES6 之后，我们可以使用类的方式：</p>
<div><pre><code><span>class</span> <span>User2</span> <span>{</span>
  <span>constructor</span><span>(</span><span>name</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>name <span>=</span> name<span>;</span>
  <span>}</span>

  <span>show</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>"Hi, "</span> <span>+</span> <span>this</span><span>.</span>name<span>)</span><span>;</span>
  <span>}</span>
<span>}</span>

<span>let</span> user2 <span>=</span> <span>new</span> <span>User2</span><span>(</span><span>"jeremyjone"</span><span>)</span><span>;</span>
user2<span>.</span><span>show</span><span>(</span><span>)</span><span>;</span> <span>// Hi, jeremyjone</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>看上去确实清晰了很多。需要明确几点：</p>
<ul>
<li>1、<code>constructor</code> 是一个构造函数，创建对象时会自动调用。即使你不写，它也默认存在。</li>
<li>2、所有写在 <code>constructor</code> 中的属性都是实例属性，是定义在实例中的。那么相对的，在 <code>constructor</code> 之外的属性，都是定义在类中的，也就是原型属性。</li>
<li>3、<code>this</code> 指向的是调用的实例对象，静态方法指向类本身。</li>
<li>4、子类使用构造器时，必须使用 <code>super</code> 关键字来扩展构造器，并且需要先调用 <code>super</code>。</li>
<li>5、子类会覆盖父类同名属性/方法，这与原型优先级一致。如果需要使用父类属性/方法，使用 <code>super</code> 关键字。</li>
<li>6、使用 <code>static</code> 关键字标明类属性/方法，它们无法在实例中使用，而是通过类直接调用的。</li>
</ul>
<h3 id="类与原型的关系"> 类与原型的关系</h3>
<p>为了深入理解，首先来看一下它们的原型结构：</p>
<img :src="$withBase('/assets/roadmap/frontend/prototype/class1.png')" alt="">
<p>看上去差不多，只是一个标记为函数，一个标记为类。</p>
<p>测试一下发现：</p>
<div><pre><code><span>// 接上例</span>
user2<span>.</span>__proto__ <span>===</span> <span>User2</span><span>.</span>prototype<span>;</span> <span>// true</span>
<span>User2</span><span>.</span>prototype<span>.</span>constructor <span>===</span> User2<span>;</span> <span>// true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>这也符合我们之前说过的原型方式，所以 <code>class</code> 本质上还是一个函数，只不过是一个语法糖，一个原型的另一种写法而已。</p>
<p>在此基础上，我们甚至可以通过原型的方式来修改/新增方法：</p>
<div><pre><code><span>// 接上例</span>
<span>User2</span><span>.</span>prototype<span>.</span><span>print</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>"hello, "</span> <span>+</span> <span>this</span><span>.</span>name<span>)</span><span>;</span>
<span>}</span><span>;</span>

user2<span>.</span><span>print</span><span>(</span><span>)</span><span>;</span> <span>// hello, jeremyjone</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id="实例属性和原型属性的分别"> 实例属性和原型属性的分别</h3>
<p>上面提到，<code>constructor</code> 属性内的是实例属性，之外的是原型属性，可以使用之前提到的检测方法来实践：</p>
<div><pre><code><span>// 接上例</span>
<span>// 检测自身属性</span>
console<span>.</span><span>log</span><span>(</span>user2<span>.</span><span>hasOwnProperty</span><span>(</span><span>"name"</span><span>)</span><span>)</span><span>;</span> <span>// true</span>
console<span>.</span><span>log</span><span>(</span>user2<span>.</span><span>hasOwnProperty</span><span>(</span><span>"print"</span><span>)</span><span>)</span><span>;</span> <span>// false</span>

<span>// 检测原型属性</span>
console<span>.</span><span>log</span><span>(</span><span>"name"</span> <span>in</span> user2<span>)</span><span>;</span> <span>// true</span>
console<span>.</span><span>log</span><span>(</span><span>"print"</span> <span>in</span> user2<span>)</span><span>;</span> <span>// true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>可以看到实例中自身只有 name 属性，而 print 方法确实在其原型链中可以被找到。</p>
<h3 id="类的静态方法-属性"> 类的静态方法/属性</h3>
<p>通过关键字 <code>static</code> 可以声明一个静态方法/属性。和其他语言一样，静态方法/属性只会挂载到类中，而不会通过类创建的实例调用。</p>
<div><pre><code><span>class</span> <span>User</span> <span>{</span>
  <span>static</span> type <span>=</span> <span>"JZ"</span><span>;</span>

  <span>constructor</span><span>(</span><span>name</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>name <span>=</span> name<span>;</span>
  <span>}</span>

  <span>show</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>"show: "</span> <span>+</span> <span>this</span><span>.</span>name<span>)</span><span>;</span>
  <span>}</span>

  <span>static</span> <span>print</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>"static print by: "</span> <span>+</span> <span>this</span><span>.</span>type<span>)</span><span>;</span> <span>// 静态方法里的 this 指向类本身</span>
  <span>}</span>
<span>}</span>

<span>let</span> user <span>=</span> <span>new</span> <span>User</span><span>(</span><span>"jeremyjone"</span><span>)</span><span>;</span>

<span>// 实例调用类方法</span>
user<span>.</span><span>print</span><span>(</span><span>)</span><span>;</span> <span>// 报错。找不到对象方法</span>

<span>// 使用类方法</span>
User<span>.</span><span>print</span><span>(</span><span>)</span><span>;</span> <span>// static print by: JZ</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><h3 id="类的继承"> 类的继承</h3>
<p>ES6 中通过 <code>extends</code> 关键字来实现类之间的继承。</p>
<div><pre><code><span>// 接上例</span>
<span>class</span> <span>Child</span> <span>extends</span> <span>User</span> <span>{</span><span>}</span> <span>// 最基本的继承</span>

<span>let</span> child <span>=</span> <span>new</span> <span>Child</span><span>(</span><span>"child jz"</span><span>)</span><span>;</span>
child<span>.</span><span>show</span><span>(</span><span>)</span><span>;</span> <span>// show: child jz</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>同时，静态属性/方法是会被继承的。</p>
<div><pre><code><span>// 接上例</span>
Child<span>.</span><span>print</span><span>(</span><span>)</span><span>;</span> <span>// static print by: JZ</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h3 id="super-关键字"> super 关键字</h3>
<p>在继承过程中，经常会看到 <code>super</code> 关键字，它有两个作用：</p>
<ul>
<li>1、子类调用构造函数 <code>constructor</code> 时，必须在构造函数内部先调用 <code>super</code> 关键字，然后才可以使用 <code>this</code> 对象。</li>
<li>2、子类同名方法会覆盖父类方法，这时使用 <code>super</code> 关键字可以调用父类方法。</li>
</ul>
<h4 id="构造函数中使用-super"> 构造函数中使用 super</h4>
<div><pre><code><span>// 接上例</span>
<span>// 错误示例</span>
<span>class</span> <span>Child2</span> <span>extends</span> <span>User</span> <span>{</span>
  <span>constructor</span><span>(</span><span>)</span> <span>{</span><span>}</span> <span>// 空</span>
<span>}</span>

<span>// 当子类调用了构造函数，却没有在内部使用 super，新建实例会报错</span>
<span>let</span> child2 <span>=</span> <span>new</span> <span>Child2</span><span>(</span><span>"c2"</span><span>)</span><span>;</span> <span>// 报错</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><img :src="$withBase('/assets/roadmap/frontend/prototype/constructornosuper.png')" alt="">
<p>所以需要在使用到 <code>this</code> 地方之前，调用一下 <code>super</code>。</p>
<div><pre><code><span>// 接上例</span>
<span>// 正确示例</span>
<span>class</span> <span>Child2</span> <span>extends</span> <span>User</span> <span>{</span>
  <span>constructor</span><span>(</span><span>name</span><span>)</span> <span>{</span>
    <span>super</span><span>(</span>name<span>)</span><span>;</span>
  <span>}</span>
<span>}</span>

<span>let</span> child2 <span>=</span> <span>new</span> <span>Child2</span><span>(</span><span>"c2"</span><span>)</span><span>;</span> <span>// 正确</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h4 id="调用父级属性-方法"> 调用父级属性/方法</h4>
<p>作为对父类的扩展，有时候需要覆写父类，但是又需要用到父类的功能，这时可以在子类中使用 <code>super</code> 调用父类功能作为子类方法的一部分。</p>
<div><pre><code><span>// 接上例</span>
<span>class</span> <span>Child3</span> <span>extends</span> <span>User</span> <span>{</span>
  <span>show</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>"Blessings from child3"</span><span>)</span><span>;</span>
    <span>super</span><span>.</span><span>show</span><span>(</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span>

<span>let</span> child3 <span>=</span> <span>new</span> <span>Child3</span><span>(</span><span>"c3"</span><span>)</span><span>;</span>
child3<span>.</span><span>show</span><span>(</span><span>)</span><span>;</span>
<span>// Blessings from child3</span>
<span>// show: c3</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h4 id="super-指向哪里"> super 指向哪里</h4>
<p>ES6 给我们提供的 <code>super</code> 会指向父级的原型。所以我们可以通过 <code>super</code> 找到其原型链中的所有属性/方法，但是无法找到 <code>static</code> 方法/属性。</p>
<p>举一个例子，我们可以将上面的例子转换为：</p>
<div><pre><code><span>// 修改上例</span>
<span>class</span> <span>Child3</span> <span>extends</span> <span>User</span> <span>{</span>
  <span>show</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>"Blessings from child3"</span><span>)</span><span>;</span>
    <span>// super.show();</span>
    <span>// 转换为如下方式：</span>
    <span>User</span><span>.</span>prototype<span>.</span><span>show</span><span>.</span><span>call</span><span>(</span><span>this</span><span>,</span> <span>this</span><span>.</span>name<span>)</span><span>;</span>
    <span>// 或者：</span>
    <span>this</span><span>.</span>__proto__<span>.</span><span>show</span><span>.</span><span>call</span><span>(</span><span>this</span><span>,</span> <span>this</span><span>.</span>name<span>)</span><span>;</span>
  <span>}</span>
<span>}</span>

<span>let</span> child3 <span>=</span> <span>new</span> <span>Child3</span><span>(</span><span>"c3"</span><span>)</span><span>;</span>
child3<span>.</span><span>show</span><span>(</span><span>)</span><span>;</span>
<span>// Blessings from child3</span>
<span>// show: c3</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>从上面可以看到，其实 <code>super</code> 就是指向了原型，同时给我们提供了 <code>this</code> 的指向。</p>
<h2 id="总结"> 总结</h2>
<p>到此为止，基于 JS 的原型和原型链的内容基本就总结完毕了，学习 JS 一定要搞明白原型的内容。JS 的灵活之处就在于原型和原型链，其继承的方式也基于此，之后的类的概念也是在此基础上的。</p>
<p>总之，这段内容还是要多多练习领悟，才能通透。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Proxy 与 Reflect</title>
      <link>https://docs.jeremyjone.com/roadmap/frontend/js/proxy/</link>
      <guid>https://docs.jeremyjone.com/roadmap/frontend/js/proxy/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">Proxy 与 Reflect</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="proxy-与-reflect"> Proxy 与 Reflect</h1>
<h2 id="proxy"> Proxy</h2>
<p><code>Proxy</code> 是一个对象，用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）。</p>
<p>简单来说，<code>Proxy</code> 就是一个对象代理器，它可以劫持一个对象，并且当这个对象发生变化时，代理器可以同步进行一些变化操作，这也就是 <code>vue3</code> 会使用它的根本。</p>
<p>举个栗子：</p>
<blockquote>
<p>我们有一个明星 <code>张xx</code>，他很忙，不可能每件事情都自己处理，所以他需要一个代理人，也就是我们平时说的经纪人。当公司A希望请该明星做代言时，公司A会无法直接联系到明星，而是联系经纪人。这个经纪人就是我们说的代理模式，他就是一个代理器。</p>
</blockquote>
<div><pre><code><span>// 定义一个明星 张xx</span>
<span>let</span> star <span>=</span> <span>{</span>
    name<span>:</span> <span>"张xx"</span><span>,</span>
    age <span>:</span> <span>25</span><span>,</span>
    phone<span>:</span> <span>"138123456789"</span>
<span>}</span>

<span>// 使用 Proxy 对张xx明星进行代理</span>
<span>let</span> agent <span>=</span> <span>new</span> <span>Proxy</span><span>(</span>star<span>,</span> <span>{</span>
    <span>// 我们在这里对代理做了一些配置：</span>
    <span>// 1、当寻求明星电话时，返回经纪人的电话</span>
    <span>// 2、当询问代言费用时，直接返回一个心理价位</span>
    <span>get</span><span>:</span> <span>function</span><span>(</span><span>target<span>,</span> key</span><span>)</span> <span>{</span>
        <span>if</span> <span>(</span>key <span>===</span> <span>"phone"</span><span>)</span> <span>{</span>
            <span>return</span> <span>"agent phone: 13555555555"</span><span>;</span>
        <span>}</span>
        <span>else</span> <span>if</span> <span>(</span>key <span>===</span> <span>"price"</span><span>)</span> <span>{</span>
            <span>return</span> <span>150000</span><span>;</span>
        <span>}</span>
        <span>return</span> target<span>[</span>key<span>]</span><span>;</span>
    <span>}</span><span>,</span>
    <span>set</span><span>:</span> <span>function</span><span>(</span><span>target<span>,</span> key<span>,</span> val</span><span>)</span> <span>{</span>
        <span>// 对报价进行一个自定义设置，如果低于了10000，那么直接报错，也就是谈崩了</span>
        <span>if</span> <span>(</span>key <span>===</span> <span>"customPrice"</span><span>)</span> <span>{</span>
            <span>if</span> <span>(</span>val <span>&lt;</span> <span>10000</span><span>)</span> <span>{</span>
                <span>throw</span> <span>new</span> <span>Error</span><span>(</span><span>"价格太低"</span><span>)</span><span>;</span>
            <span>}</span> <span>else</span> <span>{</span>
                target<span>[</span>key<span>]</span> <span>=</span> val<span>;</span>
                <span>return</span> <span>true</span><span>;</span>
            <span>}</span>
        <span>}</span>
    <span>}</span>
<span>}</span><span>)</span>

<span>// test</span>
console<span>.</span><span>log</span><span>(</span>agent<span>.</span>name<span>)</span><span>;</span>     <span>// 张xx</span>
console<span>.</span><span>log</span><span>(</span>agent<span>.</span>phone<span>)</span><span>;</span>    <span>// agent phone: 13555555555</span>
console<span>.</span><span>log</span><span>(</span>agent<span>.</span>age<span>)</span><span>;</span>      <span>// 25</span>
console<span>.</span><span>log</span><span>(</span>agent<span>.</span>price<span>)</span><span>;</span>    <span>// 150000</span>

agent<span>.</span>customPrice <span>=</span> <span>120000</span><span>;</span>
console<span>.</span><span>log</span><span>(</span>agent<span>.</span>customPrice<span>)</span><span>;</span>  <span>// 120000</span>

agent<span>.</span>customPrice <span>=</span> <span>1000</span><span>;</span> <span>// Uncaught Error: 价格太低</span>
console<span>.</span><span>log</span><span>(</span>agent<span>.</span>customPrice<span>)</span>  <span>// 120000</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br></div></div><p>可以看到，代理器可以将目标对象进行有效的保护，同时也可以对某些数据、方法进行特定的修改。</p>
<h3 id="proxy-的语法"> Proxy 的语法</h3>
<p>从上面的例子可以看出，它的语法应该是：</p>
<div><pre><code><span>const</span> p <span>=</span> <span>new</span> <span>Proxy</span><span>(</span>target<span>,</span> handler<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><p>其中：</p>
<ul>
<li>target：要包装的目标对象，可以是任何类型，包括原生数组、函数、甚至是另一个代理</li>
<li>handler：一个通常以函数作为属性的对象，各属性中的函数分别定义了在执行各种操作时代理的行为</li>
</ul>
<h4 id="创建可撤销的-proxy"> 创建可撤销的 Proxy</h4>
<div><pre><code><span>const</span> p <span>=</span> Proxy<span>.</span><span>revocable</span><span>(</span>target<span>,</span> handler<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><p>这可以创建一个可撤销的 <code>Proxy</code> 对象，创建后 <code>p</code> 结构为：</p>
<div><pre><code><span>{</span>
    <span>"proxy"</span><span>:</span> proxy<span>,</span>   <span>// 新生成的代理对象本身，与 new Proxy(target, handler) 生成的一样</span>
    <span>"revoke"</span><span>:</span> revoke  <span>// 撤销方法，直接调用它可以撤销代理</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>一旦某个代理对象被撤销，它将变得几乎完全不可调用，所有可代理操作都将抛出异常。同时这个代理对象也不可能被恢复到原来状态，其目标对象和处理器对象都有可能被垃圾回收掉。再次调用无任何效果。</p>
<div><pre><code><span>// 官方示例</span>

<span>var</span> revocable <span>=</span> Proxy<span>.</span><span>revocable</span><span>(</span><span>{</span><span>}</span><span>,</span> <span>{</span>
  <span>get</span><span>(</span>target<span>,</span> name<span>)</span> <span>{</span>
    <span>return</span> <span>"[["</span> <span>+</span> name <span>+</span> <span>"]]"</span><span>;</span>
  <span>}</span>
<span>}</span><span>)</span><span>;</span>
<span>var</span> proxy <span>=</span> revocable<span>.</span>proxy<span>;</span>
proxy<span>.</span>foo<span>;</span>              <span>// "[[foo]]"</span>

revocable<span>.</span><span>revoke</span><span>(</span><span>)</span><span>;</span>

console<span>.</span><span>log</span><span>(</span>proxy<span>.</span>foo<span>)</span><span>;</span> <span>// 抛出 TypeError</span>
proxy<span>.</span>foo <span>=</span> <span>1</span>           <span>// 还是 TypeError</span>
<span>delete</span> proxy<span>.</span>foo<span>;</span>       <span>// 又是 TypeError</span>
<span>typeof</span> proxy            <span>// "object"，因为 typeof 不属于可代理操作</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><h2 id="reflect"> Reflect</h2>
<p><code>Reflect</code> 是一个内置对象，它提供拦截 <code>JavaScript</code> 操作的方法。与大多数全局对象不同，<code>Reflect</code> 不是一个构造函数，所以不能通过 <code>new</code> 运算符调用，或者作为一个函数调用。<code>Reflect</code> 的所有属性和方法都是静态的，类似 <code>Math</code> 对象。</p>
<p><code>Reflect</code> 提供的方法与 <code>Proxy</code> 保持完全对应，帮助我们在使用上更加便捷。</p>
<p><code>Reflect</code> 的方法与 <code>Obejct</code> 的一些方法非常相似，甚至看上去是一样的，但还是存在一些差别。具体内容可以参看 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/Comparing_Reflect_and_Object_methods" target="_blank" rel="noopener noreferrer">官方文档</a>。</p>
<p><code>Reflect</code> 提供的方法与 <code>Object</code> 一样，可以单独使用，但通常它都是配合 <code>Proxy</code> 一起使用的。</p>
<div><pre><code><span>const</span> star <span>=</span> <span>{</span> name<span>:</span> <span>"张xx"</span> <span>}</span><span>;</span>

<span>// 以下两个效果类似</span>
Object<span>.</span><span>getOwnPropertyNames</span><span>(</span>star1<span>)</span><span>;</span> <span>// ['name']</span>
Reflect<span>.</span><span>ownKeys</span><span>(</span>star<span>)</span><span>;</span> <span>// ['name']</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><blockquote>
<p>实际上 <code>Reflect.ownKeys</code> 的结果等于 <code>Object.getOwnPropertyNames</code> 与 <code>Object.getOwnPropertySymbols</code> 的总和。</p>
</blockquote>
<h3 id="reflect-的静态方法"> Reflect 的静态方法</h3>
<p>静态方法一共 13 个。</p>
<ul>
<li>
<p>1、<code>Reflect.apply(target, thisArgument, aargumentsList)</code></p>
<p>对一个函数进行调用操作，同时传入一个数组作为调用参数。与 <code>Function.prototype.apply()</code> 方法一样。</p>
<div><pre><code><span>Reflect</span><span>.</span><span>apply</span><span>(</span>Math<span>.</span>floor<span>,</span> <span>undefined</span><span>,</span> <span>[</span><span>1.75</span><span>]</span><span>)</span><span>;</span>  <span>// 1</span>
<span>Function</span><span>.</span>prototype<span>.</span><span>apply</span><span>.</span><span>call</span><span>(</span>Math<span>.</span>floor<span>,</span> <span>undefined</span><span>,</span> <span>[</span><span>1.75</span><span>]</span><span>)</span><span>;</span>  <span>// 1</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div></li>
<li>
<p>2、<code>Reflect.construct(target, argumentsList[, newTarget])</code></p>
<p>对构造函数进行 <code>new</code> 操作，相当于 <code>new target(...args)</code>。这里的 <code>target</code> 如果存在 <code>newTarget</code> 则为 <code>newTarget</code>，否则就是 <code>target</code>。</p>
<div><pre><code><span>var</span> obj <span>=</span> <span>new</span> <span>Foo</span><span>(</span><span>...</span>args<span>)</span><span>;</span>
<span>var</span> obj <span>=</span> Reflect<span>.</span><span>construct</span><span>(</span>Foo<span>,</span> args<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>同样的，它基本等效于 <code>Object.create()</code> 与 <code>Function.prototype.apply()</code> 的和。区别在于构造函数内部的 <code>new.target</code> 指向不同，前者明确指向了 <code>target</code>，而后者则为 <code>undefined</code>。<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct#reflect.construct_vs_object.create" target="_blank" rel="noopener noreferrer">参考</a></p>
</li>
<li>
<p>3、<code>Reflect.defineProperty(target, propertyKey, attributes)</code></p>
<p>与 <code>Object.defineProperty()</code> 类似，唯一不同的就是返回 <code>Boolean</code> 值，设置成功就会返回 <code>true</code>，失败则返回 <code>false</code>。</p>
</li>
<li>
<p>4、<code>Reflect.deleteProperty(target, propertyKey)</code></p>
<p>作为函数的 <code>delete</code> 操作符，相当于执行了 <code>delete target[propertyKey]</code>。该方法同样返回一个 <code>Boolean</code> 值用于判断是否操作成功。</p>
</li>
<li>
<p>5、<code>Reflect.get(target, propertyKey[, receiver])</code></p>
<p>获取对象身上某个属性的值，类似于 <code>target[propertyKey]</code>。对于 <code>receiver</code>，如果 <code>target</code> 对象中指定了 <code>getter</code>，那么 <code>receiver</code> 则为 <code>getter</code> 调用时的 <code>this</code> 值。</p>
<p>举个简单的例子：</p>
<div><pre><code><span>var</span> obj1 <span>=</span> <span>{</span>
    a<span>:</span> <span>1</span><span>,</span>
    b<span>:</span> <span>2</span><span>,</span>
    <span>get</span> <span>add</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> <span>this</span><span>.</span>a <span>+</span> <span>this</span><span>.</span>b<span>;</span>
    <span>}</span>
<span>}</span>

<span>var</span> obj2 <span>=</span> <span>{</span>
    a<span>:</span> <span>3</span><span>,</span>
    b<span>:</span> <span>4</span>
<span>}</span>

Reflect<span>.</span><span>get</span><span>(</span>obj1<span>,</span> <span>'add'</span><span>)</span><span>;</span> <span>// 3</span>
Reflect<span>.</span><span>get</span><span>(</span>obj1<span>,</span> <span>'add'</span><span>,</span> obj2<span>)</span><span>;</span> <span>// 7</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>那这有什么用呢？这在 <code>Proxy</code> 的 <code>get</code> 捕获器中有很多作用，最重要的是解决 <code>this</code> 指向问题。<em>具体看下面的捕获器的内容。</em></p>
</li>
<li>
<p>6、<code>Reflect.getOwnPropertyDescriptor(target, propertyKey)</code></p>
<p>该方法类似于 <code>Object.getOwnPropertyDescriptor()</code>。如果存在该属性，则返回对应的描述符，否则返回 <code>undefined</code>。</p>
<p>注意该方法第一个参数如果不是一个对象的话，那么将造成 <code>TypeError</code> 错误，而 <code>Object.getOwnPropertyDescriptor</code> 则会强制转为对象处理。</p>
<div><pre><code>Reflect<span>.</span><span>getOwnPropertyDescriptor</span><span>(</span><span>{</span>x<span>:</span> <span>"hello"</span><span>}</span><span>,</span> <span>"x"</span><span>)</span><span>;</span> <span>// {value: "hello", writable: true, enumerable: true, configurable: true}</span>
Reflect<span>.</span><span>getOwnPropertyDescriptor</span><span>(</span><span>[</span><span>]</span><span>,</span> <span>"length"</span><span>)</span><span>;</span> <span>// {value: 0, writable: true, enumerable: false, configurable: false}</span>

Reflect<span>.</span><span>getOwnPropertyDescriptor</span><span>(</span><span>"foo"</span><span>,</span> <span>0</span><span>)</span><span>;</span> <span>// TypeError: "foo" is not non-null object</span>
Object<span>.</span><span>getOwnPropertyDescriptor</span><span>(</span><span>"foo"</span><span>,</span> <span>0</span><span>)</span><span>;</span> <span>// { value: "f", writable: false, enumerable: true, configurable: false }</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div></li>
<li>
<p>7、<code>Reflect.getPrototypeOf(target)</code></p>
<p>该方法几乎与 <code>Object.getPrototypeOf()</code> 一样，都是返回指定对象的原型。区别在于参数如果不是对象，则抛出 <code>TypeError</code> 异常。</p>
<div><pre><code><span>// 如果参数为 Object，返回结果相同</span>
Reflect<span>.</span><span>getPrototypeOf</span><span>(</span><span>{</span><span>}</span><span>)</span>  <span>// Object.prototype</span>
Object<span>.</span><span>getPrototypeOf</span><span>(</span><span>{</span><span>}</span><span>)</span>   <span>// Object.prototype</span>

Reflect<span>.</span><span>getPrototypeOf</span><span>(</span><span>'foo'</span><span>)</span>  <span>// Throws TypeError</span>
<span>// 在 ES5 规范下，Object 抛异常；而在 ES2015 规范下，Object 强转为对象</span>
Object<span>.</span><span>getPrototypeOf</span><span>(</span><span>'foo'</span><span>)</span>   <span>// String.prototype</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div></li>
<li>
<p>8、<code>Reflect.has(target, propertyKey)</code></p>
<p>判断一个对象是否存在某个属性，并返回 <code>Boolean</code> 值，和 <code>in</code> 运算符完全相同。</p>
</li>
<li>
<p>9、<code>Reflect.isExtensible(target)</code></p>
<p>类似 <code>Object.isExtensible()</code>，判断一个对象是否可扩展。与上面类似，当 <code>target</code> 不是对象时，抛出 <code>TypeError</code> 异常，而 <code>Object.isExtensible</code> 则返回 <code>false</code>。</p>
</li>
<li>
<p>10、<code>Reflect.ownKeys(target)</code></p>
<p>返回一个包含所有自身元素的数组（不包含继承属性），类似 <code>Object.keys</code>。它等同于 <code>Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target))</code>，这样的写法更加简洁。</p>
</li>
<li>
<p>11、<code>Reflect.preventExtensions(target)</code></p>
<p>该方法阻止新属性添加到对象，与 <code>Object.preventExtensions()</code> 类似，与上面相同，它的第一个参数如果不是对象，则抛出 <code>TypeError</code> 异常，而 <code>Object.preventExtensions</code> 则会强转处理。</p>
</li>
<li>
<p>12、<code>Reflect.set(target, propertyKey, value[, receiver])</code></p>
<p>该方法将值分配给一个属性，并返回 <code>Boolean</code> 值表示成功与否。相当于 <code>target[propertyKey] = value</code>，如果成功，则返回 <code>true</code>，否则返回 <code>false</code>。</p>
<p>至于 <code>receiver</code>，与 <code>get</code> 类似，遇到 <code>setter</code>，则为 <code>setter</code> 调用时的 <code>this</code> 值。举个栗子：</p>
<div><pre><code><span>var</span> obj1 <span>=</span> <span>{</span>
    a<span>:</span> <span>1</span><span>,</span>
    b<span>:</span> <span>2</span><span>,</span>
    <span>set</span> <span>add</span><span>(</span><span>val</span><span>)</span> <span>{</span>
        <span>this</span><span>.</span>a <span>+=</span> val<span>;</span>
    <span>}</span>
<span>}</span>

<span>var</span> obj2 <span>=</span> <span>{</span>
    a<span>:</span> <span>"a"</span><span>,</span>
    b<span>:</span> <span>"b"</span>
<span>}</span>

Reflect<span>.</span><span>set</span><span>(</span>obj1<span>,</span> <span>'add'</span><span>,</span> <span>1</span><span>)</span><span>;</span>
console<span>.</span><span>log</span><span>(</span>obj1<span>.</span>a<span>)</span><span>;</span> <span>// 2</span>

Reflect<span>.</span><span>set</span><span>(</span>obj1<span>,</span> <span>'add'</span><span>,</span> <span>1</span><span>,</span> obj2<span>)</span><span>;</span>
console<span>.</span><span>log</span><span>(</span>obj1<span>.</span>a<span>)</span><span>;</span> <span>// 2</span>
console<span>.</span><span>log</span><span>(</span>obj2<span>.</span>a<span>)</span><span>;</span> <span>// 'a1'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div></li>
<li>
<p>13、<code>Reflect.setPrototypeOf(target, prototype)</code></p>
<p>设置对象原型的函数，返回 <code>Boolean</code> 值表示是否成功。它与 <code>Object.setPrototypeOf()</code> 方法除了返回类型，其余是一样的。</p>
</li>
</ul>
<h2 id="handler-对象"> handler 对象</h2>
<p><code>handler</code> 对象是一个容纳一批特性属性的占位符对象，它包含有 <code>Proxy</code> 的各个捕获器。这些捕获器其实都类似 <code>Object</code> 的方法。所有捕获器如果没有定义，那么就是默认行为。捕获器最大的作用就是修改目标值的一系列默认动作。</p>
<blockquote>
<p>上面例子的 <code>get</code> 和 <code>set</code> 就是其中两个捕获器。</p>
</blockquote>
<p>整个 <code>handler</code> 对象支持 13 种捕获拦截，对应 <code>Reflect</code> 的方法，且方法名相同，参数相同。如果没有自定义某种捕获操作，则会默认转发到目标身上。</p>
<p>这里重点讨论一下常用用法，其他方法可以参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy#handler_%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95" target="_blank" rel="noopener noreferrer">官方文档</a>。</p>
<h3 id="handler-apply"> handler.apply()</h3>
<p>用于拦截函数的调用操作：</p>
<ul>
<li>proxy(...args)</li>
<li>Function.prototype.apply()</li>
<li>Function.prototype.call()</li>
<li>Reflect.apply()</li>
</ul>
<p>同时：</p>
<ul>
<li><code>target</code> 必须是可被调用的，它应当是一个对象，否则抛出 <code>TypeError</code> 错误</li>
</ul>
<div><pre><code><span>var</span> p <span>=</span> <span>new</span> <span>Proxy</span><span>(</span><span>function</span><span>(</span><span>)</span> <span>{</span><span>}</span><span>,</span> <span>{</span>
  <span>apply</span><span>:</span> <span>function</span><span>(</span><span>target<span>,</span> thisArg<span>,</span> argumentsList</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'called: '</span> <span>+</span> argumentsList<span>.</span><span>join</span><span>(</span><span>', '</span><span>)</span><span>)</span><span>;</span>
    <span>return</span> argumentsList<span>[</span><span>0</span><span>]</span> <span>+</span> argumentsList<span>[</span><span>1</span><span>]</span> <span>+</span> argumentsList<span>[</span><span>2</span><span>]</span><span>;</span>
  <span>}</span>
<span>}</span><span>)</span><span>;</span>

console<span>.</span><span>log</span><span>(</span><span>p</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>)</span><span>)</span><span>;</span> <span>// "called: 1, 2, 3"</span>
                         <span>// 6</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h3 id="handler-construct"> handler.construct()</h3>
<p>用于拦截 <code>new</code> 操作符的相关操作：</p>
<ul>
<li>new proxy(...args)</li>
<li>Reflect.construct()</li>
</ul>
<p>同时：</p>
<ul>
<li>用于初始化的代理目标必须具有 <code>[[Construct]]</code> 内部方法，即 <code>new target</code> 必须是有效的</li>
<li>必须返回一个对象</li>
</ul>
<div><pre><code><span>var</span> p1 <span>=</span> <span>new</span> <span>Proxy</span><span>(</span><span>function</span><span>(</span><span>)</span> <span>{</span><span>}</span><span>,</span> <span>{</span>
  <span>construct</span><span>:</span> <span>function</span><span>(</span><span>target<span>,</span> argumentsList<span>,</span> newTarget</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'called: '</span> <span>+</span> argumentsList<span>.</span><span>join</span><span>(</span><span>', '</span><span>)</span><span>)</span><span>;</span>
    <span>return</span> <span>{</span> value<span>:</span> argumentsList<span>[</span><span>0</span><span>]</span> <span>*</span> <span>10</span> <span>}</span><span>;</span>
  <span>}</span>
<span>}</span><span>)</span><span>;</span>

console<span>.</span><span>log</span><span>(</span><span>new</span> <span>p1</span><span>(</span><span>1</span><span>)</span><span>.</span>value<span>)</span><span>;</span> <span>// "called: 1"</span>
                              <span>// 10</span>


<span>// 反例1</span>
<span>var</span> p2 <span>=</span> <span>new</span> <span>Proxy</span><span>(</span><span>{</span><span>}</span><span>,</span> <span>{</span>
  <span>construct</span><span>:</span> <span>function</span><span>(</span><span>target<span>,</span> argumentsList<span>,</span> newTarget</span><span>)</span> <span>{</span>
    <span>return</span> <span>{</span><span>}</span><span>;</span>
  <span>}</span>
<span>}</span><span>)</span><span>;</span>

<span>new</span> <span>p2</span><span>(</span><span>)</span><span>;</span> <span>// TypeError is thrown, "p2" is not a constructor</span>

<span>// 反例2</span>
<span>var</span> p3 <span>=</span> <span>new</span> <span>Proxy</span><span>(</span><span>function</span><span>(</span><span>)</span> <span>{</span><span>}</span><span>,</span> <span>{</span>
  <span>construct</span><span>:</span> <span>function</span><span>(</span><span>target<span>,</span> argumentsList<span>,</span> newTarget</span><span>)</span> <span>{</span>
    <span>return</span> <span>1</span><span>;</span>
  <span>}</span>
<span>}</span><span>)</span><span>;</span>

<span>new</span> <span>p3</span><span>(</span><span>)</span><span>;</span> <span>// TypeError is thrown</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div><h3 id="handler-defineproperty"> handler.defineProperty()</h3>
<p>用于拦截对象的 <code>Object.defineProperty()</code> 操作：</p>
<ul>
<li>Object.defineProperty()</li>
<li>Reflect.defineProperty()</li>
<li>proxy.property = 'value'</li>
</ul>
<p>同时：</p>
<ul>
<li>如果目标对象不可扩展（non-extensible），则不能添加属性</li>
<li>如果属性不是目标对象自身的不可配置属性（non-configurable），则不能将其添加或修改为不可配置属性</li>
</ul>
<p>在传递时，只有如下属性才有作用：</p>
<ul>
<li>enumerable</li>
<li>configurable</li>
<li>writable</li>
<li>value</li>
<li>get</li>
<li>set</li>
</ul>
<p>其余的非标准属性将被无视。</p>
<div><pre><code><span>var</span> p <span>=</span> <span>new</span> <span>Proxy</span><span>(</span><span>{</span><span>}</span><span>,</span> <span>{</span>
  <span>defineProperty</span><span>(</span><span>target<span>,</span> prop<span>,</span> descriptor</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span>descriptor<span>)</span><span>;</span>
    <span>return</span> Reflect<span>.</span><span>defineProperty</span><span>(</span>target<span>,</span> prop<span>,</span> descriptor<span>)</span><span>;</span>
  <span>}</span>
<span>}</span><span>)</span><span>;</span>

Object<span>.</span><span>defineProperty</span><span>(</span>p<span>,</span> <span>'name'</span><span>,</span> <span>{</span>
  value<span>:</span> <span>'proxy'</span><span>,</span>
  type<span>:</span> <span>'custom'</span>
<span>}</span><span>)</span><span>;</span>  <span>// { value: 'proxy' }</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h3 id="handler-deleteproperty"> handler.deleteProperty()</h3>
<p>用于拦截对象的删除属性操作：</p>
<ul>
<li>delete proxy[key]</li>
<li>delete proxy.key</li>
<li>Reflect.deleteProperty()</li>
</ul>
<p>同时：</p>
<ul>
<li>如果目标对象的属性是不可配置的，那么该属性不能被删除</li>
</ul>
<p>需要注意的是，该方法必须返回一个 <code>Boolean</code> 类型的值，表示是否成功删除。</p>
<div><pre><code><span>var</span> p <span>=</span> <span>new</span> <span>Proxy</span><span>(</span><span>{</span><span>}</span><span>,</span> <span>{</span>
  <span>deleteProperty</span><span>:</span> <span>function</span><span>(</span><span>target<span>,</span> prop</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'called: '</span> <span>+</span> prop<span>)</span><span>;</span>
    <span>return</span> <span>true</span><span>;</span>
  <span>}</span>
<span>}</span><span>)</span><span>;</span>

<span>delete</span> p<span>.</span>a<span>;</span> <span>// "called: a"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h3 id="handler-get"> handler.get()</h3>
<p>用于拦截对象的读取属性操作：</p>
<ul>
<li>访问属性：proxy[key]</li>
<li>访问原型链上的属性：Object.create(proxy)[key]</li>
<li>Reflect.get()</li>
</ul>
<p>同时：</p>
<ul>
<li>如果要访问的目标属性是不可写或者不可配置的，则返回的值必须与目标的值相同</li>
<li>如果要访问的目标属性没有配置访问方法（<code>get</code> 方法是 <code>undefined</code> 的），则返回值也必须是 <code>undefined</code></li>
</ul>
<div><pre><code><span>var</span> p <span>=</span> <span>new</span> <span>Proxy</span><span>(</span>target<span>,</span> <span>{</span>
    <span>/**
     * @param target {any} 目标对象
     * @param property {string | Symbol} 被获取的属性名
     * @param receiver {Proxy} 指向 Proxy 或者继承 Proxy 的对象
     */</span>
    <span>get</span><span>:</span> <span>function</span><span>(</span><span>target<span>,</span> property<span>,</span> receiver</span><span>)</span> <span>{</span>
        <span>// ...自定义内容</span>
    <span>}</span>
<span>}</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>针对前两个参数，其实很简单，就是目标对象和键名，通过 <code>target[property]</code> 可以获取到具体的数据。但是最后一个参数就有一些复杂了，它其实是配合 <code>Reflect.get()</code> 来使用会有预期效果。主要是可以正确的将 <code>this</code> 值绑定在目标数据中。举个栗子：</p>
<div><pre><code><span>// 还是上面 star 的例子。做一些简化</span>

<span>// 定义一个明星 张xx，名字是不能随便更改的，但是可以有昵称。</span>
<span>// 这里 _name 表示昵称，刚开始只有真实名字，没有昵称</span>
<span>let</span> star <span>=</span> <span>{</span>
    _name<span>:</span> <span>"张xx"</span><span>,</span>
    <span>get</span> <span>name</span><span>(</span><span>)</span> <span>{</span><span>return</span> <span>this</span><span>.</span>_name<span>}</span>
<span>}</span>

<span>let</span> agent <span>=</span> <span>new</span> <span>Proxy</span><span>(</span>star<span>,</span> <span>{</span>
    <span>get</span><span>:</span> <span>function</span><span>(</span><span>target<span>,</span> key<span>,</span> receiver</span><span>)</span> <span>{</span>
        <span>if</span> <span>(</span>key <span>===</span> <span>"name"</span><span>)</span> <span>{</span>
            <span>return</span> target<span>.</span>name
        <span>}</span> <span>else</span> <span>{</span>
            <span>return</span> target<span>[</span>key<span>]</span>
        <span>}</span>
    <span>}</span>
<span>}</span><span>)</span>

console<span>.</span><span>log</span><span>(</span>agent<span>.</span>name<span>)</span><span>;</span> <span>// 此时打印的是 张xx</span>
agent<span>.</span>_name <span>=</span> <span>"爱豆"</span><span>;</span> <span>// 此时流量上来了，大家叫他 爱豆</span>
console<span>.</span><span>log</span><span>(</span>agent<span>.</span>name<span>)</span><span>;</span> <span>// 此时打印的是 爱豆</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><p>这看上去好像没什么问题，但是如果我们现在又有了一个包装对象，此时要保证 <code>this</code> 值的指向，就需要用到 <code>receiver</code>：</p>
<div><pre><code><span>let</span> agent <span>=</span> Object<span>.</span><span>create</span><span>(</span><span>new</span> <span>Proxy</span><span>(</span>star<span>,</span> <span>{</span>
    <span>get</span><span>:</span> <span>function</span><span>(</span><span>target<span>,</span> key<span>,</span> receiver</span><span>)</span> <span>{</span>
        <span>if</span> <span>(</span>key <span>===</span> <span>"name"</span><span>)</span> <span>{</span>
            <span>return</span> target<span>.</span>name
        <span>}</span> <span>else</span> <span>{</span>
            <span>return</span> target<span>[</span>key<span>]</span>
        <span>}</span>
    <span>}</span>
<span>}</span><span>)</span><span>)</span>

console<span>.</span><span>log</span><span>(</span>agent<span>.</span>name<span>)</span><span>;</span> <span>// 此时打印的是 张xx</span>
agent<span>.</span>_name <span>=</span> <span>"爱豆"</span><span>;</span> <span>// 此时流量上来了，大家叫他 爱豆</span>
console<span>.</span><span>log</span><span>(</span>agent<span>.</span>name<span>)</span><span>;</span> <span>// 此时打印的还是 张xx</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>最后打印出来的结果这说明 this 指向出现了偏差，这时就需要通过对应的 <code>Reflect</code> 来解决，否则自己写一个方法还是很麻烦的~</p>
<div><pre><code><span>let</span> agent <span>=</span> Object<span>.</span><span>create</span><span>(</span><span>new</span> <span>Proxy</span><span>(</span>star<span>,</span> <span>{</span>
    <span>get</span><span>:</span> <span>function</span><span>(</span><span>target<span>,</span> key<span>,</span> receiver</span><span>)</span> <span>{</span>
        <span>if</span> <span>(</span>key <span>===</span> <span>"name"</span><span>)</span> <span>{</span>
            <span>// return target.name</span>
            <span>return</span> Reflect<span>.</span><span>get</span><span>(</span>target<span>,</span> <span>"name"</span><span>,</span> receiver<span>)</span>
        <span>}</span> <span>else</span> <span>{</span>
            <span>return</span> target<span>[</span>key<span>]</span>
        <span>}</span>
    <span>}</span>
<span>}</span><span>)</span><span>)</span>

console<span>.</span><span>log</span><span>(</span>agent<span>.</span>name<span>)</span><span>;</span> <span>// 此时打印的是 张xx</span>
agent<span>.</span>_name <span>=</span> <span>"爱豆"</span><span>;</span> <span>// 此时流量上来了，大家叫他 爱豆</span>
console<span>.</span><span>log</span><span>(</span>agent<span>.</span>name<span>)</span><span>;</span> <span>// 此时打印的是 爱豆</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>通过 <code>Reflect.get()</code> 可以保持 <code>this</code> 的指向。</p>
<h3 id="handler-getprototypeof"> handler.getPrototypeOf()</h3>
<p>它是一个代理方法，当通过如下方法读取代理对象的原型时，该方法就会被调用：</p>
<ul>
<li>Object.getPrototypeOf()</li>
<li>Reflect.getPrototypeOf()</li>
<li><strong>proto</strong></li>
<li>Object.prototype.isPrototypeOf()</li>
<li>instanceof</li>
</ul>
<p>同时：</p>
<ul>
<li><code>getPrototypeOf()</code> 方法返回的不是对象也不是 <code>null</code>，则会抛出 <code>TypeError</code> 异常</li>
<li>目标对象是不可扩展的，且 <code>getPrototypeOf()</code> 方法返回的原型不是目标对象本身的原型，也会抛出 <code>TypeError</code> 异常</li>
</ul>
<h3 id="handler-has"> handler.has()</h3>
<p>用于拦截 <code>in</code> 操作符方法的操作：</p>
<ul>
<li>key in proxy</li>
<li>key in Object.create(proxy)</li>
<li>with(proxy) {(key);}</li>
<li>Reflect.has()</li>
</ul>
<p>同时遇到如下情况，会抛出异常：</p>
<ul>
<li>如果目标对象的某一属性本身是不可配置的，则该属性不能被代理隐藏</li>
<li>如果目标对象为不可扩展的，则该对象的属性不能够被代理隐藏</li>
</ul>
<h3 id="handler-ownkeys"> handler.ownKeys()</h3>
<p>该方法用于拦截 <code>Reflect.ownKeys()</code> 操作：</p>
<ul>
<li>Object.getOwnPropertyNames()</li>
<li>Object.getOwnPropertySymbols()</li>
<li>Object.keys()</li>
<li>Reflect.ownKeys()</li>
</ul>
<p>同时：</p>
<ul>
<li>结果必须是一个数组</li>
<li>数组的元素类型必须是 <code>String</code> 或 <code>Symbol</code></li>
<li>结果数组必须包含目标对象的所有不可配置、自有属性的 key</li>
<li>如果目标对象不可扩展，那么结果数组必须包含目标对象的所有自有属性的 key，不能有其他值</li>
</ul>
<h3 id="handler-set"> handler.set()</h3>
<p>该方法用于拦截设置属性值的操作：</p>
<ul>
<li>指定属性值：proxy[key] = val</li>
<li>指定继承者的属性值：Object.create(proxy)[key] = val</li>
<li>Reflect.set()</li>
</ul>
<p>同时：</p>
<ul>
<li>若目标属性是一个不可写以及不可配置的属性，那么就不能改变它的值</li>
<li>如果目标属性没有配置存储方法（<code>set</code> 方法为 <code>undefined</code> 的），则不能设置它的值</li>
<li>在严格模式下，如果 <code>set()</code> 方法返回 <code>false</code>，则会抛出 <code>TypeError</code> 异常</li>
</ul>
<div><pre><code><span>const</span> p <span>=</span> <span>new</span> <span>Proxy</span><span>(</span>target<span>,</span> <span>{</span>
    <span>/**
     * @param target {any} 目标对象
     * @param property {string | Symbol} 被获取的属性名
     * @param value {any} 新的值
     * @param receiver {Proxy} 最初被调用的对象
     */</span>
    <span>set</span><span>:</span> <span>function</span><span>(</span><span>target<span>,</span> property<span>,</span> value<span>,</span> receiver</span><span>)</span> <span>{</span>
        <span>// 自定义内容</span>
    <span>}</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>通过 <code>target[property] = value</code> 同时配上 <code>return true</code> 来表示赋值成功。</p>
<p>针对 <code>receiver</code> 的作用对象，通常是 <code>proxy</code> 本身，但 <code>handler</code> 的 <code>set</code> 方法也可能在原型链上，或以其他方式被间接调用。可以理解为父类可以对子类进行一些作用：</p>
<div><pre><code><span>const</span> star <span>=</span> <span>{</span>name<span>:</span> <span>"张xx"</span><span>}</span><span>;</span>

<span>const</span> p <span>=</span> <span>new</span> <span>Proxy</span><span>(</span>star<span>,</span> <span>{</span>
    <span>set</span><span>:</span> <span>function</span><span>(</span><span>target<span>,</span> property<span>,</span> value<span>,</span> receiver</span><span>)</span> <span>{</span>
        console<span>.</span><span>log</span><span>(</span>target<span>,</span> receiver<span>)</span><span>;</span>
        <span>return</span> Reflect<span>.</span><span>set</span><span>(</span>target<span>,</span> property<span>,</span> value<span>,</span> receiver<span>)</span><span>;</span>
    <span>}</span>
<span>}</span><span>)</span>

<span>const</span> star2 <span>=</span> <span>{</span><span>}</span><span>;</span>
star2<span>.</span>__proto__ <span>=</span> p<span>;</span>

star2<span>.</span>name <span>=</span> <span>"王xx"</span><span>;</span> <span>// 此时触发打印：{name: '张xx'} {}，可以看到 target 指向 star，而 receiver 指向 star2</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>通常，<code>set</code> 方法可以进行对数据的验证、处理等非常有用的操作。</p>
]]></content:encoded>
    </item>
    <item>
      <title>this 关键字</title>
      <link>https://docs.jeremyjone.com/roadmap/frontend/js/this/</link>
      <guid>https://docs.jeremyjone.com/roadmap/frontend/js/this/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">this 关键字</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="this-关键字"> this 关键字</h1>
<p>JavaScript 中的 <code>this</code> 关键字与其他语言略有不同，<strong>在绝大多数情况下，函数的调用方式决定了 <code>this</code> 的值（运行时绑定）</strong>。<code>this</code> 不能在执行期间被赋值，并且在每次函数被调用时 <code>this</code> 的值也可能不同。</p>
<p>ES5 引入了 <code>bind</code> 方法来设置函数的 <code>this</code> 值，而不用考虑函数是如何被调用的。同时，箭头函数不提供自身的 <code>this</code> 绑定。</p>
<p>在不同模式下，<code>this</code> 返回的值有所不同：</p>
<div><pre><code><span>// 普通模式下，this 永远指向一个对象。默认为全局对象</span>
<span>function</span> <span>f1</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>this</span><span>;</span>
<span>}</span>

<span>// 在浏览器中</span>
<span>f1</span><span>(</span><span>)</span> <span>===</span> window<span>;</span> <span>// true</span>

<span>// 在 Node 中：</span>
<span>f1</span><span>(</span><span>)</span> <span>===</span> globalThis<span>;</span> <span>// true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><div><pre><code><span>// 在严格模式下，this 可以是任意值。如果没有设置，保持为 undefined</span>
<span>function</span> <span>f2</span><span>(</span><span>)</span> <span>{</span>
    <span>"use strict"</span> <span>// 严格模式</span>
    <span>return</span> <span>this</span><span>;</span>
<span>}</span>

<span>// 直接调用，没有在进行执行环境时设置 this 的值，保持 undefined</span>
<span>f1</span><span>(</span><span>)</span> <span>===</span> <span>undefined</span><span>;</span> <span>// true</span>

<span>// 通过 window 进入执行环境，此时 this 的值应为 window</span>
window<span>.</span><span>f2</span><span>(</span><span>)</span> <span>===</span> window<span>;</span> <span>// true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>上面两个例子可以很好的说明 <code>this</code> 的用法以及指向。</p>
<h2 id="对象上下文"> 对象上下文</h2>
<p>当调用一个对象中的方法时，函数内的 <code>this</code> 是会绑定到对象上的。</p>
<div><pre><code><span>var</span> o <span>=</span> <span>{</span>
  prop<span>:</span> <span>37</span><span>,</span>
  <span>f</span><span>:</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>this</span><span>.</span>prop<span>;</span>
  <span>}</span>
<span>}</span><span>;</span>

console<span>.</span><span>log</span><span>(</span>o<span>.</span><span>f</span><span>(</span><span>)</span><span>)</span><span>;</span> <span>// 37</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="函数上下文"> 函数上下文</h2>
<p>一个对象（A）可以作为 <code>bind</code>、<code>apply</code>、<code>call</code> 函数的第一个参数绑定到另一个对象（B）上，此时对象（B）的 <code>this</code> 会指向对象（A）。如果没有指向，它默认就是 window 对象。</p>
<div><pre><code><span>var</span> obj <span>=</span> <span>{</span>a<span>:</span> <span>'Custom'</span><span>}</span><span>;</span>
<span>var</span> a <span>=</span> <span>'Global'</span><span>;</span>

<span>function</span> <span>whatsThis</span><span>(</span><span>)</span> <span>{</span>
  <span>return</span> <span>this</span><span>.</span>a<span>;</span>  <span>// this 的值取决于函数被调用的方式</span>
<span>}</span>

<span>whatsThis</span><span>(</span><span>)</span><span>;</span> <span>// 'Global' 因为在这个函数中 this 没有被设定，所以它默认为 全局/ window 对象</span>
<span>whatsThis</span><span>.</span><span>call</span><span>(</span>obj<span>)</span><span>;</span> <span>// 'Custom' 因为函数中的 this 被设置为obj</span>
<span>whatsThis</span><span>.</span><span>apply</span><span>(</span>obj<span>)</span><span>;</span> <span>// 'Custom' 因为函数中的 this 被设置为obj</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h3 id="this-和对象转换"> this 和对象转换</h3>
<p>在非严格模式下，使用 <code>call</code> 和 <code>apply</code> 时，如果用作 <code>this</code> 的值不是对象，则会尝试将其转换为对象，<code>null</code> 与 <code>undefined</code> 全部被转换为全局对象。例如：<code>7 =&gt; new Number(7)</code>：</p>
<div><pre><code><span>function</span> <span>bar</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>Object</span><span>.</span>prototype<span>.</span><span>toString</span><span>.</span><span>call</span><span>(</span><span>this</span><span>)</span><span>)</span><span>;</span>
<span>}</span>

<span>bar</span><span>.</span><span>call</span><span>(</span><span>7</span><span>)</span><span>;</span>     <span>// [object Number]</span>
<span>bar</span><span>.</span><span>call</span><span>(</span><span>'foo'</span><span>)</span><span>;</span> <span>// [object String]</span>
<span>bar</span><span>.</span><span>call</span><span>(</span><span>undefined</span><span>)</span><span>;</span> <span>// [object global]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id="箭头函数"> 箭头函数</h3>
<p>在箭头函数中，<code>this</code> 与封闭词法环境的 <code>this</code> 保持一致：</p>
<ul>
<li>全局代码中，<code>this</code> 为全局对象</li>
<li>函数中，为当前调用对象</li>
</ul>
<p>如果将 <code>this</code> 传递给 <code>call</code>、<code>apply</code>、 或 <code>bind</code> 来调用箭头函数，它将被忽略，不过仍然可以传递参数。最好的方法，第一个参数应该设置为 <code>null</code>。</p>
<div><pre><code><span>// 刚接触到 JavaScript 的时候，对于这样的 this 绑定一定头疼过</span>
<span>var</span> obj <span>=</span> <span>{</span>
    <span>bar</span><span>:</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
        <span>var</span> x <span>=</span> <span>(</span><span>(</span><span>)</span> <span>=></span> <span>this</span><span>)</span><span>;</span>
        <span>return</span> x<span>;</span>
    <span>}</span>
<span>}</span>

<span>var</span> fn <span>=</span> obj<span>.</span><span>bar</span><span>(</span><span>)</span><span>;</span>
<span>fn</span><span>(</span><span>)</span> <span>===</span> obj<span>;</span>

<span>var</span> fn2 <span>=</span> obj<span>.</span>bar<span>;</span>
<span>fn2</span><span>(</span><span>)</span><span>(</span><span>)</span> <span>===</span> window<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><div><p>解析</p>
<p><code>obj</code> 是一个对象，它内里面有一个 <code>bar</code> 属性，该属性绑定了一个匿名方法，这个匿名方法返回了一个 <code>x</code> 对象，该对象同样绑定了一个匿名的箭头函数，返回的一个 <code>this</code>，这个 <code>this</code> 指向的是 <code>bar</code> 所引用的匿名方法，这点要清楚。</p>
<p>当我们创建 <code>fn</code> 时，<code>fn</code> 绑定了 <code>obj.bar()</code>，这里直接执行了 <code>bar()</code>，是通过 <code>obj</code> 执行的，所以 <code>bar</code> 所绑定的匿名方法的 <code>this</code>，此时指向的是 <code>obj</code>，所以当执行 <code>fn()</code> 的时候，返回的自然是 <code>obj</code>，故 <code>fn() === obj</code> 为 <code>true</code>。</p>
<p>如果第一步清楚了，再看 <code>fn2</code>。它绑定的是 <code>obj.bar</code>，也就是说 <code>fn2</code> 节间绑定了 <code>bar</code> 所绑定的匿名函数，好，那么也表示 <code>fn2</code> 绑定了一个匿名函数。此时执行 <code>fn2()</code>，它应该返回 <code>x</code> 的内容，也就是 <code>(() =&gt; this)</code>，但是 <code>fn2()</code> 是在全局下执行的，所以此时 <code>fn2</code> 的 <code>this</code> 应该是 <code>window</code>，那么再执行一次 <code>fn2()</code> 的结果，也就是 <code>fn2()()</code>，此时返回了 <code>this</code>，也就是 <code>window</code>。所以 <code>fn2()() === window</code> 也为 <code>true</code>。</p>
</div>
<h3 id="bind-方法"> bind 方法</h3>
<p><code>bind</code> 会创建一个与调用者相同函数体和作用域的函数，并且将其永久地绑定到 <code>bind</code> 的第一个参数上，无论它后续是如何调用的。同时，<code>bind</code> 只生效一次。</p>
<div><pre><code><span>function</span> <span>f</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>this</span><span>.</span>a<span>;</span>
<span>}</span>

<span>var</span> a <span>=</span> <span>"a"</span><span>;</span>

<span>var</span> g <span>=</span> <span>f</span><span>.</span><span>bind</span><span>(</span><span>{</span>a<span>:</span> <span>"g"</span><span>}</span><span>)</span><span>;</span>
<span>var</span> h <span>=</span> <span>f</span><span>.</span><span>bind</span><span>(</span><span>{</span>a<span>:</span> <span>"h"</span><span>}</span><span>)</span><span>;</span>

console<span>.</span><span>log</span><span>(</span><span>g</span><span>(</span><span>)</span><span>)</span><span>;</span> <span>// g</span>
console<span>.</span><span>log</span><span>(</span><span>h</span><span>(</span><span>)</span><span>)</span><span>;</span> <span>// h</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h4 id="手写-bind"> 手写 bind</h4>
<p>手写 <code>bind</code> 方法需要注意几点：</p>
<ul>
<li>它会返回一个新的函数，并且不执行</li>
<li>处理绑定的对象，如果没有应当绑定 <code>window</code></li>
<li>支持多个参数，使用列表元素填充参数列表</li>
<li>使用 <code>new</code> 关键字进行构造时，应当有类的原型</li>
</ul>
<div><pre><code><span>Function</span><span>.</span>prototype<span>.</span><span>myBind</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    <span>// 参数转列表</span>
    <span>var</span> args <span>=</span> <span>Array</span><span>.</span>prototype<span>.</span><span>slice</span><span>.</span><span>call</span><span>(</span>arguments<span>)</span><span>;</span>
    <span>// 取出第一个参数，作为要 bind 的对象</span>
    <span>var</span> contenxt <span>=</span> args<span>.</span><span>shift</span><span>(</span><span>)</span><span>;</span>
    <span>// 保存当前 this</span>
    <span>var</span> self <span>=</span> <span>this</span><span>;</span>

    <span>// 创建一个空方法</span>
    <span>var</span> <span>Fn</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span><span>}</span><span>;</span>

    <span>var</span> <span>result</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
        <span>// 获取执行时的参数</span>
        <span>var</span> rest <span>=</span> <span>Array</span><span>.</span>prototype<span>.</span><span>slice</span><span>.</span><span>call</span><span>(</span>arguments<span>)</span><span>;</span>
        <span>self</span><span>.</span><span>apply</span><span>(</span><span>this</span> <span>instanceof</span> <span>Fn</span> <span>?</span> <span>this</span> <span>:</span> contenxt<span>,</span> args<span>.</span><span>concat</span><span>(</span>rest<span>)</span><span>)</span><span>;</span>
    <span>}</span>

    <span>// 通过 new 创建的，重新绑定原型链</span>
    result<span>.</span>prototype <span>=</span> <span>this</span><span>.</span>prototype<span>;</span>
    <span>return</span> result<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><h3 id="call-方法与-apply-方法"> call 方法与 apply 方法</h3>
<p>这两个方法也可以改变 <code>this</code> 的指向，与 <code>bind</code> 不同的是，它们是立即执行方法。</p>
<p>它们之间的区别也很简单，<code>call</code> 接受的是一个参数列表，而 <code>apply</code> 接受的是一个包含多个参数的数组。</p>
<div><pre><code><span>function</span><span>.</span><span>call</span><span>(</span>thisArg<span>,</span> arg1<span>,</span> arg2<span>,</span> <span>...</span><span>)</span>
<span>function</span><span>.</span><span>apply</span><span>(</span>thisArg<span>,</span> <span>[</span>argsArray<span>]</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>使用 <code>call</code> 或 <code>apply</code> 都可以改变 <code>this</code> 的指向，这在很多时候都非常有用。</p>
<h4 id="手写-call"> 手写 call</h4>
<p>手写 <code>call</code> 方法需要注意的是，该方法接受的是一个参数列表：</p>
<div><pre><code><span>Function</span><span>.</span>prototype<span>.</span><span>myCall</span> <span>=</span> <span>function</span><span>(</span><span>context</span><span>)</span> <span>{</span>
    <span>const</span> ctx <span>=</span> context <span>||</span> window<span>;</span>
    <span>// 获取参数列表</span>
    <span>var</span> args <span>=</span> <span>Array</span><span>.</span>prototype<span>.</span><span>slice</span><span>.</span><span>call</span><span>(</span>arguments<span>,</span> <span>1</span><span>)</span><span>;</span>
    ctx<span>.</span>fn <span>=</span> <span>this</span><span>;</span>
    ctx<span>.</span><span>fn</span><span>(</span><span>...</span>args<span>)</span><span>;</span>
    <span>delete</span> ctx<span>.</span>fn<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h4 id="手写-apply"> 手写 apply</h4>
<p>手写 <code>apply</code> 方法需要注意的是，该方法接受的是一个包含多个参数的数组：</p>
<div><pre><code><span>Function</span><span>.</span>prototype<span>.</span><span>myApply</span> <span>=</span> <span>function</span><span>(</span><span>context<span>,</span> arr</span><span>)</span> <span>{</span>
    <span>const</span> ctx <span>=</span> context <span>||</span> window<span>;</span>
    <span>// 获取参数数组</span>
    <span>if</span> <span>(</span>arr <span>&amp;&amp;</span> <span>!</span>Array<span>.</span><span>isArray</span><span>(</span>arr<span>)</span><span>)</span> <span>{</span>
        <span>throw</span> <span>new</span> <span>TypeError</span><span>(</span><span>"参数类型不正确"</span><span>)</span><span>;</span>
    <span>}</span>

    ctx<span>.</span>fn <span>=</span> <span>this</span><span>;</span>
    ctx<span>.</span><span>fn</span><span>(</span>arr<span>)</span><span>;</span>
    <span>delete</span> ctx<span>.</span>fn<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h3 id="构造函数"> 构造函数</h3>
<p>当一个函数用作构造函数时，它的 <code>this</code> 被绑定到正在构造的新对象上。</p>
<h2 id="类上下文"> 类上下文</h2>
<p><code>this</code> 在类中的表现与函数类似，因为类本身也是一种函数，在构造过程中，所有费静态方法都会被添加到 <code>this</code> 原型中。</p>
<div><pre><code><span>class</span> <span>Example</span> <span>{</span>
  <span>constructor</span><span>(</span><span>)</span> <span>{</span>
    <span>const</span> proto <span>=</span> Object<span>.</span><span>getPrototypeOf</span><span>(</span><span>this</span><span>)</span><span>;</span>
    console<span>.</span><span>log</span><span>(</span>Object<span>.</span><span>getOwnPropertyNames</span><span>(</span>proto<span>)</span><span>)</span><span>;</span>
  <span>}</span>
  <span>first</span><span>(</span><span>)</span><span>{</span><span>}</span>
  <span>second</span><span>(</span><span>)</span><span>{</span><span>}</span>
  <span>static</span> <span>third</span><span>(</span><span>)</span><span>{</span><span>}</span> <span>// 静态方法不会添加到 this 中。它是类本身的方法 / 属性</span>
<span>}</span>

<span>new</span> <span>Example</span><span>(</span><span>)</span><span>;</span> <span>// ['constructor', 'first', 'second']</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h3 id="类中的-this"> 类中的 this</h3>
<p>和普通函数一样，方法中的 <code>this</code> 值取决于它们何时被调用。</p>
<div><pre><code><span>class</span> <span>Car</span> <span>{</span>
  <span>constructor</span><span>(</span><span>)</span> <span>{</span>
    <span>// Bind sayBye but not sayHi to show the difference</span>
    <span>this</span><span>.</span>sayBye <span>=</span> <span>this</span><span>.</span><span>sayBye</span><span>.</span><span>bind</span><span>(</span><span>this</span><span>)</span><span>;</span>
  <span>}</span>
  <span>sayHi</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span><span>`</span><span>Hello from </span><span><span>${</span><span>this</span><span>.</span>name<span>}</span></span><span>`</span></span><span>)</span><span>;</span>
  <span>}</span>
  <span>sayBye</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span><span>`</span><span>Bye from </span><span><span>${</span><span>this</span><span>.</span>name<span>}</span></span><span>`</span></span><span>)</span><span>;</span>
  <span>}</span>
  <span>get</span> <span>name</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>'Ferrari'</span><span>;</span>
  <span>}</span>
<span>}</span>

<span>class</span> <span>Bird</span> <span>{</span>
  <span>get</span> <span>name</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>'Tweety'</span><span>;</span>
  <span>}</span>
<span>}</span>

<span>const</span> car <span>=</span> <span>new</span> <span>Car</span><span>(</span><span>)</span><span>;</span>
<span>const</span> bird <span>=</span> <span>new</span> <span>Bird</span><span>(</span><span>)</span><span>;</span>

<span>// The value of 'this' in methods depends on their caller</span>
car<span>.</span><span>sayHi</span><span>(</span><span>)</span><span>;</span> <span>// Hello from Ferrari</span>
bird<span>.</span>sayHi <span>=</span> car<span>.</span>sayHi<span>;</span>
bird<span>.</span><span>sayHi</span><span>(</span><span>)</span><span>;</span> <span>// Hello from Tweety</span>

<span>// For bound methods, 'this' doesn't depend on the caller</span>
bird<span>.</span>sayBye <span>=</span> car<span>.</span>sayBye<span>;</span>
bird<span>.</span><span>sayBye</span><span>(</span><span>)</span><span>;</span>  <span>// Bye from Ferrari</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br></div></div><h3 id="派生类"> 派生类</h3>
<p>与普通基类不同，派生类的构造函数没有初始的 <code>this</code> 绑定，而是在构造函数中通过调用 <code>super()</code> 生成一个 <code>this</code> 绑定，从而达到派生的效果。</p>
<p>具体可以参考 <a href="./prototype/#super-关键字">super 关键字</a></p>
<h2 id="原型链中的-this"> 原型链中的 this</h2>
<p>对于在对象原型链上某处定义的方法，<code>this</code> 调用该方法就像在指向对象上调用一样。</p>
<div><pre><code><span>var</span> o <span>=</span> <span>{</span>
  <span>f</span><span>:</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>this</span><span>.</span>a <span>+</span> <span>this</span><span>.</span>b<span>;</span>
  <span>}</span>
<span>}</span><span>;</span>
<span>var</span> p <span>=</span> Object<span>.</span><span>create</span><span>(</span>o<span>)</span><span>;</span>
p<span>.</span>a <span>=</span> <span>1</span><span>;</span>
p<span>.</span>b <span>=</span> <span>4</span><span>;</span>

console<span>.</span><span>log</span><span>(</span>p<span>.</span><span>f</span><span>(</span><span>)</span><span>)</span><span>;</span> <span>// 5</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>这里，对象 <code>p</code> 并没有 <code>f</code> 方法，但是其原型链中有，那么就可以直接使用，但原型链中没有 <code>a</code> 和 <code>b</code> 属性，<code>this</code> 可以始终指向 <code>p</code>，同时调用原型链上游的 <code>f</code> 属性，一切就像都在 <code>p</code> 中一样。（因为 <code>this</code> 始终是从 <code>p</code> 开始查找，所以它始终都会指向 <code>p</code>，这是原型链的特殊性）</p>
]]></content:encoded>
    </item>
    <item>
      <title>React 学习之路</title>
      <link>https://docs.jeremyjone.com/roadmap/frontend/react/</link>
      <guid>https://docs.jeremyjone.com/roadmap/frontend/react/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">React 学习之路</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="react-学习之路"> React 学习之路</h1>
<p>React 的学习之路，英文比中文新。</p>
<p><a href="https://github.com/adam-golab/react-developer-roadmap" target="_blank" rel="noopener noreferrer">英文</a></p>
<p><a href="https://github.com/adam-golab/react-developer-roadmap/blob/master/README-CN.md" target="_blank" rel="noopener noreferrer">中文</a></p>
<p><img src="https://github.com/adam-golab/react-developer-roadmap/raw/master/roadmap-cn.png" alt="react roadmap" /></p>
]]></content:encoded>
      <enclosure url="https://github.com/adam-golab/react-developer-roadmap/raw/master/roadmap-cn.png" type="image/png"/>
    </item>
    <item>
      <title>Vue 学习之路</title>
      <link>https://docs.jeremyjone.com/roadmap/frontend/vue/</link>
      <guid>https://docs.jeremyjone.com/roadmap/frontend/vue/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">Vue 学习之路</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="vue-学习之路"> Vue 学习之路</h1>
<p>Vue 的学习之路。</p>
]]></content:encoded>
    </item>
    <item>
      <title>组件</title>
      <link>https://docs.jeremyjone.com/roadmap/frontend/vue/basic/component/</link>
      <guid>https://docs.jeremyjone.com/roadmap/frontend/vue/basic/component/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">组件</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="组件"> 组件</h1>
<p>组件允许我们将 UI 划分为独立的、可重用的部分，并且可以对每个部分进行单独的思考。在实际应用中，组件常常被组织成层层嵌套的树状结构：</p>
<img :src="$withBase('/assets/roadmap/vue/component-base.png')" alt="component-base">
<h2 id="web-components"> Web Components</h2>
<p><code>Web Components</code> 是一套不同的技术，它允许创建可重复使用的定制元素。</p>
<p>它由三项主要技术组成：</p>
<ul>
<li><strong>Custom element</strong>：自定义元素，一组 JavaScript API，允许定义 custom elements 以及其行为，然后可以在界面中按照需要使用他们</li>
<li><strong>Shadow DOM</strong>：影子 DOM，一组 JavaScript API，用于将封装的影子 DOM 树附加到元素（与主文档 DOM 分开呈现）并控制其关联的功能。它可以保持元素功能私有，这样就可以被脚本化和样式化，同时不必担心冲突。</li>
<li><strong>HTML template</strong>：HTML 模板，<code>&lt;template&gt;</code> 和 <code>&lt;slot&gt;</code> 元素可以编写不在页面中呈现的标记模板，然后它们将作为自定义元素结构被多次使用。</li>
</ul>
<p><code>Vue</code> 为使用 <code>Web Components</code> 提供了非常出色的支持，它们是互补的。更多关于 <code>Web Components</code> 的内容可以参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/Web_Components" target="_blank" rel="noopener noreferrer">MDN</a> 或 <a href="https://www.webcomponents.org/" target="_blank" rel="noopener noreferrer">webcomponents.org</a></p>
<p>当然，<code>Vue</code> 与 <code>Web Components</code> 作为互补，在逻辑上也有一些区别，比如解析的过程。详细内容可以参考 <a href="https://cn.vuejs.org/guide/extras/web-components.html#using-custom-elements-in-vue" target="_blank" rel="noopener noreferrer">文档</a>。</p>
<h2 id="定义组件"> 定义组件</h2>
<p><code>Vue</code> 定义组件的方式有多种：</p>
<ul>
<li>单文件组件</li>
<li>对象组件</li>
</ul>
<p>通常情况下，都会使用单文件组件（SFC）来使用。它需要单独定义在 <code>.vue</code> 文件中，它包含三个部分：</p>
<ul>
<li>script：代码部分，这会抛出一个 vue 对象，包含所有数据与方法</li>
<li>template：模板部分，定义了该组件的结构</li>
<li>style：样式部分，定义了组件的样式</li>
</ul>
<div><pre><code><span><span><span>&lt;</span>script</span><span>></span></span><span><span>
<span>export</span> <span>default</span> <span>{</span>
  <span>data</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>{</span>
      count<span>:</span> <span>0</span>
    <span>}</span>
  <span>}</span>
<span>}</span>
</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>

<span><span><span>&lt;</span>template</span><span>></span></span>
  <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>"</span>count++<span>"</span></span><span>></span></span>You clicked me {{ count }} times.<span><span><span>&lt;/</span>button</span><span>></span></span>
<span><span><span>&lt;/</span>template</span><span>></span></span>

<span><span><span>&lt;</span>style</span><span>></span></span><span><span>
<span>button</span> <span>{</span>
  <span>width</span><span>:</span> 24px<span>;</span>
<span>}</span>
</span></span><span><span><span>&lt;/</span>style</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><h2 id="注册组件"> 注册组件</h2>
<h3 id="全局注册"> 全局注册</h3>
<p>通过全局注册的组件，可以在整个项目中使用。</p>
<ul>
<li>
<p>直接编写组件</p>
<div><pre><code><span>// vue2</span>
<span>import</span> Vue <span>from</span> <span>'vue'</span><span>;</span>
Vue<span>.</span><span>component</span><span>(</span><span>'my-component'</span><span>,</span> <span>{</span> <span>/* 组件的实现 */</span> <span>}</span><span>)</span><span>;</span>
<span>new</span> <span>Vue</span><span>(</span><span>{</span> el<span>:</span> <span>'#app'</span> <span>}</span><span>)</span><span>;</span>

<span>// vue3</span>
<span>import</span> <span>{</span> createApp <span>}</span> <span>from</span> <span>'vue'</span><span>;</span>
<span>const</span> app <span>=</span> <span>createApp</span><span>(</span><span>{</span><span>}</span><span>)</span><span>;</span>
app<span>.</span><span>component</span><span>(</span><span>'MyComponent'</span><span>,</span> <span>{</span>
    <span>// 组件的实现部分</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div></li>
<li>
<p>导入组件注册</p>
<div><pre><code><span>// vue2</span>
<span>import</span> Vue <span>from</span> <span>'vue'</span><span>;</span>
<span>import</span> MyComponent <span>from</span> <span>'./App.vue'</span>
Vue<span>.</span><span>component</span><span>(</span><span>'MyComponent'</span><span>,</span> MyComponent<span>)</span><span>;</span>
<span>new</span> <span>Vue</span><span>(</span><span>{</span> el<span>:</span> <span>'#app'</span> <span>}</span><span>)</span><span>;</span>

<span>// vue3</span>
<span>import</span> <span>{</span> createApp <span>}</span> <span>from</span> <span>'vue'</span><span>;</span>
<span>const</span> app <span>=</span> <span>createApp</span><span>(</span><span>{</span><span>}</span><span>)</span><span>;</span>
<span>import</span> MyComponent <span>from</span> <span>'./App.vue'</span>
app<span>.</span><span>component</span><span>(</span><span>'MyComponent'</span><span>,</span> MyComponent<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div></li>
</ul>
<h3 id="局部注册"> 局部注册</h3>
<p>当我们使用 SFC 定义一个组件之后，它就以默认导出的形式对外暴露自身。我们直接引入该文件即可。</p>
<div><pre><code><span><span><span>&lt;</span>script</span><span>></span></span><span><span>
<span>import</span> ButtonCounter <span>from</span> <span>'./ButtonCounter.vue'</span>

<span>export</span> <span>default</span> <span>{</span>
  components<span>:</span> <span>{</span>
    ButtonCounter
  <span>}</span>
<span>}</span>
</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>

<span><span><span>&lt;</span>template</span><span>></span></span>
  <span><span><span>&lt;</span>h1</span><span>></span></span>Here is a child component!<span><span><span>&lt;/</span>h1</span><span>></span></span>
  <span><span><span>&lt;</span>ButtonCounter</span> <span>/></span></span>
<span><span><span>&lt;/</span>template</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h2 id="动态组件"> 动态组件</h2>
<p>有时候，我们需要通过参数来控制一个地方展示不同的组件，可以通过动态组件来实现：</p>
<div><pre><code><span><span><span>&lt;</span>component</span> <span>:is</span><span><span>=</span><span>"</span>currentTab<span>"</span></span><span>></span></span><span><span><span>&lt;/</span>component</span><span>></span></span>
</code></pre>
<div><span>1</span><br></div></div><p><code>&lt;component&gt;</code> 是 Vue 的内置组件，用于渲染要替换的组件。</p>
<p><code>:is</code> 的值可以是：</p>
<ul>
<li>被注册的组件名</li>
<li>导入的组件对象</li>
</ul>
<p>当然，它也可以是一般的 HTML 元素，但不建议这样使用。</p>
<h2 id="数据是单向流的"> 数据是单向流的</h2>
<p>在父子组件传值中，数据永远是从父级流向子级的，并且在传递过程中，子级接收的数据永远应当是只读的。这意味着，我们不能修改 <code>props</code> 中接收的任何数据。</p>
<p>当我们确实需要改变该值时，应当想办法通知父级组件进行修改，这就用到了 <code>this.$emit()</code> 方法。</p>
<p>通过 <code>props</code> 和 <code>$emit()</code>，我们可以编写双向流动的数据结构。</p>
<h3 id="多层传递数据"> 多层传递数据</h3>
<p>默认情况下，数据只会在父子之间传递。如果一个父组件中的参数没有在子组件的 <code>props</code> 中定义，那么它会默认添加到子组件的根组件上。</p>
<p>这样做的好处可以很方便的给原生 HTML 元素添加属性，但也有很多不便。比如会覆盖子组件定义好的属性等等，也不会传递到其他地方。</p>
<p>当我们需要封装一些组件的时候，往往原生标签并不在根元素上。</p>
<p>想要接收这些属性，首先需要设置关闭属性穿透：</p>
<div><div><br><div>&nbsp;</div><br><br></div><pre><code><span>export</span> <span>default</span> <span>{</span>
  inheritAttrs<span>:</span> <span>false</span><span>;</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>然后，同样不必再在子组件中写 <code>props</code>，而是通过 <code>$attrs</code> 属性，使用 <code>v-bind</code> 方法绑定到非根元素即可：</p>
<div><div><br><br><div>&nbsp;</div><br><br></div><pre><code>// 在子组件中
<span><span><span>&lt;</span>div</span><span>></span></span> // 根节点
  <span><span><span>&lt;</span>child-component</span> <span>v-bind</span><span><span>=</span><span>"</span>$attrs<span>"</span></span><span>></span></span><span><span><span>&lt;/</span>child-component</span><span>></span></span> // 非根节点
<span><span><span>&lt;/</span>div</span><span>></span></span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>注意：在属性穿透中，<code>style</code> 和 <code>class</code> 属性不会受到 <code>inheritAttrs</code> 属性的影响，它会自动将父组件与子组件的值进行合并。</p>
<h2 id="传值-props"> 传值 Props</h2>
<p><code>props</code> 可以让子组件接收父组件传递的值。</p>
<h3 id="基础使用"> 基础使用</h3>
<div><div><br><div>&nbsp;</div><br><br></div><pre><code><span>export</span> <span>default</span> <span>{</span>
    props<span>:</span> <span>[</span><span>'title'</span><span>]</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id="定义参数类型"> 定义参数类型</h3>
<div><div><br><br><div>&nbsp;</div><br><br><br></div><pre><code><span>export</span> <span>default</span> <span>{</span>
  props<span>:</span> <span>{</span>
      title<span>:</span> String
  <span>}</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h4 id="typescript-中的自定义类型"> TypeScript 中的自定义类型</h4>
<p>js 中是没有自定义类型的，在 ts 中可以设定：</p>
<div><div><br><div>&nbsp;</div><br><br><br><br><br><br><br></div><pre><code>props<span>:</span> <span>{</span>
    prop1<span>:</span> Object <span>as</span> PropType<span>&lt;</span>CustomType<span>></span> 
<span>}</span>

<span>// vue3 允许提供一个自定义类或构造函数，它会通过 instanceof 方法来判断</span>
props<span>:</span> <span>{</span>
    prop1<span>:</span> CustomClass 
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h3 id="定义参数默认值"> 定义参数默认值</h3>
<div><div><br><br><br><div>&nbsp;</div><br><br><br></div><pre><code><span>export</span> <span>default</span> <span>{</span>
  props<span>:</span> <span>{</span>
      title<span>:</span> String<span>,</span>
      <span>default</span><span>:</span> <span>'标题'</span>
  <span>}</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>默认值里，引用对象需要传递方法：</p>
<div><div><br><br><br><div>&nbsp;</div><br><br><br></div><pre><code><span>export</span> <span>default</span> <span>{</span>
  props<span>:</span> <span>{</span>
      title<span>:</span> Object<span>,</span>
      <span>default</span><span>:</span> <span>(</span><span>)</span> <span>=></span> <span>(</span><span>{</span><span>}</span><span>)</span>
  <span>}</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id="数据的可选性"> 数据的可选性</h3>
<p>所有 <code>props</code> 参数都是可选的，在没有默认值的情况下，<code>Boolean</code> 类型会得到 false，除此之外的 <code>props</code> 会得到 <code>undefined</code>。</p>
<div><div><br><br><br><div>&nbsp;</div><br><br><br></div><pre><code><span>export</span> <span>default</span> <span>{</span>
  props<span>:</span> <span>{</span>
      title<span>:</span> String<span>,</span>
      required<span>:</span> <span>true</span>
  <span>}</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id="绑定多个属性"> 绑定多个属性</h3>
<p>直接在父组件绑定一个对象，它会自动解构成多个对象的键值进行单独绑定：</p>
<p>将该对象绑定到组件中：</p>
<div><pre><code>post<span>:</span> <span>{</span>
  id<span>:</span> <span>1</span><span>;</span>
  title<span>:</span> <span>'My Journey with Vue'</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><div><pre><code>// 父组件
<span><span><span>&lt;</span>blog-post</span> <span>v-bind</span><span><span>=</span><span>"</span>post<span>"</span></span><span>></span></span><span><span><span>&lt;/</span>blog-post</span><span>></span></span>

// 等价
<span><span><span>&lt;</span>blog-post</span> <span>:id</span><span><span>=</span><span>"</span>post.id<span>"</span></span> <span>:title</span><span><span>=</span><span>"</span>post.title<span>"</span></span><span>></span></span><span><span><span>&lt;/</span>blog-post</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id="数据的校验"> 数据的校验</h3>
<div><div><br><br><br><br><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><br><br><br></div><pre><code><span>export</span> <span>default</span> <span>{</span>
  props<span>:</span> <span>{</span>
      age<span>:</span> Number<span>,</span>
      required<span>:</span> <span>true</span><span>,</span>
      <span>validator</span><span>(</span><span>v</span><span>)</span> <span>{</span>
          <span>return</span> v <span>></span> <span>0</span><span>;</span>
      <span>}</span>
  <span>}</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h2 id="事件的触发与监听"> 事件的触发与监听</h2>
<p>在子组件中，触发事件需要通过 <code>this.$emit()</code> 来实现：</p>
<div><pre><code><span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>"</span>$emit(<span>'</span>someEvent<span>'</span>)<span>"</span></span><span>></span></span>click me<span><span><span>&lt;/</span>button</span><span>></span></span>
</code></pre>
<div><span>1</span><br></div></div><p>父组件通过 <code>v-on</code> 或 <code>@</code> 来监听事件：</p>
<div><pre><code><span><span><span>&lt;</span>MyButton</span> <span>@some-event</span><span><span>=</span><span>"</span>handleSomeEvent<span>"</span></span><span>></span></span><span><span><span>&lt;/</span>MyButton</span><span>></span></span>
</code></pre>
<div><span>1</span><br></div></div><p><code>$emit()</code> 方法第一个参数接收一个字符串，用于定义方法名，后面可以传递多个参数，如：</p>
<blockquote>
<p><code>$emit('click-me', 1, 2, 3)</code>，这样在父组件可以接收到多个参数。</p>
</blockquote>
<h3 id="原生事件与自定义事件"> 原生事件与自定义事件</h3>
<p><code>$emit</code> 可以定义各种事件，当我们需要原生事件时，不用另外定义。但有时候，我们需要对原生事件进行修改，比如：点击子组件，需要向外传递一个自定义数据，而不是默认 Event 的时候：</p>
<div><pre><code><span>this</span><span>.</span><span>$emit</span><span>(</span><span>'click'</span><span>,</span> data<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><p>这样，子组件中的原生事件就被自定义 <code>click</code> 事件所替代。</p>
<p>同时，我们还可以定义自定义事件，名字随便起，基本没有什么限制。</p>
<p>在使用时需要注意，事件名不同于 <code>props</code>，它不存在大小写转换，如果我们定义了 <code>this.$emit('myEvent')</code>，那么在父组件中，必须使用 <code>@myEvent=&quot;&quot;</code> 来接收，如果使用 <code>@my-event=&quot;&quot;</code> 是不会监听到任何事件的。</p>
<h3 id="与原生事件的区别"> 与原生事件的区别</h3>
<ul>
<li>没有冒泡</li>
<li>当与原生事件重名时，优先使用自定义事件，原生事件不会生效</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>双向绑定</title>
      <link>https://docs.jeremyjone.com/roadmap/frontend/vue/basic/v-model/</link>
      <guid>https://docs.jeremyjone.com/roadmap/frontend/vue/basic/v-model/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">双向绑定</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="双向绑定"> 双向绑定</h1>
<p>在 Vue 中，双向绑定是一个非常实用的技术。它本身是用来进行表单的输入绑定。</p>
<div><pre><code><span><span><span>&lt;</span>input</span> <span>:value</span><span><span>=</span><span>"</span>text<span>"</span></span> <span>@input</span><span><span>=</span><span>"</span>e => text = e.target.value<span>"</span></span> <span>/></span></span>
</code></pre>
<div><span>1</span><br></div></div><p>它等效于</p>
<div><pre><code><span><span><span>&lt;</span>input</span> <span>v-model</span><span><span>=</span><span>"</span>text<span>"</span></span> <span>/></span></span>
</code></pre>
<div><span>1</span><br></div></div><p>这极大简化了开发成本。</p>
<h2 id="在组件上使用"> 在组件上使用</h2>
<p>很多时候，这种双向绑定机制希望可以在更多地方使用，幸运的是，通过自定义事件，我们可以在任何组件实现数据的双向绑定，这可以大大提高生产效率。</p>
<p>父组件向子组件传递一个 <code>value</code>，子组件通过 <code>$emit('input', value)</code> 将值返回给父组件即可。</p>
<img :src="$withBase('/assets/roadmap/vue/v-model.png')" alt="v-model">
<h3 id="vue2-中的实现"> vue2 中的实现</h3>
<div><pre><code><span><span><span>&lt;</span>custom-component</span> <span>:value</span><span><span>=</span><span>"</span>value<span>"</span></span> <span>@input</span><span><span>=</span><span>"</span>v => value = v<span>"</span></span> <span>/></span></span>
</code></pre>
<div><span>1</span><br></div></div><p>它等效于</p>
<div><pre><code><span><span><span>&lt;</span>custom-component</span> <span>v-model</span><span><span>=</span><span>"</span>value<span>"</span></span> <span>/></span></span>
</code></pre>
<div><span>1</span><br></div></div><p>vue2 中，默认是 <code>value</code> 参数接收 <code>v-model</code> 的参数。有时候，我们需要改变参数名，可以通过 <code>model</code> 选项来实现：</p>
<div><div><br><br><br><br><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><br><br></div><pre><code><span>export</span> <span>default</span> <span>{</span>
    props<span>:</span> <span>{</span>
        checked<span>:</span> Boolean
    <span>}</span><span>,</span>
    model<span>:</span> <span>{</span>
        prop<span>:</span> <span>'checked'</span><span>,</span>  <span>// 将 checked 等效于 value</span>
        event<span>:</span> <span>'change'</span>   <span>// 将 change 事件等效于 input</span>
    <span>}</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>此时，外部仍然使用 <code>v-model</code>，它会自动绑定到 <code>checked</code> 属性上，并监听 <code>change</code> 事件。</p>
<p>此外，在 <code>2.3.0+</code> 中，推荐使用以 <code>update</code> 开头并附加属性名的事件替代 <code>input</code>（<code>update:myPropName</code>），为了方便这样的使用，提供了一个新的解决方案，一个全新的 <code>.sync</code> 修饰符：</p>
<div><pre><code><span><span><span>&lt;</span>text-document</span> <span><span>v-bind:</span>title.sync</span><span><span>=</span><span>"</span>doc.title<span>"</span></span><span>></span></span><span><span><span>&lt;/</span>text-document</span><span>></span></span>
</code></pre>
<div><span>1</span><br></div></div><p>它等效于：</p>
<div><pre><code><span><span><span>&lt;</span>text-document</span>
  <span><span>v-bind:</span>title</span><span><span>=</span><span>"</span>doc.title<span>"</span></span>
  <span><span>v-on:</span><span>update:</span>title</span><span><span>=</span><span>"</span>doc.title = $event<span>"</span></span>
<span>></span></span><span><span><span>&lt;/</span>text-document</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id="vue3-中的实现"> vue3 中的实现</h3>
<p>在 vue3 中，默认使用 <code>modelValue</code> 作为参数，自定义事件继承了 <code>2.3.0+</code> 的实现方式，应该以 <code>update</code> 开头：</p>
<div><pre><code><span><span><span>&lt;</span>custom-component</span> <span>:modelValue</span><span><span>=</span><span>"</span>value<span>"</span></span> <span><span>@update:</span>modelValue</span><span><span>=</span><span>"</span>v => value = v<span>"</span></span> <span>/></span></span>
</code></pre>
<div><span>1</span><br></div></div><p>它等效于</p>
<div><pre><code><span><span><span>&lt;</span>custom-component</span> <span>v-model</span><span><span>=</span><span>"</span>value<span>"</span></span> <span>/></span></span>
</code></pre>
<div><span>1</span><br></div></div><p>子组件的实现：</p>
<div><pre><code><span><span><span>&lt;</span>script</span><span>></span></span><span><span>
<span>export</span> <span>default</span> <span>{</span>
  props<span>:</span> <span>[</span><span>'modelValue'</span><span>]</span><span>,</span>
  emits<span>:</span> <span>[</span><span>'update:modelValue'</span><span>]</span>
<span>}</span>
</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>

<span><span><span>&lt;</span>template</span><span>></span></span>
  <span><span><span>&lt;</span>input</span>
    <span>:value</span><span><span>=</span><span>"</span>modelValue<span>"</span></span>
    <span>@input</span><span><span>=</span><span>"</span>$emit(<span>'</span>update:modelValue<span>'</span>, $event.target.value)<span>"</span></span>
  <span>/></span></span>
<span><span><span>&lt;/</span>template</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>我们可以通过显式的给出一个参数名，来绑定指定名称：</p>
<div><pre><code><span><span><span>&lt;</span>MyComponent</span> <span><span>v-model:</span>title</span><span><span>=</span><span>"</span>bookTitle<span>"</span></span> <span>/></span></span>
</code></pre>
<div><span>1</span><br></div></div><p>它对应的子组件实现：</p>
<div><pre><code><span><span><span>&lt;</span>script</span><span>></span></span><span><span>
<span>export</span> <span>default</span> <span>{</span>
  props<span>:</span> <span>[</span><span>'title'</span><span>]</span><span>,</span>
  emits<span>:</span> <span>[</span><span>'update:title'</span><span>]</span>
<span>}</span>
</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>

<span><span><span>&lt;</span>template</span><span>></span></span>
  <span><span><span>&lt;</span>input</span>
    <span>type</span><span><span>=</span><span>"</span>text<span>"</span></span>
    <span>:value</span><span><span>=</span><span>"</span>title<span>"</span></span>
    <span>@input</span><span><span>=</span><span>"</span>$emit(<span>'</span>update:title<span>'</span>, $event.target.value)<span>"</span></span>
  <span>/></span></span>
<span><span><span>&lt;/</span>template</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>因为这样的方式，vue3 可以完成多个参数绑定：</p>
<div><pre><code><span><span><span>&lt;</span>UserName</span>
  <span><span>v-model:</span>first-name</span><span><span>=</span><span>"</span>first<span>"</span></span>
  <span><span>v-model:</span>last-name</span><span><span>=</span><span>"</span>last<span>"</span></span>
<span>/></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>对应的子组件：</p>
<div><pre><code><span><span><span>&lt;</span>script</span><span>></span></span><span><span>
<span>export</span> <span>default</span> <span>{</span>
  props<span>:</span> <span>{</span>
    firstName<span>:</span> String<span>,</span>
    lastName<span>:</span> String
  <span>}</span><span>,</span>
  emits<span>:</span> <span>[</span><span>'update:firstName'</span><span>,</span> <span>'update:lastName'</span><span>]</span>
<span>}</span>
</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>

<span><span><span>&lt;</span>template</span><span>></span></span>
  <span><span><span>&lt;</span>input</span>
    <span>type</span><span><span>=</span><span>"</span>text<span>"</span></span>
    <span>:value</span><span><span>=</span><span>"</span>firstName<span>"</span></span>
    <span>@input</span><span><span>=</span><span>"</span>$emit(<span>'</span>update:firstName<span>'</span>, $event.target.value)<span>"</span></span>
  <span>/></span></span>
  <span><span><span>&lt;</span>input</span>
    <span>type</span><span><span>=</span><span>"</span>text<span>"</span></span>
    <span>:value</span><span><span>=</span><span>"</span>lastName<span>"</span></span>
    <span>@input</span><span><span>=</span><span>"</span>$emit(<span>'</span>update:lastName<span>'</span>, $event.target.value)<span>"</span></span>
  <span>/></span></span>
<span><span><span>&lt;/</span>template</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><h3 id="自定义修饰符"> 自定义修饰符</h3>
<p>vue3中，修饰符会自动包装在 <code>modelModifiers</code> 中，它需要显式的在 <code>props</code> 中声明：</p>
<div><pre><code><span>export</span> <span>default</span> <span>{</span>
    props<span>:</span> <span>{</span>
        modelValue<span>:</span> String<span>,</span>
        modelModifiers<span>:</span> <span>{</span>
            <span>default</span><span>:</span> <span>(</span><span>)</span> <span>=></span> <span>(</span><span>{</span><span>}</span><span>)</span>
        <span>}</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>然后就可以使用自定义内容了。它们都是 bool 值。</p>
<p>对于类似 <code>&lt;MyComponent v-model:title.capitalize=&quot;bookTitle&quot; /&gt;</code> 这样的自定义属性绑定，同样可以使用自定义的方式：</p>
<div><pre><code>export default {
    props: {
        titleValue: String,
        titleModifiers: {
            default: () => ({})
        }
    },
    emits: ['update:title'],
    created() {
        console.log(this.titleModifiers) // { capitalize: true }
    }
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>UI 框架</title>
      <link>https://docs.jeremyjone.com/roadmap/frontend/vue/framework/</link>
      <guid>https://docs.jeremyjone.com/roadmap/frontend/vue/framework/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">UI 框架</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="ui-框架"> UI 框架</h1>
]]></content:encoded>
    </item>
    <item>
      <title>MVVM</title>
      <link>https://docs.jeremyjone.com/roadmap/frontend/vue/mvvm/</link>
      <guid>https://docs.jeremyjone.com/roadmap/frontend/vue/mvvm/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">MVVM</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="mvvm"> MVVM</h1>
]]></content:encoded>
    </item>
    <item>
      <title>Vue Test Utils</title>
      <link>https://docs.jeremyjone.com/roadmap/frontend/vue/supports/test/</link>
      <guid>https://docs.jeremyjone.com/roadmap/frontend/vue/supports/test/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">Vue Test Utils</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="vue-test-utils"> Vue Test Utils</h1>
<h2 id="jest"> Jest</h2>
]]></content:encoded>
    </item>
    <item>
      <title>Devtools</title>
      <link>https://docs.jeremyjone.com/roadmap/frontend/vue/supports/tools/</link>
      <guid>https://docs.jeremyjone.com/roadmap/frontend/vue/supports/tools/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">Devtools</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="devtools"> Devtools</h1>
]]></content:encoded>
    </item>
    <item>
      <title>Vuex</title>
      <link>https://docs.jeremyjone.com/roadmap/frontend/vue/supports/vuex/</link>
      <guid>https://docs.jeremyjone.com/roadmap/frontend/vue/supports/vuex/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">Vuex</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="vuex"> Vuex</h1>
<h2 id="state"> State</h2>
<h2 id="getter"> Getter</h2>
<h2 id="mutation"> Mutation</h2>
<h2 id="action"> Action</h2>
<h2 id="module"> Module</h2>
]]></content:encoded>
    </item>
    <item>
      <title>使用项目模板</title>
      <link>https://docs.jeremyjone.com/roadmap/frontend/vue/template/</link>
      <guid>https://docs.jeremyjone.com/roadmap/frontend/vue/template/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">使用项目模板</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="使用项目模板"> 使用项目模板</h1>
<h2 id="如何添加模板"> 如何添加模板</h2>
<h3 id="方法一"> 方法一</h3>
<p>通过 <a href="https://github.com/Rich-Harris/degit" target="_blank" rel="noopener noreferrer"><code>degit</code></a> 安装：</p>
<p>首先安装 <code>degit</code></p>
<div><pre><code><span>npm</span> <span>install</span> -g degit
</code></pre>
<div><span>1</span><br></div></div><p>然后可以下载模板。例如：</p>
<div><pre><code>npx degit jeremyjone/<span>&lt;</span>repertory_name<span>></span> <span>&lt;</span>project-name<span>></span>
</code></pre>
<div><span>1</span><br></div></div><div><p>提示</p>
<p>方法一创建的项目模板不包含 <code>git</code>，需要进入目录后手动执行 <code>git init</code> 方可。</p>
</div>
<h3 id="方法二"> 方法二</h3>
<p>可以直接 clone 项目到本地即可。例如：</p>
<div><pre><code><span>git</span> clone https://github.com/jeremyjone/<span>&lt;</span>repertory_name<span>></span>.git
<span>mv</span> <span>&lt;</span>repertory_name<span>></span> <span>&lt;</span>project-name<span>></span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h2 id="模板地址"> 模板地址</h2>
<ul>
<li><a href="https://github.com/jeremyjone/vue3-ts-template" target="_blank" rel="noopener noreferrer">vue3-ts-template</a> - 包括 <code>vue 3</code>、<code>vue-router 4</code>、<code>axios</code>、<code>vuex 4</code>、<code>vite 2</code> 等工程化项目模板。</li>
</ul>
<h2 id="社区模板"> 社区模板</h2>
<p>vite 社区提供了很多免费模板，可以 <a href="https://github.com/vitejs/awesome-vite#templates" target="_blank" rel="noopener noreferrer">参考</a>。</p>
]]></content:encoded>
    </item>
    <item>
      <title>从 0 搭建项目模板（vue3）</title>
      <link>https://docs.jeremyjone.com/roadmap/frontend/vue/template/setup-from-0/</link>
      <guid>https://docs.jeremyjone.com/roadmap/frontend/vue/template/setup-from-0/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">从 0 搭建项目模板（vue3）</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="从-0-搭建项目模板（vue3）"> 从 0 搭建项目模板（vue3）</h1>
<p>为简化每次初始化项目，最好的方法就是搭建一个项目模板，这样每次初始化的时候直接拉取就好，不用再一个一个进行配置，省去了大量时间。</p>
<p>该内容模板已经在 <a href="https://github.com/jeremyjone/vue3-ts-template" target="_blank" rel="noopener noreferrer">Github</a>，如果需要，可以直接下载使用。具体使用方法可以查看 <a href="https://github.com/jeremyjone/vue3-ts-template" target="_blank" rel="noopener noreferrer">Github</a> 或者 <a href="./">模板文档</a></p>
<h2 id="项目技术方案"> 项目技术方案</h2>
<p>这套模板采用如下方案：</p>
<ul>
<li>搭建工具 <a href="https://cn.vitejs.dev/" target="_blank" rel="noopener noreferrer">vite 2.x</a></li>
<li>项目框架 <a href="https://v3.cn.vuejs.org/" target="_blank" rel="noopener noreferrer">vue 3.x</a></li>
<li>网络连接 <a href="https://axios-http.com/" target="_blank" rel="noopener noreferrer">axios 4.x</a></li>
<li>路由工具 <a href="https://next.router.vuejs.org/zh/index.html" target="_blank" rel="noopener noreferrer">vue-router 4.x</a></li>
<li>状态管理 <a href="https://next.vuex.vuejs.org/zh/guide" target="_blank" rel="noopener noreferrer">vuex 4.x</a></li>
<li>编程语言 <a href="https://www.typescriptlang.org/" target="_blank" rel="noopener noreferrer">TypeScript</a></li>
</ul>
<p>同时预装了如下内容：</p>
<ul>
<li>CSS 编译<sup></sup> <a href="https://www.sass.hk/docs/" target="_blank" rel="noopener noreferrer">sass</a> / <a href="https://less.bootcss.com/" target="_blank" rel="noopener noreferrer">less</a> / <a href="https://www.stylus-lang.cn/" target="_blank" rel="noopener noreferrer">stylus</a></li>
<li>单元测试 <a href="https://next.vue-test-utils.vuejs.org/guide/" target="_blank" rel="noopener noreferrer">vue-test-utils</a> + <a href="https://jestjs.io/" target="_blank" rel="noopener noreferrer">jest</a></li>
<li>代码规范 <a href="https://eslint.org/" target="_blank" rel="noopener noreferrer">eslint</a> + <a href="https://prettier.io/" target="_blank" rel="noopener noreferrer">prettier</a></li>
<li>提交规范 <a href="https://github.com/commitizen/cz-cli" target="_blank" rel="noopener noreferrer">commitizen</a> + <a href="https://commitlint.js.org/#/" target="_blank" rel="noopener noreferrer">commitlint</a> + <a href="https://github.com/conventional-changelog/standard-version" target="_blank" rel="noopener noreferrer">standard-version</a></li>
<li>Git hooks <a href="https://typicode.github.io/husky" target="_blank" rel="noopener noreferrer">husky</a></li>
</ul>
<h2 id="项目结构"> 项目结构</h2>
<p>最终的目录文件结构如下图：</p>
<img :src="$withBase('/assets/roadmap/vue/template/template_dir.png')" alt="">
<blockquote>
<p>注：目录结构仅供参考，可以根据自行需求进行修改。</p>
</blockquote>
<h2 id="环境检测"> 环境检测</h2>
<p>因为采用了 <code>vite</code> 进行搭建，所以需要 <a href="https://nodejs.org/en/" target="_blank" rel="noopener noreferrer">Node.js</a> 版本 &gt;= 12.0.0。</p>
<p>查看版本的方法：</p>
<div><pre><code>node -v
</code></pre>
<div><span>1</span><br></div></div><img :src="$withBase('/assets/roadmap/vue/template/check_node_version.png')" alt="">
<h2 id="搭建项目结构"> 搭建项目结构</h2>
<h3 id="初始化项目"> 初始化项目</h3>
<p>首先使用 <code>vite</code> 创建项目。根据 <a href="https://cn.vitejs.dev/guide/#scaffolding-your-first-vite-project" target="_blank" rel="noopener noreferrer">vite 官方文档</a>，可以快速开始：</p>
<div><pre><code><span>npm</span> init vite@lastest
// or
<span>yarn</span> create vite
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><img :src="$withBase('/assets/roadmap/vue/template/create_app.png')" alt="">
<p>然后按照提示一步一步操作即可。</p>
<p>1、填写名称</p>
<p>这里填写 <code>vite-vue3-ts-template</code>，方便我们大致知道模板的架构。</p>
<p>2、选择框架</p>
<p>这里我们选择 <code>vue</code>，</p>
<img :src="$withBase('/assets/roadmap/vue/template/create_app_select_framework.png')" alt="">
<p>然后选择 <code>vue-ts</code>。</p>
<img :src="$withBase('/assets/roadmap/vue/template/create_app_select_ts.png')" alt="">
<p>这样，我们就成功初始化了一个项目。</p>
<img :src="$withBase('/assets/roadmap/vue/template/create_app_finish.png')" alt="">
<p>此时根据提示，进入项目根目录，并执行 <code>yarn</code> 命令，会自动安装相应的内容。</p>
<div><pre><code><span>cd</span> vite-vue3-ts-template
<span>yarn</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>在执行之后，启动项目，会看到已经成功运行了。</p>
<img :src="$withBase('/assets/roadmap/vue/template/app_first_run.png')" alt="">
<h3 id="整理项目结构"> 整理项目结构</h3>
<p>在 <code>src</code> 文件夹下，新建如下文件/文件夹：</p>
<div><pre><code>└── src/
    ├── assets/             <span># 静态资源目录</span>
    ├── components/         <span># 公共组件目录</span>
    ├── pages/              <span># 页面组件目录</span>
    ├── router/             <span># 路由配置目录</span>
    ├── store/              <span># 状态管理配置目录</span>
    ├── typings/            <span># 类型文件目录</span>
    ├── styles/             <span># 通用 CSS 目录</span>
    ├── utils/              <span># 工具方法目录</span>
    ├── App.vue             <span># 根组件</span>
    ├── env.d.ts            <span># vue 环境声明，不同版本的 vite 文件可能会有所差异</span>
    ├── main.ts             <span># 主文件</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>我们之后的内容，基本都是基于上面结构进行的。</p>
<h3 id="修改-vite-的配置文件"> 修改 vite 的配置文件</h3>
<p><code>vite</code> 的配置在根目录下的 <code>vite.config.ts</code> 中，我们根据需要进行一些修改：</p>
<div><pre><code><span>import</span> <span>{</span> defineConfig <span>}</span> <span>from</span> <span>"vite"</span><span>;</span>
<span>import</span> vue <span>from</span> <span>"@vitejs/plugin-vue"</span><span>;</span>
<span>import</span> <span>{</span> resolve <span>}</span> <span>from</span> <span>"path"</span><span>;</span>

<span>// https://vitejs.dev/config/</span>
<span>export</span> <span>default</span> <span>defineConfig</span><span>(</span><span>{</span>
  plugins<span>:</span> <span>[</span><span>vue</span><span>(</span><span>)</span><span>]</span><span>,</span>

  resolve<span>:</span> <span>{</span>
    <span>// 配置 @ 映射到 src 目录</span>
    alias<span>:</span> <span>{</span>
      <span>"@"</span><span>:</span> <span>resolve</span><span>(</span>__dirname<span>,</span> <span>"src"</span><span>)</span>
    <span>}</span>
  <span>}</span><span>,</span>
  base<span>:</span> <span>"./"</span><span>,</span> <span>// 打包路径</span>

  server<span>:</span> <span>{</span>
    port<span>:</span> <span>3000</span><span>,</span> <span>// 端口</span>
    open<span>:</span> <span>true</span><span>,</span> <span>// 启动打开浏览器</span>
    cors<span>:</span> <span>true</span><span>,</span> <span>// 跨域</span>
    proxy<span>:</span> <span>{</span>
      <span>"/api"</span><span>:</span> <span>{</span>
        target<span>:</span> <span>"http://localhost:8080/api/"</span><span>,</span> <span>// 目标地址</span>
        changeOrigin<span>:</span> <span>true</span><span>,</span> <span>// 修改源</span>
        secure<span>:</span> <span>false</span><span>,</span> <span>// ssl</span>
        <span>rewrite</span><span>:</span> path <span>=></span> path<span>.</span><span>replace</span><span>(</span><span>"/api/"</span><span>,</span> <span>"/"</span><span>)</span>
      <span>}</span>
    <span>}</span>
  <span>}</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div><div><p>提示</p>
<p>在这里，当导入 <code>&quot;path&quot;</code> 时，可能会提示 <code>找不到模块的类型声明</code>：</p>
<img :src="$withBase('/assets/roadmap/vue/template/cannot_find_path_module_declare.png')" alt="">
<p>此时按照提示直接安装 <code>@types/node</code> 即可。</p>
<p>或者手动安装：</p>
<div><pre><code><span>yarn</span> <span>add</span> @types/node -D
</code></pre>
<div><span>1</span><br></div></div></div>
<h3 id="安装网络工具-axios"> 安装网络工具 axios</h3>
<p>1、直接命令安装最新版即可：</p>
<div><pre><code><span>yarn</span> <span>add</span> axios
</code></pre>
<div><span>1</span><br></div></div><p>2、配置</p>
<p>为了方便使用，我们需要进行简单配置。</p>
<p>在 <code>utils</code> 文件夹下创建一个 <code>http</code> 的文件夹，并在其中创建一个 <code>index.ts</code> 文件，结构如下：</p>
<div><pre><code>src
└── utils/
    ├── http/
        ├── index.ts      <span># axios 配置文件</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>在文件中填入如下内容：</p>
<div><pre><code><span>import</span> Axios <span>from</span> <span>"axios"</span><span>;</span>

<span>const</span> baseURL <span>=</span> <span>""</span><span>;</span>
<span>const</span> axios <span>=</span> Axios<span>.</span><span>create</span><span>(</span><span>{</span>
  baseURL<span>,</span> <span>// 基础 url</span>
  timeout<span>:</span> <span>10000</span> <span>// 超时 10s</span>
<span>}</span><span>)</span><span>;</span>

<span>// 请求拦截器</span>
axios<span>.</span>interceptors<span>.</span>request<span>.</span><span>use</span><span>(</span>
  config <span>=></span> <span>{</span>
    <span>// TODO: 配置请求内容</span>

    <span>// config.headers.Authorization = `Bearer ${token}`;</span>
    <span>return</span> config<span>;</span>
  <span>}</span><span>,</span>
  error <span>=></span> <span>{</span>
    <span>return</span> <span>Promise</span><span>.</span><span>reject</span><span>(</span>error<span>)</span><span>;</span>
  <span>}</span>
<span>)</span><span>;</span>

<span>// 响应拦截器</span>
axios<span>.</span>interceptors<span>.</span>response<span>.</span><span>use</span><span>(</span>
  response <span>=></span> <span>{</span>
    <span>// TODO: 配置对响应内容的处理</span>

    <span>return</span> response<span>;</span>
  <span>}</span><span>,</span>
  error <span>=></span> <span>{</span>
    <span>let</span> <span>{</span> response <span>}</span> <span>=</span> error<span>;</span>
    <span>if</span> <span>(</span>error <span>&amp;&amp;</span> error<span>.</span>response<span>)</span> <span>{</span>
      <span>switch</span> <span>(</span>error<span>.</span>response<span>.</span>status<span>)</span> <span>{</span>
        <span>case</span> <span>400</span><span>:</span>
          response<span>.</span>message <span>=</span> <span>"未知错误"</span><span>;</span>
          <span>break</span><span>;</span>
        <span>case</span> <span>401</span><span>:</span>
          response<span>.</span>message <span>=</span> <span>"未授权"</span><span>;</span>
          <span>break</span><span>;</span>
        <span>case</span> <span>403</span><span>:</span>
          response<span>.</span>message <span>=</span> <span>"权限不足"</span><span>;</span>
          <span>break</span><span>;</span>
        <span>case</span> <span>404</span><span>:</span>
          response<span>.</span>message <span>=</span> <span>"数据不存在"</span><span>;</span>
          <span>break</span><span>;</span>
        <span>case</span> <span>405</span><span>:</span>
          response<span>.</span>message <span>=</span> <span>"不允许的请求方法"</span><span>;</span>
          <span>break</span><span>;</span>
        <span>case</span> <span>408</span><span>:</span>
          response<span>.</span>message <span>=</span> <span>"请求超时"</span><span>;</span>
          <span>break</span><span>;</span>
        <span>case</span> <span>415</span><span>:</span>
          response<span>.</span>message <span>=</span> <span>"不支持的媒体类型"</span><span>;</span>
          <span>break</span><span>;</span>
        <span>case</span> <span>500</span><span>:</span>
          response<span>.</span>message <span>=</span> <span>"服务器出现异常"</span><span>;</span>
          <span>break</span><span>;</span>
        <span>case</span> <span>501</span><span>:</span>
          response<span>.</span>message <span>=</span> <span>"网络未实现"</span><span>;</span>
          <span>break</span><span>;</span>
        <span>case</span> <span>502</span><span>:</span>
          response<span>.</span>message <span>=</span> <span>"网络错误"</span><span>;</span>
          <span>break</span><span>;</span>
        <span>case</span> <span>503</span><span>:</span>
          response<span>.</span>message <span>=</span> <span>"服务不可用"</span><span>;</span>
          <span>break</span><span>;</span>
        <span>case</span> <span>504</span><span>:</span>
          response<span>.</span>message <span>=</span> <span>"网络超时"</span><span>;</span>
          <span>break</span><span>;</span>
        <span>case</span> <span>505</span><span>:</span>
          response<span>.</span>message <span>=</span> <span>"http版本不支持该请求"</span><span>;</span>
          <span>break</span><span>;</span>
        <span>default</span><span>:</span>
          response<span>.</span>message <span>=</span> <span><span>`</span><span>其他错误。错误代码：</span><span><span>${</span>error<span>.</span>response<span>.</span>status<span>}</span></span><span>`</span></span><span>;</span>
      <span>}</span>
    <span>}</span> <span>else</span> <span>{</span>
      response <span>=</span> <span>{</span> message<span>:</span> <span>"无法连接到服务器！"</span> <span>}</span><span>;</span>
    <span>}</span>
    <span>return</span> <span>Promise</span><span>.</span><span>reject</span><span>(</span>response<span>)</span><span>;</span>
  <span>}</span>
<span>)</span><span>;</span>

<span>export</span> <span>default</span> axios<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br></div></div><p>3、封装使用方法</p>
<p>为了方便使用，我们最好将其常用的 <code>get</code>、<code>post</code>、<code>put</code>、<code>delete</code> 进行二次封装。</p>
<p>在 <code>index.ts</code> 同级目录下创建一个 <code>requests.ts</code> 文件，结构如下：</p>
<div><pre><code>src
└── utils/
    ├── http/
        ├── index.ts      <span># axios 配置文件</span>
        ├── requests.ts   <span># 方法封装</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>在文件中键入如下内容：</p>
<div><pre><code><span>import</span> axios <span>from</span> <span>"."</span><span>;</span>

<span>/**
 * @param  promise
 * @param errorExt - Additional Information you can pass to the err object
 */</span>
<span>function</span> <span><span>to</span><span><span>&lt;</span><span>T</span><span>,</span> <span>U</span> <span>=</span> <span>unknown</span><span>></span></span></span><span>(</span>
  promise<span>:</span> <span>Promise</span><span>&lt;</span><span>T</span><span>></span><span>,</span>
  errorExt<span>?</span><span>:</span> object
<span>)</span><span>:</span> <span>Promise</span><span>&lt;</span><span>[</span><span>U</span> <span>|</span> <span>null</span><span>,</span> <span>T</span> <span>|</span> <span>undefined</span><span>]</span><span>></span> <span>{</span>
  <span>return</span> promise
    <span>.</span><span><span>then</span><span><span>&lt;</span><span>[</span><span>null</span><span>,</span> <span>T</span><span>]</span><span>></span></span></span><span>(</span><span>(</span>data<span>:</span> <span>T</span><span>)</span> <span>=></span> <span>[</span><span>null</span><span>,</span> data<span>]</span><span>)</span>
    <span>.</span><span><span>catch</span><span><span>&lt;</span><span>[</span><span>U</span><span>,</span> <span>undefined</span><span>]</span><span>></span></span></span><span>(</span>err <span>=></span> <span>{</span>
      <span>if</span> <span>(</span>errorExt<span>)</span> <span>{</span>
        Object<span>.</span><span>assign</span><span>(</span>err<span>,</span> errorExt<span>)</span><span>;</span>
      <span>}</span>

      <span>return</span> <span>[</span>err<span>,</span> <span>undefined</span><span>]</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>
<span>}</span>

<span>/**
 * GET methods
 * @param url
 * @param data
 * @returns {Promise}
 */</span>
<span>export</span> <span>function</span> <span><span>get</span><span><span>&lt;</span><span>T</span><span>></span></span></span><span>(</span>url<span>:</span> <span>string</span><span>,</span> params <span>=</span> <span>{</span><span>}</span><span>)</span><span>:</span> <span>TO</span><span>&lt;</span><span>T</span><span>></span> <span>{</span>
  <span>return</span> <span>to</span><span>(</span>
    <span>new</span> <span><span>Promise</span></span><span>(</span><span>(</span>resolve<span>,</span> reject<span>)</span> <span>=></span> <span>{</span>
      axios
        <span>.</span><span>get</span><span>(</span>url<span>,</span> <span>{</span>
          params
        <span>}</span><span>)</span>
        <span>.</span><span>then</span><span>(</span>result <span>=></span> <span>{</span>
          <span>resolve</span><span>(</span>result<span>.</span>data <span>as</span> <span>T</span><span>)</span><span>;</span>
        <span>}</span><span>)</span>
        <span>.</span><span>catch</span><span>(</span>err <span>=></span> <span>{</span>
          <span>reject</span><span>(</span>err<span>)</span><span>;</span>
        <span>}</span><span>)</span><span>;</span>
    <span>}</span><span>)</span>
  <span>)</span><span>;</span>
<span>}</span>

<span>/**
 * POST methods
 * @param url
 * @param data
 * @returns {Promise}
 */</span>
<span>export</span> <span>function</span> <span><span>post</span><span><span>&lt;</span><span>T</span><span>></span></span></span><span>(</span>url<span>:</span> <span>string</span><span>,</span> data<span>?</span><span>:</span> Record<span>&lt;</span><span>string</span><span>,</span> <span>unknown</span><span>></span><span>)</span><span>:</span> <span>TO</span><span>&lt;</span><span>T</span><span>></span> <span>{</span>
  <span>return</span> <span>to</span><span>(</span>
    <span>new</span> <span><span>Promise</span></span><span>(</span><span>(</span>resolve<span>,</span> reject<span>)</span> <span>=></span> <span>{</span>
      axios
        <span>.</span><span>post</span><span>(</span>url<span>,</span> data<span>)</span>
        <span>.</span><span>then</span><span>(</span>result <span>=></span> <span>{</span>
          <span>resolve</span><span>(</span>result<span>.</span>data <span>as</span> <span>T</span><span>)</span><span>;</span>
        <span>}</span><span>)</span>
        <span>.</span><span>catch</span><span>(</span>err <span>=></span> <span>{</span>
          <span>reject</span><span>(</span>err<span>)</span><span>;</span>
        <span>}</span><span>)</span><span>;</span>
    <span>}</span><span>)</span>
  <span>)</span><span>;</span>
<span>}</span>

<span>/**
 * PUT methods
 * @param url
 * @param data
 * @returns {Promise}
 */</span>
<span>export</span> <span>function</span> <span><span>put</span><span><span>&lt;</span><span>T</span><span>></span></span></span><span>(</span>url<span>:</span> <span>string</span><span>,</span> data<span>?</span><span>:</span> Record<span>&lt;</span><span>string</span><span>,</span> <span>unknown</span><span>></span><span>)</span><span>:</span> <span>TO</span><span>&lt;</span><span>T</span><span>></span> <span>{</span>
  <span>return</span> <span>to</span><span>(</span>
    <span>new</span> <span><span>Promise</span></span><span>(</span><span>(</span>resolve<span>,</span> reject<span>)</span> <span>=></span> <span>{</span>
      axios
        <span>.</span><span>put</span><span>(</span>url<span>,</span> data<span>)</span>
        <span>.</span><span>then</span><span>(</span>result <span>=></span> <span>{</span>
          <span>resolve</span><span>(</span>result<span>.</span>data <span>as</span> <span>T</span><span>)</span><span>;</span>
        <span>}</span><span>)</span>
        <span>.</span><span>catch</span><span>(</span>err <span>=></span> <span>{</span>
          <span>reject</span><span>(</span>err<span>)</span><span>;</span>
        <span>}</span><span>)</span><span>;</span>
    <span>}</span><span>)</span>
  <span>)</span><span>;</span>
<span>}</span>

<span>/**
 * DELETE methods
 * @param url
 * @param data
 * @returns {Promise}
 */</span>
<span>export</span> <span>function</span> <span><span>del</span><span><span>&lt;</span><span>T</span><span>></span></span></span><span>(</span>url<span>:</span> <span>string</span><span>,</span> data<span>?</span><span>:</span> Record<span>&lt;</span><span>string</span><span>,</span> <span>unknown</span><span>></span><span>)</span><span>:</span> <span>TO</span><span>&lt;</span><span>T</span><span>></span> <span>{</span>
  <span>return</span> <span>to</span><span>(</span>
    <span>new</span> <span><span>Promise</span></span><span>(</span><span>(</span>resolve<span>,</span> reject<span>)</span> <span>=></span> <span>{</span>
      axios
        <span>.</span><span>delete</span><span>(</span>url<span>,</span> data<span>)</span>
        <span>.</span><span>then</span><span>(</span>result <span>=></span> <span>{</span>
          <span>resolve</span><span>(</span>result<span>.</span>data <span>as</span> <span>T</span><span>)</span><span>;</span>
        <span>}</span><span>)</span>
        <span>.</span><span>catch</span><span>(</span>err <span>=></span> <span>{</span>
          <span>reject</span><span>(</span>err<span>)</span><span>;</span>
        <span>}</span><span>)</span><span>;</span>
    <span>}</span><span>)</span>
  <span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br></div></div><p>4、类型声明</p>
<p>注意到我这里为了更好的使用 <code>Promise</code>，对其返回值进行了一个封装，但是其返回类型 <code>TO</code> 并没有定义，编译器同时会报错。我们在 <code>typings</code> 文件夹中创建一个 <code>http.d.ts</code> 的文件，并进行声明：</p>
<div><pre><code><span>declare</span> <span>type</span> <span><span>TO</span><span>&lt;</span><span>T</span> <span>=</span> <span>unknown</span><span>></span></span> <span>=</span> <span>Promise</span><span>&lt;</span><span>[</span><span>unknown</span><span>,</span> <span>T</span> <span>|</span> <span>undefined</span><span>]</span><span>></span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><p>此时声明好了，同时错误也没有了。</p>
<h3 id="安装路由工具-vue-router"> 安装路由工具 vue-router</h3>
<p>1、安装 vue-router</p>
<p>因为我们用的是 <code>vue3</code>，所以需要 <code>vue-router 4.x</code>，直接带版本安装即可：</p>
<div><pre><code><span>yarn</span> <span>add</span> vue-router@4
</code></pre>
<div><span>1</span><br></div></div><p>在 <code>router</code> 文件夹下创建 <code>index.ts</code> 文件，结构如下：</p>
<div><pre><code>src
└── router/
    ├── index.ts      <span># vue-router 配置文件</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>并键入如下内容：</p>
<div><pre><code><span>import</span> <span>{</span> createRouter<span>,</span> createWebHistory<span>,</span> RouteRecordRaw <span>}</span> <span>from</span> <span>"vue-router"</span><span>;</span>
<span>import</span> Home <span>from</span> <span>"@/pages/Home.vue"</span><span>;</span>

<span>const</span> routes<span>:</span> <span>Array</span><span>&lt;</span>RouteRecordRaw<span>></span> <span>=</span> <span>[</span>
  <span>{</span>
    path<span>:</span> <span>"/"</span><span>,</span>
    name<span>:</span> <span>"Home"</span><span>,</span>
    component<span>:</span> Home
  <span>}</span><span>,</span>
  <span>// TODO: 填写其他页面路由内容</span>
  <span>{</span>
    <span>// 匹配全部其他内容</span>
    path<span>:</span> <span>"/:pathMatch(.*)*"</span><span>,</span>
    <span>component</span><span>:</span> <span>(</span><span>)</span> <span>=></span> <span>import</span><span>(</span><span>/* webpackChunkName: "404" */</span> <span>"@/pages/404.vue"</span><span>)</span>
  <span>}</span>
<span>]</span><span>;</span>

<span>const</span> router <span>=</span> <span>createRouter</span><span>(</span><span>{</span>
  history<span>:</span> <span>createWebHistory</span><span>(</span><span>)</span><span>,</span>
  routes
<span>}</span><span>)</span><span>;</span>

<span>// 路由拦截器</span>
router<span>.</span><span>beforeEach</span><span>(</span><span>(</span>to<span>,</span> from<span>,</span> next<span>)</span> <span>=></span> <span>{</span>
  <span>// TODO: 自定义拦截内容</span>

  <span>next</span><span>(</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>

<span>export</span> <span>default</span> router<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div><p>2、挂载路由</p>
<p>打开 <code>main.ts</code> 文件，并修改挂载路由：</p>
<div><div><br><br><div>&nbsp;</div><br><br><div>&nbsp;</div><br><br></div><pre><code><span>import</span> <span>{</span> createApp <span>}</span> <span>from</span> <span>"vue"</span><span>;</span>
<span>import</span> App <span>from</span> <span>"./App.vue"</span><span>;</span>
<span>import</span> router <span>from</span> <span>"./router/index"</span><span>;</span>

<span>createApp</span><span>(</span>App<span>)</span>
  <span>.</span><span>use</span><span>(</span>router<span>)</span>
  <span>.</span><span>mount</span><span>(</span><span>"#app"</span><span>)</span><span>;</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>3、配置路由页面</p>
<p>为了测试它的效果，我们需要添加几个简单页面，同时配置路由页面。</p>
<p>打开 <code>App.vue</code> 文件，删除 <code>HelloWorld</code> 组件，并在模板中替换为 <code>&lt;router-view /&gt;</code> 组件：</p>
<div><div><br><br><br><br><div>&nbsp;</div><br><br><br><br><br><br><br><br><br><br><br><br><br></div><pre><code><span><span><span>&lt;</span>script</span> <span>setup</span> <span>lang</span><span><span>=</span><span>"</span>ts<span>"</span></span><span>></span></span><span></span><span><span><span>&lt;/</span>script</span><span>></span></span>

<span><span><span>&lt;</span>template</span><span>></span></span>
  <span><span><span>&lt;</span>img</span> <span>alt</span><span><span>=</span><span>"</span>Vue logo<span>"</span></span> <span>src</span><span><span>=</span><span>"</span>./assets/logo.png<span>"</span></span> <span>/></span></span>
  <span><span><span>&lt;</span>router-view</span> <span>/></span></span>
<span><span><span>&lt;/</span>template</span><span>></span></span>

<span><span><span>&lt;</span>style</span><span>></span></span><span><span>
<span>#app</span> <span>{</span>
  <span>font-family</span><span>:</span> Avenir<span>,</span> Helvetica<span>,</span> Arial<span>,</span> sans-serif<span>;</span>
  <span>-webkit-font-smoothing</span><span>:</span> antialiased<span>;</span>
  <span>-moz-osx-font-smoothing</span><span>:</span> grayscale<span>;</span>
  <span>text-align</span><span>:</span> center<span>;</span>
  <span>color</span><span>:</span> #2c3e50<span>;</span>
  <span>margin-top</span><span>:</span> 60px<span>;</span>
<span>}</span>
</span></span><span><span><span>&lt;/</span>style</span><span>></span></span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>然后在 <code>pages</code> 文件夹中创建两个文件，<code>Home.vue</code> 和 <code>404.vue</code>：</p>
<div><pre><code>src
└── pages/
    ├── <span>404</span>.vue
    ├── Home.vue
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>内容分别如下：</p>
<ul>
<li>Home.vue</li>
</ul>
<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>
  <span><span><span>&lt;</span>h1</span><span>></span></span>Home Page<span><span><span>&lt;/</span>h1</span><span>></span></span>

  <span><span><span>&lt;</span>HelloWorld</span> <span>msg</span><span><span>=</span><span>"</span>Welcome to Vite + Vue3 + TypeScript Template<span>"</span></span> <span>/></span></span>
<span><span><span>&lt;/</span>template</span><span>></span></span>

<span><span><span>&lt;</span>script</span> <span>lang</span><span><span>=</span><span>"</span>ts<span>"</span></span><span>></span></span><span><span>
<span>import</span> <span>{</span> defineComponent <span>}</span> <span>from</span> <span>"vue"</span><span>;</span>
<span>import</span> HelloWorld <span>from</span> <span>"@/components/HelloWorld.vue"</span><span>;</span>

<span>export</span> <span>default</span> <span>defineComponent</span><span>(</span><span>{</span>
  name<span>:</span> <span>"HomePage"</span><span>,</span>

  components<span>:</span> <span>{</span> HelloWorld <span>}</span><span>,</span>

  <span>setup</span><span>(</span><span>)</span> <span>{</span><span>}</span>
<span>}</span><span>)</span><span>;</span>
</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><ul>
<li>404.vue</li>
</ul>
<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>
  <span><span><span>&lt;</span>h1</span><span>></span></span>页面不存在<span><span><span>&lt;/</span>h1</span><span>></span></span>
  <span><span><span>&lt;</span>div</span><span>></span></span>对不起，您访问的页面不存在。<span><span><span>&lt;/</span>div</span><span>></span></span>
  <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>"</span>onBack<span>"</span></span><span>></span></span>返回<span><span><span>&lt;/</span>button</span><span>></span></span>
<span><span><span>&lt;/</span>template</span><span>></span></span>

<span><span><span>&lt;</span>script</span> <span>lang</span><span><span>=</span><span>"</span>ts<span>"</span></span><span>></span></span><span><span>
<span>import</span> <span>{</span> defineComponent <span>}</span> <span>from</span> <span>"vue"</span><span>;</span>

<span>export</span> <span>default</span> <span>defineComponent</span><span>(</span><span>{</span>
  <span>setup</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>{</span><span>}</span><span>;</span>
  <span>}</span><span>,</span>

  methods<span>:</span> <span>{</span>
    <span>onBack</span><span>(</span><span>)</span> <span>{</span>
      <span>this</span><span>.</span>$router<span>.</span><span>go</span><span>(</span><span>-</span><span>1</span><span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>
<span>}</span><span>)</span><span>;</span>
</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p>现在启动项目，会打开 Home 页，随意输入一个路由，它会匹配到 404 页面，点击 <code>返回</code> 按钮，又回到了 Home 页面。</p>
<p>到这里，路由就配置完成。</p>
<h3 id="安装状态管理工具-vuex"> 安装状态管理工具 vuex</h3>
<p>1、安装 vuex</p>
<p>与  一样，因为我们用的是 <code>vue3</code>，所以需要 <code>vuex 4.x</code>，直接带版本安装即可：</p>
<div><pre><code><span>yarn</span> <span>add</span> vuex@next --save
</code></pre>
<div><span>1</span><br></div></div><p>在 <code>store</code> 文件夹下创建 <code>index.ts</code> 文件，结构如下：</p>
<div><pre><code>src
└── store/
    ├── index.ts      <span># vuex 配置文件</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>并键入如下内容：</p>
<div><pre><code><span>import</span> <span>{</span> createStore <span>}</span> <span>from</span> <span>"vuex"</span><span>;</span>

<span>export</span> <span>default</span> <span>createStore</span><span>(</span><span>{</span>
  state<span>:</span> <span>{</span>
    <span>// TODO: 根据实际内容修改</span>
    count<span>:</span> <span>0</span>
  <span>}</span><span>,</span>
  mutations<span>:</span> <span>{</span><span>}</span><span>,</span>
  actions<span>:</span> <span>{</span><span>}</span><span>,</span>
  modules<span>:</span> <span>{</span><span>}</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>2、全局挂载 vuex</p>
<p>打开 <code>main.ts</code> 文件，并添加 <code>vuex</code>，挂载到全局中：</p>
<div><div><br><br><br><div>&nbsp;</div><br><br><br><div>&nbsp;</div><br><br></div><pre><code><span>import</span> <span>{</span> createApp <span>}</span> <span>from</span> <span>"vue"</span><span>;</span>
<span>import</span> App <span>from</span> <span>"./App.vue"</span><span>;</span>
<span>import</span> router <span>from</span> <span>"./router/index"</span><span>;</span>
<span>import</span> store <span>from</span> <span>"./store/index"</span><span>;</span>

<span>createApp</span><span>(</span>App<span>)</span>
  <span>.</span><span>use</span><span>(</span>router<span>)</span>
  <span>.</span><span>use</span><span>(</span>store<span>)</span>
  <span>.</span><span>mount</span><span>(</span><span>"#app"</span><span>)</span><span>;</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>3、在组件中使用 vuex</p>
<p>此时可以使用。为了方便测试，我们在 <code>store/index.ts</code> 文件中添加修改方法：</p>
<div><pre><code><span>export</span> <span>default</span> <span>createStore</span><span>(</span><span>{</span>
  state<span>:</span> <span>{</span>
    <span>// TODO: 根据实际内容修改</span>
    count<span>:</span> <span>0</span>
  <span>}</span><span>,</span>
  mutations<span>:</span> <span>{</span>
    <span>increment</span><span>(</span>state<span>)</span> <span>{</span>
      state<span>.</span>count<span>++</span><span>;</span>
    <span>}</span>
  <span>}</span><span>,</span>
  actions<span>:</span> <span>{</span>
    <span>increment</span><span>:</span> <span>(</span><span>{</span> commit <span>}</span><span>)</span> <span>=></span> <span>{</span>
      <span>commit</span><span>(</span><span>"increment"</span><span>)</span><span>;</span>
    <span>}</span>
  <span>}</span><span>,</span>
  modules<span>:</span> <span>{</span><span>}</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>同时修改 <code>HelloWorld.vue</code> 中的内容，删除原来的 <code>count</code> 属性，使用 <code>store</code> 中的属性：</p>
<div><div><br><div>&nbsp;</div><br><br><br><div>&nbsp;</div><div>&nbsp;</div><br><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><br><br><br><br><br><br><br><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><br><br></div><pre><code><span><span><span>&lt;</span>script</span> <span>setup</span> <span>lang</span><span><span>=</span><span>"</span>ts<span>"</span></span><span>></span></span><span><span>
<span>import</span> <span>{</span> useStore <span>}</span> <span>from</span> <span>"vuex"</span><span>;</span>

defineProps<span>&lt;</span><span>{</span> msg<span>:</span> string <span>}</span><span>></span><span>(</span><span>)</span><span>;</span>

<span>// const count = ref(0)</span>
<span>const</span> store <span>=</span> <span>useStore</span><span>(</span><span>)</span><span>;</span>

<span>function</span> <span>increment</span><span>(</span><span>)</span> <span>{</span>
  store<span>.</span><span>dispatch</span><span>(</span><span>"increment"</span><span>)</span><span>;</span>
<span>}</span>
</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>

<span><span><span>&lt;</span>template</span><span>></span></span>
  <span><span><span>&lt;</span>h1</span><span>></span></span>{{ msg }}<span><span><span>&lt;/</span>h1</span><span>></span></span>

  <span>&lt;!-- ... other code ... --></span>

  <span>&lt;!-- &lt;button type="button" @click="count++">count is: {{ count }}&lt;/button> --></span>
  <span><span><span>&lt;</span>button</span> <span>type</span><span><span>=</span><span>"</span>button<span>"</span></span> <span>@click</span><span><span>=</span><span>"</span>increment<span>"</span></span><span>></span></span>
    count is: {{ store.state.count }}
  <span><span><span>&lt;/</span>button</span><span>></span></span>
<span><span><span>&lt;/</span>template</span><span>></span></span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><p>运行项目测试，可以正常运行。</p>
<p>4、类型声明</p>
<p>此时虽然可以正常，但是我们可以看到，当我们使用 <code>store.state</code> 时，类型是任意的，我们看不到内部任何属性，当然就更看不到属性值的类型了，这显然不符合我们使用 TypeScript 的需求。</p>
<img :src="$withBase('/assets/roadmap/vue/template/vuex_any_type.png')" alt="">
<p>为解决这个问题，我们需要对 <code>store/index.ts</code> 进行一些改造。</p>
<p>首先声明一个 <code>State</code> 的类型：</p>
<div><pre><code><span>export</span> <span>interface</span> <span>State</span> <span>{</span>
  <span>// TODO: 根据 state 实际内容修改</span>
  count<span>:</span> <span>number</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>然后声明一个 <code>Key</code>，这里 <code>vue</code> 已经帮我们提供了一个解决方案：</p>
<div><pre><code><span>import</span> <span>{</span> InjectionKey <span>}</span> <span>from</span> <span>"vue"</span><span>;</span>
<span>export</span> <span>const</span> key<span>:</span> InjectionKey<span>&lt;</span>Store<span>&lt;</span>State<span>>></span> <span>=</span> <span>Symbol</span><span>(</span><span>"store_key"</span><span>)</span><span>;</span> <span>// key 内容随便填</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>现在我们可以通过传入对应的 <code>key</code> 来访问对应的 <code>State</code>。</p>
<p>再次打开 <code>HelloWorld.vue</code>，现在我们把 <code>key</code> 值传入 <code>useStore</code> 中，即：</p>
<div><div><br><div>&nbsp;</div><div>&nbsp;</div><br></div><pre><code><span>import</span> <span>{</span> useStore <span>}</span> <span>from</span> <span>"vuex"</span><span>;</span>
<span>import</span> <span>{</span> key <span>}</span> <span>from</span> <span>"../store"</span><span>;</span>
<span>const</span> store <span>=</span> <span>useStore</span><span>(</span>key<span>)</span><span>;</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>现在就可以看到类型已经可以正常显示了：</p>
<img :src="$withBase('/assets/roadmap/vue/template/vuex_state_type.png')" alt="">
<p>到目前，它好像看起来很正常了。但是随着页面变多，我们需要在每一个页面都传入 <code>key</code> 值，这是一个相当繁琐的事情，我们需要一个更简便的方法，有没有呢？答案是肯定的。</p>
<p>5、改造类型声明，简化它</p>
<p>在 <code>store/index.ts</code> 中简单封装一个 <code>useStore</code>：</p>
<div><div><br><div>&nbsp;</div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><br></div><pre><code><span>import</span> <span>{</span> InjectionKey <span>}</span> <span>from</span> <span>"vue"</span><span>;</span>
<span>import</span> <span>{</span> createStore<span>,</span> useStore <span>as</span> baseUseStore<span>,</span> Store <span>}</span> <span>from</span> <span>"vuex"</span><span>;</span>

<span>export</span> <span>interface</span> <span>State</span> <span>{</span>
  <span>// TODO: 根据 state 实际内容修改</span>
  count<span>:</span> <span>number</span><span>;</span>
<span>}</span>

<span>export</span> <span>const</span> key<span>:</span> InjectionKey<span>&lt;</span>Store<span>&lt;</span>State<span>>></span> <span>=</span> <span>Symbol</span><span>(</span><span>"store_key"</span><span>)</span><span>;</span> <span>// key 内容随便填</span>

<span>export</span> <span>default</span> <span>createStore</span><span>(</span><span>{</span>
  state<span>:</span> <span>{</span>
    <span>// TODO: 根据实际内容修改</span>
    count<span>:</span> <span>0</span>
  <span>}</span><span>,</span>
  mutations<span>:</span> <span>{</span><span>}</span><span>,</span>
  actions<span>:</span> <span>{</span><span>}</span><span>,</span>
  modules<span>:</span> <span>{</span><span>}</span>
<span>}</span><span>)</span><span>;</span>

<span>export</span> <span>function</span> <span>useStore</span><span>(</span><span>)</span> <span>{</span>
  <span>return</span> <span>baseUseStore</span><span>(</span>key<span>)</span><span>;</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><p>然后在 <code>main.ts</code> 文件中挂载这个 <code>key</code> 值即可：</p>
<div><div><br><br><br><div>&nbsp;</div><br><br><br><div>&nbsp;</div><br><br></div><pre><code><span>import</span> <span>{</span> createApp <span>}</span> <span>from</span> <span>"vue"</span><span>;</span>
<span>import</span> App <span>from</span> <span>"./App.vue"</span><span>;</span>
<span>import</span> router <span>from</span> <span>"./router/index"</span><span>;</span>
<span>import</span> store<span>,</span> <span>{</span> key <span>}</span> <span>from</span> <span>"./store/index"</span><span>;</span>

<span>createApp</span><span>(</span>App<span>)</span>
  <span>.</span><span>use</span><span>(</span>router<span>)</span>
  <span>.</span><span>use</span><span>(</span>store<span>,</span> key<span>)</span>
  <span>.</span><span>mount</span><span>(</span><span>"#app"</span><span>)</span><span>;</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>现在我们每次导入 <code>useStore</code> 时，不需要再从 <code>vuex</code> 中导入，而是通过 <code>@/store</code> 导入即可，使用上没有其他区别。</p>
<p>这样，我们就将 <code>vuex</code> 完整的配置好了。</p>
<h3 id="安装-css-预编译器"> 安装 CSS 预编译器</h3>
<p>根据项目需要添加对应的预编译器：</p>
<div><pre><code><span>yarn</span> <span>add</span> stylus -D  <span># stylus</span>
<span>yarn</span> <span>add</span> sass -D    <span># sass / scss</span>
<span>yarn</span> <span>add</span> <span>less</span> -D    <span># less</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>这个根据需要对应安装即可。</p>
<h2 id="安装-husky"> 安装 husky</h2>
<p><code>husky</code> 是一个钩子工具，它可以帮助我们在一些特定时候触发一些特定的功能。比如我们在提交代码的时候，需要验证代码是否符合规则，这时候可以通过 <code>husky</code> 很方便的实现。</p>
<blockquote>
<p>因为后面的内容基本都需要用到 <code>husky</code>，所以我们首先把它添加到模板中。</p>
</blockquote>
<p>1、通过脚本直接安装并配置 <code>husky</code>：</p>
<div><pre><code>npx husky-init
</code></pre>
<div><span>1</span><br></div></div><p>它会在项目根目录下创建一个名为 <code>.husky</code> 的文件夹，同时在里面生成相关文件。</p>
<img :src="$withBase('/assets/roadmap/vue/template/husky_added.png')" alt="">
<p>2、然后执行：</p>
<div><pre><code><span>yarn</span>
<span># or</span>
<span>npm</span> <span>install</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>安装 <code>husky</code> 到项目中。</p>
<p><code>husky</code> 包含很多钩子，我们常用的有 <code>pre-commit</code>、<code>pre-push</code> 等，从名字就很清晰的知道它应该在什么时候调用。我们在后面需要经常用到这些钩子还帮助我们规范项目。</p>
<h3 id="husky-的错误解决方案"> husky 的错误解决方案</h3>
<ul>
<li>Yarn on Windows</li>
</ul>
<p>对于 <code>Windows 10</code> 的用户，在使用 <code>yarn</code> 的时候，可能存在执行 <code>pre-push</code> 的时候出现 <code>stdin is not a tty</code> 的错误。</p>
<p>这时需要在 <code>.husky</code> 文件夹下创建一个名为 <code>common.sh</code> 的文件，并键入如下内容：</p>
<div><pre><code><span>command_exists</span> <span>(</span><span>)</span> <span>{</span>
  <span>command</span> -v <span>"<span>$1</span>"</span> <span>></span>/dev/null <span><span>2</span>></span><span>&amp;1</span>
<span>}</span>

<span># Workaround for Windows 10, Git Bash and Yarn</span>
<span>if</span> command_exists winpty <span>&amp;&amp;</span> <span>test</span> -t <span>1</span><span>;</span> <span>then</span>
  <span>exec</span> <span>&lt;</span> /dev/tty
<span>fi</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>然后就可以在钩子文件中使用 <code>yarn</code> 命令了。<a href="https://typicode.github.io/husky/#/?id=yarn-on-windows" target="_blank" rel="noopener noreferrer">参考</a></p>
<h2 id="添加代码规范"> 添加代码规范</h2>
<p>随着代码越来越复杂，写代码的人越来越多，代码的格式可能会越来越眼花缭乱。为避免这些问题，代码规范就必不可少。</p>
<p>良好的代码规范可以有效避免团队之间的代码风格差异化，提高审查代码效率等等。</p>
<p>通常情况下，使用简单的 <a href="https://eslint.org/" target="_blank" rel="noopener noreferrer">eslint</a> + <a href="https://prettier.io/" target="_blank" rel="noopener noreferrer">prettier</a> 就可以保持大部分规范，同时 <code>vue</code> 也提供了对应的 <a href="https://eslint.vuejs.org/rules" target="_blank" rel="noopener noreferrer">vue-eslint</a>，也可以查看 <code>vue</code> 的 <a href="https://v3.cn.vuejs.org/style-guide" target="_blank" rel="noopener noreferrer">风格指南</a>。</p>
<h3 id="配置-editorconfig"> 配置 EditorConfig</h3>
<p><code>EditorConfig</code> 是编辑器风格配置，可以帮助多人或者多设备统一编辑器风格。</p>
<div><p>提示</p>
<p><code>VS Code</code> 中需要插件 <code>EditorConfig for VS Code</code></p>
<img :src="$withBase('/assets/roadmap/vue/template/vscode_editorconfig.png')" alt="">
<p>在 <code>JetBrains</code> 系列如 <code>WebStorm</code> 中，则默认支持。</p>
</div>
<p>在根目录下创建一个名为 <code>.editorconfig</code> 的配置文件：</p>
<div><pre><code># Editor configuration, see http://editorconfig.org

root = true                        # 是否为根目录，支持不同层级单独配置

[*]                                # 适用所有文件
indent_style = space               # tab | space
indent_size = 4                    # 缩进
end_of_line = crlf                 # lf | cr | crlf
charset = utf-8                    # 字符集
trim_trailing_whitespace = true    # 自动切掉首尾空格
insert_final_newline = true        # 末尾空行

[*.{js,ts,vue,jsx,tsx}]            # 如何处理这些文件
indent_size = 2                    # 缩进为 2

[*.md]                             # 如何处理这些文件
trim_trailing_whitespace = false   # 不自动切掉首尾空格
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h3 id="配置-prettier"> 配置 Prettier</h3>
<p><code>Prettier</code> 是一个格式化文档工具，可以快速将我们的代码格式化为统一风格。</p>
<div><p>提示</p>
<p><code>VS Code</code> 中需要插件 <code>Prettier - Code formatter</code></p>
<img :src="$withBase('/assets/roadmap/vue/template/vscode_prettier_plugin.png')" alt="">
<p>在 <code>JetBrains</code> 系列如 <code>WebStorm</code> 中，则默认支持。</p>
</div>
<p>1、安装 Prettier</p>
<div><pre><code><span>yarn</span> <span>add</span> prettier -D
</code></pre>
<div><span>1</span><br></div></div><p>2、配置 Prettier</p>
<p>在根目录下创建名为 <code>.prettierrc</code> 的文件，并键入如下内容：</p>
<div><pre><code><span>{</span>
  <span>"useTabs"</span><span>:</span> <span>false</span><span>,</span>
  <span>"tabWidth"</span><span>:</span> <span>2</span><span>,</span>
  <span>"printWidth"</span><span>:</span> <span>80</span><span>,</span>
  <span>"singleQuote"</span><span>:</span> <span>true</span><span>,</span>
  <span>"trailingComma"</span><span>:</span> <span>"none"</span><span>,</span>
  <span>"bracketSpacing"</span><span>:</span> <span>true</span><span>,</span>
  <span>"semi"</span><span>:</span> <span>true</span><span>,</span>
  <span>"arrowParens"</span><span>:</span> <span>"avoid"</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>具体内容可以根据需要调整，具体可以参考 <a href="https://prettier.io/docs/en/options.html" target="_blank" rel="noopener noreferrer">官方文档</a>。</p>
<p>3、使用 Prettier</p>
<p>通过命令可以快速对指定文档进行格式化，也可以通过右键或者快捷方式(<code>Alt</code>+<code>Shift</code>+<code>F</code>)进行格式化。</p>
<p>格式化命令：</p>
<div><pre><code>npx prettier --write <span>.</span>    <span># . 表示所有文档</span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="配置-eslint"> 配置 ESLint</h3>
<p><code>ESLint</code> 可以查找并提示代码中的问题，并支持自动修复（如果可以），通过严格的规范检查来控制代码质量。</p>
<p>相信不少人都被 <code>ESLint</code> 虐过，初接触时，满屏的红色，那叫一个酸爽，但是随着使用的深入，它一定会给你带来质的变化。</p>
<div><p>提示</p>
<p><code>VS Code</code> 中需要插件 <code>ESLint</code></p>
<img :src="$withBase('/assets/roadmap/vue/template/vscode_eslint_plugin.png')" alt="">
<p>在 <code>JetBrains</code> 系列如 <code>WebStorm</code> 中，则默认支持。</p>
</div>
<p>1、安装 ESLint</p>
<div><pre><code><span>yarn</span> <span>add</span> eslint -D
</code></pre>
<div><span>1</span><br></div></div><p>2、配置 ESLint</p>
<p>安装后，通过 <code>npx eslint --init</code> 可以快速创建配置：</p>
<img :src="$withBase('/assets/roadmap/vue/template/add_eslint_init.png')" alt="">
<p>这里我们直接依次照图选择即可，并选择一个最流行的规则，即 <a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener noreferrer">Airbnb</a>。</p>
<p>最后，如果不选择使用 npm 安装，可以手动进行安装：</p>
<div><pre><code><span>yarn</span> <span>add</span> eslint-plugin-vue eslint-config-airbnb-base eslint-plugin-import @typescript-eslint/eslint-plugin @typescript-eslint/parser -D
</code></pre>
<div><span>1</span><br></div></div><p>执行完成，会在根目录下创建一个名为 <code>.eslintrc.js</code> 的配置文件：</p>
<div><div><br><br><br><br><br><br><br><br><br><div>&nbsp;</div><br><br><br><br><br><br></div><pre><code>module<span>.</span>exports <span>=</span> <span>{</span>
  env<span>:</span> <span>{</span>
    browser<span>:</span> <span>true</span><span>,</span>
    es2021<span>:</span> <span>true</span><span>,</span>
    node<span>:</span> <span>true</span>
  <span>}</span><span>,</span>
  <span>extends</span><span>:</span> <span>[</span><span>"plugin:vue/essential"</span><span>,</span> <span>"airbnb-base"</span><span>]</span><span>,</span>
  parserOptions<span>:</span> <span>{</span>
    ecmaVersion<span>:</span> <span>13</span><span>,</span>
    parser<span>:</span> <span>"@typescript-eslint/parser"</span><span>,</span>
    sourceType<span>:</span> <span>"module"</span>
  <span>}</span><span>,</span>
  plugins<span>:</span> <span>[</span><span>"vue"</span><span>,</span> <span>"@typescript-eslint"</span><span>]</span><span>,</span>
  rules<span>:</span> <span>{</span><span>}</span>
<span>}</span><span>;</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>可以根据实际情况增删内容。</p>
<p>然后添加针对 <code>vue</code> 的规则配置：</p>
<ul>
<li>添加高亮行内容到文件中：</li>
</ul>
<div><div><br><br><br><br><div>&nbsp;</div><br><br><br></div><pre><code>module<span>.</span>exports <span>=</span> <span>{</span>
  <span>extends</span><span>:</span> <span>[</span>
    <span>"plugin:vue/essential"</span><span>,</span>
    <span>"airbnb-base"</span><span>,</span>
    <span>"plugin:vue/vue3-recommended"</span> <span>// 添加该行内容，针对 vue3 的规则。如果是 vue2，则是 plugin:vue/recommended</span>
  <span>]</span>
<span>}</span><span>;</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><ul>
<li>添加 parser</li>
</ul>
<div><div><br><div>&nbsp;</div><br><br><br><br><br><br></div><pre><code>module<span>.</span>exports <span>=</span> <span>{</span>
  parser<span>:</span> <span>"vue-eslint-parser"</span><span>,</span>
  parserOptions<span>:</span> <span>{</span>
    parser<span>:</span> <span>"@typescript-eslint/parser"</span><span>,</span>
    sourceType<span>:</span> <span>"module"</span>
  <span>}</span>
<span>}</span><span>;</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>此时如果文件有错误，则会显示出来。<strong>如果没显示出来，重启编译器再试。</strong></p>
<p>3、添加 TypeScript 支持</p>
<p>对于 <code>airbnb-base</code> 来说，需要单独添加 <code>TypeScript</code> 的支持。</p>
<p>安装插件：</p>
<div><pre><code><span>yarn</span> <span>add</span> eslint-config-airbnb-typescript -D
</code></pre>
<div><span>1</span><br></div></div><p>在 <code>.eslintrc.js</code> 中添加如下内容：</p>
<div><div><br><br><br><br><div>&nbsp;</div><br><br><br><br></div><pre><code>module<span>.</span>exports <span>=</span> <span>{</span>
  <span>extends</span><span>:</span> <span>[</span>
    <span>"plugin:vue/essential"</span><span>,</span>
    <span>"airbnb-base"</span><span>,</span>
    <span>"airbnb-typescript/base"</span><span>,</span> <span>// 添加 typescript 支持</span>
    <span>"plugin:vue/vue3-recommended"</span>
  <span>]</span>
<span>}</span><span>;</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>4、使用 ESLint</p>
<p>在 <code>package.json</code> 文件的 <code>scripts</code> 字段中添加如下内容：</p>
<div><pre><code><span>"scripts"</span><span>:</span> <span>{</span>
    <span>"lint"</span><span>:</span> <span>"eslint src/**/*.{js,vue,ts,jsx,tsx}"</span><span>,</span>
    <span>"lint:fix"</span><span>:</span> <span>"eslint src/**/*.{js,vue,ts,jsx,tsx} --fix"</span><span>,</span>
    <span>"lint:create"</span><span>:</span> <span>"eslint --init"</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>然后执行：<code>yarn lint:fix</code> 即可修复所有内容，如果此时报错，则需要手动修复。</p>
<p>5、常用的 vue 规则</p>
<div><pre><code>module<span>.</span>exports <span>=</span> <span>{</span>
  rules<span>:</span> <span>{</span>
    <span>"vue/no-multiple-template-root"</span><span>:</span> <span>"off"</span><span>,</span> <span>// 启用根层级多个标签</span>
    <span>"vue/script-setup-uses-vars"</span><span>:</span> <span>"error"</span> <span>// 标记 setup 中的变量为 used</span>
  <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id="在-husky-中集成样式规范"> 在 husky 中集成样式规范</h3>
<p>我们不想每次都手动执行命令来修正代码样式，那么可以通过 <code>husky</code> 的钩子，在每次提交代码之前首先修改样式即可。</p>
<p>只需要在 <code>.husky/pre-commit</code> 文件中修改命令：</p>
<div><pre><code><span># 如果是全局安装 eslint，则可以直接使用 eslint 命令</span>
<span>yarn</span> eslint --fix ./src --ext .js,.jsx,.ts,.tsx,.vue
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>在每次预提交的时候，都会触发该方法进行检查并修复内容，同时如果出现错误，不会继续。</p>
<p>但是这样会有一个问题，每次都会检查所有文件，这在开发中并不常用，因为通常代码不是我们一个人写的，同时项目可能包含远古代码，修改格式会导致未知错误。这时候就需要仅仅针对当前我们修改过的文件进行检查即可。</p>
<h3 id="使用-lint-staged"> 使用 lint-staged</h3>
<p>想要做到上述要求，我们需要使用 <code>lint-staged</code> 工具帮助我们仅仅检查暂存区的内容。</p>
<h4 id="安装-lint-staged"> 安装 <code>lint-staged</code></h4>
<div><pre><code><span>yarn</span> <span>add</span> lint-staged -D
</code></pre>
<div><span>1</span><br></div></div><h4 id="配置-lint-staged"> 配置 lint-staged</h4>
<p>在 <code>package.json</code> 中增加配置内容：</p>
<div><pre><code><span>{</span>
  <span>"lint-staged"</span><span>:</span> <span>{</span>
    <span>"*.{vue,js,ts,jsx,tsx}"</span><span>:</span> <span>"eslint --fix"</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><div><p>提示</p>
<p>有时候我们看到有些项目或者一些文章，在该字段中同时添加 <code>eslint --fix</code> 与 <code>git add</code>，也就是 <code>&quot;*.{vue,js,ts,jsx,tsx}&quot;: [&quot;eslint --fix&quot;, &quot;git add&quot;]</code>，这是 <code>lint-staged</code> v10 以下版本的写法，在 v10 及以上版本不再需要 <code>git add</code>。</p>
</div>
<p>这表示检查并修复暂存区中所有的 <code>vue</code>、<code>js</code>、<code>ts</code>、<code>jsx</code>、<code>tsx</code> 文件。</p>
<h4 id="修改-husky-的钩子内容"> 修改 husky 的钩子内容</h4>
<p>将之前在 <code>.husky/pre-commit</code> 中的指令修改为：<code>npx lint-staged</code>。</p>
<p>这样就配置好了。当我们提交一个有错误的文件时，它会报错并拒绝提交：</p>
<img :src="$withBase('/assets/roadmap/vue/template/husky_eslint_error.png')" alt="">
<h2 id="解决样式配置后出现的问题"> 解决样式配置后出现的问题</h2>
<h3 id="解决-prettier-行尾换行符报错"> 解决 Prettier 行尾换行符报错</h3>
<p>有时候当我们安装了 <code>Prettier</code> 之后，发现每一行的行尾都会报错，这是因为行尾换行符的冲突配置所致。此时我们需要在 <code>.eslintrc.js</code> 中的 <code>rules</code> 字段中添加一条规则：</p>
<div><pre><code>rules<span>:</span> <span>{</span>
    <span>// 解决 prettier 行尾报错</span>
    <span>"prettier/prettier"</span><span>:</span> <span>[</span><span>"error"</span><span>,</span> <span>{</span> endOfLine<span>:</span> <span>"auto"</span> <span>}</span><span>]</span><span>,</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>所有文件的结尾错误就可以解决。</p>
<h3 id="解决-prettier-与-eslint-的冲突问题"> 解决 Prettier 与 ESLint 的冲突问题</h3>
<p>这两个的规则有时存在冲突，一般情况下以 <code>Prettier</code> 为优先。</p>
<p>安装插件：</p>
<div><pre><code><span>yarn</span> <span>add</span> eslint-plugin-prettier eslint-config-prettier -D
</code></pre>
<div><span>1</span><br></div></div><p>在 <code>.eslintrc.js</code> 中添加：</p>
<div><div><br><br><br><br><br><div>&nbsp;</div><br><br></div><pre><code><span>extends</span><span>:</span> <span>[</span>
  <span>'plugin:vue/essential'</span><span>,</span>
  <span>'airbnb-base'</span><span>,</span>
  <span>"airbnb-typescript/base"</span><span>,</span>
  <span>"plugin:vue/vue3-recommended"</span><span>,</span>
  <span>'plugin:prettier/recommended'</span> <span>// 添加解决冲突插件</span>
<span>]</span><span>,</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id="解决通过-引入的路径问题"> 解决通过 <code>@</code> 引入的路径问题</h3>
<p>如果在使用了 <code>@</code> 字符的路径中出现该问题，则可以按如下方法解决。</p>
<img :src="$withBase('/assets/roadmap/vue/template/import_no_unresolved.png')" alt="">
<p>安装工具：</p>
<div><pre><code><span>yarn</span> <span>add</span> eslint-import-resolver-alias eslint-import-resolver-typescript -D
</code></pre>
<div><span>1</span><br></div></div><p>在 <code>tsconfig.json</code> 中添加：</p>
<div><div><br><br><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><br><br><br></div><pre><code><span>{</span>
  <span>"compilerOptions"</span><span>:</span> <span>{</span>
    <span>"baseUrl"</span><span>:</span> <span>"."</span><span>,</span>
    <span>"types"</span><span>:</span> <span>[</span><span>"vite/client"</span><span>,</span> <span>"node"</span><span>]</span><span>,</span>
    <span>"paths"</span><span>:</span> <span>{</span>
      <span>"@/*"</span><span>:</span> <span>[</span><span>"./src/*"</span><span>]</span>
    <span>}</span>
  <span>}</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>在 <code>.eslintrc.js</code> 中添加：</p>
<div><div><br><br><br><br><br><div>&nbsp;</div><br><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><br><br></div><pre><code>module<span>.</span>exports <span>=</span> <span>{</span>
  parserOptions<span>:</span> <span>{</span>
    ecmaVersion<span>:</span> <span>12</span><span>,</span>
    parser<span>:</span> <span>"@typescript-eslint/parser"</span><span>,</span>
    sourceType<span>:</span> <span>"module"</span><span>,</span>
    project<span>:</span> <span>[</span><span>"./tsconfig.json"</span><span>]</span>
  <span>}</span><span>,</span>
  settings<span>:</span> <span>{</span>
    <span>"import/parsers"</span><span>:</span> <span>{</span>
      <span>"@typescript-eslint/parser"</span><span>:</span> <span>[</span><span>".ts"</span><span>,</span> <span>".tsx"</span><span>]</span>
    <span>}</span><span>,</span>
    <span>"import/resolver"</span><span>:</span> <span>{</span>
      alias<span>:</span> <span>{</span>
        map<span>:</span> <span>[</span><span>[</span><span>"@"</span><span>,</span> <span>"./src"</span><span>]</span><span>]</span><span>,</span>
        extensions<span>:</span> <span>[</span><span>".js"</span><span>,</span> <span>".jsx"</span><span>]</span>
      <span>}</span><span>,</span>
      typescript<span>:</span> <span>{</span>
        alwaysTryTypes<span>:</span> <span>true</span><span>,</span>
        project<span>:</span> <span>"./tsconfig.json"</span>
      <span>}</span>
    <span>}</span>
  <span>}</span>
<span>}</span><span>;</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><h3 id="尝试保存文件时自动修复错误"> 尝试保存文件时自动修复错误</h3>
<p>在当前项目的根目录下创建文件夹 <code>.vscode</code>，在其中新建文件 <code>settings.json</code> 并键入：</p>
<div><pre><code><span>{</span>
  <span>"editor.codeActionsOnSave"</span><span>:</span> <span>{</span>
    <span>"source.fixAll.eslint"</span><span>:</span> <span>true</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>如果需要在全局生效，则进入设置页面（<code>文件</code> -&gt; <code>首选项</code> -&gt; <code>设置</code>），搜索 <code>editor.codeActionsOnSave</code>，打开 <code>settings.json</code> 配置上述内容即可。</p>
<h3 id="修复所有-vue-文件第一行首字符处出现-parsing-error-parseroptions-project-的错误"> 修复所有 vue 文件第一行首字符处出现 <code>Parsing error: &quot;parserOptions.project&quot;...</code> 的错误</h3>
<img :src="$withBase('/assets/roadmap/vue/template/error_parseroptions_project.png')" alt="">
<p>如遇到上面问题，配置 <code>.eslintrc.js</code> 中的 <code>extraFileExtensions</code> 字段即可：</p>
<div><div><br><br><div>&nbsp;</div><br><br><br></div><pre><code>module<span>.</span>exports <span>=</span> <span>{</span>
  parserOptions<span>:</span> <span>{</span>
    extraFileExtensions<span>:</span> <span>[</span><span>".vue"</span><span>]</span>
  <span>}</span>
<span>}</span><span>;</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><blockquote>
<p>如果配置后未生效，重启编辑器即可。</p>
</blockquote>
<h3 id="修复-defineprops-等未定义的错误"> 修复 defineProps 等未定义的错误</h3>
<p>使用 <code>&lt;script setup&gt;</code> 标签时，常用的 <code>defineProps</code> 等属于全局宏定义，不需要二次引入，但是可能会导致规则报错，需要在 <code>.eslintrc.js</code> 中添加配置：</p>
<div><pre><code>module<span>.</span>exports <span>=</span> <span>{</span>
  globals<span>:</span> <span>{</span>
    defineProps<span>:</span> <span>"readonly"</span><span>,</span>
    defineEmits<span>:</span> <span>"readonly"</span><span>,</span>
    defineExpose<span>:</span> <span>"readonly"</span><span>,</span>
    withDefaults<span>:</span> <span>"readonly"</span>
  <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h3 id="修复-plugin-vite-eslint-的相关错误"> 修复 [plugin:vite:eslint] 的相关错误</h3>
<p>有时候浏览器会报 <code>[plugin:vite:eslint]</code> 的相关错误，此时可以通过安装 <code>vite-plugin-eslint</code> 并配置来解决。</p>
<ul>
<li>安装：</li>
</ul>
<div><pre><code><span>yarn</span> <span>add</span> vite-plugin-eslint -D
</code></pre>
<div><span>1</span><br></div></div><ul>
<li>配置</li>
</ul>
<p>在 <code>vite.config.ts</code> 文件中配置：</p>
<div><pre><code><span>import</span> eslintPlugin <span>from</span> <span>"vite-plugin-eslint"</span><span>;</span>

<span>export</span> <span>default</span> <span>defineConfig</span><span>(</span><span>{</span>
  plugins<span>:</span> <span>[</span><span>vue</span><span>(</span><span>)</span><span>,</span> <span>eslintPlugin</span><span>(</span><span>)</span><span>]</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>如果你需要指定文件，可以添加参数：</p>
<div><div><br><br><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><br><br></div><pre><code>plugins<span>:</span> <span>[</span>
  <span>vue</span><span>(</span><span>)</span><span>,</span>
  <span>eslintPlugin</span><span>(</span><span>{</span>
    include<span>:</span> <span>[</span><span>"src/**/*.js"</span><span>,</span> <span>"src/**/*.vue"</span><span>,</span> <span>"src/**/*.ts"</span><span>]</span>
  <span>}</span><span>)</span>
<span>]</span><span>;</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>此时如果还报错，可以重启编译器和服务器尝试，通常会好。</p>
<h2 id="添加提交规范"> 添加提交规范</h2>
<p><code>GIT</code> 的具体提交规范，可以参考 <a href="/document/git/#提交规范">提交规范</a>，这里只涉及规范工具的使用。</p>
<h3 id="集成-commitizen"> 集成 Commitizen</h3>
<p><a href="https://github.com/commitizen/cz-cli" target="_blank" rel="noopener noreferrer">Commitizen</a> 是一个撰写规范提交信息的工具。</p>
<p>我们可以全局安装该工具：</p>
<div><pre><code><span>npm</span> <span>install</span> -g commitizen
</code></pre>
<div><span>1</span><br></div></div><div><p>提示</p>
<p><code>Commitizen</code> 最好是全局安装，否则不可以在全局使用 <code>git cz</code> 命令，而是需要在项目中使用 <code>yarn git-cz</code></p>
</div>
<p>然后在项目中初始化：</p>
<div><pre><code>npx commitizen init cz-conventional-changelog --save-dev --save-exact
</code></pre>
<div><span>1</span><br></div></div><p>这样就可以通过命令行直接使用 <code>Commitizen</code> 了。以后但凡使用 <code>git commit</code> 命令，一律改为使用 <code>git cz</code> 即可，根据 cli 的提示一步步选择就可以生成符合规范的提交消息了。</p>
<img :src="$withBase('/assets/roadmap/vue/template/cz_select_type.png')" alt="">
<blockquote>
<p>注意：要先使用 <code>git add</code> 添加要提交的文件。</p>
</blockquote>
<p>按照提示依次填写完成，就可以成功提交了。</p>
<img :src="$withBase('/assets/roadmap/vue/template/cz_commit_finish.png')" alt="">
<h3 id="自定义提交配置"> 自定义提交配置</h3>
<p>因为提交的提示都是英文的，也没有配置内容，这时我们就需要 <code>cz-customizable</code> 来个性化。</p>
<p>在项目中初始化它：</p>
<div><pre><code>npx commitizen init cz-customizable --save-dev --save-exact --force
</code></pre>
<div><span>1</span><br></div></div><p>注意上面的 <code>--force</code> 参数，因为之前已经初始化了 <code>cz-conventional-changelog</code>，我们在这里需要覆盖它。</p>
<p>执行完成后，我们在根目录下创建一个 <code>.cz-config.js</code> 的文件，然后根据 <a href="https://github.com/leoforfree/cz-customizable/blob/master/cz-config-EXAMPLE.js" target="_blank" rel="noopener noreferrer">官方文档</a> 进行配置即可。</p>
<p>可以参考下面的中文示例进行配置：</p>
<div><pre><code><span>// 官方示例：https://github.com/leoforfree/cz-customizable/blob/master/cz-config-EXAMPLE.js</span>
module<span>.</span>exports <span>=</span> <span>{</span>
  types<span>:</span> <span>[</span>
    <span>{</span> value<span>:</span> <span>"feat"</span><span>,</span> name<span>:</span> <span>"feat:\t\t新增功能"</span> <span>}</span><span>,</span>
    <span>{</span> value<span>:</span> <span>"fix"</span><span>,</span> name<span>:</span> <span>"fix:\t\t修复 bug"</span> <span>}</span><span>,</span>
    <span>{</span> value<span>:</span> <span>"docs"</span><span>,</span> name<span>:</span> <span>"docs:\t\t文档变更"</span> <span>}</span><span>,</span>
    <span>{</span>
      value<span>:</span> <span>"style"</span><span>,</span>
      name<span>:</span> <span>"style:\t代码格式（不影响功能，例如空格、分号等格式修正）"</span>
    <span>}</span><span>,</span>
    <span>{</span>
      value<span>:</span> <span>"refactor"</span><span>,</span>
      name<span>:</span> <span>"refactor:\t代码重构（不包括 bug 修复、功能新增）"</span>
    <span>}</span><span>,</span>
    <span>{</span> value<span>:</span> <span>"perf"</span><span>,</span> name<span>:</span> <span>"perf:\t\t性能优化"</span> <span>}</span><span>,</span>
    <span>{</span> value<span>:</span> <span>"test"</span><span>,</span> name<span>:</span> <span>"test:\t\t添加、修改测试用例"</span> <span>}</span><span>,</span>
    <span>{</span>
      value<span>:</span> <span>"build"</span><span>,</span>
      name<span>:</span>
        <span>"build:\t构建流程、外部依赖变更（如升级 npm 包、修改 webpack 配置等）"</span>
    <span>}</span><span>,</span>
    <span>{</span> value<span>:</span> <span>"ci"</span><span>,</span> name<span>:</span> <span>"ci:\t\t修改 CI 配置、脚本"</span> <span>}</span><span>,</span>
    <span>{</span>
      value<span>:</span> <span>"chore"</span><span>,</span>
      name<span>:</span> <span>"chore:\t对构建过程或辅助工具和库的更改（不影响源文件、测试用例）"</span>
    <span>}</span><span>,</span>
    <span>{</span> value<span>:</span> <span>"revert"</span><span>,</span> name<span>:</span> <span>"revert:\t回滚 commit"</span> <span>}</span>
  <span>]</span><span>,</span>

  scopes<span>:</span> <span>[</span>
    <span>{</span> value<span>:</span> <span>"components"</span><span>,</span> name<span>:</span> <span>"components:\t组件相关"</span> <span>}</span><span>,</span>
    <span>{</span> value<span>:</span> <span>"composables"</span><span>,</span> name<span>:</span> <span>"composables:\tcomposables相关"</span> <span>}</span><span>,</span>
    <span>{</span> value<span>:</span> <span>"utils"</span><span>,</span> name<span>:</span> <span>"utils:\tutils相关"</span> <span>}</span><span>,</span>
    <span>{</span> value<span>:</span> <span>"styles"</span><span>,</span> name<span>:</span> <span>"styles:\t样式相关"</span> <span>}</span><span>,</span>
    <span>{</span> value<span>:</span> <span>"dependencies"</span><span>,</span> name<span>:</span> <span>"dependencies:\t依赖相关"</span> <span>}</span><span>,</span>
    <span>{</span> value<span>:</span> <span>"other"</span><span>,</span> name<span>:</span> <span>"other:\t其他"</span> <span>}</span><span>,</span>
    <span>// 选中自定义可以自行填写，或者开启 allowCustomScopes 亦可</span>
    <span>{</span> value<span>:</span> <span>"custom"</span><span>,</span> name<span>:</span> <span>"custom:\t自定义"</span> <span>}</span>
  <span>]</span><span>,</span>

  <span>// allowCustomScopes: true,</span>
  <span>// allowTicketNumber: false,</span>
  <span>// isTicketNumberRequired: false,</span>
  <span>// ticketNumberPrefix: 'TICKET-',</span>
  <span>// ticketNumberRegExp: '\\d{1,5}',</span>

  scopeOverrides<span>:</span> <span>{</span>
    fix<span>:</span> <span>[</span>
      <span>{</span> name<span>:</span> <span>"merge"</span> <span>}</span><span>,</span>
      <span>{</span> name<span>:</span> <span>"style"</span> <span>}</span><span>,</span>
      <span>{</span> name<span>:</span> <span>"e2eTest"</span> <span>}</span><span>,</span>
      <span>{</span> name<span>:</span> <span>"unitTest"</span> <span>}</span>
    <span>]</span>
  <span>}</span><span>,</span>

  messages<span>:</span> <span>{</span>
    type<span>:</span> <span>"确保本次提交遵循 Angular 规范！\n选择你要提交的类型："</span><span>,</span>
    scope<span>:</span> <span>"\n选择一个 scope（可选）："</span><span>,</span>
    <span>// 选择 scope: custom 时会出下面的提示</span>
    customScope<span>:</span> <span>"请输入自定义的 scope："</span><span>,</span>
    subject<span>:</span> <span>"填写本次提交的主题：\n"</span><span>,</span>
    body<span>:</span> <span>'填写详细的变更描述（可选）。使用 "|" 换行：\n'</span><span>,</span>
    breaking<span>:</span> <span>"是否存在非兼容性的变更。如果有，请填写：\n"</span><span>,</span>
    footer<span>:</span> <span>"请填写相应的 ISSUES（可选）。 例如: #1, #2：\n"</span><span>,</span>
    confirmCommit<span>:</span> <span>"确认提交？"</span>
  <span>}</span><span>,</span>

  <span>// 设置只有 type 选择了 feat 或 fix，才询问 breaking message</span>
  allowBreakingChanges<span>:</span> <span>[</span><span>"feat"</span><span>,</span> <span>"fix"</span><span>]</span><span>,</span>
  <span>// askForBreakingChangeFirst : true,</span>

  <span>// 跳过要询问的步骤</span>
  <span>// skipQuestions: ["body", "footer"],</span>

  <span>// subject 限制长度</span>
  subjectLimit<span>:</span> <span>100</span><span>,</span>
  breaklineChar<span>:</span> <span>"|"</span> <span>// 支持 body 和 footer</span>
  <span>// footerPrefix : 'ISSUES CLOSED:'</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br></div></div><p>此时再运行 <code>git cz</code> 的时候，就可以看到中文了。</p>
<img :src="$withBase('/assets/roadmap/vue/template/cz_select_type_cn.png')" alt="">
<p>现在的提示，对于我这种英语学渣来说，就友好了很多~ 😄</p>
<h3 id="集成-commitlint"> 集成 commitlint</h3>
<p>尽管我们添加了 <code>Commitizen</code>，但是我们仍然可以通过 <code>git commit</code> 填写任意内容进行提交。为了保证规范，我们需要添加一个限制，就是 <code>如果没有按照规范填写提交信息，就不可以提交成功</code>，此时就需要通过 <code>commitlint</code> 来实现。</p>
<h4 id="安装-commitlint"> 安装 commitlint</h4>
<div><pre><code><span>yarn</span> <span>add</span> @commitlint/config-conventional @commitlint/cli -D
</code></pre>
<div><span>1</span><br></div></div><h4 id="配置-commitlint"> 配置 commitlint</h4>
<p>在根目录下创建一个名为 <code>commitlint.config.js</code> 的文件，并填写如下内容：</p>
<div><pre><code>module<span>.</span>exports <span>=</span> <span>{</span>
  <span>extends</span><span>:</span> <span>[</span><span>"@commitlint/config-conventional"</span><span>]</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>配置好 <code>commitlint</code>，我们使用 <code>husky</code> 的钩子方法来验证提交信息。执行下面命令：</p>
<div><pre><code>npx husky <span>add</span> .husky/commit-msg <span>"npx --no-install commitlint --edit <span>$1</span>"</span>
</code></pre>
<div><span>1</span><br></div></div><blockquote>
<p>如果没有安装 husky，请参考前面的内容 。</p>
</blockquote>
<p>我们现在再来试一下通过 <code>git commit</code> 命令随意填写提交信息：</p>
<img :src="$withBase('/assets/roadmap/vue/template/husky_commitlint_error.png')" alt="">
<p>可以看到已经不能正常提交了，同时给出错误的提示。</p>
<p>当我们按照要求填写内容的时候，它就可以正常提交了：</p>
<img :src="$withBase('/assets/roadmap/vue/template/husky_commitlint_ok.png')" alt="">
<p>毕竟我们手写很可能出错，所以还是尽量选用 <code>git cz</code> 命令来按照提示选择最为稳妥。</p>
<h3 id="集成-standard-version"> 集成 Standard-Version</h3>
<p>生成 <code>CHANGELOG.md</code> 的方式有很多种，我们选择 <a href="https://github.com/conventional-changelog/standard-version" target="_blank" rel="noopener noreferrer">standard-version</a> 来帮助我们实现。</p>
<p>它是一个命令行工具，可以通过我们提交的内容，自动更新项目的版本，同时添加 <code>git tag</code> 和更新 <code>CHANGELOG.md</code>，很方便。</p>
<p>我们的版本号分为 <code>major</code>、<code>minor</code>、<code>patch</code>，分别是<code>主版本</code>、<code>次版本</code>、<code>补丁版本</code>，它们分别对应项目的重构级别、新功能的增加、bug 的修复等。这在 <a href="https://semver.org/" target="_blank" rel="noopener noreferrer">语义化版本</a> 中有详细的解释。</p>
<h4 id="安装-standard-version"> 安装 Standard-Version</h4>
<div><pre><code><span>npm</span> <span>install</span> -g standard-version  <span># 推荐全局安装</span>
<span># or</span>
<span>yarn</span> <span>add</span> standard-version -D
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h4 id="配置-standard-version"> 配置 Standard-Version</h4>
<p>在 <code>package.json</code> 中添加如下脚本：</p>
<div><pre><code><span>{</span>
  <span>"scripts"</span><span>:</span> <span>{</span>
    <span>"release"</span><span>:</span> <span>"standard-version"</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h4 id="使用-standard-version"> 使用 Standard-Version</h4>
<h5 id="_1、自动生成版本号"> 1、自动生成版本号</h5>
<p>默认情况下，工具会根据规则自动生成版本号：</p>
<div><pre><code><span># 全局安装执行</span>
standard-version

<span># 脚本运行则执行</span>
<span>yarn</span> release
<span># or</span>
<span>npm</span> run release
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><ul>
<li>如果提交的 <code>type</code> 是 <code>feat</code>，则 <code>minor</code> +1</li>
<li>如果提交的 <code>type</code> 是 <code>fix</code>，则 <code>patch</code> +1</li>
</ul>
<h5 id="_2、指定版本号"> 2、指定版本号</h5>
<p>我们可以通过参数，指定我们需要的版本号，但是这仍然需要遵循 <a href="https://semver.org/" target="_blank" rel="noopener noreferrer">语义化版本</a>。</p>
<p>假如当前版本号为 <code>v1.0.0</code>：</p>
<div><pre><code>standard-version -r major            <span># 2.0.0</span>
standard-version -r <span>2.0</span>.0-t          <span># 2.0.0-t</span>
standard-version -r minor            <span># 1.1.0</span>
standard-version -r <span>1.1</span>.0-t          <span># 1.1.0-t</span>
standard-version -r patch            <span># 1.0.1</span>
standard-version -r <span>1.0</span>.1-t          <span># 1.0.1-t</span>

<span># 脚本运行</span>
<span>yarn</span> release -- --release-as minor   <span># 1.1.0</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><blockquote>
<ul>
<li><code>-r</code> 表示 <code>--release-as</code>，指定版本号</li>
</ul>
</blockquote>
<h5 id="_3、预发布版本"> 3、预发布版本</h5>
<p>预发布版本用来发布预发版本，通常在版本号之后添加 <code>alpha</code> 或 <code>beta</code> 等字样。</p>
<p>假如当前版本为 <code>v1.0.0</code>：</p>
<div><pre><code>standard-version --prerelease         <span># 1.0.1-0</span>
standard-version --prerelease alpha   <span># 1.0.1-alpha.0</span>

<span># 脚本运行</span>
<span>yarn</span> release -- -p beta               <span># 1.0.1-beta.0</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h5 id="_4、添加-tag-前缀"> 4、添加 tag 前缀</h5>
<p>有时候我们需要为 <code>tag</code> 添加一些前缀内容，如 <code>@scope/package@2.0.0</code>，则需要：</p>
<div><pre><code>standard-version --tag-prefix @scope/package@  <span># @scope/package@2.0.1</span>

<span># 脚本运行</span>
<span>yarn</span> release -- -t @scope/package@             <span># @scope/package@2.0.1</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h4 id="standard-version-的一些问题"> Standard-Version 的一些问题</h4>
<p>如果版本为 <code>0.x.x</code> 时，例如 <code>0.1.1</code>，当我们的提交中包含 <code>feat</code> 特性时，执行 <code>yarn release</code> 不会变成 <code>0.2.1</code>，而是 <code>0.1.2</code>，这是因为没有主版本号。</p>
<p>这时需要手动给定版本号，或者修改主版本号后再执行。</p>
<h2 id="添加单元测试"> 添加单元测试</h2>
<p>对于任何项目，尤其是大型项目，单元测试是一个非常重要的环节。完整的测试可以有效保证代码质量。</p>
<h3 id="添加测试依赖"> 添加测试依赖</h3>
<div><pre><code><span>yarn</span> <span>add</span> jest@26 ts-jest@26 @vue/test-utils@next vue-jest@next @types/jest eslint-plugin-jest -D
</code></pre>
<div><span>1</span><br></div></div><div><p>安装提示</p>
<p>错误日期：2021.11.8</p>
<p><code>jest</code> 和 <code>ts-jest</code> 由于版本冲突，最新如果直接安装，则为版本 27，此时运行测试内容会报错：</p>
<img :src="$withBase('/assets/roadmap/vue/template/jest_version_error.png')" alt="">
<p>需要指定版本 26，会解决该问题。</p>
<p>详见 <a href="https://github.com/vuejs/vue-jest/issues/351" target="_blank" rel="noopener noreferrer">ISSUE #351</a></p>
</div>
<p>同时测试需要 <code>babel</code>，所以再安装 <code>babel</code> 依赖：</p>
<div><pre><code><span>yarn</span> <span>add</span> @babel/core @babel/preset-env @babel/preset-typescript @vue/babel-plugin-jsx -D
</code></pre>
<div><span>1</span><br></div></div><div><pre><code><span>yarn</span> <span>add</span> babel-jest@26
</code></pre>
<div><span>1</span><br></div></div><div><p>安装提示</p>
<p>错误日期：2021.11.8</p>
<p>同样需要注意，<code>babel-jest</code> 由于版本问题，如果安装最新版 <code>^27</code>，会引起 <code>TypeError: babelJest.getCacheKey is not a function</code> 的错误，所以需要安装 <code>^26</code> 版本。</p>
<p>详见 <a href="https://github.com/vuejs/vue-jest/issues/344" target="_blank" rel="noopener noreferrer">ISSUE 344</a></p>
</div>
<h3 id="配置-jest"> 配置 jest</h3>
<ul>
<li>在根目录下添加 <code>jest.config.js</code> 文件，并键入如下内容：</li>
</ul>
<div><pre><code>module<span>.</span>exports <span>=</span> <span>{</span>
  clearMocks<span>:</span> <span>true</span><span>,</span>
  coverageDirectory<span>:</span> <span>"coverage"</span><span>,</span>
  coverageProvider<span>:</span> <span>"v8"</span><span>,</span>
  moduleFileExtensions<span>:</span> <span>[</span><span>"vue"</span><span>,</span> <span>"js"</span><span>,</span> <span>"json"</span><span>,</span> <span>"jsx"</span><span>,</span> <span>"ts"</span><span>,</span> <span>"tsx"</span><span>,</span> <span>"node"</span><span>]</span><span>,</span>
  testMatch<span>:</span> <span>[</span><span>"**/tests/units/**/?(*.)+(unit|test|spec).[jt]s?(x)"</span><span>]</span><span>,</span>
  testPathIgnorePatterns<span>:</span> <span>[</span><span>"/node_modules/"</span><span>]</span><span>,</span>
  transform<span>:</span> <span>{</span>
    <span>"^.+\\.jsx?$"</span><span>:</span> <span>"babel-jest"</span><span>,</span>
    <span>"^.+\\.vue?$"</span><span>:</span> <span>"vue-jest"</span><span>,</span>
    <span>"^.+\\.tsx$"</span><span>:</span> <span>"ts-jest"</span>
  <span>}</span><span>,</span>
  moduleNameMapper<span>:</span> <span>{</span>
    <span>// 支持源代码中相同的 `@` -> `src` 别名</span>
    <span>"^@/(.*)$"</span><span>:</span> <span>"&lt;rootDir>/src/$1"</span>
  <span>}</span><span>,</span>
  preset<span>:</span> <span>"ts-jest"</span><span>,</span>
  testEnvironment<span>:</span> <span>"jsdom"</span><span>,</span>
  collectCoverage<span>:</span> <span>true</span><span>,</span>
  collectCoverageFrom<span>:</span> <span>[</span><span>"src/**/*.{js,jsx,ts,tsx,vue}"</span><span>,</span> <span>"!**/node_modules/**"</span><span>]</span>
  <span>// coverageReporters: ["text", "text-summary", "html"],</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><ul>
<li>在根目录下添加 <code>babel.config.js</code> 文件，并键入：</li>
</ul>
<div><pre><code>module<span>.</span>exports <span>=</span> <span>{</span>
  presets<span>:</span> <span>[</span>
    <span>[</span><span>"@babel/preset-env"</span><span>,</span> <span>{</span> targets<span>:</span> <span>{</span> node<span>:</span> <span>"current"</span> <span>}</span> <span>}</span><span>]</span><span>,</span>
    <span>"@babel/preset-typescript"</span>
  <span>]</span><span>,</span>
  plugins<span>:</span> <span>[</span><span>"@vue/babel-plugin-jsx"</span><span>]</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><ul>
<li>在 <code>tsconfig.json</code> 中添加：</li>
</ul>
<div><div><br><br><div>&nbsp;</div><br><br><br><br><br><br><div>&nbsp;</div><br><br><br></div><pre><code><span>{</span>
  <span>"compilerOptions"</span><span>:</span> <span>{</span>
    <span>"types"</span><span>:</span> <span>[</span><span>"vite/client"</span><span>,</span> <span>"node"</span><span>,</span> <span>"jest"</span><span>]</span>
  <span>}</span><span>,</span>
  <span>"include"</span><span>:</span> <span>[</span>
    <span>"src/**/*.ts"</span><span>,</span>
    <span>"src/**/*.d.ts"</span><span>,</span>
    <span>"src/**/*.tsx"</span><span>,</span>
    <span>"src/**/*.vue"</span><span>,</span>
    <span>"tests/**/*.ts"</span>
  <span>]</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>在 <code>.eslintrc.js</code> 中添加：</p>
<div><div><br><br><div>&nbsp;</div><br><br><br><br><br><br></div><pre><code><span>extends</span><span>:</span> <span>[</span>
    <span>'plugin:vue/essential'</span><span>,</span>
    <span>'plugin:jest/recommended'</span><span>,</span>
    <span>'airbnb-base'</span><span>,</span>
    <span>'airbnb-typescript/base'</span><span>,</span>
    <span>'plugin:vue/vue3-recommended'</span><span>,</span>
    <span>'plugin:prettier/recommended'</span> <span>// 添加 prettier 插件</span>
<span>]</span><span>,</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h3 id="执行测试"> 执行测试</h3>
<p>在 <code>package.json</code> 中添加脚本：</p>
<div><pre><code><span>{</span>
  <span>"scripts"</span><span>:</span> <span>{</span>
    <span>"test"</span><span>:</span> <span>"jest"</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>执行 <code>yarn test</code>，会根据 <code>jest.config.js</code> 的配置内容进行测试：</p>
<img :src="$withBase('/assets/roadmap/vue/template/jest_result.png')" alt="">
<h3 id="将测试集成到-husky-中"> 将测试集成到 husky 中</h3>
<p>默认情况下，<code>husky</code> 提供的代码是每次提交都进行测试，这样对于开发来说比较麻烦，我们之前也删除了对应的代码。我们希望在 <code>push</code> 的时候测试代码，这样可以减少测试数量，同时也保证了代码的有效性。</p>
<p>使用 <code>pre-push</code> 钩子就可以实现。</p>
<div><pre><code>npx husky <span>add</span> .husky/pre-push <span>"yarn test <span>$1</span>"</span>
</code></pre>
<div><span>1</span><br></div></div><p>该命令会在 <code>.husky</code> 文件夹下创建一个 <code>pre-push</code> 的钩子文件。</p>
<p>现在，每次我们提交的时候都会执行测试，只有当测试通过才会进行 <code>push</code> 操作。</p>
<h2 id="测试常见问题"> 测试常见问题</h2>
<h3 id="配置全局-key-之后的-vuex-如何测试"> 配置全局 key 之后的 vuex 如何测试</h3>
<p>在测试中，可以发现，当页面中调用了之前我们配置的 <code>./useStore()</code> 之后，会报找不到 <code>key</code> 的错误：</p>
<img :src="$withBase('/assets/roadmap/vue/template/test_vuex_key_error.png')" alt="">
<p>此时我们需要对 <code>store</code> 进行一个全局注入，将 <code>key</code> 一并注入到测试组件中。</p>
<div><div><br><br><div>&nbsp;</div><br><br><br><br><br><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><br><br><br><br><br><br><br><br></div><pre><code><span>import</span> <span>{</span> shallowMount <span>}</span> <span>from</span> <span>"@vue/test-utils"</span><span>;</span>
<span>import</span> WelcomeComponent <span>from</span> <span>"@/components/HelloWorld.vue"</span><span>;</span>
<span>import</span> store<span>,</span> <span>{</span> key <span>}</span> <span>from</span> <span>"@/store/index"</span><span>;</span>

<span>describe</span><span>(</span><span>"Welcome Component Test"</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>const</span> wrapper <span>=</span> <span>shallowMount</span><span>(</span>WelcomeComponent<span>,</span> <span>{</span>
    props<span>:</span> <span>{</span> msg<span>:</span> <span>"Hello Test!"</span> <span>}</span><span>,</span>

    global<span>:</span> <span>{</span>
      plugins<span>:</span> <span>[</span><span>[</span>store<span>,</span> key<span>]</span><span>]</span>
    <span>}</span>
  <span>}</span><span>)</span><span>;</span>

  <span>it</span><span>(</span><span>"load compoent"</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>const</span> html <span>=</span> wrapper<span>.</span><span>text</span><span>(</span><span>)</span><span>;</span>
    <span>expect</span><span>(</span>html<span>)</span><span>.</span><span>toContain</span><span>(</span><span>"Hello Test!"</span><span>)</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><p>需要注意的是，<code>JS</code> 中 <code>Symbol</code> 是唯一的，所以需要从 <code>store</code> 中导出。但是我们定义的 <code>key</code> 是 <code>InjectionKey</code> 类型，不能用作键，故不能使用：</p>
<div><pre><code>global<span>:</span> <span>{</span>
  provide<span>:</span> <span>{</span>
    <span>[</span>key<span>]</span><span>:</span> store
  <span>}</span><span>,</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>的方式，所以我们选择通过 <code>plugins</code> 的方式添加。更多参见 <a href="https://next.vue-test-utils.vuejs.org/guide/advanced/vuex.html#testing-components-that-utilize-usestore-with-an-injection-key" target="_blank" rel="noopener noreferrer">文档</a>。</p>
<hr />
<section>
<ol>
<li id="fn1"><p>使用时注意使用一个即可。请添加后自行删除 <code>package.json</code> 中 <code>devDependencies</code> 字段中的多余内容即可。 </p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    <item>
      <title>虚拟 DOM</title>
      <link>https://docs.jeremyjone.com/roadmap/frontend/vue/virtualdom/</link>
      <guid>https://docs.jeremyjone.com/roadmap/frontend/vue/virtualdom/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">虚拟 DOM</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="虚拟-dom"> 虚拟 DOM</h1>
]]></content:encoded>
    </item>
    <item>
      <title>Java 学习之路</title>
      <link>https://docs.jeremyjone.com/roadmap/java/</link>
      <guid>https://docs.jeremyjone.com/roadmap/java/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">Java 学习之路</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="java-学习之路"> Java 学习之路</h1>
<p>Java 的学习之路，页面包含学习链接。</p>
<p><a href="https://github.com/s4kibs4mi/java-developer-roadmap" target="_blank" rel="noopener noreferrer">英文</a></p>
<p><img src="https://github.com/s4kibs4mi/java-developer-roadmap/raw/master/java-developer-roadmap.png" alt="java roadmap" /></p>
]]></content:encoded>
      <enclosure url="https://github.com/s4kibs4mi/java-developer-roadmap/raw/master/java-developer-roadmap.png" type="image/png"/>
    </item>
    <item>
      <title>代码书写规范总纲</title>
      <link>https://docs.jeremyjone.com/standard/</link>
      <guid>https://docs.jeremyjone.com/standard/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">代码书写规范总纲</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="代码书写规范总纲"> 代码书写规范总纲</h1>
<Description author="JeremyJone" version="v1" copyright="Jz" />
<p><strong>良好的规范，促进高质量的代码。</strong> --<em>与君共勉</em></p>
<h2 id="前言"> 前言</h2>
<p>本《规范》旨在帮助编写更加清晰工整的代码，它是一种认为的，作为约束那些不在编译错误范围内的不良习惯。</p>
<p>在一开始编写代码，会有很多不良习惯，有的是为了方便图省事，有的是确实不知道有什么更好的方式方法，时间久了，造成了一种不良的编写习惯，不仅再次翻阅时头痛，也会增加维护成本，有甚者会失去一些工作机会等。</p>
<p>为了避免和规范代码，特制定本《规范》，它适用于大多数情况，如有特例，必要时应使用注释等方式进行显式注明其作用。</p>
<h2 id="通用规则"> 通用规则</h2>
<p>有一些规范是不依赖任何语言的，当然有些语言对这些规则也有一些独特的规范化提案，我们应当在遵循这些提案的情况下，适配本《规范》，它的优先级更低。</p>
<h3 id="使用多文件"> 使用多文件</h3>
<p>在项目中，应当使用多个文件和文件夹，以区分每一个文件的功能，而需要将功能类似的文件放在同一个文件夹中，进一步加以区分项目的整体结构。</p>
<blockquote>
<ul>
<li>
<p>不同功能应当区分</p>
</li>
<li>
<p>创建的每一个类都应当是单独的文件</p>
</li>
<li>
<p>文件和文件夹的名称应当具有显式的意义</p>
</li>
</ul>
</blockquote>
<p>这个在不同语言中的要求不尽相同，但是更多的是在设计阶段，就应该为整个项目设计好整体的目录结构，分成不同模块，分工协作开发。</p>
<h3 id="使用缩进"> 使用缩进</h3>
<p>不同的代码块作用域，应当使用不同量的缩进予以对应，这样看上去具有更加清晰的层级，方便编写和检查。</p>
<blockquote>
<ul>
<li>
<p>每一级缩进应当使用 4 个 space，而不是一个 tab</p>
</li>
<li>
<p>在同一个项目中，应当使用相同 space 的缩进量</p>
</li>
<li>
<p>作用域的大括号（如果有），只要括号不与代码同行，都应当与代码左对齐</p>
</li>
<li>
<p>在书写大括号时，应当每次直接书写完整的括号，然后在其内部编写代码</p>
</li>
</ul>
</blockquote>
<p>一个不好的例子：</p>
<div><pre><code><span><span>#</span><span>include</span> <span>&lt;stdio.h></span></span>
<span>int</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
<span>int</span> i<span>,</span> j<span>;</span>
<span>for</span><span>(</span>i<span>=</span><span>0</span><span>;</span>i<span>&lt;</span><span>10</span><span>;</span>i<span>++</span><span>)</span> <span>{</span>
<span>for</span><span>(</span>j<span>=</span><span>0</span><span>;</span>j<span>&lt;</span><span>10</span><span>;</span>j<span>++</span><span>)</span> <span>{</span>
<span>printf</span><span>(</span><span>"%d - %d"</span><span>,</span> i<span>,</span> j<span>)</span><span>;</span>
<span>}</span>
<span>}</span>
<span>return</span> <span>0</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>一个好的例子：</p>
<div><pre><code><span><span>#</span><span>include</span> <span>&lt;stdio.h></span></span>
<span>int</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
    <span>int</span> i<span>,</span> j<span>;</span>

    <span>for</span> <span>(</span>i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>10</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>
        <span>for</span> <span>(</span>j <span>=</span> <span>0</span><span>;</span> j <span>&lt;</span> <span>10</span><span>;</span> j<span>++</span><span>)</span> <span>{</span>
            <span>printf</span><span>(</span><span>"%d - %d"</span><span>,</span> i<span>,</span> j<span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>

    <span>return</span> <span>0</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>不难看出，前者很难看出区别，而后者结构清晰，可以一眼看出结构格式甚至逻辑。</p>
<h3 id="使用空行"> 使用空行</h3>
<p>空行起到分隔段落的作用，使得整个程序结构更加清晰。</p>
<blockquote>
<ul>
<li>
<p>定义变量后需要空一行</p>
</li>
<li>
<p>每个函数定义结束后需要空至少一行</p>
</li>
<li>
<p>类之间需要空至少两行（原则上每个类都应该不同文件）</p>
</li>
<li>
<p>在同一个作用域中，不同的逻辑内容需要使用空行分开，加以区分其功能的不同性。</p>
</li>
</ul>
</blockquote>
<p>示例：</p>
<div><div><br><br><div>&nbsp;</div><br><br><br><div>&nbsp;</div><br><br><br></div><pre><code><span>int</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
    <span>int</span> i<span>;</span>

    <span>for</span> <span>(</span>i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>10</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>
        <span>// ...</span>
    <span>}</span>

    <span>return</span> <span>0</span><span>;</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h3 id="使用空格"> 使用空格</h3>
<p>空格可以使同行内的代码结构变得更加清晰明了。</p>
<blockquote>
<ul>
<li>
<p>行尾不要有空格</p>
</li>
<li>
<p>函数名之后不要有空格</p>
</li>
<li>
<p>一般情况下，不要在同一行出现多个表达式，否则使用一个空格分开</p>
</li>
<li>
<p>关键字之后需要有一个空格。比如 <code>if</code>、<code>for</code>、<code>while</code>等</p>
</li>
<li>
<p>赋值运算符、关系运算符、算术运算符、逻辑运算符、位运算符等都需要左右使用一个空格</p>
</li>
<li>
<p>单目运算符等前后不加空格</p>
</li>
</ul>
</blockquote>
<p>示例:</p>
<div><div><div>&nbsp;</div><br><br><br></div><pre><code><span>for</span> <span>(</span>i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>10</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>
    <span>// ...</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="有效的名称"> 有效的名称</h2>
<p>在代码中，所有变量、函数、类都具有一个名称，它方便了程序员编写代码。很多时候，一个有效的名称可以减少大量的不必要工作和时间。</p>
<p>一个简单的例子：</p>
<div><pre><code><span>int</span> a <span>=</span> <span>18</span><span>;</span>
<span>int</span> age <span>=</span> <span>18</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>很明显，使用第二行的 <code>age</code> 可以更加清晰的表述这个数字的具体含义，这为之后的引用或修改提供了帮助。</p>
<h3 id="变量名"> 变量名</h3>
<p>每一个变量名都应当具有其显式的意义，任何违背此原则的变量名，都属于一个不好的名称。</p>
<blockquote>
<ul>
<li>
<p>使用具名含义的名词，如 age、size、width 等</p>
</li>
<li>
<p>使用特殊含义的词语，来限定其特殊意义，如 is、can、has 等</p>
<ul>
<li>
<p>用来衡量 <code>是不是</code> 的含义的，使用 <code>is</code> 开头 + 本体词语</p>
</li>
<li>
<p>用来衡量 <code>行不行</code> 的含义的，使用 <code>can</code> 开头 + 本体词语</p>
</li>
<li>
<p>用来衡量 <code>有没有</code> 的含义的，使用 <code>has</code> 开头 + 本体词语</p>
</li>
<li>
<p>C++的成员变量通常需要加上 <code>m</code> 前缀，表示其为成员变量</p>
</li>
</ul>
</li>
<li>
<p>变量通常使用 小驼峰格式 或 全小写 + 下划线 <code>_</code> 的格式</p>
</li>
<li>
<p>常量应当使用全大写 + 下划线 <code>_</code> 的格式</p>
</li>
</ul>
</blockquote>
<p>同时，一些含义模糊的名称应当避免使用。比如：</p>
<div><pre><code><span>// wrong</span>
<span>int</span> number <span>=</span> <span>1</span><span>;</span> <span>// 这是什么数字？</span>
bool flag <span>=</span> true<span>;</span> <span>// 这是哪个标志位？</span>

<span>// right</span>
<span>int</span> resNum <span>=</span> <span>1</span><span>;</span> <span>// 结果的数字，result 简写为 res 是可以的，它是通用的</span>
bool okFlag <span>=</span> true<span>;</span> <span>// 成功的标志位，意味着成功会是 ok 的，不需要再去翻阅上下文查看 flag 的含义</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id="函数名"> 函数名</h3>
<p>函数名称应当显式的给出其作用、返回值等信息，不应当使用无意义的 <code>fn</code> 等。</p>
<p>通常，函数名应当使用一个 动词 + 名词 的结构格式来命名。</p>
<p>常用的函数前缀包括：</p>
<table>
<thead>
<tr>
<th style="text-align:center">前缀</th>
<th style="text-align:left">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">get</td>
<td style="text-align:left">获取某个值</td>
</tr>
<tr>
<td style="text-align:center">set</td>
<td style="text-align:left">赋值</td>
</tr>
<tr>
<td style="text-align:center">handle</td>
<td style="text-align:left">操作功能</td>
</tr>
</tbody>
</table>
<p>例如：</p>
<div><pre><code><span>public</span> <span>String</span> <span>getName</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> name<span>;</span>
<span>}</span>

<span>public</span> <span>void</span> <span>setName</span><span>(</span><span>String</span> n<span>)</span> <span>{</span>
    name <span>=</span> n<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="有用的注释"> 有用的注释</h2>
<p>注释通常是给程序员使用，方便记录下当前写下此处代码的逻辑想法，为了以后再次查看或修改时使用。</p>
<p>当然，在逻辑结构中，99%的逻辑代码都可以使用  替代。</p>
<p>例如：</p>
<div><pre><code><span>// wrong</span>
<span>function</span> <span>getWidth</span><span>(</span><span>)</span> <span>{</span>
    <span>// 默认宽度的最小值</span>
    <span>const</span> size <span>=</span> <span>10</span><span>;</span>

    <span>// 这里需要判断是否小于最小值，如果小于，返回最小值</span>
    <span>if</span> <span>(</span><span>this</span><span>.</span>width <span>&lt;</span> size<span>)</span> <span>{</span>
        <span>return</span> size<span>;</span>
    <span>}</span>

    <span>return</span> <span>this</span><span>.</span>width<span>;</span>
<span>}</span>

<span>// right</span>
<span>function</span> <span>getWidth</span><span>(</span><span>)</span> <span>{</span>
    <span>const</span> defaultMinWidth <span>=</span> <span>10</span><span>;</span>

    <span>if</span> <span>(</span><span>this</span><span>.</span>width <span>&lt;</span> defaultMinWidth<span>)</span> <span>{</span>
        <span>return</span> defaultMinWidth<span>;</span>
    <span>}</span>

    <span>return</span> <span>this</span><span>.</span>width<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><p>上例中，明显下面的正确方式不再需要任何注释，并且可以确保每一行都能看得明白。</p>
<p>所以，上面的错误示例中，第3行和第6行的注释，就属于无用的注释，它们完全可以被更加精良的代码所替代。</p>
<h2 id="具体的语言"> 具体的语言</h2>
<p>每种语言都有自己独特的使用方式。所以《规范》应当针对不同语言具有不同的内容。<strong>请记住，任何情况下，具体语言的规范优先级都应该高于通用规范。</strong></p>
]]></content:encoded>
    </item>
    <item>
      <title>Vue Router</title>
      <link>https://docs.jeremyjone.com/roadmap/frontend/vue/supports/router/</link>
      <guid>https://docs.jeremyjone.com/roadmap/frontend/vue/supports/router/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">Vue Router</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="vue-router"> Vue Router</h1>
<h2 id="路由原理"> 路由原理</h2>
<h2 id="动态匹配"> 动态匹配</h2>
<h2 id="匹配规则"> 匹配规则</h2>
<h2 id="嵌套路由"> 嵌套路由</h2>
<h2 id="导航守卫"> 导航守卫</h2>
<h2 id="懒加载"> 懒加载</h2>
]]></content:encoded>
    </item>
    <item>
      <title>C#</title>
      <link>https://docs.jeremyjone.com/standard/csharp/</link>
      <guid>https://docs.jeremyjone.com/standard/csharp/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">C#</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="c"> C#</h1>
]]></content:encoded>
    </item>
    <item>
      <title>HTML 规范</title>
      <link>https://docs.jeremyjone.com/standard/html/</link>
      <guid>https://docs.jeremyjone.com/standard/html/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">HTML 规范</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="html-规范"> HTML 规范</h1>
<Description author="jeremyjone" version="v1" />
<p>本规范适用于所有Html页面的开发。</p>
<p>开发工具，推荐使用 <code>VS Code</code>，或者 <code>WebStorm</code>。</p>
<p>使用 <code>VS Code</code> 的话，需要安装 <code>HTML CSS Support</code>、<code>HTML Snippets</code>、<code>Live Server</code> 等插件以实现更快、更好的开发。</p>
<p>Html 文档总是应当使用 HTML5 标准。</p>
<div><pre><code><span><span>&lt;!</span><span>DOCTYPE</span> <span>html</span><span>></span></span>
</code></pre>
<div><span>1</span><br></div></div><p>Html 标签应当按照 H5 的使用规则，适当使用语义化标签，可以使整个页面变得更加具有可读性。</p>
<p>所有没有子标签的标签，都应当使用闭合方式。
所有的子标签，都应当自动缩进。</p>
<div><pre><code><span><span><span>&lt;</span>img</span> <span>/></span></span>

<span><span><span>&lt;</span>div</span><span>></span></span>
  <span><span><span>&lt;</span>button</span> <span>/></span></span>
<span><span><span>&lt;/</span>div</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>CSS 规范</title>
      <link>https://docs.jeremyjone.com/standard/css/</link>
      <guid>https://docs.jeremyjone.com/standard/css/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">CSS 规范</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="css-规范"> CSS 规范</h1>
<Description author="jeremyjone" version="v1" />
<p>本文档适用于所有css文件的开发编写。</p>
<p>同时，推荐使用<code>scss</code>，<code>sass</code>，<code>stylus</code>等扩展的 css 语言。最好使用<code>stylus</code>。</p>
<h2 id="_1-css-属性的命名"> 1 CSS 属性的命名</h2>
<p>css 的 ID 应当尽量少用，可以在一个页面使用一个，这样可以有效减少 ID 的使用，同时降低了 className 重复命名的概率（使用作用域/嵌套方式）。</p>
<p>css 的 className 应当同样具有语义化，通过名字就知道它对应的标签元素和内容。
cssclassName 应当使用 <code>小写 + “-”</code> 连接符进行拼接。</p>
<div><pre><code><span>#header-menu </span><span>{</span>
  <span>font-size</span><span>:</span> 20px<span>;</span>
  <span>background-color</span><span>:</span> #0ff<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="_2-使用-css-的属性缩写"> 2 使用 CSS 的属性缩写</h2>
<p>如果在一个 css 的 class 中有多个同一范围的属性，则应当尽可能的使用它的缩写。</p>
<div><pre><code><span>// 错误的写法</span>
<span>#header-menu </span><span>{</span>
  <span>margin-left</span><span>:</span> 10px<span>;</span>
  <span>margin-right</span><span>:</span> 10px<span>;</span>
  <span>margin-top</span><span>:</span> 20px<span>;</span>
  <span>margin-bottom</span><span>:</span> 5px<span>;</span>
<span>}</span>

<span>// 正确的写法</span>
<span>#header-menu </span><span>{</span>
  <span>margin</span><span>:</span> 20px 10px 5px 10px<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h2 id="_3-css-语言规范"> 3 CSS 语言规范</h2>
<ul>
<li>每一个 CSS 属性都应当跟一个<code>;</code>（stylus 除外）</li>
<li>CSS 的选择器应当间可能的简单，每个选择器和声明都应当是独立的一行</li>
<li>对于<code>url()</code>方法，可以省略协议，直接使用 uri 内容而不需要加引号</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>JavaScript 开发规范</title>
      <link>https://docs.jeremyjone.com/standard/javascript/</link>
      <guid>https://docs.jeremyjone.com/standard/javascript/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">JavaScript 开发规范</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="javascript-开发规范"> JavaScript 开发规范</h1>
<Description author="jeremyjone" version="v1" />
<p>本规范适用于所有使用 JavaScript 以及相关框架的开发。</p>
<p>开发工具，推荐使用 <code>VS Code</code>，或者 <code>WebStorm</code>。</p>
<h2 id="_1-变量"> 1 变量</h2>
<h3 id="_1-1-变量定义"> 1.1 变量定义</h3>
<p>变量的定义，不建议使用<code>var</code>，应该使用<code>let</code>或者<code>const</code>，进而优先使用<code>const</code>。</p>
<ul>
<li>变量应当尽可能的在当前作用域的起始位置，而不是随便什么地方</li>
<li>变量应当赋初值，而非直接使用<code>let a</code>这样的方式直接定义，如果没有初值，可以赋值为<code>null</code></li>
<li>通常情况下，应当避免使用<code>,</code>逗号运算符</li>
</ul>
<div><pre><code><span>let</span> itemId <span>=</span> <span>1</span><span>;</span>
<span>const</span> itemList <span>=</span> <span>[</span><span>]</span><span>;</span>
<span>let</span> itemObj <span>=</span> <span>null</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h4 id="_1-1-1-变量定义时的数据类型"> 1.1.1 变量定义时的数据类型</h4>
<p>数据类型应当遵循如下规则：</p>
<ul>
<li>6 种基本类型直接赋值（Symbol 除外）</li>
<li>数组应当直接使用<code>[]</code>创建</li>
<li>对象应当直接使用<code>{}</code>创建</li>
</ul>
<div><pre><code><span>const</span> itemObj <span>=</span> <span>{</span><span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="_1-2-变量的命名"> 1.2 变量的命名</h3>
<p>变量应当使用小驼峰的格式，而常量应当是全大写并以“_”下划线作为连接字符。
变量名应当合乎逻辑，容易阅读和理解。</p>
<div><pre><code><span>let</span> itemId <span>=</span> <span>1</span><span>;</span>
<span>const</span> <span>USER_ID</span> <span>=</span> <span>"USERID"</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h4 id="_1-2-1-命名的用词"> 1.2.1 命名的用词</h4>
<p>有一些词汇可以特定针对某一类属性、方法进行定义。</p>
<ul>
<li>以<code>is</code>，<code>can</code>，<code>has</code>等状态词汇开头的，应当是<code>boolean</code>类型</li>
<li>一个复杂类型，应当是以它对应的类型首字母开头，或以全名结尾的，如<code>oItem</code>，<code>itemList</code>等</li>
<li>以<code>get</code>，<code>set</code>等操作词汇开头的，应当是一个取值/赋值的方法</li>
</ul>
<h2 id="_2-模板字符串"> 2 模板字符串</h2>
<p>字符串不应当拼接，而应当使用 ES6 提供的模板字符串格式。
这个约束规范同样适用于包括 vue 文件的<code>template</code>标签在内的所有语句。</p>
<div><pre><code><span>const</span> message <span>=</span> <span><span>`</span><span><span>${</span>userName<span>}</span></span><span>: online</span><span>`</span></span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><h2 id="_3-对象的使用"> 3 对象的使用</h2>
<h3 id="_3-1-判断对象类型"> 3.1 判断对象类型</h3>
<p>不要尝试通过 <code>typeof</code> 判断的对象类型，<strong>尤其是对象</strong>，因为它不够严谨。</p>
<div><div><br><br><br><br><br><br><br><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><br></div><pre><code><span>var</span> a <span>=</span> <span>1</span><span>;</span>
<span>var</span> b <span>=</span> <span>"b"</span><span>;</span>
<span>var</span> c <span>=</span> <span>{</span><span>}</span><span>;</span>
<span>var</span> d <span>=</span> <span>[</span><span>]</span><span>;</span>
<span>var</span> p <span>=</span> <span>new</span> <span>Person</span><span>(</span><span>)</span><span>;</span>
<span>typeof</span> a<span>;</span> <span>// => "number"</span>
<span>typeof</span> b<span>;</span> <span>// => "string"</span>
<span>typeof</span> c<span>;</span> <span>// => "object"</span>
<span>typeof</span> d<span>;</span> <span>// => "object"</span>
<span>typeof</span> p<span>;</span> <span>// => "object"</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>可以看到，c、d、p 这些变量都被判断为 object。为了避免这个问题，可以通过原型来获取类型。为了更好的判断自定义，可以使用 <code>instanceof</code>。</p>
<p>我对此封装了一些常用函数，这样可以提高利用度。</p>
<div><pre><code><span>// 是否为null</span>
<span>export</span> <span>const</span> <span>isNull</span> <span>=</span> <span>o</span> <span>=></span> <span>{</span>
  <span>return</span> <span>Object</span><span>.</span>prototype<span>.</span><span>toString</span><span>.</span><span>call</span><span>(</span>o<span>)</span><span>.</span><span>slice</span><span>(</span><span>8</span><span>,</span> <span>-</span><span>1</span><span>)</span> <span>===</span> <span>"Null"</span><span>;</span>
<span>}</span><span>;</span>

<span>// 是否undefined</span>
<span>export</span> <span>const</span> <span>isUndefined</span> <span>=</span> <span>o</span> <span>=></span> <span>{</span>
  <span>return</span> <span>Object</span><span>.</span>prototype<span>.</span><span>toString</span><span>.</span><span>call</span><span>(</span>o<span>)</span><span>.</span><span>slice</span><span>(</span><span>8</span><span>,</span> <span>-</span><span>1</span><span>)</span> <span>===</span> <span>"Undefined"</span><span>;</span>
<span>}</span><span>;</span>

<span>// 是否对象</span>
<span>export</span> <span>const</span> <span>isObject</span> <span>=</span> <span>o</span> <span>=></span> <span>{</span>
  <span>return</span> <span>Object</span><span>.</span>prototype<span>.</span><span>toString</span><span>.</span><span>call</span><span>(</span>o<span>)</span><span>.</span><span>slice</span><span>(</span><span>8</span><span>,</span> <span>-</span><span>1</span><span>)</span> <span>===</span> <span>"Object"</span><span>;</span>
<span>}</span><span>;</span>

<span>// 是否数组</span>
<span>export</span> <span>const</span> <span>isArray</span> <span>=</span> <span>o</span> <span>=></span> <span>{</span>
  <span>return</span> <span>Object</span><span>.</span>prototype<span>.</span><span>toString</span><span>.</span><span>call</span><span>(</span>o<span>)</span><span>.</span><span>slice</span><span>(</span><span>8</span><span>,</span> <span>-</span><span>1</span><span>)</span> <span>===</span> <span>"Array"</span><span>;</span>
<span>}</span><span>;</span>

<span>// 是否时间对象</span>
<span>export</span> <span>const</span> <span>isDate</span> <span>=</span> <span>o</span> <span>=></span> <span>{</span>
  <span>return</span> <span>Object</span><span>.</span>prototype<span>.</span><span>toString</span><span>.</span><span>call</span><span>(</span>o<span>)</span><span>.</span><span>slice</span><span>(</span><span>8</span><span>,</span> <span>-</span><span>1</span><span>)</span> <span>===</span> <span>"Date"</span><span>;</span>
<span>}</span><span>;</span>

<span>// 是否函数</span>
<span>export</span> <span>const</span> <span>isFunction</span> <span>=</span> <span>o</span> <span>=></span> <span>{</span>
  <span>return</span> <span>Object</span><span>.</span>prototype<span>.</span><span>toString</span><span>.</span><span>call</span><span>(</span>o<span>)</span><span>.</span><span>slice</span><span>(</span><span>8</span><span>,</span> <span>-</span><span>1</span><span>)</span> <span>===</span> <span>"Function"</span><span>;</span>
<span>}</span><span>;</span>

<span>// 是否boolean</span>
<span>export</span> <span>const</span> <span>isBoolean</span> <span>=</span> <span>o</span> <span>=></span> <span>{</span>
  <span>return</span> <span>Object</span><span>.</span>prototype<span>.</span><span>toString</span><span>.</span><span>call</span><span>(</span>o<span>)</span><span>.</span><span>slice</span><span>(</span><span>8</span><span>,</span> <span>-</span><span>1</span><span>)</span> <span>===</span> <span>"Boolean"</span><span>;</span>
<span>}</span><span>;</span>

<span>// 是否字符串</span>
<span>export</span> <span>const</span> <span>isString</span> <span>=</span> <span>o</span> <span>=></span> <span>{</span>
  <span>return</span> <span>Object</span><span>.</span>prototype<span>.</span><span>toString</span><span>.</span><span>call</span><span>(</span>o<span>)</span><span>.</span><span>slice</span><span>(</span><span>8</span><span>,</span> <span>-</span><span>1</span><span>)</span> <span>===</span> <span>"String"</span><span>;</span>
<span>}</span><span>;</span>

<span>// 是否数字</span>
<span>export</span> <span>const</span> <span>isNumber</span> <span>=</span> <span>o</span> <span>=></span> <span>{</span>
  <span>return</span> <span>Object</span><span>.</span>prototype<span>.</span><span>toString</span><span>.</span><span>call</span><span>(</span>o<span>)</span><span>.</span><span>slice</span><span>(</span><span>8</span><span>,</span> <span>-</span><span>1</span><span>)</span> <span>===</span> <span>"Number"</span><span>;</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br></div></div><h3 id="_3-1-对象的拷贝"> 3.1 对象的拷贝</h3>
<p>对象的拷贝属于浅拷贝，所以不可以使用<code>=</code>直接赋值。但是，也不建议使用<code>Object.assign(target, ...sources)</code>，应当直接使用扩展运算符。</p>
<div><pre><code><span>const</span> oldObject <span>=</span> <span>{</span>a<span>:</span> <span>1</span><span>,</span> b<span>:</span> <span>2</span><span>}</span>
conost newObject <span>=</span> <span>{</span><span>...</span>oldObject<span>,</span> c<span>:</span> <span>3</span><span>}</span>

<span>// 或者使用下面JSON方式，但同样不是非常好的方案。</span>
<span>const</span> newObject <span>=</span> <span>JSON</span><span>.</span><span>parse</span><span>(</span><span>JSON</span><span>.</span><span>stringify</span><span>(</span>oldObject<span>)</span><span>)</span>

<span>// 应当使用递归的方法封装一个clone函数。</span>
<span>function</span> <span>clone</span><span>(</span><span>data</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span><span>!</span><span>isObject</span><span>(</span>data<span>)</span><span>)</span> <span>{</span>
    <span>return</span> data<span>;</span>
  <span>}</span> <span>else</span> <span>{</span>
    <span>var</span> d <span>=</span> <span>isArray</span><span>(</span>data<span>)</span> <span>?</span> <span>[</span><span>]</span> <span>:</span> <span>{</span><span>}</span><span>;</span>
    <span>for</span> <span>(</span><span>var</span> i <span>in</span> data<span>)</span> <span>{</span>
      d<span>[</span>i<span>]</span> <span>=</span> <span>isObject</span><span>(</span>data<span>[</span>i<span>]</span><span>)</span> <span>?</span> <span>clone</span><span>(</span>data<span>[</span>i<span>]</span><span>)</span> <span>:</span> data<span>[</span>i<span>]</span><span>;</span>
    <span>}</span>
    <span>return</span> d<span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><h3 id="_3-2-对象添加属性"> 3.2 对象添加属性</h3>
<p>对象添加属性，不应当直接对对象直接操作，而是使用<code>Object.assign()</code>的方法。</p>
<div><pre><code><span>const</span> object1 <span>=</span> <span>{</span> a<span>:</span> <span>1</span><span>,</span> b<span>:</span> <span>2</span> <span>}</span><span>;</span>
Object<span>.</span><span>assign</span><span>(</span>object1<span>,</span> <span>{</span> c<span>:</span> <span>3</span> <span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><div><p>警告</p>
<p>禁止使用下面方式：</p>
<div><pre><code>object1<span>.</span>d <span>=</span> <span>4</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div></div>
<h2 id="_4-条件语句"> 4 条件语句</h2>
<p>当条件较少或条件过于复杂的时候，使用<code>if</code>语句；而当条件分支多于 3 个的时候，可以考虑尽可能的使用<code>switch</code>语句。</p>
<h3 id="_4-1-if-语句"> 4.1 if 语句</h3>
<p>对于在条件内需要 <code>return</code> 的，需要有一个 else，如果为空，可以返回 <code>void 0</code>。</p>
<div><pre><code><span>if</span> <span>(</span>condition<span>)</span> <span>{</span>
  <span>// ...</span>
<span>}</span>

<span>if</span> <span>(</span>condition1<span>)</span> <span>{</span>
  <span>// ...</span>
  <span>return</span> xxx<span>;</span>
<span>}</span> <span>else</span> <span>if</span> <span>(</span>condition2<span>)</span> <span>{</span>
  <span>// ...</span>
  <span>return</span> yyy<span>;</span>
<span>}</span> <span>else</span> <span>{</span>
  <span>return</span> <span>void</span> <span>0</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><div><p>提示</p>
<p>尽可能将 <code>return</code> 语句置于条件块之外，作为函数的最后一条语句。</p>
</div>
<h3 id="_4-2-switch-语句"> 4.2 switch 语句</h3>
<p>所有 switch 分支都应该具有一个<code>break</code>语句，并且最后都应该具有一个<code>default</code>分支，哪怕它只具有一个<code>break</code>语句。</p>
<div><pre><code><span>switch</span><span>(</span>condition<span>)</span> <span>{</span>
    <span>case</span> c1<span>:</span>
        <span>// ...</span>
        <span>break</span><span>;</span>
    <span>case</span> c2<span>:</span>
        <span>// ...</span>
        <span>break</span><span>;</span>
    <span>...</span>

    <span>case</span> c8<span>:</span>
    <span>case</span> c9<span>:</span>
    <span>case</span> c10<span>:</span>
        <span>// ...，可以批量处理多个分支，这是被允许的</span>
        <span>break</span><span>;</span>
    <span>default</span><span>:</span>
        <span>// ...</span>
        <span>break</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><h2 id="_5-循环"> 5 循环</h2>
<p>如果不是完整的需要遍历整个对象，则尽可能不使用<code>foreach</code>方法，而是使用<code>for</code>的方案。</p>
<div><pre><code><span>// 第一种，普通方式，不推荐</span>
<span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> arr<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span><span>}</span>

<span>// 第二种，优化方案，推荐</span>
<span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>,</span> j <span>=</span> arr<span>.</span>length<span>;</span> i <span>&lt;</span> j<span>;</span> i<span>++</span><span>)</span> <span>{</span><span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>上面的方案，更加推荐使用第二种方式，因为如果 arr 是 DOM 对象的时候，每一次迭代都会访问 DOM 层，使用第二种方式，就只会访问一次 DOM 层，效率更高。</p>
<p>注意：第二种方式并不适用 DOM 动态更新的场景。</p>
<h2 id="_6-null-与-undefined"> 6 null 与 undefined</h2>
<ul>
<li>创建一个对象时，可以将其赋值为<code>null</code>，但不可以赋值为<code>undefined</code></li>
<li>判断一个对象是否存在时，需要使用<code>obj === null</code>或<code>obj !== null</code>，而不是标准相等符<code>==</code>。同时也不可以使用<code>obj === undefined</code>来进行判断。</li>
</ul>
<div><p>提示</p>
<p>如果需要使用 <code>undefined</code>，可以通过如下方式获取：</p>
<div><pre><code><span>void</span> <span>0</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><p>它减少了代码量，同时减少了输入性的错误可能性。</p>
</div>
<h2 id="_7-函数"> 7 函数</h2>
<p>通常情况下，函数应当使用显示方法声明，而不是直接使用<code>fun()</code>这样的方式直接创建。这点在<code>*.vue</code>文件的<code>method</code>属性中尤其需要注意。</p>
<p>函数的命名应当遵循小驼峰的方式。</p>
<div><pre><code>method<span>:</span> <span>{</span>
    <span>myMethod</span><span>:</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
        <span>// ...</span>
    <span>}</span>
<span>}</span>

<span>myMethod</span><span>:</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    <span>// ...</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h3 id="_7-1-工具类的函数"> 7.1 工具类的函数</h3>
<p>对于在 utils 等文件夹中的工具函数，如果需要直接导出，可以通过下面方式：</p>
<div><pre><code><span>export</span> <span>function</span> <span>myMethod</span><span>(</span><span>)</span> <span>{</span>
  <span>// ...</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>这样可以单独调用某一个函数。</p>
<div><pre><code><span>import</span> <span>{</span> myMethod <span>}</span> <span>from</span> <span>"./utils"</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><h2 id="_8-javascript-es6-规范"> 8 JavaScript ES6 规范</h2>
<p>应当完全遵循 ES6 的规范编写代码，以提高代码质量。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Python 开发规范</title>
      <link>https://docs.jeremyjone.com/standard/python/</link>
      <guid>https://docs.jeremyjone.com/standard/python/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">Python 开发规范</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="python-开发规范"> Python 开发规范</h1>
<Description author="jeremyjone" date="2019.7.9" version="v1.1" copyright="FFM TD" />
<p>This rule defines the basic rules for python code, Developers need to follow this rule to develop. All python code for FFM needs to follow this rule.</p>
<h2 id="for-environment"> For Environment</h2>
<ul>
<li>
<p>【<strong>compulsory</strong>】Try not to change the production environment, if necessary change, need to apply, Amendments may be made only after the application is approved.</p>
</li>
<li>
<p>【<strong>compulsory</strong>】If a new package needs to be installed, it needs to be submitted with SVN updates and tell everyone.</p>
</li>
</ul>
<h2 id="for-style"> For Style</h2>
<ul>
<li>
<p>【<strong>compulsory</strong>】Should be follow Pythonic style. PEP8 format.</p>
</li>
<li>
<p>【<strong>compulsory</strong>】Code is strictly prohibited to use <strong>pinyin</strong> and <strong>English</strong> mixed way, not to allow direct use of the <strong>Chinese way</strong>.
<em>Explanation: correct English spelling and grammar can make readers understand easily and avoid ambiguity. Note that even pure pinyin naming should be avoided.</em></p>
</li>
<li>
<p>【<strong>compulsory</strong>】Every methods, variables name should be meaningful, use descriptive names with one or more simple English words by <strong>camelCaseStyle</strong>.</p>
<div><pre><code><span>def</span> <span>pythonFunction</span><span>(</span><span>)</span><span>:</span>
    varNum <span>=</span> <span>1</span>
    varStr <span>=</span> <span>'a'</span>
    vardict <span>=</span> <span>dict</span><span>(</span><span>)</span>
    pyFuncAttr <span>=</span> <span>"python function attribute"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div></li>
<li>
<p>【<strong>compulsory</strong>】Class name must be start with a capital letter, overall use camel case style. And there should be <code>_init__()</code> constructors.</p>
<div><pre><code><span>class</span> <span>PythonClassCode</span><span>(</span><span>object</span><span>)</span><span>:</span>
    <span>def</span> <span>__init__</span><span>(</span>self<span>)</span><span>:</span>
        <span>pass</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>
<li>
<p>【<strong>compulsory</strong>】Private members should be represented by a double underscore.</p>
<div><pre><code>__privateNum <span>=</span> <span>1</span>
<span>def</span> <span>__privateFunction</span><span>(</span><span>)</span><span>:</span>
    <span>pass</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>
<li>
<p>【<strong>compulsory</strong>】Constant name all uppercase, words with underline between, strive to semantic expression complete and clear, not too long name.</p>
<div><pre><code>MAX_COUNT <span>=</span> <span>10</span>
MAX_LETTER_PER_LINE <span>=</span> <span>80</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div></li>
<li>
<p>【<strong>compulsory</strong>】Avoid abbreviations that are completely unregulated, <code>condition</code> &quot;abbreviation&quot; is named <code>condi</code>. Such arbitrary abbreviations seriously reduce the readability of the code.</p>
</li>
<li>
<p>【<strong>suggestion</strong>】Single letter strings should use single quotation marks.</p>
<div><pre><code>oneLetter <span>=</span> <span>'a'</span>
</code></pre>
<div><span>1</span><br></div></div></li>
<li>
<p>【<strong>suggestion</strong>】Double quotation marks should be used for multi-letter strings.</p>
<div><pre><code>moreLetter <span>=</span> <span>"abc"</span>
</code></pre>
<div><span>1</span><br></div></div></li>
<li>
<p>【<strong>suggestion</strong>】Create empty dict, list, tuple, don't use <code>{}, [], ()</code>, expect to use <code>dict(), list(), tuple()</code></p>
<div><pre><code><span># Wrong</span>
myDict <span>=</span> <span>{</span><span>}</span>
myList <span>=</span> <span>[</span><span>]</span>
myTuple <span>=</span> <span>(</span><span>)</span>

<span># Right</span>
myDict <span>=</span> <span>dict</span><span>(</span><span>)</span>
myList <span>=</span> <span>list</span><span>(</span><span>)</span>
myTuple <span>=</span> <span>tuple</span><span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div></li>
</ul>
<h2 id="for-format"> For Format</h2>
<ul>
<li>
<p>【<strong>compulsory</strong>】4 Spaces are indented. TAB characters are not allowed.
<em>If TAB indentation is used, one TAB must be set to four Spaces.</em></p>
</li>
<li>
<p>【<strong>compulsory</strong>】An empty line of functions within the class. Two lines between different class.</p>
</li>
<li>
<p>【<strong>compulsory</strong>】Empty two lines between the import package statement and the function or class.</p>
</li>
<li>
<p>【<strong>compulsory</strong>】The contents of dict, list, or tuple must be presented in multiple lines if they exceed 80 characters.</p>
<div><pre><code>listContent <span>=</span> <span>[</span>
    <span>"first"</span><span>,</span>
    <span>"second"</span><span>,</span>
    <span>"third"</span>
<span>]</span>

dictContent <span>=</span> <span>{</span>
    a <span>=</span> <span>'1'</span><span>,</span>
    b <span>=</span> <span>'2'</span><span>,</span>
    c <span>=</span> <span>'3'</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div></li>
<li>
<p>【<strong>compulsory</strong>】Comments line must be above the commented code.</p>
<div><pre><code><span># Comments line</span>
pythonCode <span>=</span> <span>"python code"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div></li>
<li>
<p>【<strong>suggestion</strong>】Comments in class, function should be used <strong>Document string</strong>.</p>
<div><pre><code> <span>class</span> <span>pythonClass</span><span>(</span><span>object</span><span>)</span><span>:</span>
    <span>"""class comment. (Document string)"""</span>
    <span>def</span> <span>__init__</span><span>(</span><span>)</span><span>:</span>
        <span>pass</span>

    <span>def</span> <span>clsFunc</span><span>(</span>arg1<span>,</span> arg2<span>)</span><span>:</span>
        <span>"""
        this function comment. (Document string)

        :param arg1: ...
        :param arg2: ...
        :return: ...
        """</span>
        <span>pass</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div></li>
<li>
<p>【<strong>suggestion</strong>】The code should be clear enough, and the comments should be detailed enough to help us understand the code better. Comments help us understand and maintain code better.
<em>If the code is simple and clear enough, no comments are required.</em>
<em>Conversely, if the code is logically complex, detailed comments are required.</em></p>
</li>
</ul>
<h2 id="for-test"> For Test</h2>
<ul>
<li>
<p>【<strong>compulsory</strong>】All modules should have independent unit testing capabilities.</p>
</li>
<li>
<p>【<strong>compulsory</strong>】Test units should not call and depend on each other, nor can it depend on the order of execution.</p>
</li>
<li>
<p>【<strong>compulsory</strong>】Unit tests are repeatable and cannot be affected by the environment.</p>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Vue 开发规范</title>
      <link>https://docs.jeremyjone.com/standard/vue/</link>
      <guid>https://docs.jeremyjone.com/standard/vue/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">Vue 开发规范</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="vue-开发规范"> Vue 开发规范</h1>
<Description author="jeremyjone" version="v1" />
<p>本规范适用于所有基于 Vue 框架的开发。</p>
<p>开发工具，推荐使用 <code>VS Code</code>，或者 <code>WebStorm</code>。</p>
<p>使用 <code>VS Code</code> 的话，需要安装 <code>eslint</code>、<code>HTML CSS Support</code>、<code>HTML Snippets</code>、<code>Live Server</code>、<code>Vetur</code>、<code>Vue VSCode Snippets</code> 等插件以实现更快、更好的开发。</p>
<h2 id="_1-命名规范"> 1 命名规范</h2>
<p>所有的命名应该具有明显的具象含义，尽可能的使用名词，不使用动词。</p>
<h3 id="_1-1-项目命名"> 1.1 项目命名</h3>
<p>采用全部小写的方式，并以下划线为分隔符。</p>
<div><pre><code>new_test_project<span>;</span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="_1-2-目录命名"> 1.2 目录命名</h3>
<p>目录命名应遵循以下规则：</p>
<ul>
<li>全部小写</li>
<li>使用具有显式意义的词语</li>
<li>如果是集合类别的，应当使用复数形式</li>
<li>应该尽可能使用一个单词，如果需要多个，使用下划线连接</li>
</ul>
<div><pre><code>assets<span>;</span>
utils<span>;</span>
data_models<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id="_1-3-文件命名"> 1.3 文件命名</h3>
<p>Vue 的文件应该从名称上区分组件的类型，它们可能是单一的组件，也可能是视图级别，甚至布局级别。应该以它们的功能结尾，分别使用 <code>Component</code>、<code>Item</code>、 <code>View</code>、<code>Page</code> 和 <code>Layout</code> 等。</p>
<p>组件类型文件的命名应该使用大驼峰的写法。</p>
<div><pre><code>IconComponent<span>.</span>vue<span>;</span>
IconItem<span>.</span>vue<span>;</span>

HomeView<span>.</span>vue<span>;</span>
HomePage<span>.</span>vue<span>;</span>

GlobalLayout<span>.</span>vue<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><div><p>提示</p>
<p>组件功能有很多，不一定只可以使用 <code>Component</code>，也可以显式的使用例如 <code>Button</code>、<code>Toast</code> 等，这时可以与组件的 name 一致。参看 </p>
</div>
<p>有一个特例，如果当前视图文件夹下只有一个文件，则应当使用<code>index.vue</code>作为文件名。</p>
<div><pre><code><span>|</span>—— user_page
<span>|</span>      <span>|</span>—— index<span>.</span>vue

<span>// 引用时直接引用到目录即可</span>
<span>import</span><span>(</span><span>"../user_page/"</span><span>)</span><span>;</span>
<span>// or</span>
<span>import</span> UserPage <span>from</span> <span>"../user_page"</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><div><p>提示</p>
<p>使用 <code>index.vue</code> 这个特例时，注意文件夹的名称需要具有显式意义。</p>
</div>
<h3 id="_1-4-组件的-name-属性"> 1.4 组件的 name 属性</h3>
<p>每一个组件都应该具有一个单独的名称，并且组件名必须是多个单词组成的，这是为了避免和 HTML 本身元素相冲突。</p>
<h4 id="_1-4-1-组件名的创建"> 1.4.1 组件名的创建</h4>
<p>为了更好地使用名称，作为组件名称的起始，应当是这个项目的全称或缩写。</p>
<div><pre><code><span>export</span> <span>default</span> <span>{</span>
  name<span>:</span> <span>"JzIconItem"</span>
  <span>// ...</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h4 id="_1-4-2-基础组件名"> 1.4.2 基础组件名</h4>
<p>有一些组件应该是基础的，它适用于很多地方。这时，该组件名应当具有一个比较通用的名称。</p>
<div><pre><code>BaseButton<span>.</span>vue<span>;</span>
</code></pre>
<div><span>1</span><br></div></div><div><pre><code><span>export</span> <span>default</span> <span>{</span>
  name<span>:</span> <span>"JzBaseButton"</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h4 id="_1-4-3-父子组件名"> 1.4.3 父子组件名</h4>
<p>有一些紧密耦合的组件，这时子组件应当继承父组件名作为前缀。</p>
<div><pre><code>DataList<span>.</span>vue<span>;</span>
DataListItem<span>.</span>vue<span>;</span>
DataListItemIcon<span>.</span>vue<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h4 id="_1-4-4-组件名的使用"> 1.4.4 组件名的使用</h4>
<p>在使用时，需要使用小写+连接字符“-”的形式。</p>
<div><pre><code><span>import</span> IconItem <span>from</span> <span>"../IconItem.vue"</span><span>;</span>
Vue<span>.</span><span>component</span><span>(</span><span>"jz-icon-item"</span><span>,</span> IconItem<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>但是并不推荐直接这样使用，因为每一个组件都应该具有一个 name 属性，这是  的规范，所以更推荐如下使用方式：</p>
<div><div><br><br><div>&nbsp;</div><br><br><br><div>&nbsp;</div><br><br></div><pre><code><span>import</span> IconItem <span>from</span> <span>"../IconItem.vue"</span><span>;</span>
<span>// 全局注册</span>
Vue<span>.</span><span>component</span><span>(</span>IconItem<span>.</span>name<span>,</span> IconItem<span>)</span><span>;</span>

<span>// 局部注册</span>
component<span>{</span>
  <span>[</span>IconItem<span>.</span>name<span>]</span><span>:</span> IconItem
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="_2-prop-属性"> 2 Prop 属性</h2>
<p>定义 Prop 时，始终应该以小驼峰方式命名。而在组件传值时，使用小写+连接符“-”的方式。这是遵循语言特性，保持良好的代码风格。</p>
<p>同时，应当尽可能详细的为每一个 Prop 属性进行良好的类型说明，同时给出默认值并验证。</p>
<p>定义：</p>
<div><pre><code>props<span>:</span> <span>{</span>
    itemId<span>:</span> <span>{</span>
        type<span>:</span> Number<span>,</span>
        required<span>:</span> <span>true</span>
    <span>}</span><span>,</span>
    itemName<span>:</span> <span>{</span>
        type<span>:</span> String<span>,</span>
        <span>validator</span><span>:</span> <span>function</span><span>(</span><span>v</span><span>)</span> <span>{</span>
            <span>return</span> v <span>!==</span> <span>""</span>
        <span>}</span>
    <span>}</span><span>,</span>
    itemProps<span>:</span> <span>{</span>
        type<span>:</span> Object<span>,</span>
        <span>// 需要注意，对象的默认值应该是一个工厂函数返回的</span>
        <span>default</span><span>:</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
            <span>return</span> <span>{</span>
                uri<span>:</span> <span>"xxx/xxx/.."</span>
            <span>}</span>
        <span>}</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p>使用：</p>
<div><pre><code><span><span><span>&lt;</span>project-item</span> <span>:item-id</span><span><span>=</span><span>"</span>1<span>"</span></span> <span>item-name</span><span><span>=</span><span>"</span>projectName<span>"</span></span><span>></span></span><span><span><span>&lt;/</span>project-item</span><span>></span></span>
</code></pre>
<div><span>1</span><br></div></div><h2 id="_3-vue-指令的使用"> 3 Vue 指令的使用</h2>
<p>Vue 指令的使用，应当严格按照 Vue 的官方文档的介绍，比如<code>v-for</code>中，必须使用<code>key</code>。</p>
<h2 id="_4-vue-文件的格式"> 4 *.vue 文件的格式</h2>
<p>vue 文件定义了每一个组件、视图或者布局内容，方便开发。使用 vue 文件，可能需要配置对应的 <code>vue-loader</code>，使用 <code>vue-cli</code> 创建项目可以更方便的开发。</p>
<div><p>提示</p>
<p>对于 <code>vs code</code> 用户，可以添加 <code>Vetur</code>、<code>Vue 2 Snippets</code>、<code>Prettier</code> 等插件帮助快速开发。</p>
</div>
<p><code>*.vue</code>文件是 Vue 的模板文件，它应当具有三个顶级标签：</p>
<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>
  <span><span><span>&lt;</span>div</span><span>></span></span><span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;/</span>template</span><span>></span></span>

<span><span><span>&lt;</span>script</span><span>></span></span><span><span>
<span>export</span> <span>default</span> <span>{</span>
  <span>// content</span>
<span>}</span><span>;</span>
</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>

<span><span><span>&lt;</span>style</span> <span>scoped</span><span>></span></span><span></span><span><span><span>&lt;/</span>style</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>对于 <code>ts</code> 用户，它应当为：</p>
<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>
  <span><span><span>&lt;</span>div</span><span>></span></span><span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;/</span>template</span><span>></span></span>

<span><span><span>&lt;</span>script</span> <span>lang</span><span><span>=</span><span>"</span>ts<span>"</span></span><span>></span></span><span><span>
<span>import</span> <span>{</span> Component<span>,</span> Vue <span>}</span> <span>from</span> <span>"vue-property-decorator"</span><span>;</span>

@Component
<span>export</span> <span>default</span> <span>class</span> <span>ClassName</span> <span>extends</span> <span>Vue</span> <span>{</span>
  <span>// content</span>
<span>}</span>
</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>

<span><span><span>&lt;</span>style</span> <span>lang</span><span><span>=</span><span>"</span>stylus<span>"</span></span> <span>scoped</span><span>></span></span><span></span><span><span><span>&lt;/</span>style</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>这个样式是一种规范，虽然它并不是强制的，但我们在编写<code>*.vue</code>文件时仍然必须按照此格式和标签顺序。</p>
<h3 id="_4-1-template-的内容"> 4.1 template 的内容</h3>
<p><code>template</code> 标签中的内容是 html 部分，它应当<strong>包含且只包含一个</strong>顶级元素。</p>
<div><p>警告</p>
<p>顶级元素中不可以使用 <code>v-for</code> 这样的属性。</p>
</div>
<h3 id="_4-2-script-内容格式"> 4.2 script 内容格式</h3>
<p>每一个<code>*.vue</code>文件都是一个组件，它具有自己的生命周期和属性方法等，这些都在<code>&lt;script&gt;</code>标签中完成。标签内容应当按照下面的顺序进行开发。</p>
<p>同时，每一个属性之间都应当有一个空行。</p>
<div><pre><code><span><span><span>&lt;</span>script</span><span>></span></span><span><span>
<span>export</span> <span>default</span> <span>{</span>
  name<span>:</span> <span>"Item"</span><span>,</span>

  props<span>:</span> <span>{</span><span>}</span><span>,</span>

  <span>//... 生命周期函数</span>
  <span>created</span><span>(</span><span>)</span> <span>{</span><span>}</span><span>,</span>

  <span>mounted</span><span>(</span><span>)</span> <span>{</span><span>}</span><span>,</span>

  <span>destroyed</span><span>(</span><span>)</span> <span>{</span><span>}</span><span>,</span>
  <span>// ...</span>

  inject<span>:</span> <span>[</span><span>]</span><span>,</span>

  provide<span>:</span> <span>{</span><span>}</span><span>,</span>

  mixins<span>:</span> <span>[</span><span>]</span><span>,</span>

  <span>data</span><span>(</span><span>)</span> <span>{</span><span>return</span> <span>{</span><span>}</span><span>}</span><span>,</span>

  computed<span>:</span> <span>{</span><span>}</span>

  watch<span>:</span> <span>{</span><span>}</span>

  directives<span>:</span> <span>{</span><span>}</span>

  filters<span>:</span> <span>{</span><span>}</span>

  methods<span>:</span> <span>{</span><span>}</span>

  components<span>:</span> <span>{</span><span>}</span>

  <span>// 如果使用</span>
  <span>render</span><span>(</span><span>h</span><span>)</span><span>{</span><span>}</span>
<span>}</span><span>;</span>
</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br></div></div><p>如果属性为空，则可以不用填写，但总体的顺序应当是上述的顺序。</p>
<div><p>提示</p>
<p>这个顺序不是必须的，但它至少应当在同一项目中是保持一致的。</p>
</div>
<h2 id="_2-javascript-规范"> 2 JavaScript 规范</h2>
<p>所有 JavaScript 内容都应当基于 <a href="/standard/javascript/">JavaScript 开发规范</a>。</p>
<h3 id="jsx"> JSX</h3>
<p>Vue 支持使用 <code>JSX</code> 进行开发，它使用在 <code>render(h)</code> 函数中。应当遵循以下原则：</p>
<ul>
<li>参数 <code>createElement</code> 的缩写为 <code>h</code>，这是官方文档约定的。</li>
<li>尽可能使用 <code>h(&quot;div&quot;, {}, [])</code> 的方式创建元素。如果需要使用 <code>JSX</code>，需要书写工整，缩进整齐。</li>
</ul>
<h2 id="_3-css-规范"> 3 CSS 规范</h2>
<p>所有 CSS 内容都应当基于 <a href="/standard/css/">CSS 开发规范</a>。</p>
<p>在<code>*.vue</code>文件中的 css，应当是具有作用域属性的。</p>
<p>同时，所有 css 属性也必须使用扩展的嵌套规则，推荐使用<code>scss</code>，<code>sass</code>，<code>stylus</code>等扩展的 css 语言。最好使用<code>stylus</code>。</p>
<div><pre><code><span><span><span>&lt;</span>style</span> <span>lang</span><span><span>=</span><span>"</span>stylus<span>"</span></span> <span>scoped</span><span>></span></span><span></span><span><span><span>&lt;/</span>style</span><span>></span></span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="_3-1-使用-css-文件注入"> 3.1 使用 CSS 文件注入</h3>
<p>一种更好的方式，是单独写 CSS 文件。</p>
<p>CSS 文件应当符合小写+“_”下划线的命名规范。</p>
<p>CSS 文件应当放在<code>styles</code>文件夹下，然后在以导入的方式进行注入：</p>
<div><pre><code><span>import</span> <span>"@/styles/user_page.styl"</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><div><p>提示</p>
<p>对于那些功能文件夹下只有 <code>index.vue</code> 的组件来说，对应的 css 文件可以放在同级目录下。</p>
<div><pre><code>icon_item
  |-- index.vue
  └-- index.styl
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></div>
<h2 id="_4-注释"> 4 注释</h2>
<p>所有注释都应当遵循 JsDoc 的规范填写。</p>
<ul>
<li>每一个模块、类、函数，都应该有一个区块注释。</li>
<li>每一个关键操作方法，都应该有一个单行/多行注释。</li>
<li>注释不应当与代码在同一行。</li>
</ul>
<div><div><br><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><br><br><div>&nbsp;</div><br></div><pre><code><span>// right</span>
<span>/**
 * 多行注释
 */</span>

<span>// 单行注释</span>

<span>// wrong</span>
<span>var</span> age <span>=</span> <span>18</span><span>;</span> <span>// 年龄</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h3 id="_4-1-模块注释"> 4.1 模块注释</h3>
<p>每一个模块，应当是一个单独的文件，它应当包含某一类的多个方法。需要在头部注释内写清当前模块作用域哪些内容，具有哪些内容，如何使用，编写时间，编写人，版本等信息。</p>
<div><pre><code><span>/**
 * @fileOverview: 模块功能是：xxx
 * @author: jeremyjone
 * @date: 2020/03/25
 * @version: 1.0.0
</span></code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id="_4-2-类注释-方法注释"> 4.2 类注释/方法注释</h3>
<p>每一个类/方法，都应当包含一个注释，写明当前类/方法所具有的功能和属性等。</p>
<div><pre><code><span>/**
 * @constructor Person
 * @description 一个Person类
 * @example new Person("Jeremy", 23);
 * @param {String} username 姓名
 * @param {Number} age 年龄
 */</span>
<span>class</span> <span>Person</span> <span>{</span>
  <span>constructor</span><span>(</span><span>username<span>,</span> age</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>username <span>=</span> username<span>;</span>
    <span>this</span><span>.</span>age <span>=</span> age<span>;</span>
  <span>}</span>
<span>}</span>

<span>/**
 * @description 加法运算
 * @param {Number} num1 加数
 * @param {Number} num2 被加数
 * @return {Number} 结果
 */</span>
<span>function</span> <span>add</span><span>(</span><span>num1<span>,</span> num2</span><span>)</span> <span>{</span>
  <span>return</span> num1 <span>+</span> num2<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>响应式的原理</title>
      <link>https://docs.jeremyjone.com/roadmap/frontend/vue/reactive/</link>
      <guid>https://docs.jeremyjone.com/roadmap/frontend/vue/reactive/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">响应式的原理</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="响应式的原理"> 响应式的原理</h1>
]]></content:encoded>
    </item>
    <item>
      <title>Vue Cli</title>
      <link>https://docs.jeremyjone.com/roadmap/frontend/vue/supports/cli/</link>
      <guid>https://docs.jeremyjone.com/roadmap/frontend/vue/supports/cli/</guid>
      <source url="https://docs.jeremyjone.com/rss.xml">Vue Cli</source>
      <pubDate>Mon, 07 Nov 2022 09:37:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="vue-cli"> Vue Cli</h1>
]]></content:encoded>
    </item>
  </channel>
</rss>