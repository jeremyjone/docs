(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{626:function(t,s,a){"use strict";a.r(s);var e=a(1),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"响应式的原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#响应式的原理"}},[t._v("#")]),t._v(" 响应式的原理")]),t._v(" "),a("h2",{attrs:{id:"一个简单的例子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一个简单的例子"}},[t._v("#")]),t._v(" 一个简单的例子")]),t._v(" "),a("p",[t._v("让我们通过一个简单的例子来说明 Vue 的响应式原理。")]),t._v(" "),a("p",[t._v("假设我们有一个数据对象 "),a("code",[t._v("data")]),t._v("，其中包含一个属性 "),a("code",[t._v("message")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  message"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello, JeremJone!'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("我们希望在页面上显示这个消息，并且当我们修改 "),a("code",[t._v("message")]),t._v(" 时，页面上的内容也会相应地更新。")]),t._v(" "),a("p",[t._v("为了实现这个效果，我们可以使用 Vue 提供的 "),a("code",[t._v("Vue")]),t._v(" 构造函数来创建一个 Vue 实例，并将 "),a("code",[t._v("data")]),t._v(" 对象传递给它：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" vm "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Vue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  data"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" data\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("现在，我们可以在页面上使用 "),a("code",[t._v(t._s(t.message))]),t._v(" 的语法来显示 "),a("code",[t._v("data.message")]),t._v(" 的值。当我们修改 "),a("code",[t._v("data.message")]),t._v(" 时，页面上的内容也会自动更新。")]),t._v(" "),a("p",[t._v("Vue是如何实现这一奇迹般的 "),a("RouterLink",{attrs:{to:"/roadmap/frontend/vue/basic/v-model.html"}},[t._v("双向绑定")]),t._v(" 的呢？让我们来逐步讲解其实现原理。")],1),t._v(" "),a("h2",{attrs:{id:"vue2-的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue2-的实现"}},[t._v("#")]),t._v(" Vue2 的实现")]),t._v(" "),a("p",[t._v("在 Vue2 中，响应式原理是基于 JavaScript 的 "),a("code",[t._v("Object.defineProperty")]),t._v(" 方法实现的。它通过将一个普通的 JavaScript 对象转化为响应式的数据对象，从而实现了数据的双向绑定。这意味着当我们修改数据时，相关的视图会自动更新，反之亦然。")]),t._v(" "),a("p",[t._v("首先，Vue 会遍历 "),a("code",[t._v("data")]),t._v(" 对象的所有属性，并使用 "),a("code",[t._v("Object.defineProperty")]),t._v(" 方法将它们转化为 getter 和 setter。这样，当我们访问 "),a("code",[t._v("data.message")]),t._v(" 时，实际上会调用 getter 方法，而当我们修改 "),a("code",[t._v("data.message")]),t._v(" 时，实际上会调用 setter 方法。")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("keys")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("key")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("defineProperty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Getter called'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Setter called'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newValue\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("ul",[a("li",[t._v("在 getter 方法中，我们可以执行一些额外的逻辑，比如依赖收集。Vue 会在 getter 方法中记录当前正在访问的属性，并将其与正在渲染的视图关联起来。这样，当属性发生变化时，Vue 就知道该更新哪些视图。")]),t._v(" "),a("li",[t._v("在 setter 方法中，我们可以执行一些额外的逻辑，比如通知视图进行更新。当我们修改属性的值时，setter 方法会被调用，Vue 会检查该属性是否有相关的视图，并更新它们的内容。")])]),t._v(" "),a("p",[t._v("Vue 的响应式原理的优点之一是它的简洁性。我们只需要将数据对象传递给 Vue 实例，然后在模板中使用相应的语法，就能实现数据的双向绑定。这大大简化了我们的开发工作，减少了手动更新视图的工作量。")]),t._v(" "),a("p",[t._v("然而，Vue 的响应式原理也有一些缺点。")]),t._v(" "),a("ul",[a("li",[t._v("它只对已经存在的属性起作用。这意味着如果我们在数据对象上添加新的属性，它将不会成为响应式的。为了解决这个问题，我们需要使用 Vue 提供的 "),a("code",[t._v("Vue.set")]),t._v(" 方法或者直接使用 "),a("code",[t._v("this.$set")]),t._v(" 来添加新的属性。")]),t._v(" "),a("li",[t._v("Vue 的响应式原理对于数组的处理并不完美。当我们修改数组的长度时，Vue 并不会检测到这个变化。为了解决这个问题，我们需要使用 Vue 提供的数组方法，比如 "),a("code",[t._v("push")]),t._v("、"),a("code",[t._v("pop")]),t._v(" 等，或者使用数组的 "),a("code",[t._v("splice")]),t._v(" 方法。")])]),t._v(" "),a("p",[t._v("总结起来，Vue 的响应式原理是通过使用 "),a("code",[t._v("Object.defineProperty")]),t._v(" 方法将数据对象转化为响应式的。它的优点是简洁性和高效性，能够自动更新视图。然而，它也有一些缺点，比如对新属性的处理和对数组的处理不完美。尽管如此，Vue 的响应式原理仍然是 Vue 框架的核心特性之一，为我们提供了一种优雅而高效的方式来构建动态的用户界面。")]),t._v(" "),a("h2",{attrs:{id:"vue3-的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue3-的实现"}},[t._v("#")]),t._v(" Vue3 的实现")]),t._v(" "),a("p",[t._v("作为 Vue2 的继任者，Vue3 带来了许多令人兴奋的新特性和改进。其中之一是它的响应式原理，这是 Vue.js 的核心机制之一。在 Vue3 中，它引入了一系列响应式的方法，我们以 "),a("code",[t._v("reactive")]),t._v(" 函数为例，创建响应式数据。")]),t._v(" "),a("p",[t._v("假设我们有一个数据对象 "),a("code",[t._v("data")]),t._v("，其中包含名为 "),a("code",[t._v("message")]),t._v(" 的属性。我们可以使用以下代码将其转换为响应式数据：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" reactive "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'vue'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reactive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  message"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello, JeremyJone'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("在上面的代码中，我们导入了 "),a("code",[t._v("reactive")]),t._v(" 函数，并使用它将 "),a("code",[t._v("data")]),t._v(" 对象转换为响应式数据。现在，如果我们修改 "),a("code",[t._v("data.message")]),t._v(" 的值，相关的界面将自动更新以反映这个变化。")]),t._v(" "),a("p",[t._v("一切看起来就是这样简洁简单。那么它是如何实现这样的响应式机制的呢？让我们一步步地来说明一下。")]),t._v(" "),a("p",[t._v("首先，Vue 创建了一个称为 "),a("code",[t._v("reactiveProxy")]),t._v(" 的代理对象。当我们访问 "),a("code",[t._v("data.message")]),t._v(" 时，代理对象会捕获这个访问，并追踪它。Vue 还提供了一个称为 "),a("code",[t._v("watchEffect")]),t._v(" 的函数，它会在响应式数据发生变化时触发执行。当 "),a("code",[t._v("data.message")]),t._v(" 更新时，"),a("code",[t._v("watchEffect")]),t._v(" 函数会被触发，从而更新相关的界面。")]),t._v(" "),a("p",[t._v("要实现这个机制，Vue 使用了 JavaScript 的 "),a("RouterLink",{attrs:{to:"/roadmap/frontend/js/proxy/"}},[a("code",[t._v("Proxy")])]),t._v(" 对象。"),a("code",[t._v("Proxy")]),t._v(" 对象允许我们拦截对对象的访问，以便执行自定义的行为。通过使用 "),a("code",[t._v("Proxy")]),t._v("，Vue 能够捕获对响应式数据的访问，并在数据发生变化时触发相关的操作。")],1),t._v(" "),a("blockquote",[a("p",[t._v("注：这也是 Vue3 仅面向现代浏览器的原因之一。")])]),t._v(" "),a("p",[t._v("让我们通过一个具体的例子来进一步说明。假设我们有以下代码：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" reactive"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" watchEffect "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'vue'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reactive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  message"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello, JeremyJone!'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("watchEffect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当 data.message 发生变化，自动触发")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\ndata"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("message "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello, Vue 3!'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br")])]),a("p",[t._v("在上面的代码中，我们将 "),a("code",[t._v("data")]),t._v(" 对象转换为响应式数据，"),a("code",[t._v("watchEffect")]),t._v(" 函数接收一个回调函数，当响应式数据发生变化时，它就会触发并执行这个回调函数。最后触发打印的应该是 "),a("code",[t._v("Hello, Vue 3!")]),t._v("。")]),t._v(" "),a("p",[t._v("Vue3 的响应式原理具有以下优点：")]),t._v(" "),a("ul",[a("li",[t._v("简洁明了：Vue.js 的响应式机制非常直观和易于理解，使得开发更为简单。")]),t._v(" "),a("li",[t._v("高效性能：由于使用了 "),a("code",[t._v("Proxy")]),t._v(" 对象，Vue3 能够精确地捕获数据的变化，从而实现高效的更新机制。")]),t._v(" "),a("li",[t._v("延迟更新：Vue.js 使用了计算依赖图的技术，从而能够推迟对组件的更新，提高了性能。")]),t._v(" "),a("li",[t._v("较低的内存占用：Vue.js 使用了惰性计算的方式来更新界面，从而减少了不必要的内存占用。")])]),t._v(" "),a("p",[t._v("然而，Vue.js 3的响应式原理也有一些缺点：")]),t._v(" "),a("ul",[a("li",[t._v("依赖传递：由于响应式数据是通过代理对象来实现的，当数据结构较为复杂时，可能会导致依赖传递变得复杂。")]),t._v(" "),a("li",[t._v("项目体积：虽然 Vue3 已经采取了代码压缩和 Tree-shaking 等措施来减少体积，但其响应式机制本身会增加一些额外的代码量。")])]),t._v(" "),a("p",[t._v("Vue3 为我们提供了一种比 Vue2 更加简洁而且高效的方式来构建响应式。但同时这种使用 "),a("code",[t._v("Proxy")]),t._v(" 的方式也带来了一定的约束，比如它只面向更加现代的浏览器版本，这导致在某些项目需要兼容如 IE 等，还需要继续使用 Vue2，这也算是时代产物，让它遗留在历史中。")])])}),[],!1,null,null,null);s.default=n.exports}}]);